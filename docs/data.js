zigAnalysis={"typeKinds": ["Type","Void","Bool","NoReturn","Int","Float","Pointer","Array","Struct","ComptimeFloat","ComptimeInt","Undefined","Null","Optional","ErrorUnion","ErrorSet","Enum","Union","Fn","BoundFn","Opaque","Frame","AnyFrame","Vector","EnumLiteral"],"params": {"zigVersion": "0.9.1","builds": [{"target": "arm-linux-musl"}],"rootName": "test"},"rootPkg": 0,"calls": [{"fn": 1134,"result": {"type": 954,"value": 955},"args": [{"type": 954,"value": 956}]},{"fn": 3,"result": {"type": 957,"value": null}},{"fn": 1135,"result": {"type": 954,"value": 959},"args": [{"type": 960,"value": null},{"type": 961,"value": 288}]},{"fn": 1135,"result": {"type": 954,"value": 962},"args": [{"type": 960,"value": null},{"type": 961,"value": 9}]},{"fn": 1136,"result": {"type": 954,"value": 962},"args": [{"type": 954,"value": 959}]},{"fn": 1135,"result": {"type": 954,"value": 964},"args": [{"type": 960,"value": null},{"type": 961,"value": 5}]},{"fn": 1136,"result": {"type": 954,"value": 964},"args": [{"type": 954,"value": 965}]},{"fn": 2,"result": {"type": 957,"value": null},"args": [{"type": 966,"value": null}]},{"fn": 2,"result": {"type": 957,"value": null},"args": [{"type": 966,"value": null}]},{"fn": 5,"result": {"type": 967,"value": "false"},"args": [{"type": 968,"value": null}]},{"fn": 6,"result": {"type": 967,"value": "false"},"args": [{"type": 968,"value": null}]},{"fn": 1137,"result": {"type": 954,"value": 970},"args": [{"type": 954,"value": 971},{"type": 954,"value": 972},{"type": 12,"value": 14}]},{"fn": 1138,"result": {"type": 974,"value": null},"args": [{"type": 954,"value": 975}]},{"fn": 25,"result": {"type": 967,"value": "true"},"args": [{"type": 968,"value": null}]},{"fn": 30,"result": {"type": 967,"value": "false"},"args": [{"type": 968,"value": null}]},{"fn": 38,"result": {"type": 976,"value": "undefined"},"args": [{"type": 967,"value": "true"}]},{"fn": 1139,"result": {"type": 978,"value": null},"args": [{"type": 979,"value": null}]},{"fn": 1140,"result": {"type": 981,"value": null},"args": [{"type": 979,"value": null}]},{"fn": 1139,"result": {"type": 978,"value": null},"args": [{"type": 982,"value": null}]},{"fn": 1140,"result": {"type": 981,"value": null},"args": [{"type": 982,"value": null}]},{"fn": 1141,"result": {"type": 954,"value": 984},"args": [{"type": 954,"value": 965}]},{"fn": 1142,"result": {"type": 43,"value": 51},"args": [{"type": 954,"value": 965},{"type": 954,"value": 984}]},{"fn": 1143,"result": {"type": 44,"value": 52},"args": [{"type": 954,"value": 965},{"type": 954,"value": 984}]},{"fn": 1144,"result": {"type": 976,"value": "undefined"},"args": [{"type": 954,"value": 984},{"type": 954,"value": 965},{"type": 954,"value": 965},{"type": 954,"value": 988}]},{"fn": 1145,"result": {"type": 954,"value": 990},"args": [{"type": 954,"value": 965},{"type": 954,"value": 991},{"type": 954,"value": 984},{"type": 988,"value": 80}]},{"fn": 1146,"result": {"type": 954,"value": 990},"args": [{"type": 954,"value": 965},{"type": 954,"value": 991}]},{"fn": 1147,"result": {"type": 954,"value": 994},"args": [{"type": 954,"value": 965},{"type": 954,"value": 991},{"type": 954,"value": 984},{"type": 988,"value": 80}]},{"fn": 1148,"result": {"type": 954,"value": 965},"args": [{"type": 954,"value": 965},{"type": 954,"value": 965}]},{"fn": 1149,"result": {"type": 954,"value": 997},"args": [{"type": 954,"value": 998},{"type": 999,"value": "null"}]},{"fn": 1150,"result": {"type": 954,"value": 997},"args": [{"type": 954,"value": 998}]},{"fn": 1149,"result": {"type": 954,"value": 1001},"args": [{"type": 954,"value": 1002},{"type": 999,"value": "null"}]},{"fn": 1150,"result": {"type": 954,"value": 1001},"args": [{"type": 954,"value": 1002}]},{"fn": 1149,"result": {"type": 954,"value": 1003},"args": [{"type": 954,"value": 1004},{"type": 999,"value": "null"}]},{"fn": 1150,"result": {"type": 954,"value": 1003},"args": [{"type": 954,"value": 1004}]},{"fn": 1149,"result": {"type": 954,"value": 1005},"args": [{"type": 954,"value": 1006},{"type": 999,"value": "null"}]},{"fn": 1150,"result": {"type": 954,"value": 1005},"args": [{"type": 954,"value": 1006}]},{"fn": 1149,"result": {"type": 954,"value": 1007},"args": [{"type": 954,"value": 1008},{"type": 999,"value": "null"}]},{"fn": 1150,"result": {"type": 954,"value": 1007},"args": [{"type": 954,"value": 1008}]},{"fn": 1149,"result": {"type": 954,"value": 1009},"args": [{"type": 954,"value": 1010},{"type": 999,"value": "null"}]},{"fn": 1150,"result": {"type": 954,"value": 1009},"args": [{"type": 954,"value": 1010}]},{"fn": 63,"result": {"type": 967,"value": "false"},"args": [{"type": 1011,"value": null}]},{"fn": 62,"result": {"type": 967,"value": "false"},"args": [{"type": 1012,"value": null}]},{"fn": 80,"result": {"type": 1013,"value": null},"args": [{"type": 968,"value": null}]},{"fn": 1151,"result": {"type": 954,"value": 1015},"args": [{"type": 954,"value": 1016}]},{"fn": 1152,"result": {"type": 954,"value": 1018},"args": [{"type": 954,"value": 1016},{"type": 1015,"value": 0}]},{"fn": 1153,"result": {"type": 954,"value": 1020},"args": [{"type": 954,"value": 1018}]},{"fn": 1153,"result": {"type": 954,"value": 978},"args": [{"type": 954,"value": 978}]},{"fn": 1154,"result": {"type": 954,"value": 978},"args": [{"type": 954,"value": 978}]},{"fn": 1155,"result": {"type": 954,"value": 1023},"args": [{"type": 954,"value": 978}]},{"fn": 1156,"result": {"type": 954,"value": 1025},"args": [{"type": 954,"value": 1026},{"type": 954,"value": 1027},{"type": 82,"value": 90}]},{"fn": 1157,"result": {"type": 954,"value": 1029},"args": [{"type": 954,"value": 1026},{"type": 954,"value": 1030},{"type": 954,"value": 1031},{"type": 84,"value": 92},{"type": 85,"value": 93},{"type": 86,"value": 94},{"type": 86,"value": 95}]},{"fn": 1135,"result": {"type": 954,"value": 1032},"args": [{"type": 960,"value": null},{"type": 961,"value": 6}]},{"fn": 1136,"result": {"type": 954,"value": 1032},"args": [{"type": 954,"value": 988}]},{"fn": 1158,"result": {"type": 1034,"value": null},"args": [{"type": 1034,"value": null},{"type": 1034,"value": null}]},{"fn": 1158,"result": {"type": 1034,"value": null},"args": [{"type": 1034,"value": null},{"type": 1034,"value": null}]},{"fn": 1159,"result": {"type": 1034,"value": null},"args": [{"type": 1034,"value": null},{"type": 1034,"value": null},{"type": 1034,"value": null}]},{"fn": 1160,"result": {"type": 1034,"value": null},"args": [{"type": 954,"value": 965}]},{"fn": 1149,"result": {"type": 954,"value": 1037},"args": [{"type": 954,"value": 978},{"type": 999,"value": "null"}]},{"fn": 1150,"result": {"type": 954,"value": 1037},"args": [{"type": 954,"value": 978}]},{"fn": 1149,"result": {"type": 954,"value": 1038},"args": [{"type": 954,"value": 1015},{"type": 999,"value": "null"}]},{"fn": 1150,"result": {"type": 954,"value": 1038},"args": [{"type": 954,"value": 1015}]},{"fn": 1149,"result": {"type": 954,"value": 1039},"args": [{"type": 954,"value": 1040},{"type": 999,"value": "null"}]},{"fn": 1150,"result": {"type": 954,"value": 1039},"args": [{"type": 954,"value": 1040}]},{"fn": 1135,"result": {"type": 954,"value": 988},"args": [{"type": 960,"value": null},{"type": 961,"value": 64}]},{"fn": 1161,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1161,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1162,"result": {"type": 1043,"value": 1163},"args": [{"type": 978,"value": null}]},{"fn": 1164,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 988}]},{"fn": 1163,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 988}]},{"fn": 1161,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1161,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1158,"result": {"type": 1034,"value": null},"args": [{"type": 1034,"value": null},{"type": 1034,"value": null}]},{"fn": 1158,"result": {"type": 1034,"value": null},"args": [{"type": 1034,"value": null},{"type": 1034,"value": null}]},{"fn": 1161,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1161,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1164,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 978}]},{"fn": 1163,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 978}]},{"fn": 1165,"result": {"type": 976,"value": "undefined"},"args": [{"type": 978,"value": null}]},{"fn": 1166,"result": {"type": 967,"value": "true"},"args": [{"type": 1034,"value": null}]},{"fn": 1167,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 965}]},{"fn": 1168,"result": {"type": 954,"value": 1050},"args": [{"type": 954,"value": 1051}]},{"fn": 1169,"result": {"type": 1053,"value": 1170},"args": [{"type": 1050,"value": null}]},{"fn": 1170,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1055}]},{"fn": 1171,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1055}]},{"fn": 1172,"result": {"type": 954,"value": 965},"args": [{"type": 954,"value": 1055}]},{"fn": 1173,"result": {"type": 954,"value": 1059},"args": [{"type": 954,"value": 1055},{"type": 1060,"value": null},{"type": 954,"value": 1061}]},{"fn": 1174,"result": {"type": 954,"value": 1059},"args": [{"type": 954,"value": 1055}]},{"fn": 1175,"result": {"type": 954,"value": 1064},"args": [{"type": 954,"value": 1065}]},{"fn": 289,"result": {"type": 967,"value": "false"},"args": [{"type": 1012,"value": null}]},{"fn": 1151,"result": {"type": 954,"value": 1015},"args": [{"type": 954,"value": 1066}]},{"fn": 1151,"result": {"type": 954,"value": 1015},"args": [{"type": 954,"value": 1067}]},{"fn": 1176,"result": {"type": 954,"value": 1069},"args": [{"type": 954,"value": 1066},{"type": 1015,"value": 0}]},{"fn": 1176,"result": {"type": 954,"value": 1070},"args": [{"type": 954,"value": 1067},{"type": 1015,"value": 0}]},{"fn": 1160,"result": {"type": 1034,"value": null},"args": [{"type": 954,"value": 988}]},{"fn": 1177,"result": {"type": 1034,"value": null},"args": [{"type": 954,"value": 988}]},{"fn": 1177,"result": {"type": 1034,"value": null},"args": [{"type": 954,"value": 965}]},{"fn": 1170,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1065}]},{"fn": 1178,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1065}]},{"fn": 1173,"result": {"type": 954,"value": 1065},"args": [{"type": 954,"value": 1065},{"type": 1060,"value": null},{"type": 954,"value": 1015}]},{"fn": 1179,"result": {"type": 954,"value": 1065},"args": [{"type": 954,"value": 1065}]},{"fn": 1160,"result": {"type": 1034,"value": null},"args": [{"type": 954,"value": 1074}]},{"fn": 1177,"result": {"type": 1034,"value": null},"args": [{"type": 954,"value": 1074}]},{"fn": 1180,"result": {"type": 954,"value": 1076},"args": [{"type": 954,"value": 1077}]},{"fn": 1181,"result": {"type": 954,"value": 1079},"args": [{"type": 954,"value": 1077}]},{"fn": 1182,"result": {"type": 954,"value": 1081},"args": [{"type": 954,"value": 1082}]},{"fn": 1182,"result": {"type": 954,"value": 1083},"args": [{"type": 954,"value": 1084}]},{"fn": 1180,"result": {"type": 954,"value": 1085},"args": [{"type": 954,"value": 1086}]},{"fn": 1181,"result": {"type": 954,"value": 1087},"args": [{"type": 954,"value": 1086}]},{"fn": 1183,"result": {"type": 954,"value": 1089},"args": [{"type": 954,"value": 1090}]},{"fn": 1148,"result": {"type": 954,"value": 1015},"args": [{"type": 954,"value": 1034},{"type": 954,"value": 1015}]},{"fn": 1161,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1164,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1069}]},{"fn": 1163,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1069}]},{"fn": 1160,"result": {"type": 1034,"value": null},"args": [{"type": 954,"value": 1091}]},{"fn": 1177,"result": {"type": 1034,"value": null},"args": [{"type": 954,"value": 1091}]},{"fn": 1170,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1092}]},{"fn": 1178,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1092}]},{"fn": 1173,"result": {"type": 954,"value": 1093},"args": [{"type": 954,"value": 1092},{"type": 1060,"value": null},{"type": 954,"value": 1015}]},{"fn": 1179,"result": {"type": 954,"value": 1093},"args": [{"type": 954,"value": 1092}]},{"fn": 1170,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1093}]},{"fn": 1178,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1093}]},{"fn": 1151,"result": {"type": 954,"value": 1015},"args": [{"type": 954,"value": 1093}]},{"fn": 1184,"result": {"type": 1095,"value": 1185},"args": [{"type": 1050,"value": null}]},{"fn": 1171,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1093}]},{"fn": 1185,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1093}]},{"fn": 1173,"result": {"type": 954,"value": 1092},"args": [{"type": 954,"value": 1093},{"type": 1060,"value": null},{"type": 954,"value": 1002}]},{"fn": 1186,"result": {"type": 954,"value": 1092},"args": [{"type": 954,"value": 1002},{"type": 954,"value": 1093}]},{"fn": 1170,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1098}]},{"fn": 1178,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1098}]},{"fn": 1173,"result": {"type": 954,"value": 1093},"args": [{"type": 954,"value": 1098},{"type": 1060,"value": null},{"type": 954,"value": 1015}]},{"fn": 1179,"result": {"type": 954,"value": 1093},"args": [{"type": 954,"value": 1098}]},{"fn": 1173,"result": {"type": 954,"value": 1098},"args": [{"type": 954,"value": 1093},{"type": 1060,"value": null},{"type": 954,"value": 1004}]},{"fn": 1186,"result": {"type": 954,"value": 1098},"args": [{"type": 954,"value": 1004},{"type": 954,"value": 1093}]},{"fn": 1170,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1099}]},{"fn": 1178,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1099}]},{"fn": 1173,"result": {"type": 954,"value": 1093},"args": [{"type": 954,"value": 1099},{"type": 1060,"value": null},{"type": 954,"value": 1015}]},{"fn": 1179,"result": {"type": 954,"value": 1093},"args": [{"type": 954,"value": 1099}]},{"fn": 1173,"result": {"type": 954,"value": 1099},"args": [{"type": 954,"value": 1093},{"type": 1060,"value": null},{"type": 954,"value": 998}]},{"fn": 1186,"result": {"type": 954,"value": 1099},"args": [{"type": 954,"value": 998},{"type": 954,"value": 1093}]},{"fn": 1170,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1100}]},{"fn": 1178,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1100}]},{"fn": 1173,"result": {"type": 954,"value": 1093},"args": [{"type": 954,"value": 1100},{"type": 1060,"value": null},{"type": 954,"value": 1015}]},{"fn": 1179,"result": {"type": 954,"value": 1093},"args": [{"type": 954,"value": 1100}]},{"fn": 1173,"result": {"type": 954,"value": 1100},"args": [{"type": 954,"value": 1093},{"type": 1060,"value": null},{"type": 954,"value": 1008}]},{"fn": 1186,"result": {"type": 954,"value": 1100},"args": [{"type": 954,"value": 1008},{"type": 954,"value": 1093}]},{"fn": 1170,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1101}]},{"fn": 1178,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1101}]},{"fn": 1173,"result": {"type": 954,"value": 1093},"args": [{"type": 954,"value": 1101},{"type": 1060,"value": null},{"type": 954,"value": 1015}]},{"fn": 1179,"result": {"type": 954,"value": 1093},"args": [{"type": 954,"value": 1101}]},{"fn": 1173,"result": {"type": 954,"value": 1101},"args": [{"type": 954,"value": 1093},{"type": 1060,"value": null},{"type": 954,"value": 1010}]},{"fn": 1186,"result": {"type": 954,"value": 1101},"args": [{"type": 954,"value": 1010},{"type": 954,"value": 1093}]},{"fn": 1170,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1102}]},{"fn": 1178,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1102}]},{"fn": 1173,"result": {"type": 954,"value": 1093},"args": [{"type": 954,"value": 1102},{"type": 1060,"value": null},{"type": 954,"value": 1015}]},{"fn": 1179,"result": {"type": 954,"value": 1093},"args": [{"type": 954,"value": 1102}]},{"fn": 1173,"result": {"type": 954,"value": 1102},"args": [{"type": 954,"value": 1093},{"type": 1060,"value": null},{"type": 954,"value": 1006}]},{"fn": 1186,"result": {"type": 954,"value": 1102},"args": [{"type": 954,"value": 1006},{"type": 954,"value": 1093}]},{"fn": 1135,"result": {"type": 954,"value": 1103},"args": [{"type": 960,"value": null},{"type": 961,"value": 33}]},{"fn": 1170,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1104}]},{"fn": 1178,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1104}]},{"fn": 1151,"result": {"type": 954,"value": 1015},"args": [{"type": 954,"value": 1104}]},{"fn": 1171,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1104}]},{"fn": 1185,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1104}]},{"fn": 1173,"result": {"type": 954,"value": 1104},"args": [{"type": 954,"value": 1104},{"type": 1060,"value": null},{"type": 954,"value": 1015}]},{"fn": 1186,"result": {"type": 954,"value": 1104},"args": [{"type": 954,"value": 1015},{"type": 954,"value": 1104}]},{"fn": 1139,"result": {"type": 978,"value": null},"args": [{"type": 982,"value": null}]},{"fn": 1140,"result": {"type": 981,"value": null},"args": [{"type": 982,"value": null}]},{"fn": 1139,"result": {"type": 978,"value": null},"args": [{"type": 982,"value": null}]},{"fn": 1140,"result": {"type": 981,"value": null},"args": [{"type": 982,"value": null}]},{"fn": 1151,"result": {"type": 954,"value": 1015},"args": [{"type": 954,"value": 1065}]},{"fn": 1187,"result": {"type": 1106,"value": "null"},"args": [{"type": 954,"value": 1065}]},{"fn": 1173,"result": {"type": 954,"value": 1107},"args": [{"type": 954,"value": 1065},{"type": 1060,"value": null},{"type": 954,"value": 1015}]},{"fn": 1170,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1108}]},{"fn": 1178,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1108}]},{"fn": 1173,"result": {"type": 954,"value": 1104},"args": [{"type": 954,"value": 1108},{"type": 1060,"value": null},{"type": 954,"value": 1015}]},{"fn": 1179,"result": {"type": 954,"value": 1104},"args": [{"type": 954,"value": 1108}]},{"fn": 1173,"result": {"type": 954,"value": 1108},"args": [{"type": 954,"value": 1104},{"type": 1060,"value": null},{"type": 954,"value": 978}]},{"fn": 1186,"result": {"type": 954,"value": 1108},"args": [{"type": 954,"value": 978},{"type": 954,"value": 1104}]},{"fn": 1171,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1065}]},{"fn": 1185,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1065}]},{"fn": 1186,"result": {"type": 954,"value": 1065},"args": [{"type": 954,"value": 1015},{"type": 954,"value": 1065}]},{"fn": 1170,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1109}]},{"fn": 1178,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1109}]},{"fn": 1173,"result": {"type": 954,"value": 1104},"args": [{"type": 954,"value": 1109},{"type": 1060,"value": null},{"type": 954,"value": 1015}]},{"fn": 1179,"result": {"type": 954,"value": 1104},"args": [{"type": 954,"value": 1109}]},{"fn": 1173,"result": {"type": 954,"value": 1109},"args": [{"type": 954,"value": 1104},{"type": 1060,"value": null},{"type": 954,"value": 1040}]},{"fn": 1186,"result": {"type": 954,"value": 1109},"args": [{"type": 954,"value": 1040},{"type": 954,"value": 1104}]},{"fn": 481,"result": {"type": 967,"value": "false"},"args": [{"type": 968,"value": null}]},{"fn": 1170,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1110}]},{"fn": 1169,"result": {"type": 1111,"value": 1188},"args": [{"type": 1050,"value": null}]},{"fn": 1188,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1110}]},{"fn": 1169,"result": {"type": 1113,"value": 1189},"args": [{"type": 1050,"value": null}]},{"fn": 1189,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1110}]},{"fn": 1169,"result": {"type": 1115,"value": 1190},"args": [{"type": 1050,"value": null}]},{"fn": 1190,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1110}]},{"fn": 1191,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1110}]},{"fn": 1192,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1110}]},{"fn": 488,"result": {"type": 967,"value": "true"},"args": [{"type": 957,"value": null},{"type": 962,"value": 52}]},{"fn": 1193,"result": {"type": 967,"value": "true"},"args": [{"type": 957,"value": null},{"type": 1110,"value": null}]},{"fn": 1151,"result": {"type": 954,"value": 1002},"args": [{"type": 954,"value": 1092}]},{"fn": 1187,"result": {"type": 1120,"value": "null"},"args": [{"type": 954,"value": 1092}]},{"fn": 1173,"result": {"type": 954,"value": 1121},"args": [{"type": 954,"value": 1092},{"type": 1060,"value": null},{"type": 954,"value": 1015}]},{"fn": 1173,"result": {"type": 954,"value": 1122},"args": [{"type": 954,"value": 1093},{"type": 1060,"value": null},{"type": 954,"value": 1002}]},{"fn": 1151,"result": {"type": 954,"value": 1004},"args": [{"type": 954,"value": 1098}]},{"fn": 1187,"result": {"type": 1123,"value": "null"},"args": [{"type": 954,"value": 1098}]},{"fn": 1173,"result": {"type": 954,"value": 1121},"args": [{"type": 954,"value": 1098},{"type": 1060,"value": null},{"type": 954,"value": 1015}]},{"fn": 1173,"result": {"type": 954,"value": 1124},"args": [{"type": 954,"value": 1093},{"type": 1060,"value": null},{"type": 954,"value": 1004}]},{"fn": 1151,"result": {"type": 954,"value": 998},"args": [{"type": 954,"value": 1099}]},{"fn": 1187,"result": {"type": 1125,"value": "null"},"args": [{"type": 954,"value": 1099}]},{"fn": 1173,"result": {"type": 954,"value": 1121},"args": [{"type": 954,"value": 1099},{"type": 1060,"value": null},{"type": 954,"value": 1015}]},{"fn": 1173,"result": {"type": 954,"value": 1126},"args": [{"type": 954,"value": 1093},{"type": 1060,"value": null},{"type": 954,"value": 998}]},{"fn": 1151,"result": {"type": 954,"value": 1008},"args": [{"type": 954,"value": 1100}]},{"fn": 1187,"result": {"type": 1127,"value": "null"},"args": [{"type": 954,"value": 1100}]},{"fn": 1173,"result": {"type": 954,"value": 1121},"args": [{"type": 954,"value": 1100},{"type": 1060,"value": null},{"type": 954,"value": 1015}]},{"fn": 1173,"result": {"type": 954,"value": 1128},"args": [{"type": 954,"value": 1093},{"type": 1060,"value": null},{"type": 954,"value": 1008}]},{"fn": 1151,"result": {"type": 954,"value": 1010},"args": [{"type": 954,"value": 1101}]},{"fn": 1187,"result": {"type": 1129,"value": "null"},"args": [{"type": 954,"value": 1101}]},{"fn": 1173,"result": {"type": 954,"value": 1121},"args": [{"type": 954,"value": 1101},{"type": 1060,"value": null},{"type": 954,"value": 1015}]},{"fn": 1173,"result": {"type": 954,"value": 1130},"args": [{"type": 954,"value": 1093},{"type": 1060,"value": null},{"type": 954,"value": 1010}]},{"fn": 1151,"result": {"type": 954,"value": 1006},"args": [{"type": 954,"value": 1102}]},{"fn": 1187,"result": {"type": 1131,"value": "null"},"args": [{"type": 954,"value": 1102}]},{"fn": 1173,"result": {"type": 954,"value": 1121},"args": [{"type": 954,"value": 1102},{"type": 1060,"value": null},{"type": 954,"value": 1015}]},{"fn": 1173,"result": {"type": 954,"value": 1132},"args": [{"type": 954,"value": 1093},{"type": 1060,"value": null},{"type": 954,"value": 1006}]},{"fn": 1136,"result": {"type": 954,"value": 1032},"args": [{"type": 954,"value": 1103}]},{"fn": 1173,"result": {"type": 954,"value": 1133},"args": [{"type": 954,"value": 1104},{"type": 1060,"value": null},{"type": 954,"value": 1015}]},{"fn": 1179,"result": {"type": 954,"value": 1104},"args": [{"type": 954,"value": 1104}]},{"fn": 1161,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1161,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1161,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1161,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1161,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1161,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1161,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1164,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 965}]},{"fn": 1163,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 965}]},{"fn": 1161,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1161,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1161,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1161,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1161,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1161,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1161,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1158,"result": {"type": 1034,"value": null},"args": [{"type": 1034,"value": null},{"type": 1034,"value": null}]},{"fn": 1135,"result": {"type": 954,"value": 1134},"args": [{"type": 960,"value": null},{"type": 961,"value": 32}]},{"fn": 1158,"result": {"type": 1034,"value": null},"args": [{"type": 1034,"value": null},{"type": 1034,"value": null}]},{"fn": 1151,"result": {"type": 954,"value": 978},"args": [{"type": 954,"value": 1108}]},{"fn": 1187,"result": {"type": 1135,"value": "null"},"args": [{"type": 954,"value": 1108}]},{"fn": 1173,"result": {"type": 954,"value": 1133},"args": [{"type": 954,"value": 1108},{"type": 1060,"value": null},{"type": 954,"value": 1015}]},{"fn": 1173,"result": {"type": 954,"value": 1136},"args": [{"type": 954,"value": 1104},{"type": 1060,"value": null},{"type": 954,"value": 978}]},{"fn": 1151,"result": {"type": 954,"value": 1040},"args": [{"type": 954,"value": 1109}]},{"fn": 1187,"result": {"type": 1137,"value": "null"},"args": [{"type": 954,"value": 1109}]},{"fn": 1173,"result": {"type": 954,"value": 1133},"args": [{"type": 954,"value": 1109},{"type": 1060,"value": null},{"type": 954,"value": 1015}]},{"fn": 1173,"result": {"type": 954,"value": 1138},"args": [{"type": 954,"value": 1104},{"type": 1060,"value": null},{"type": 954,"value": 1040}]},{"fn": 1170,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 978}]},{"fn": 1178,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 978}]},{"fn": 1173,"result": {"type": 954,"value": 978},"args": [{"type": 954,"value": 978},{"type": 1060,"value": null},{"type": 954,"value": 1015}]},{"fn": 1179,"result": {"type": 954,"value": 978},"args": [{"type": 954,"value": 978}]},{"fn": 1194,"result": {"type": 954,"value": 1140},"args": [{"type": 1141,"value": null}]},{"fn": 1195,"result": {"type": 1034,"value": null},"args": [{"type": 1034,"value": null}]},{"fn": 1135,"result": {"type": 954,"value": 1143},"args": [{"type": 960,"value": null},{"type": 961,"value": 13}]},{"fn": 1147,"result": {"type": 954,"value": 1144},"args": [{"type": 954,"value": 965},{"type": 954,"value": 1145},{"type": 954,"value": 984},{"type": 988,"value": 80}]},{"fn": 1196,"result": {"type": 954,"value": 1144},"args": [{"type": 954,"value": 965},{"type": 954,"value": 1145}]},{"fn": 563,"result": {"type": 967,"value": "false"},"args": [{"type": 968,"value": null}]},{"fn": 1197,"result": {"type": 1148,"value": null},"args": [{"type": 954,"value": 1149}]},{"fn": 1170,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1150}]},{"fn": 1171,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1150}]},{"fn": 1172,"result": {"type": 954,"value": 1149},"args": [{"type": 954,"value": 1150}]},{"fn": 1173,"result": {"type": 954,"value": 1151},"args": [{"type": 954,"value": 1150},{"type": 1060,"value": null},{"type": 954,"value": 1152}]},{"fn": 1174,"result": {"type": 954,"value": 1151},"args": [{"type": 954,"value": 1150}]},{"fn": 1187,"result": {"type": 1106,"value": "null"},"args": [{"type": 954,"value": 1104}]},{"fn": 1151,"result": {"type": 954,"value": 1015},"args": [{"type": 954,"value": 978}]},{"fn": 1187,"result": {"type": 1106,"value": "null"},"args": [{"type": 954,"value": 978}]},{"fn": 1173,"result": {"type": 954,"value": 1153},"args": [{"type": 954,"value": 978},{"type": 1060,"value": null},{"type": 954,"value": 1015}]},{"fn": 571,"result": {"type": 1154,"value": null},"args": [{"type": 1065,"value": null}]},{"fn": 1149,"result": {"type": 954,"value": 1155},"args": [{"type": 954,"value": 965},{"type": 999,"value": "null"}]},{"fn": 1150,"result": {"type": 954,"value": 1155},"args": [{"type": 954,"value": 965}]},{"fn": 1173,"result": {"type": 954,"value": 1156},"args": [{"type": 954,"value": 1104},{"type": 1060,"value": null},{"type": 954,"value": 1157}]},{"fn": 1186,"result": {"type": 954,"value": 1156},"args": [{"type": 954,"value": 1157},{"type": 954,"value": 1104}]},{"fn": 1161,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1164,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 961}]},{"fn": 1163,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 961}]},{"fn": 1161,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1161,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1158,"result": {"type": 1034,"value": null},"args": [{"type": 1034,"value": null},{"type": 1034,"value": null}]},{"fn": 1135,"result": {"type": 954,"value": 961},"args": [{"type": 960,"value": null},{"type": 961,"value": 16}]},{"fn": 1158,"result": {"type": 1034,"value": null},"args": [{"type": 1034,"value": null},{"type": 1034,"value": null}]},{"fn": 1135,"result": {"type": 954,"value": 1015},"args": [{"type": 960,"value": null},{"type": 961,"value": 8}]},{"fn": 1135,"result": {"type": 954,"value": 1158},"args": [{"type": 960,"value": null},{"type": 961,"value": 128}]},{"fn": 1170,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1157}]},{"fn": 1178,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1157}]},{"fn": 1173,"result": {"type": 954,"value": 1065},"args": [{"type": 954,"value": 1157},{"type": 1060,"value": null},{"type": 954,"value": 1015}]},{"fn": 1179,"result": {"type": 954,"value": 1065},"args": [{"type": 954,"value": 1157}]},{"fn": 1173,"result": {"type": 954,"value": 1159},"args": [{"type": 954,"value": 1104},{"type": 1060,"value": null},{"type": 954,"value": 1157}]},{"fn": 1198,"result": {"type": 954,"value": 1161},"args": [{"type": 954,"value": 1145}]},{"fn": 1199,"result": {"type": 954,"value": 1163},"args": [{"type": 1164,"value": null}]},{"fn": 1151,"result": {"type": 954,"value": 1015},"args": [{"type": 954,"value": 1165}]},{"fn": 1176,"result": {"type": 954,"value": 1157},"args": [{"type": 954,"value": 1165},{"type": 1015,"value": 0}]},{"fn": 1170,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1166}]},{"fn": 1178,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1166}]},{"fn": 1173,"result": {"type": 954,"value": 1104},"args": [{"type": 954,"value": 1166},{"type": 1060,"value": null},{"type": 954,"value": 1015}]},{"fn": 1179,"result": {"type": 954,"value": 1104},"args": [{"type": 954,"value": 1166}]},{"fn": 1151,"result": {"type": 954,"value": 1015},"args": [{"type": 954,"value": 1157}]},{"fn": 1187,"result": {"type": 1106,"value": null},"args": [{"type": 954,"value": 1157}]},{"fn": 1173,"result": {"type": 954,"value": 1107},"args": [{"type": 954,"value": 1157},{"type": 1060,"value": null},{"type": 954,"value": 1015}]},{"fn": 1173,"result": {"type": 954,"value": 1166},"args": [{"type": 954,"value": 1104},{"type": 1060,"value": null},{"type": 954,"value": 965}]},{"fn": 1186,"result": {"type": 954,"value": 1166},"args": [{"type": 954,"value": 965},{"type": 954,"value": 1104}]},{"fn": 1153,"result": {"type": 954,"value": 1065},"args": [{"type": 954,"value": 1065}]},{"fn": 1154,"result": {"type": 954,"value": 1065},"args": [{"type": 954,"value": 1065}]},{"fn": 1155,"result": {"type": 954,"value": 1167},"args": [{"type": 954,"value": 1065}]},{"fn": 1137,"result": {"type": 954,"value": 1168},"args": [{"type": 954,"value": 1169},{"type": 954,"value": 1170},{"type": 589,"value": 678}]},{"fn": 1161,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1161,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1161,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1160,"result": {"type": 1034,"value": null},"args": [{"type": 954,"value": 1171}]},{"fn": 1151,"result": {"type": 954,"value": 965},"args": [{"type": 954,"value": 1166}]},{"fn": 1187,"result": {"type": 1172,"value": "null"},"args": [{"type": 954,"value": 1166}]},{"fn": 1173,"result": {"type": 954,"value": 1133},"args": [{"type": 954,"value": 1166},{"type": 1060,"value": null},{"type": 954,"value": 1015}]},{"fn": 1173,"result": {"type": 954,"value": 1173},"args": [{"type": 954,"value": 1104},{"type": 1060,"value": null},{"type": 954,"value": 965}]},{"fn": 1161,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1164,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1174}]},{"fn": 1163,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1174}]},{"fn": 1161,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1161,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1161,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1151,"result": {"type": 954,"value": 1015},"args": [{"type": 954,"value": 1107}]},{"fn": 1152,"result": {"type": 954,"value": 1165},"args": [{"type": 954,"value": 1107},{"type": 1015,"value": 0}]},{"fn": 1161,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1161,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1164,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1175}]},{"fn": 1163,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1175}]},{"fn": 1200,"result": {"type": 954,"value": 1177},"args": [{"type": 1178,"value": null}]},{"fn": 1201,"result": {"type": 954,"value": 1180},"args": [{"type": 1178,"value": null}]},{"fn": 1202,"result": {"type": 1182,"value": null},"args": [{"type": 954,"value": 1180}]},{"fn": 1203,"result": {"type": 967,"value": "false"},"args": [{"type": 976,"value": null},{"type": 1184,"value": null},{"type": 1184,"value": null}]},{"fn": 1203,"result": {"type": 967,"value": "false"},"args": [{"type": 976,"value": null},{"type": 1184,"value": null},{"type": 1184,"value": null}]},{"fn": 1204,"result": {"type": 954,"value": 1186},"args": [{"type": 954,"value": 1180}]},{"fn": 1205,"result": {"type": 976,"value": "undefined"},"args": [{"type": 954,"value": 1186}]},{"fn": 1206,"result": {"type": 954,"value": 1189},"args": [{"type": 954,"value": 1186},{"type": 954,"value": 967},{"type": 1190,"value": 1207}]},{"fn": 1208,"result": {"type": 954,"value": 1189},"args": [{"type": 954,"value": 1180},{"type": 954,"value": 967}]},{"fn": 1207,"result": {"type": 954,"value": 1193},"args": [{"type": 954,"value": 1189}]},{"fn": 1209,"result": {"type": 954,"value": 1195},"args": [{"type": 961,"value": 3}]},{"fn": 1210,"result": {"type": 954,"value": 1195},"args": [{"type": 965,"value": 3}]},{"fn": 1135,"result": {"type": 954,"value": 1171},"args": [{"type": 960,"value": null},{"type": 961,"value": 3}]},{"fn": 1211,"result": {"type": 954,"value": 1198},"args": [{"type": 954,"value": 1199},{"type": 999,"value": "null"}]},{"fn": 1212,"result": {"type": 954,"value": 1198},"args": [{"type": 954,"value": 1199}]},{"fn": 1211,"result": {"type": 954,"value": 1201},"args": [{"type": 954,"value": 1202},{"type": 999,"value": "null"}]},{"fn": 1212,"result": {"type": 954,"value": 1201},"args": [{"type": 954,"value": 1202}]},{"fn": 1200,"result": {"type": 954,"value": 1203},"args": [{"type": 1178,"value": null}]},{"fn": 1201,"result": {"type": 954,"value": 1204},"args": [{"type": 1178,"value": null}]},{"fn": 1202,"result": {"type": 1182,"value": null},"args": [{"type": 954,"value": 1204}]},{"fn": 1203,"result": {"type": 967,"value": "false"},"args": [{"type": 976,"value": null},{"type": 1184,"value": null},{"type": 1184,"value": null}]},{"fn": 1203,"result": {"type": 967,"value": "false"},"args": [{"type": 976,"value": null},{"type": 1184,"value": null},{"type": 1184,"value": null}]},{"fn": 1204,"result": {"type": 954,"value": 1205},"args": [{"type": 954,"value": 1204}]},{"fn": 1205,"result": {"type": 976,"value": "undefined"},"args": [{"type": 954,"value": 1205}]},{"fn": 1206,"result": {"type": 954,"value": 1206},"args": [{"type": 954,"value": 1205},{"type": 954,"value": 967},{"type": 1207,"value": 1213}]},{"fn": 1208,"result": {"type": 954,"value": 1206},"args": [{"type": 954,"value": 1204},{"type": 954,"value": 967}]},{"fn": 1213,"result": {"type": 954,"value": 1209},"args": [{"type": 954,"value": 1206}]},{"fn": 1144,"result": {"type": 976,"value": "undefined"},"args": [{"type": 954,"value": 1210},{"type": 954,"value": 978},{"type": 954,"value": 978},{"type": 954,"value": 988}]},{"fn": 1145,"result": {"type": 954,"value": 1211},"args": [{"type": 954,"value": 978},{"type": 954,"value": 1212},{"type": 954,"value": 1210},{"type": 988,"value": 80}]},{"fn": 1214,"result": {"type": 954,"value": 1211},"args": [{"type": 954,"value": 1212}]},{"fn": 1147,"result": {"type": 954,"value": 1214},"args": [{"type": 954,"value": 978},{"type": 954,"value": 1212},{"type": 954,"value": 1210},{"type": 988,"value": 80}]},{"fn": 1145,"result": {"type": 954,"value": 1215},"args": [{"type": 954,"value": 978},{"type": 954,"value": 1216},{"type": 954,"value": 1210},{"type": 988,"value": 80}]},{"fn": 1214,"result": {"type": 954,"value": 1215},"args": [{"type": 954,"value": 1216}]},{"fn": 1147,"result": {"type": 954,"value": 1217},"args": [{"type": 954,"value": 978},{"type": 954,"value": 1216},{"type": 954,"value": 1210},{"type": 988,"value": 80}]},{"fn": 1149,"result": {"type": 954,"value": 1218},"args": [{"type": 954,"value": 1219},{"type": 999,"value": "null"}]},{"fn": 1150,"result": {"type": 954,"value": 1218},"args": [{"type": 954,"value": 1219}]},{"fn": 1215,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1082}]},{"fn": 1216,"result": {"type": 954,"value": 1222},"args": [{"type": 967,"value": "false"},{"type": 954,"value": 1223}]},{"fn": 1217,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1082}]},{"fn": 1216,"result": {"type": 954,"value": 1225},"args": [{"type": 967,"value": "false"},{"type": 954,"value": 1226}]},{"fn": 1215,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1084}]},{"fn": 1218,"result": {"type": 954,"value": 1228},"args": [{"type": 967,"value": "true"},{"type": 954,"value": 1228}]},{"fn": 1217,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1084}]},{"fn": 1218,"result": {"type": 954,"value": 1229},"args": [{"type": 967,"value": "true"},{"type": 954,"value": 1229}]},{"fn": 1145,"result": {"type": 954,"value": 1230},"args": [{"type": 954,"value": 978},{"type": 954,"value": 988},{"type": 954,"value": 1210},{"type": 988,"value": 80}]},{"fn": 1214,"result": {"type": 954,"value": 1230},"args": [{"type": 954,"value": 988}]},{"fn": 1147,"result": {"type": 954,"value": 1231},"args": [{"type": 954,"value": 978},{"type": 954,"value": 988},{"type": 954,"value": 1210},{"type": 988,"value": 80}]},{"fn": 1168,"result": {"type": 954,"value": 1015},"args": [{"type": 954,"value": 1180}]},{"fn": 1168,"result": {"type": 954,"value": 1015},"args": [{"type": 954,"value": 1204}]},{"fn": 1200,"result": {"type": 954,"value": 1232},"args": [{"type": 1178,"value": null}]},{"fn": 1201,"result": {"type": 954,"value": 1233},"args": [{"type": 1178,"value": null}]},{"fn": 1202,"result": {"type": 1182,"value": null},"args": [{"type": 954,"value": 1233}]},{"fn": 1203,"result": {"type": 967,"value": "false"},"args": [{"type": 976,"value": null},{"type": 1184,"value": null},{"type": 1184,"value": null}]},{"fn": 1204,"result": {"type": 954,"value": 1234},"args": [{"type": 954,"value": 1233}]},{"fn": 1205,"result": {"type": 976,"value": "undefined"},"args": [{"type": 954,"value": 1234}]},{"fn": 1206,"result": {"type": 954,"value": 1235},"args": [{"type": 954,"value": 1234},{"type": 954,"value": 967},{"type": 1236,"value": 1219}]},{"fn": 1208,"result": {"type": 954,"value": 1235},"args": [{"type": 954,"value": 1233},{"type": 954,"value": 967}]},{"fn": 1219,"result": {"type": 954,"value": 1238},"args": [{"type": 954,"value": 1235}]},{"fn": 1209,"result": {"type": 954,"value": 1239},"args": [{"type": 961,"value": 2}]},{"fn": 1210,"result": {"type": 954,"value": 1239},"args": [{"type": 965,"value": 2}]},{"fn": 1135,"result": {"type": 954,"value": 1240},"args": [{"type": 960,"value": null},{"type": 961,"value": 2}]},{"fn": 765,"result": {"type": 1239,"value": null}},{"fn": 1138,"result": {"type": 974,"value": null},"args": [{"type": 954,"value": 1241}]},{"fn": 1138,"result": {"type": 974,"value": null},"args": [{"type": 954,"value": 1199}]},{"fn": 788,"result": {"type": 1195,"value": null}},{"fn": 1138,"result": {"type": 974,"value": null},"args": [{"type": 954,"value": 1202}]},{"fn": 1138,"result": {"type": 974,"value": null},"args": [{"type": 954,"value": 1242}]},{"fn": 1138,"result": {"type": 974,"value": null},"args": [{"type": 954,"value": 1243}]},{"fn": 1168,"result": {"type": 954,"value": 1015},"args": [{"type": 954,"value": 1233}]},{"fn": 1220,"result": {"type": 954,"value": 1245},"args": [{"type": 954,"value": 1212}]},{"fn": 1221,"result": {"type": 954,"value": 1247},"args": [{"type": 965,"value": 4096},{"type": 954,"value": 970}]},{"fn": 1166,"result": {"type": 967,"value": "true"},"args": [{"type": 965,"value": 4096}]},{"fn": 1222,"result": {"type": 954,"value": 1249},"args": [{"type": 954,"value": 1015},{"type": 1250,"value": null}]},{"fn": 1137,"result": {"type": 954,"value": 1251},"args": [{"type": 954,"value": 1252},{"type": 954,"value": 972},{"type": 773,"value": 901}]},{"fn": 1161,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1162,"result": {"type": 1253,"value": 1223},"args": [{"type": 978,"value": null}]},{"fn": 1223,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 965}]},{"fn": 1161,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1161,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1224,"result": {"type": 1134,"value": 0},"args": [{"type": 965,"value": 0}]},{"fn": 275,"result": {"type": 1015,"value": 48},"args": [{"type": 1015,"value": 0},{"type": 1256,"value": null}]},{"fn": 1161,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1161,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1161,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1224,"result": {"type": 1134,"value": 1},"args": [{"type": 965,"value": 1}]},{"fn": 275,"result": {"type": 1015,"value": 49},"args": [{"type": 1015,"value": 1},{"type": 1256,"value": null}]},{"fn": 1225,"result": {"type": 954,"value": 1258},"args": [{"type": 1259,"value": null}]},{"fn": 1199,"result": {"type": 954,"value": 1260},"args": [{"type": 1164,"value": null}]},{"fn": 982,"result": {"type": 1249,"value": null}},{"fn": 1139,"result": {"type": 978,"value": null},"args": [{"type": 982,"value": null}]},{"fn": 1140,"result": {"type": 981,"value": null},"args": [{"type": 982,"value": null}]},{"fn": 1140,"result": {"type": 981,"value": null},"args": [{"type": 1261,"value": null}]},{"fn": 1140,"result": {"type": 981,"value": null},"args": [{"type": 1262,"value": null}]},{"fn": 1202,"result": {"type": 1263,"value": null},"args": [{"type": 954,"value": 1264}]},{"fn": 1161,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1161,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1226,"result": {"type": 1266,"value": null},"args": [{"type": 954,"value": 1264},{"type": 978,"value": null}]},{"fn": 1161,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1226,"result": {"type": 1266,"value": null},"args": [{"type": 954,"value": 1264},{"type": 978,"value": null}]},{"fn": 1140,"result": {"type": 981,"value": null},"args": [{"type": 1061,"value": null}]},{"fn": 1161,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1161,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1161,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1226,"result": {"type": 1266,"value": null},"args": [{"type": 954,"value": 1264},{"type": 978,"value": null}]},{"fn": 1161,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1164,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 967}]},{"fn": 1223,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 967}]},{"fn": 1170,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1267}]},{"fn": 1178,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1267}]},{"fn": 1173,"result": {"type": 954,"value": 1104},"args": [{"type": 954,"value": 1267},{"type": 1060,"value": null},{"type": 954,"value": 1015}]},{"fn": 1179,"result": {"type": 954,"value": 1104},"args": [{"type": 954,"value": 1267}]},{"fn": 1170,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1268}]},{"fn": 1178,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1268}]},{"fn": 1173,"result": {"type": 954,"value": 1104},"args": [{"type": 954,"value": 1268},{"type": 1060,"value": null},{"type": 954,"value": 1015}]},{"fn": 1179,"result": {"type": 954,"value": 1104},"args": [{"type": 954,"value": 1268}]},{"fn": 1173,"result": {"type": 954,"value": 1267},"args": [{"type": 954,"value": 1104},{"type": 1060,"value": null},{"type": 954,"value": 1199}]},{"fn": 1186,"result": {"type": 954,"value": 1267},"args": [{"type": 954,"value": 1199},{"type": 954,"value": 1104}]},{"fn": 1173,"result": {"type": 954,"value": 1268},"args": [{"type": 954,"value": 1104},{"type": 1060,"value": null},{"type": 954,"value": 1202}]},{"fn": 1186,"result": {"type": 954,"value": 1268},"args": [{"type": 954,"value": 1202},{"type": 954,"value": 1104}]},{"fn": 1170,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1269}]},{"fn": 1178,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1269}]},{"fn": 1173,"result": {"type": 954,"value": 1269},"args": [{"type": 954,"value": 1269},{"type": 1060,"value": null},{"type": 954,"value": 1015}]},{"fn": 1179,"result": {"type": 954,"value": 1269},"args": [{"type": 954,"value": 1269}]},{"fn": 1161,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1223,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 978}]},{"fn": 1161,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1161,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1164,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1015}]},{"fn": 1223,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1015}]},{"fn": 1161,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1161,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1161,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1161,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1161,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1164,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1270}]},{"fn": 1223,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1270}]},{"fn": 1135,"result": {"type": 954,"value": 1271},"args": [{"type": 960,"value": null},{"type": 961,"value": 1}]},{"fn": 1136,"result": {"type": 954,"value": 1271},"args": [{"type": 954,"value": 1240}]},{"fn": 1151,"result": {"type": 954,"value": 1199},"args": [{"type": 954,"value": 1267}]},{"fn": 1187,"result": {"type": 1272,"value": "null"},"args": [{"type": 954,"value": 1267}]},{"fn": 1173,"result": {"type": 954,"value": 1133},"args": [{"type": 954,"value": 1267},{"type": 1060,"value": null},{"type": 954,"value": 1015}]},{"fn": 1151,"result": {"type": 954,"value": 1202},"args": [{"type": 954,"value": 1268}]},{"fn": 1187,"result": {"type": 1273,"value": "null"},"args": [{"type": 954,"value": 1268}]},{"fn": 1173,"result": {"type": 954,"value": 1133},"args": [{"type": 954,"value": 1268},{"type": 1060,"value": null},{"type": 954,"value": 1015}]},{"fn": 1173,"result": {"type": 954,"value": 1274},"args": [{"type": 954,"value": 1104},{"type": 1060,"value": null},{"type": 954,"value": 1199}]},{"fn": 1173,"result": {"type": 954,"value": 1275},"args": [{"type": 954,"value": 1104},{"type": 1060,"value": null},{"type": 954,"value": 1202}]},{"fn": 1151,"result": {"type": 954,"value": 1015},"args": [{"type": 954,"value": 1269}]},{"fn": 1187,"result": {"type": 1106,"value": "null"},"args": [{"type": 954,"value": 1269}]},{"fn": 1173,"result": {"type": 954,"value": 1276},"args": [{"type": 954,"value": 1269},{"type": 1060,"value": null},{"type": 954,"value": 1015}]},{"fn": 1227,"result": {"type": 954,"value": 1278},"args": [{"type": 954,"value": 1015}]},{"fn": 1161,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1161,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1161,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1161,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1161,"result": {"type": 967,"value": "false"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1161,"result": {"type": 967,"value": "true"},"args": [{"type": 954,"value": 1015},{"type": 978,"value": null},{"type": 978,"value": null}]},{"fn": 1225,"result": {"type": 954,"value": 1279},"args": [{"type": 1259,"value": null}]},{"fn": 1136,"result": {"type": 954,"value": 1240},"args": [{"type": 954,"value": 1171}]},{"fn": 1228,"result": {"type": 954,"value": 1281},"args": [{"type": 954,"value": 1015}]}],"packages": [{"name": "","file": 0,"main": 975,"table": {"std": 1,"builtin": 2,"root": 3,"root": 0}},{"name": "std","file": 1,"main": 1282,"table": {"builtin": 2,"std": 1,"root": 3}},{"name": "builtin","file": 2,"main": 1283,"table": {"std": 1}},{"name": "std.special","file": 3,"main": 1284,"table": {"std": 1,"builtin": 2}}],"types": [{"kind": 18,"name": "fn([]const u8, ?*std.builtin.StackTrace) noreturn","generic": false,"ret": 1285,"args": [978,1286]},{"kind": 18,"name": "fn() anyerror!void","generic": false,"ret": 1287},{"kind": 18,"name": "fn([]const std.target.arm.Feature) std.target.Set","generic": false,"ret": 957,"args": [966]},{"kind": 18,"name": "fn() std.target.Set","generic": false,"ret": 957},{"kind": 18,"name": "fn(*std.target.Set, u9) void","generic": false,"ret": 976,"args": [1288,962]},{"kind": 18,"name": "fn(std.target.Arch) bool","generic": false,"ret": 967,"args": [968]},{"kind": 18,"name": "fn() callconv(.Naked) noreturn","generic": false,"ret": 1285},{"kind": 18,"name": "fn(?*const std.builtin.StackTrace, ?usize, []const u8) noreturn","generic": false,"ret": 1285,"args": [1289,1172,978]},{"kind": 18,"name": "fn() void","generic": false,"ret": 976},{"kind": 18,"name": "fn() noreturn","generic": false,"ret": 1285},{"kind": 18,"name": "fn(*std.Thread.Mutex) void","generic": false,"ret": 976,"args": [1290]},{"kind": 18,"name": "fn() std.fs.file.File","generic": false,"ret": 971},{"kind": 18,"name": "fn(std.fs.file.File, []const u8) std.os.WriteError!usize","generic": false,"ret": 1291,"args": [971,978]},{"kind": 18,"name": "fn(std.fs.file.File) std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)","generic": false,"ret": 970,"args": [971]},{"kind": 18,"name": "fn() u64","generic": false,"ret": 988},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:296:56) std.os.WriteError!void","generic": false,"ret": 1292,"args": [970,1293]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:298:40) std.os.WriteError!void","generic": false,"ret": 1292,"args": [970,1294]},{"kind": 18,"name": "fn(std.builtin.StackTrace) void","generic": false,"ret": 976,"args": [1175]},{"kind": 18,"name": "fn(?usize) void","generic": false,"ret": 976,"args": [1172]},{"kind": 18,"name": "fn(*std.Thread.StaticResetEvent) void","generic": false,"ret": 976,"args": [1295]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:322:67) std.os.WriteError!void","generic": false,"ret": 1292,"args": [970,1296]},{"kind": 18,"name": "fn([]std.elf.Elf32_Phdr) void","generic": false,"ret": 976,"args": [1297]},{"kind": 18,"name": "fn(u8) noreturn","generic": false,"ret": 1285,"args": [1015]},{"kind": 18,"name": "fn(usize, [*][*:0]u8, [][*:0]u8) u8","generic": false,"ret": 1015,"args": [965,1298,1299]},{"kind": 18,"name": "fn(u6, ?*const std.os.linux.Sigaction, ?*std.os.linux.Sigaction) void","generic": false,"ret": 976,"args": [1032,1300,1301]},{"kind": 18,"name": "fn(*std.Thread.Mutex.AtomicMutex) void","generic": false,"ret": 976,"args": [1302]},{"kind": 18,"name": "fn() i32","generic": false,"ret": 1084},{"kind": 18,"name": "fn(i32, []const u8) std.os.WriteError!usize","generic": false,"ret": 1291,"args": [1084,978]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:296:56) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1303,"args": [970,1293]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), []const u8) std.os.WriteError!void","generic": false,"ret": 1292,"args": [970,978]},{"kind": 18,"name": "fn(bool) void","generic": false,"ret": 976,"args": [967]},{"kind": 18,"name": "fn(*std.fmt.Parser) @typeInfo(@typeInfo(@TypeOf(std.fmt.Parser.specifier)).Fn.return_type.?).ErrorUnion.error_set!std.fmt.Specifier","generic": false,"ret": 1304,"args": [1305]},{"kind": 18,"name": "fn(*std.fmt.Parser, u8) bool","generic": false,"ret": 967,"args": [1305,1015]},{"kind": 18,"name": "fn(*std.fmt.Parser) ?usize","generic": false,"ret": 1172,"args": [1305]},{"kind": 18,"name": "fn(*std.fmt.Parser, u8) []const u8","generic": false,"ret": 978,"args": [1305,1015]},{"kind": 18,"name": "fn(*std.fmt.Parser) ?u8","generic": false,"ret": 1106,"args": [1305]},{"kind": 18,"name": "fn(*std.fmt.Parser, usize) ?u8","generic": false,"ret": 1106,"args": [1305,965]},{"kind": 18,"name": "fn(*std.fmt.ArgState, ?usize) ?usize","generic": false,"ret": 1172,"args": [1306,1172]},{"kind": 18,"name": "fn(u64, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), usize) std.os.WriteError!void","generic": false,"ret": 1292,"args": [988,1307,970,965]},{"kind": 18,"name": "fn(*std.fmt.ArgState) bool","generic": false,"ret": 967,"args": [1306]},{"kind": 18,"name": "fn(u8) std.os.UnexpectedError!void","generic": false,"ret": 1308,"args": [1015]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:298:40) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1309,"args": [970,1294]},{"kind": 18,"name": "fn([]const u8, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), usize) std.os.WriteError!void","generic": false,"ret": 1292,"args": [978,1307,970,965]},{"kind": 18,"name": "fn(std.hash_map.AutoContext(usize), usize) u64","generic": false,"ret": 988,"args": [984,965]},{"kind": 18,"name": "fn(std.hash_map.AutoContext(usize), usize, usize) bool","generic": false,"ret": 967,"args": [984,965,965]},{"kind": 18,"name": "fn() @typeInfo(@typeInfo(@TypeOf(std.debug.getSelfDebugInfo)).Fn.return_type.?).ErrorUnion.error_set!*std.debug.DebugInfo","generic": false,"ret": 1310},{"kind": 18,"name": "fn(std.mem.Allocator) anyerror!std.debug.DebugInfo","generic": false,"ret": 1311,"args": [1312]},{"kind": 18,"name": "fn() std.mem.Allocator","generic": false,"ret": 1312},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:204:91) std.os.WriteError!void","generic": false,"ret": 1292,"args": [970,1313]},{"kind": 18,"name": "fn() std.debug.Config","generic": false,"ret": 1314},{"kind": 18,"name": "fn(std.builtin.StackTrace, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.mem.Allocator, *std.debug.DebugInfo, std.debug.Config) @typeInfo(@typeInfo(@TypeOf(std.debug.writeStackTrace)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1315,"args": [1175,970,1312,1316,1314]},{"kind": 18,"name": "fn(usize, usize) usize","generic": false,"ret": 965,"args": [965,965]},{"kind": 18,"name": "fn(*std.debug.DebugInfo, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), usize, std.debug.Config) @typeInfo(@typeInfo(@TypeOf(std.debug.printSourceAtAddress)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1317,"args": [1316,970,965,1314]},{"kind": 18,"name": "fn(*std.debug.DebugInfo, usize) @typeInfo(@typeInfo(@TypeOf(std.debug.DebugInfo.getModuleForAddress)).Fn.return_type.?).ErrorUnion.error_set!*std.debug.ModuleDebugInfo","generic": false,"ret": 1318,"args": [1316,965]},{"kind": 18,"name": "fn(std.target.Target) bool","generic": false,"ret": 967,"args": [1012]},{"kind": 18,"name": "fn(std.target.Tag) bool","generic": false,"ret": 967,"args": [1011]},{"kind": 18,"name": "fn(*std.debug.DebugInfo, usize) @typeInfo(@typeInfo(@TypeOf(std.debug.DebugInfo.lookupModuleDl)).Fn.return_type.?).ErrorUnion.error_set!*std.debug.ModuleDebugInfo","generic": false,"ret": 1319,"args": [1316,965]},{"kind": 18,"name": "fn(*std.os.linux.dl_phdr_info, usize, *std.debug.struct:1222:18) @typeInfo(@typeInfo(@TypeOf(std.debug.struct:1231:48.callback)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1320,"args": [1321,965,1322]},{"kind": 18,"name": "fn(*std.debug.struct:1222:18) anyerror!void","generic": false,"ret": 1287,"args": [1322]},{"kind": 18,"name": "fn(std.hash_map.HashMap(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80), usize) ?*std.debug.ModuleDebugInfo","generic": false,"ret": 1323,"args": [990,965]},{"kind": 18,"name": "fn(std.mem.Allocator) std.mem.Allocator.Error!*std.debug.ModuleDebugInfo","generic": false,"ret": 1324,"args": [1312]},{"kind": 18,"name": "fn() std.fs.Dir","generic": false,"ret": 1325},{"kind": 18,"name": "fn(std.fs.Dir, []const u8, std.fs.file.OpenFlags) std.fs.file.OpenError!std.fs.file.File","generic": false,"ret": 1326,"args": [1325,978,1327]},{"kind": 18,"name": "fn(std.fs.file.OpenFlags) std.fs.OpenSelfExeError!std.fs.file.File","generic": false,"ret": 1328,"args": [1327]},{"kind": 18,"name": "fn(std.mem.Allocator, *std.debug.ModuleDebugInfo) void","generic": false,"ret": 976,"args": [1312,991]},{"kind": 18,"name": "fn(std.mem.Allocator, std.fs.file.File) @typeInfo(@typeInfo(@TypeOf(std.debug.readElfDebugInfo)).Fn.return_type.?).ErrorUnion.error_set!std.debug.ModuleDebugInfo","generic": false,"ret": 1329,"args": [1312,971]},{"kind": 18,"name": "fn(std.fs.file.File) @typeInfo(@typeInfo(@TypeOf(std.debug.mapWholeFile)).Fn.return_type.?).ErrorUnion.error_set![]align(4096) const u8","generic": false,"ret": 1330,"args": [971]},{"kind": 18,"name": "fn(std.fs.file.File) std.fs.file.GetSeekPosError!u64","generic": false,"ret": 1331,"args": [971]},{"kind": 18,"name": "fn(std.fs.file.File) void","generic": false,"ret": 976,"args": [971]},{"kind": 18,"name": "fn(u64) std.math.error:998:44!usize","generic": false,"ret": 1332,"args": [988]},{"kind": 18,"name": "fn(?[*]align(4096) u8, usize, u32, u32, i32, u64) std.os.MMapError![]align(4096) u8","generic": false,"ret": 1333,"args": [1334,965,1134,1134,1084,988]},{"kind": 18,"name": "fn([]const u8, []const u8) bool","generic": false,"ret": 967,"args": [978,978]},{"kind": 18,"name": "fn(std.target.Arch) std.builtin.Endian","generic": false,"ret": 1013,"args": [968]},{"kind": 18,"name": "fn([*]align(4096) const u8) [*:0]align(4096) const u8","generic": false,"ret": 1018,"args": [1016]},{"kind": 18,"name": "fn([*:0]align(4096) const u8) [:0]align(4096) const u8","generic": false,"ret": 1020,"args": [1018]},{"kind": 18,"name": "fn([]const u8, u64, u64) @typeInfo(@typeInfo(@TypeOf(std.debug.chopSlice)).Fn.return_type.?).ErrorUnion.error_set![]const u8","generic": false,"ret": 1335,"args": [978,988,988]},{"kind": 18,"name": "fn(*std.dwarf.DwarfInfo, std.mem.Allocator) @typeInfo(@typeInfo(@TypeOf(std.dwarf.openDwarfDebugInfo)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1336,"args": [1337,1312]},{"kind": 18,"name": "fn(std.mem.Allocator) std.array_list.ArrayListAligned(std.dwarf.AbbrevTableHeader,null)","generic": false,"ret": 997,"args": [1312]},{"kind": 18,"name": "fn(std.mem.Allocator) std.array_list.ArrayListAligned(std.dwarf.CompileUnit,null)","generic": false,"ret": 1005,"args": [1312]},{"kind": 18,"name": "fn(std.mem.Allocator) std.array_list.ArrayListAligned(std.dwarf.Func,null)","generic": false,"ret": 1009,"args": [1312]},{"kind": 18,"name": "fn(*std.dwarf.DwarfInfo) @typeInfo(@typeInfo(@TypeOf(std.dwarf.DwarfInfo.scanAllFunctions)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1338,"args": [1337]},{"kind": 18,"name": "fn([]const u8) std.io.fixed_buffer_stream.FixedBufferStream([]const u8)","generic": false,"ret": 1023,"args": [978]},{"kind": 18,"name": "fn(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8), []u8) std.io.fixed_buffer_stream.ReadError!usize","generic": false,"ret": 1339,"args": [1026,1065]},{"kind": 18,"name": "fn(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8)) std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read)","generic": false,"ret": 1025,"args": [1026]},{"kind": 18,"name": "fn(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8), u64) std.io.fixed_buffer_stream.SeekError!void","generic": false,"ret": 1340,"args": [1026,988]},{"kind": 18,"name": "fn(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8), i64) std.io.fixed_buffer_stream.SeekError!void","generic": false,"ret": 1340,"args": [1026,1091]},{"kind": 18,"name": "fn(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8)) std.io.fixed_buffer_stream.GetSeekPosError!u64","generic": false,"ret": 1341,"args": [1026]},{"kind": 18,"name": "fn(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8)) std.io.seekable_stream.SeekableStream(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.SeekError,std.io.fixed_buffer_stream.GetSeekPosError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).seekTo,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).seekBy,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).getPos,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).getEndPos)","generic": false,"ret": 1029,"args": [1026]},{"kind": 18,"name": "fn(std.io.seekable_stream.SeekableStream(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.SeekError,std.io.fixed_buffer_stream.GetSeekPosError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).seekTo,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).seekBy,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).getPos,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).getEndPos)) std.io.fixed_buffer_stream.GetSeekPosError!u64","generic": false,"ret": 1341,"args": [1029]},{"kind": 18,"name": "fn(std.io.seekable_stream.SeekableStream(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.SeekError,std.io.fixed_buffer_stream.GetSeekPosError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).seekTo,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).seekBy,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).getPos,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).getEndPos), u64) std.io.fixed_buffer_stream.SeekError!void","generic": false,"ret": 1340,"args": [1029,988]},{"kind": 18,"name": "fn(*std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read), std.builtin.Endian, *bool) @typeInfo(@typeInfo(@TypeOf(std.dwarf.readUnitLength)).Fn.return_type.?).ErrorUnion.error_set!u64","generic": false,"ret": 1342,"args": [1343,1013,1344]},{"kind": 18,"name": "fn(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read), std.builtin.Endian) @typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readInt)).Fn.return_type.?).ErrorUnion.error_set!u32","generic": false,"ret": 1345,"args": [1025,1013]},{"kind": 18,"name": "fn(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read)) @typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readBytesNoEof)).Fn.return_type.?).ErrorUnion.error_set![4]u8","generic": false,"ret": 1346,"args": [1025]},{"kind": 18,"name": "fn(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read), []u8) @typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readNoEof)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1347,"args": [1025,1065]},{"kind": 18,"name": "fn(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read), []u8) std.io.fixed_buffer_stream.ReadError!usize","generic": false,"ret": 1339,"args": [1025,1065]},{"kind": 18,"name": "fn(*const [4]u8, std.builtin.Endian) u32","generic": false,"ret": 1134,"args": [1348,1013]},{"kind": 18,"name": "fn(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read), std.builtin.Endian) @typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readInt)).Fn.return_type.?).ErrorUnion.error_set!u64","generic": false,"ret": 1349,"args": [1025,1013]},{"kind": 18,"name": "fn(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read)) @typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readBytesNoEof)).Fn.return_type.?).ErrorUnion.error_set![8]u8","generic": false,"ret": 1350,"args": [1025]},{"kind": 18,"name": "fn(*const [8]u8, std.builtin.Endian) u64","generic": false,"ret": 988,"args": [1351,1013]},{"kind": 18,"name": "fn(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read), std.builtin.Endian) @typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readInt)).Fn.return_type.?).ErrorUnion.error_set!u16","generic": false,"ret": 1352,"args": [1025,1013]},{"kind": 18,"name": "fn(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read)) @typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readBytesNoEof)).Fn.return_type.?).ErrorUnion.error_set![2]u8","generic": false,"ret": 1353,"args": [1025]},{"kind": 18,"name": "fn(*const [2]u8, std.builtin.Endian) u16","generic": false,"ret": 961,"args": [1354,1013]},{"kind": 18,"name": "fn(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read)) @typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readByte)).Fn.return_type.?).ErrorUnion.error_set!u8","generic": false,"ret": 1355,"args": [1025]},{"kind": 18,"name": "fn(*std.dwarf.DwarfInfo, u64) @typeInfo(@typeInfo(@TypeOf(std.dwarf.DwarfInfo.getAbbrevTable)).Fn.return_type.?).ErrorUnion.error_set!*const std.array_list.ArrayListAligned(std.dwarf.AbbrevTableEntry,null)","generic": false,"ret": 1356,"args": [1337,988]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.AbbrevTableHeader,null), std.dwarf.AbbrevTableHeader) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.AbbrevTableHeader,null).append)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1357,"args": [1358,998]},{"kind": 18,"name": "fn(*std.dwarf.DwarfInfo, u64) @typeInfo(@typeInfo(@TypeOf(std.dwarf.DwarfInfo.parseAbbrevTable)).Fn.return_type.?).ErrorUnion.error_set!std.array_list.ArrayListAligned(std.dwarf.AbbrevTableEntry,null)","generic": false,"ret": 1359,"args": [1337,988]},{"kind": 18,"name": "fn(std.mem.Allocator) std.array_list.ArrayListAligned(std.dwarf.AbbrevTableEntry,null)","generic": false,"ret": 1001,"args": [1312]},{"kind": 18,"name": "fn(std.dwarf.DwarfInfo) std.mem.Allocator","generic": false,"ret": 1312,"args": [1360]},{"kind": 18,"name": "fn(*std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read)) @typeInfo(@typeInfo(@TypeOf(std.leb128.readULEB128)).Fn.return_type.?).ErrorUnion.error_set!u64","generic": false,"ret": 1361,"args": [1343]},{"kind": 18,"name": "fn(std.array_list.ArrayListAligned(std.dwarf.AbbrevTableEntry,null)) void","generic": false,"ret": 976,"args": [1001]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.AbbrevTableEntry,null), std.dwarf.AbbrevTableEntry) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.AbbrevTableEntry,null).append)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1362,"args": [1363,1002]},{"kind": 18,"name": "fn(std.mem.Allocator) std.array_list.ArrayListAligned(std.dwarf.AbbrevAttr,null)","generic": false,"ret": 1003,"args": [1312]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.AbbrevTableEntry,null)) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.AbbrevTableEntry,null).addOne)).Fn.return_type.?).ErrorUnion.error_set!*std.dwarf.AbbrevTableEntry","generic": false,"ret": 1364,"args": [1363]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.AbbrevTableEntry,null), usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.AbbrevTableEntry,null).ensureTotalCapacity)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1365,"args": [1363,965]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.AbbrevTableEntry,null), usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.AbbrevTableEntry,null).ensureTotalCapacityPrecise)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1366,"args": [1363,965]},{"kind": 18,"name": "fn(std.array_list.ArrayListAligned(std.dwarf.AbbrevTableEntry,null)) []std.dwarf.AbbrevTableEntry","generic": false,"ret": 1092,"args": [1001]},{"kind": 18,"name": "fn(std.mem.Allocator, []std.dwarf.AbbrevTableEntry, usize) std.mem.Allocator.Error![]std.dwarf.AbbrevTableEntry","generic": false,"ret": 1367,"args": [1312,1092,965]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.AbbrevTableEntry,null)) *std.dwarf.AbbrevTableEntry","generic": false,"ret": 1368,"args": [1363]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.AbbrevAttr,null), std.dwarf.AbbrevAttr) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.AbbrevAttr,null).append)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1369,"args": [1370,1004]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.AbbrevAttr,null)) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.AbbrevAttr,null).addOne)).Fn.return_type.?).ErrorUnion.error_set!*std.dwarf.AbbrevAttr","generic": false,"ret": 1371,"args": [1370]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.AbbrevAttr,null), usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.AbbrevAttr,null).ensureTotalCapacity)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1372,"args": [1370,965]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.AbbrevAttr,null), usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.AbbrevAttr,null).ensureTotalCapacityPrecise)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1373,"args": [1370,965]},{"kind": 18,"name": "fn(std.array_list.ArrayListAligned(std.dwarf.AbbrevAttr,null)) []std.dwarf.AbbrevAttr","generic": false,"ret": 1098,"args": [1003]},{"kind": 18,"name": "fn(std.mem.Allocator, []std.dwarf.AbbrevAttr, usize) std.mem.Allocator.Error![]std.dwarf.AbbrevAttr","generic": false,"ret": 1374,"args": [1312,1098,965]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.AbbrevAttr,null)) *std.dwarf.AbbrevAttr","generic": false,"ret": 1375,"args": [1370]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.AbbrevTableHeader,null)) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.AbbrevTableHeader,null).addOne)).Fn.return_type.?).ErrorUnion.error_set!*std.dwarf.AbbrevTableHeader","generic": false,"ret": 1376,"args": [1358]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.AbbrevTableHeader,null), usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.AbbrevTableHeader,null).ensureTotalCapacity)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1377,"args": [1358,965]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.AbbrevTableHeader,null), usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.AbbrevTableHeader,null).ensureTotalCapacityPrecise)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1378,"args": [1358,965]},{"kind": 18,"name": "fn(std.array_list.ArrayListAligned(std.dwarf.AbbrevTableHeader,null)) []std.dwarf.AbbrevTableHeader","generic": false,"ret": 1099,"args": [997]},{"kind": 18,"name": "fn(std.mem.Allocator, []std.dwarf.AbbrevTableHeader, usize) std.mem.Allocator.Error![]std.dwarf.AbbrevTableHeader","generic": false,"ret": 1379,"args": [1312,1099,965]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.AbbrevTableHeader,null)) *std.dwarf.AbbrevTableHeader","generic": false,"ret": 1380,"args": [1358]},{"kind": 18,"name": "fn(*std.dwarf.DwarfInfo, *std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read), *const std.array_list.ArrayListAligned(std.dwarf.AbbrevTableEntry,null), bool) @typeInfo(@typeInfo(@TypeOf(std.dwarf.DwarfInfo.parseDie)).Fn.return_type.?).ErrorUnion.error_set!?std.dwarf.Die","generic": false,"ret": 1381,"args": [1337,1343,1382,967]},{"kind": 18,"name": "fn(*const std.array_list.ArrayListAligned(std.dwarf.AbbrevTableEntry,null), u64) ?*const std.dwarf.AbbrevTableEntry","generic": false,"ret": 1383,"args": [1382,988]},{"kind": 18,"name": "fn(std.mem.Allocator) std.array_list.ArrayListAligned(std.dwarf.Attr,null)","generic": false,"ret": 1007,"args": [1312]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.Attr,null), usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.Attr,null).resize)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1384,"args": [1385,965]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.Attr,null), usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.Attr,null).ensureTotalCapacity)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1386,"args": [1385,965]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.Attr,null), usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.Attr,null).ensureTotalCapacityPrecise)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1387,"args": [1385,965]},{"kind": 18,"name": "fn(std.array_list.ArrayListAligned(std.dwarf.Attr,null)) []std.dwarf.Attr","generic": false,"ret": 1100,"args": [1007]},{"kind": 18,"name": "fn(std.mem.Allocator, []std.dwarf.Attr, usize) std.mem.Allocator.Error![]std.dwarf.Attr","generic": false,"ret": 1388,"args": [1312,1100,965]},{"kind": 18,"name": "fn(std.mem.Allocator, *std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read), u64, std.builtin.Endian, bool) anyerror!std.dwarf.FormValue","generic": false,"ret": 1389,"args": [1312,1343,988,1013,967]},{"kind": 18,"name": "fn(*const std.dwarf.Die, u64) ?*const std.dwarf.FormValue","generic": false,"ret": 1390,"args": [1391,988]},{"kind": 18,"name": "fn(*const std.dwarf.Die, *std.dwarf.DwarfInfo, u64) @typeInfo(@typeInfo(@TypeOf(std.dwarf.Die.getAttrString)).Fn.return_type.?).ErrorUnion.error_set![]const u8","generic": false,"ret": 1392,"args": [1391,1337,988]},{"kind": 18,"name": "fn(*std.dwarf.DwarfInfo, u64) @typeInfo(@typeInfo(@TypeOf(std.dwarf.DwarfInfo.getString)).Fn.return_type.?).ErrorUnion.error_set![]const u8","generic": false,"ret": 1393,"args": [1337,988]},{"kind": 18,"name": "fn(std.array_list.ArrayListAligned(std.dwarf.Attr,null)) void","generic": false,"ret": 976,"args": [1007]},{"kind": 18,"name": "fn(*const std.dwarf.Die, u64) @typeInfo(@typeInfo(@TypeOf(std.dwarf.Die.getAttrRef)).Fn.return_type.?).ErrorUnion.error_set!u64","generic": false,"ret": 1394,"args": [1391,988]},{"kind": 18,"name": "fn(*const std.dwarf.Die, u64) @typeInfo(@typeInfo(@TypeOf(std.dwarf.Die.getAttrAddr)).Fn.return_type.?).ErrorUnion.error_set!u64","generic": false,"ret": 1395,"args": [1391,988]},{"kind": 18,"name": "fn(*const std.dwarf.Constant) @typeInfo(@typeInfo(@TypeOf(std.dwarf.Constant.asUnsignedLe)).Fn.return_type.?).ErrorUnion.error_set!u64","generic": false,"ret": 1396,"args": [1397]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.Func,null), std.dwarf.Func) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.Func,null).append)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1398,"args": [1399,1010]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.Func,null)) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.Func,null).addOne)).Fn.return_type.?).ErrorUnion.error_set!*std.dwarf.Func","generic": false,"ret": 1400,"args": [1399]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.Func,null), usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.Func,null).ensureTotalCapacity)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1401,"args": [1399,965]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.Func,null), usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.Func,null).ensureTotalCapacityPrecise)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1402,"args": [1399,965]},{"kind": 18,"name": "fn(std.array_list.ArrayListAligned(std.dwarf.Func,null)) []std.dwarf.Func","generic": false,"ret": 1101,"args": [1009]},{"kind": 18,"name": "fn(std.mem.Allocator, []std.dwarf.Func, usize) std.mem.Allocator.Error![]std.dwarf.Func","generic": false,"ret": 1403,"args": [1312,1101,965]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.Func,null)) *std.dwarf.Func","generic": false,"ret": 1404,"args": [1399]},{"kind": 18,"name": "fn(*std.dwarf.DwarfInfo) @typeInfo(@typeInfo(@TypeOf(std.dwarf.DwarfInfo.scanAllCompileUnits)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1405,"args": [1337]},{"kind": 18,"name": "fn(std.mem.Allocator) std.mem.Allocator.Error!*std.dwarf.Die","generic": false,"ret": 1406,"args": [1312]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.CompileUnit,null), std.dwarf.CompileUnit) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.CompileUnit,null).append)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1407,"args": [1408,1006]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.CompileUnit,null)) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.CompileUnit,null).addOne)).Fn.return_type.?).ErrorUnion.error_set!*std.dwarf.CompileUnit","generic": false,"ret": 1409,"args": [1408]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.CompileUnit,null), usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.CompileUnit,null).ensureTotalCapacity)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1410,"args": [1408,965]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.CompileUnit,null), usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.CompileUnit,null).ensureTotalCapacityPrecise)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1411,"args": [1408,965]},{"kind": 18,"name": "fn(std.array_list.ArrayListAligned(std.dwarf.CompileUnit,null)) []std.dwarf.CompileUnit","generic": false,"ret": 1102,"args": [1005]},{"kind": 18,"name": "fn(std.mem.Allocator, []std.dwarf.CompileUnit, usize) std.mem.Allocator.Error![]std.dwarf.CompileUnit","generic": false,"ret": 1412,"args": [1312,1102,965]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.CompileUnit,null)) *std.dwarf.CompileUnit","generic": false,"ret": 1413,"args": [1408]},{"kind": 18,"name": "fn(*std.hash_map.HashMap(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80), usize, *std.debug.ModuleDebugInfo) @typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMap(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80).putNoClobber)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1414,"args": [1415,965,991]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80), std.mem.Allocator, usize, *std.debug.ModuleDebugInfo, std.hash_map.AutoContext(usize)) @typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80).putNoClobberContext)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1416,"args": [1417,1312,965,991,984]},{"kind": 18,"name": "fn(*const std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80), usize, std.hash_map.AutoContext(usize)) bool","generic": false,"ret": 967,"args": [1418,965,984]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80), std.mem.Allocator, u32, std.hash_map.AutoContext(usize)) @typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80).growIfNeeded)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1419,"args": [1417,1312,1134,984]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80), std.mem.Allocator, u32, std.hash_map.AutoContext(usize)) @typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80).grow)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1420,"args": [1417,1312,1134,984]},{"kind": 18,"name": "fn(u32) u32","generic": false,"ret": 1134,"args": [1134]},{"kind": 18,"name": "fn(*const std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80)) u32","generic": false,"ret": 1134,"args": [1418]},{"kind": 18,"name": "fn(u32) bool","generic": false,"ret": 967,"args": [1134]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80), std.mem.Allocator, u32) @typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80).allocate)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1421,"args": [1417,1312,1134]},{"kind": 18,"name": "fn(std.mem.Allocator, usize) std.mem.Allocator.Error![]align(4) u8","generic": false,"ret": 1422,"args": [1312,965]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80), std.mem.Allocator) void","generic": false,"ret": 976,"args": [1417,1312]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80)) void","generic": false,"ret": 976,"args": [1417]},{"kind": 18,"name": "fn(*const std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80)) [*]usize","generic": false,"ret": 1173,"args": [1418]},{"kind": 18,"name": "fn(*const std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80)) [*]*std.debug.ModuleDebugInfo","generic": false,"ret": 1423,"args": [1418]},{"kind": 18,"name": "fn(std.hash_map.Metadata) bool","generic": false,"ret": 967,"args": [1424]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80), usize, *std.debug.ModuleDebugInfo, std.hash_map.AutoContext(usize)) void","generic": false,"ret": 976,"args": [1417,965,991,984]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80), *std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80)) void","generic": false,"ret": 976,"args": [1417,1417]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), ?std.debug.LineInfo, usize, []const u8, []const u8, std.debug.Config) @typeInfo(@typeInfo(@TypeOf(std.debug.printLineInfo)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1425,"args": [970,1426,965,978,978,1314]},{"kind": 18,"name": "fn(*std.debug.ModuleDebugInfo, usize) @typeInfo(@typeInfo(@TypeOf(std.debug.ModuleDebugInfo.getSymbolAtAddress)).Fn.return_type.?).ErrorUnion.error_set!std.debug.SymbolInfo","generic": false,"ret": 1427,"args": [991,965]},{"kind": 18,"name": "fn(u64, *std.dwarf.DwarfInfo) @typeInfo(@typeInfo(@TypeOf(std.debug.getSymbolFromDwarf)).Fn.return_type.?).ErrorUnion.error_set!std.debug.SymbolInfo","generic": false,"ret": 1428,"args": [988,1337]},{"kind": 18,"name": "fn(*std.dwarf.DwarfInfo, u64) @typeInfo(@typeInfo(@TypeOf(std.dwarf.DwarfInfo.findCompileUnit)).Fn.return_type.?).ErrorUnion.error_set!*const std.dwarf.CompileUnit","generic": false,"ret": 1429,"args": [1337,988]},{"kind": 18,"name": "fn(*const std.dwarf.Die, u64) @typeInfo(@typeInfo(@TypeOf(std.dwarf.Die.getAttrSecOffset)).Fn.return_type.?).ErrorUnion.error_set!u64","generic": false,"ret": 1430,"args": [1391,988]},{"kind": 18,"name": "fn(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read), std.builtin.Endian) @typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readInt)).Fn.return_type.?).ErrorUnion.error_set!usize","generic": false,"ret": 1431,"args": [1025,1013]},{"kind": 18,"name": "fn(*const [4]u8, std.builtin.Endian) usize","generic": false,"ret": 965,"args": [1348,1013]},{"kind": 18,"name": "fn(*std.dwarf.DwarfInfo, u64) ?[]const u8","generic": false,"ret": 1135,"args": [1337,988]},{"kind": 18,"name": "fn(*std.dwarf.DwarfInfo, std.dwarf.CompileUnit, u64) @typeInfo(@typeInfo(@TypeOf(std.dwarf.DwarfInfo.getLineNumberInfo)).Fn.return_type.?).ErrorUnion.error_set!std.debug.LineInfo","generic": false,"ret": 1432,"args": [1337,1006,988]},{"kind": 18,"name": "fn(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read)) @typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readByteSigned)).Fn.return_type.?).ErrorUnion.error_set!i8","generic": false,"ret": 1433,"args": [1025]},{"kind": 18,"name": "fn(std.mem.Allocator, usize) std.mem.Allocator.Error![]u8","generic": false,"ret": 1434,"args": [1312,965]},{"kind": 18,"name": "fn(std.mem.Allocator, []u8) void","generic": false,"ret": 976,"args": [1312,1065]},{"kind": 18,"name": "fn(std.mem.Allocator) std.array_list.ArrayListAligned([]const u8,null)","generic": false,"ret": 1037,"args": [1312]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned([]const u8,null), []const u8) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned([]const u8,null).append)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1435,"args": [1436,978]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned([]const u8,null)) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned([]const u8,null).addOne)).Fn.return_type.?).ErrorUnion.error_set!*[]const u8","generic": false,"ret": 1437,"args": [1436]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned([]const u8,null), usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned([]const u8,null).ensureTotalCapacity)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1438,"args": [1436,965]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned([]const u8,null), usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned([]const u8,null).ensureTotalCapacityPrecise)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1439,"args": [1436,965]},{"kind": 18,"name": "fn(std.array_list.ArrayListAligned([]const u8,null)) [][]const u8","generic": false,"ret": 1108,"args": [1037]},{"kind": 18,"name": "fn(std.mem.Allocator, [][]const u8, usize) std.mem.Allocator.Error![][]const u8","generic": false,"ret": 1440,"args": [1312,1108,965]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned([]const u8,null)) *[]const u8","generic": false,"ret": 1441,"args": [1436]},{"kind": 18,"name": "fn(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read), std.mem.Allocator, u8, usize) @typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readUntilDelimiterAlloc)).Fn.return_type.?).ErrorUnion.error_set![]u8","generic": false,"ret": 1442,"args": [1025,1312,1015,965]},{"kind": 18,"name": "fn(std.mem.Allocator) std.array_list.ArrayListAligned(u8,null)","generic": false,"ret": 1038,"args": [1312]},{"kind": 18,"name": "fn(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read), *std.array_list.ArrayListAligned(u8,null), u8, usize) @typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readUntilDelimiterArrayList)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1443,"args": [1025,1444,1015,965]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(u8,null), usize) void","generic": false,"ret": 976,"args": [1444,965]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(u8,null), u8) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(u8,null).append)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1445,"args": [1444,1015]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(u8,null)) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(u8,null).addOne)).Fn.return_type.?).ErrorUnion.error_set!*u8","generic": false,"ret": 1446,"args": [1444]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(u8,null), usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(u8,null).ensureTotalCapacity)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1447,"args": [1444,965]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(u8,null), usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(u8,null).ensureTotalCapacityPrecise)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1448,"args": [1444,965]},{"kind": 18,"name": "fn(std.array_list.ArrayListAligned(u8,null)) []u8","generic": false,"ret": 1065,"args": [1038]},{"kind": 18,"name": "fn(std.mem.Allocator, []u8, usize) std.mem.Allocator.Error![]u8","generic": false,"ret": 1434,"args": [1312,1065,965]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(u8,null)) *u8","generic": false,"ret": 1449,"args": [1444]},{"kind": 18,"name": "fn(std.array_list.ArrayListAligned(u8,null)) void","generic": false,"ret": 976,"args": [1038]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(u8,null)) []u8","generic": false,"ret": 1065,"args": [1444]},{"kind": 18,"name": "fn(std.mem.Allocator) std.array_list.ArrayListAligned(std.dwarf.FileEntry,null)","generic": false,"ret": 1039,"args": [1312]},{"kind": 18,"name": "fn(bool, []const []const u8, *std.array_list.ArrayListAligned(std.dwarf.FileEntry,null), u64) std.dwarf.LineNumberProgram","generic": false,"ret": 1450,"args": [967,1178,1451,988]},{"kind": 18,"name": "fn(*std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read)) @typeInfo(@typeInfo(@TypeOf(std.leb128.readULEB128)).Fn.return_type.?).ErrorUnion.error_set!usize","generic": false,"ret": 1452,"args": [1343]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.FileEntry,null), std.dwarf.FileEntry) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.FileEntry,null).append)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1453,"args": [1451,1040]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.FileEntry,null)) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.FileEntry,null).addOne)).Fn.return_type.?).ErrorUnion.error_set!*std.dwarf.FileEntry","generic": false,"ret": 1454,"args": [1451]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.FileEntry,null), usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.FileEntry,null).ensureTotalCapacity)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1455,"args": [1451,965]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.FileEntry,null), usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.FileEntry,null).ensureTotalCapacityPrecise)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1456,"args": [1451,965]},{"kind": 18,"name": "fn(std.array_list.ArrayListAligned(std.dwarf.FileEntry,null)) []std.dwarf.FileEntry","generic": false,"ret": 1109,"args": [1039]},{"kind": 18,"name": "fn(std.mem.Allocator, []std.dwarf.FileEntry, usize) std.mem.Allocator.Error![]std.dwarf.FileEntry","generic": false,"ret": 1457,"args": [1312,1109,965]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(std.dwarf.FileEntry,null)) *std.dwarf.FileEntry","generic": false,"ret": 1458,"args": [1451]},{"kind": 18,"name": "fn(u64) std.math.error:998:44!isize","generic": false,"ret": 1459,"args": [988]},{"kind": 18,"name": "fn(std.io.seekable_stream.SeekableStream(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.SeekError,std.io.fixed_buffer_stream.GetSeekPosError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).seekTo,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).seekBy,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).getPos,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).getEndPos), i64) std.io.fixed_buffer_stream.SeekError!void","generic": false,"ret": 1340,"args": [1029,1091]},{"kind": 18,"name": "fn(*std.dwarf.LineNumberProgram) @typeInfo(@typeInfo(@TypeOf(std.dwarf.LineNumberProgram.checkLineMatch)).Fn.return_type.?).ErrorUnion.error_set!?std.debug.LineInfo","generic": false,"ret": 1460,"args": [1461]},{"kind": 18,"name": "fn(std.mem.Allocator, []const []const u8) @typeInfo(@typeInfo(@TypeOf(std.fs.path.join)).Fn.return_type.?).ErrorUnion.error_set![]u8","generic": false,"ret": 1462,"args": [1312,1178]},{"kind": 18,"name": "fn(std.mem.Allocator, u8, fn(u8) bool, []const []const u8, bool) @typeInfo(@typeInfo(@TypeOf(std.fs.path.joinSepMaybeZ)).Fn.return_type.?).ErrorUnion.error_set![]u8","generic": false,"ret": 1463,"args": [1312,1015,228,1178,967]},{"kind": 18,"name": "fn(u8) bool","generic": false,"ret": 967,"args": [1015]},{"kind": 18,"name": "fn(std.mem.Allocator, []const u8) @typeInfo(@typeInfo(@TypeOf(std.mem.Allocator.dupe)).Fn.return_type.?).ErrorUnion.error_set![]u8","generic": false,"ret": 1464,"args": [1312,978]},{"kind": 18,"name": "fn([]u8, []const u8) void","generic": false,"ret": 976,"args": [1065,978]},{"kind": 18,"name": "fn(*std.dwarf.LineNumberProgram) void","generic": false,"ret": 976,"args": [1461]},{"kind": 18,"name": "fn(*std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read)) @typeInfo(@typeInfo(@TypeOf(std.leb128.readILEB128)).Fn.return_type.?).ErrorUnion.error_set!i64","generic": false,"ret": 1465,"args": [1343]},{"kind": 18,"name": "fn(std.debug.SymbolInfo) void","generic": false,"ret": 976,"args": [1466]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:208:64) std.os.WriteError!void","generic": false,"ret": 1292,"args": [970,1467]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:113:91) std.os.WriteError!void","generic": false,"ret": 1292,"args": [970,1468]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), *std.debug.DebugInfo, std.debug.Config, ?usize) @typeInfo(@typeInfo(@TypeOf(std.debug.writeCurrentStackTrace)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1469,"args": [970,1316,1314,1172]},{"kind": 18,"name": "fn(?usize, ?usize) std.debug.StackIterator","generic": false,"ret": 1470,"args": [1172,1172]},{"kind": 18,"name": "fn(*std.debug.StackIterator) ?usize","generic": false,"ret": 1172,"args": [1471]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:117:64) std.os.WriteError!void","generic": false,"ret": 1292,"args": [970,1472]},{"kind": 18,"name": "fn(*std.Thread.StaticResetEvent.AtomicEvent) void","generic": false,"ret": 976,"args": [1473]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:322:67) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1474,"args": [970,1296]},{"kind": 18,"name": "fn([]u8) usize","generic": false,"ret": 965,"args": [1065]},{"kind": 18,"name": "fn(usize) void","generic": false,"ret": 976,"args": [965]},{"kind": 18,"name": "fn(std.os.linux.rlimit_resource, std.os.linux.rlimit) std.os.SetrlimitError!void","generic": false,"ret": 1475,"args": [1476,1477]},{"kind": 18,"name": "fn(i32) noreturn","generic": false,"ret": 1285,"args": [1084]},{"kind": 18,"name": "fn() callconv(.Inline) u8","generic": false,"ret": 1015},{"kind": 18,"name": "fn(usize) std.os.linux.errno.generic.E","generic": false,"ret": 1478,"args": [965]},{"kind": 18,"name": "fn(u6, noalias ?*const std.os.linux.Sigaction, noalias ?*std.os.linux.Sigaction) usize","generic": false,"ret": 965,"args": [1032,1300,1301]},{"kind": 18,"name": "fn(*std.Thread.Mutex.AtomicMutex, std.Thread.Mutex.State) void","generic": false,"ret": 976,"args": [1302,1479]},{"kind": 18,"name": "fn(i32, [*]const u8, usize) usize","generic": false,"ret": 965,"args": [1084,1153,965]},{"kind": 18,"name": "fn(std.os.linux.errno.generic.E) std.os.UnexpectedError","generic": false,"ret": 1480,"args": [1478]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), []const u8) std.os.WriteError!usize","generic": false,"ret": 1291,"args": [970,978]},{"kind": 18,"name": "fn(u64, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatValue)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1481,"args": [988,1307,970]},{"kind": 18,"name": "fn(u64, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatIntValue)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1482,"args": [988,1307,970]},{"kind": 18,"name": "fn(u64, u8, std.fmt.Case, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatInt)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1483,"args": [988,1015,1256,1307,970]},{"kind": 18,"name": "fn(u64) u64","generic": false,"ret": 988,"args": [988]},{"kind": 18,"name": "fn(u8, std.fmt.Case) u8","generic": false,"ret": 1015,"args": [1015,1256]},{"kind": 18,"name": "fn([]const u8, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatBuf)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1484,"args": [978,1307,970]},{"kind": 18,"name": "fn([]const u8) @typeInfo(@typeInfo(@TypeOf(std.unicode.utf8CountCodepoints)).Fn.return_type.?).ErrorUnion.error_set!usize","generic": false,"ret": 1485,"args": [978]},{"kind": 18,"name": "fn(*const [4]u8) usize","generic": false,"ret": 965,"args": [1348]},{"kind": 18,"name": "fn(u8) @typeInfo(@typeInfo(@TypeOf(std.unicode.utf8ByteSequenceLength)).Fn.return_type.?).ErrorUnion.error_set!u3","generic": false,"ret": 1486,"args": [1015]},{"kind": 18,"name": "fn([]const u8) std.unicode.Utf8DecodeError!u21","generic": false,"ret": 1487,"args": [978]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), u8, usize) std.os.WriteError!void","generic": false,"ret": 1292,"args": [970,1015,965]},{"kind": 18,"name": "fn(u32, noalias ?*const [32]u32, noalias ?*[32]u32) usize","generic": false,"ret": 965,"args": [1134,1488,1489]},{"kind": 18,"name": "fn(i32, i32) usize","generic": false,"ret": 965,"args": [1084,1084]},{"kind": 18,"name": "fn(u64, []const u8) u64","generic": false,"ret": 988,"args": [988,978]},{"kind": 18,"name": "fn(*const usize) *align(4) const [4]u8","generic": false,"ret": 1059,"args": [1055]},{"kind": 18,"name": "fn(usize, usize) bool","generic": false,"ret": 967,"args": [965,965]},{"kind": 18,"name": "fn(std.mem.Allocator) std.debug.DebugInfo","generic": false,"ret": 1490,"args": [1312]},{"kind": 18,"name": "fn(std.mem.Allocator) std.heap.arena_allocator.ArenaAllocator","generic": false,"ret": 1491,"args": [1312]},{"kind": 18,"name": "fn(*anyopaque, usize, u29, u29, usize) std.heap.error:260:82![]u8","generic": false,"ret": 1492,"args": [1493,965,1494,1494,965]},{"kind": 18,"name": "fn(*anyopaque, []u8, u29, usize, u29, usize) ?usize","generic": false,"ret": 1172,"args": [1493,1065,1494,965,1494,965]},{"kind": 18,"name": "fn(*anyopaque, []u8, u29, usize) void","generic": false,"ret": 976,"args": [1493,1065,1494,965]},{"kind": 18,"name": "fn(*std.heap.arena_allocator.ArenaAllocator) std.mem.Allocator","generic": false,"ret": 1312,"args": [1495]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:204:91) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1496,"args": [970,1313]},{"kind": 18,"name": "fn([:0]const u8, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), usize) std.os.WriteError!void","generic": false,"ret": 1292,"args": [1069,1307,970,965]},{"kind": 18,"name": "fn() bool","generic": false,"ret": 967},{"kind": 18,"name": "fn(std.fs.file.File) bool","generic": false,"ret": 967,"args": [971]},{"kind": 18,"name": "fn(?[*:0]const u8) ?[:0]const u8","generic": false,"ret": 1070,"args": [1067]},{"kind": 18,"name": "fn() usize","generic": false,"ret": 965},{"kind": 18,"name": "fn([]std.elf.Elf32_Phdr) @typeInfo(@typeInfo(@TypeOf(std.dynamic_library.linkmap_iterator)).Fn.return_type.?).ErrorUnion.error_set!std.dynamic_library.Iterator","generic": false,"ret": 1497,"args": [1297]},{"kind": 18,"name": "fn(*std.dynamic_library.Iterator) bool","generic": false,"ret": 967,"args": [1498]},{"kind": 18,"name": "fn(*std.dynamic_library.Iterator) ?*std.dynamic_library.LinkMap","generic": false,"ret": 1499,"args": [1498]},{"kind": 18,"name": "fn(std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80), usize, std.hash_map.AutoContext(usize)) ?*std.debug.ModuleDebugInfo","generic": false,"ret": 1323,"args": [994,965,984]},{"kind": 18,"name": "fn(std.mem.Allocator, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]std.debug.ModuleDebugInfo","generic": false,"ret": 1500,"args": [1312,965,1501,965]},{"kind": 18,"name": "fn([]const u8) @typeInfo(@typeInfo(@TypeOf(std.os.toPosixPath)).Fn.return_type.?).ErrorUnion.error_set![4095:0]u8","generic": false,"ret": 1502,"args": [978]},{"kind": 18,"name": "fn([]const u8, u8) ?usize","generic": false,"ret": 1172,"args": [978,1015]},{"kind": 18,"name": "fn(std.fs.Dir, [*:0]const u8, std.fs.file.OpenFlags) std.fs.file.OpenError!std.fs.file.File","generic": false,"ret": 1326,"args": [1325,1066,1327]},{"kind": 18,"name": "fn([*:0]const u8, std.fs.file.OpenFlags) std.fs.file.OpenError!std.fs.file.File","generic": false,"ret": 1326,"args": [1066,1327]},{"kind": 18,"name": "fn(std.mem.Allocator, []u8, u29, usize) callconv(.Inline) void","generic": false,"ret": 976,"args": [1312,1065,1494,965]},{"kind": 18,"name": "fn(std.fs.file.File) std.os.FStatError!std.fs.file.Stat","generic": false,"ret": 1503,"args": [971]},{"kind": 18,"name": "fn(i32) void","generic": false,"ret": 976,"args": [1084]},{"kind": 18,"name": "fn(?[*]u8, usize, usize, u32, i32, i64) usize","generic": false,"ret": 965,"args": [1504,965,965,1134,1084,1091]},{"kind": 18,"name": "fn([*:0]align(4096) const u8) usize","generic": false,"ret": 965,"args": [1018]},{"kind": 18,"name": "fn([]const u8) []const u8","generic": false,"ret": 978,"args": [978]},{"kind": 18,"name": "fn(i64) u64","generic": false,"ret": 988,"args": [1091]},{"kind": 18,"name": "fn(i64) std.math.error:998:44!usize","generic": false,"ret": 1505,"args": [1091]},{"kind": 18,"name": "fn(usize, usize) std.math.error:460:43!usize","generic": false,"ret": 1506,"args": [965,965]},{"kind": 18,"name": "fn(*const [4]u8) u32","generic": false,"ret": 1134,"args": [1348]},{"kind": 18,"name": "fn(*const [8]u8) u64","generic": false,"ret": 988,"args": [1351]},{"kind": 18,"name": "fn(*const [2]u8) u16","generic": false,"ret": 961,"args": [1354]},{"kind": 18,"name": "fn(std.mem.Allocator, []std.dwarf.AbbrevTableEntry) void","generic": false,"ret": 976,"args": [1312,1092]},{"kind": 18,"name": "fn(std.mem.Allocator, []std.dwarf.AbbrevTableEntry, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]std.dwarf.AbbrevTableEntry","generic": false,"ret": 1367,"args": [1312,1092,965,1501,965]},{"kind": 18,"name": "fn(std.mem.Allocator, []std.dwarf.AbbrevAttr, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]std.dwarf.AbbrevAttr","generic": false,"ret": 1374,"args": [1312,1098,965,1501,965]},{"kind": 18,"name": "fn(std.mem.Allocator, []std.dwarf.AbbrevTableHeader, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]std.dwarf.AbbrevTableHeader","generic": false,"ret": 1379,"args": [1312,1099,965,1501,965]},{"kind": 18,"name": "fn(std.mem.Allocator, []std.dwarf.Attr, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]std.dwarf.Attr","generic": false,"ret": 1388,"args": [1312,1100,965,1501,965]},{"kind": 18,"name": "fn(*std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read), std.builtin.Endian, bool) @typeInfo(@typeInfo(@TypeOf(std.dwarf.readAddress)).Fn.return_type.?).ErrorUnion.error_set!u64","generic": false,"ret": 1507,"args": [1343,1013,967]},{"kind": 18,"name": "fn(std.mem.Allocator, *std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read), std.builtin.Endian, usize) @typeInfo(@typeInfo(@TypeOf(std.dwarf.parseFormValueBlock)).Fn.return_type.?).ErrorUnion.error_set!std.dwarf.FormValue","generic": false,"ret": 1508,"args": [1312,1343,1013,965]},{"kind": 18,"name": "fn(std.mem.Allocator, *std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read), usize) @typeInfo(@typeInfo(@TypeOf(std.dwarf.parseFormValueBlockLen)).Fn.return_type.?).ErrorUnion.error_set!std.dwarf.FormValue","generic": false,"ret": 1509,"args": [1312,1343,965]},{"kind": 18,"name": "fn(std.mem.Allocator, *std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read), bool, std.builtin.Endian) @typeInfo(@typeInfo(@TypeOf(std.dwarf.parseFormValueConstant)).Fn.return_type.?).ErrorUnion.error_set!std.dwarf.FormValue","generic": false,"ret": 1510,"args": [1312,1343,967,1013]},{"kind": 18,"name": "fn(std.mem.Allocator, *std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read), bool, std.builtin.Endian) @typeInfo(@typeInfo(@TypeOf(std.dwarf.parseFormValueConstant)).Fn.return_type.?).ErrorUnion.error_set!std.dwarf.FormValue","generic": false,"ret": 1511,"args": [1312,1343,967,1013]},{"kind": 18,"name": "fn(std.mem.Allocator, *std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read), bool, std.builtin.Endian) @typeInfo(@typeInfo(@TypeOf(std.dwarf.parseFormValueConstant)).Fn.return_type.?).ErrorUnion.error_set!std.dwarf.FormValue","generic": false,"ret": 1512,"args": [1312,1343,967,1013]},{"kind": 18,"name": "fn(std.mem.Allocator, *std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read), bool, std.builtin.Endian) @typeInfo(@typeInfo(@TypeOf(std.dwarf.parseFormValueConstant)).Fn.return_type.?).ErrorUnion.error_set!std.dwarf.FormValue","generic": false,"ret": 1513,"args": [1312,1343,967,1013]},{"kind": 18,"name": "fn(std.mem.Allocator, *std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read), bool, std.builtin.Endian) @typeInfo(@typeInfo(@TypeOf(std.dwarf.parseFormValueConstant)).Fn.return_type.?).ErrorUnion.error_set!std.dwarf.FormValue","generic": false,"ret": 1514,"args": [1312,1343,967,1013]},{"kind": 18,"name": "fn(std.mem.Allocator, *std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read), usize) @typeInfo(@typeInfo(@TypeOf(std.dwarf.readAllocBytes)).Fn.return_type.?).ErrorUnion.error_set![]u8","generic": false,"ret": 1515,"args": [1312,1343,965]},{"kind": 18,"name": "fn(std.mem.Allocator, *std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read), std.builtin.Endian, i32) @typeInfo(@typeInfo(@TypeOf(std.dwarf.parseFormValueRef)).Fn.return_type.?).ErrorUnion.error_set!std.dwarf.FormValue","generic": false,"ret": 1516,"args": [1312,1343,1013,1084]},{"kind": 18,"name": "fn(std.mem.Allocator) std.mem.Allocator.Error!*@Frame(std.dwarf.parseFormValue)","generic": false,"ret": 1517,"args": [1312]},{"kind": 18,"name": "fn(std.mem.Allocator, *@Frame(std.dwarf.parseFormValue)) void","generic": false,"ret": 976,"args": [1312,1518]},{"kind": 18,"name": "fn([]const u8, usize, u8) ?usize","generic": false,"ret": 1172,"args": [978,965,1015]},{"kind": 18,"name": "fn(std.mem.Allocator, []std.dwarf.Attr) void","generic": false,"ret": 976,"args": [1312,1100]},{"kind": 18,"name": "fn(std.mem.Allocator, []std.dwarf.Func, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]std.dwarf.Func","generic": false,"ret": 1403,"args": [1312,1101,965,1501,965]},{"kind": 18,"name": "fn(std.mem.Allocator, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]std.dwarf.Die","generic": false,"ret": 1519,"args": [1312,965,1501,965]},{"kind": 18,"name": "fn(std.mem.Allocator, []std.dwarf.CompileUnit, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]std.dwarf.CompileUnit","generic": false,"ret": 1412,"args": [1312,1102,965,1501,965]},{"kind": 18,"name": "fn(u32) std.math.error:1078:52!u32","generic": false,"ret": 1520,"args": [1134]},{"kind": 18,"name": "fn(*const std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80)) *std.hash_map.Header","generic": false,"ret": 1521,"args": [1418]},{"kind": 18,"name": "fn(std.mem.Allocator, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]align(4) u8","generic": false,"ret": 1422,"args": [1312,965,1501,965]},{"kind": 18,"name": "fn(u64) u7","generic": false,"ret": 1522,"args": [988]},{"kind": 18,"name": "fn(*std.hash_map.Metadata, u7) void","generic": false,"ret": 976,"args": [1523,1522]},{"kind": 18,"name": "fn(std.debug.Config, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.Color) void","generic": false,"ret": 976,"args": [1314,970,1524]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:650:50) std.os.WriteError!void","generic": false,"ret": 1292,"args": [970,1525]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:658:53) std.os.WriteError!void","generic": false,"ret": 1292,"args": [970,1526]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.LineInfo) @typeInfo(@typeInfo(@TypeOf(std.debug.printLineFromFileAnyOs)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1527,"args": [970,1528]},{"kind": 18,"name": "fn(std.fs.file.File, []u8) std.os.ReadError!usize","generic": false,"ret": 1529,"args": [971,1065]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), u8) std.os.WriteError!void","generic": false,"ret": 1292,"args": [970,1015]},{"kind": 18,"name": "fn(std.mem.Allocator, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]u8","generic": false,"ret": 1434,"args": [1312,965,1501,965]},{"kind": 18,"name": "fn([]u8) []u8","generic": false,"ret": 1065,"args": [1065]},{"kind": 18,"name": "fn(std.mem.Allocator, [][]const u8, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![][]const u8","generic": false,"ret": 1440,"args": [1312,1108,965,1501,965]},{"kind": 18,"name": "fn(std.mem.Allocator, []u8, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]u8","generic": false,"ret": 1434,"args": [1312,1065,965,1501,965]},{"kind": 18,"name": "fn(std.mem.Allocator, []u8, usize) []u8","generic": false,"ret": 1065,"args": [1312,1065,965]},{"kind": 18,"name": "fn(std.mem.Allocator, []std.dwarf.FileEntry, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]std.dwarf.FileEntry","generic": false,"ret": 1457,"args": [1312,1109,965,1501,965]},{"kind": 18,"name": "fn(std.debug.LineInfo) void","generic": false,"ret": 976,"args": [1528]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:208:64) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1530,"args": [970,1467]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:113:91) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1531,"args": [970,1468]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:117:64) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1532,"args": [970,1472]},{"kind": 18,"name": "fn(*std.Thread.StaticResetEvent.AtomicEvent, ?u64) std.Thread.ResetEvent.TimedWaitResult","generic": false,"ret": 1533,"args": [1473,1534]},{"kind": 18,"name": "fn([]u8, u8) void","generic": false,"ret": 976,"args": [1065,1015]},{"kind": 18,"name": "fn([*]u8) callconv(.Inline) *std.os.linux.tls.DTV","generic": false,"ret": 1535,"args": [1107]},{"kind": 18,"name": "fn([*]u8) callconv(.Inline) *[*]u8","generic": false,"ret": 1536,"args": [1107]},{"kind": 18,"name": "fn(std.os.linux.arm-eabi.SYS, usize) usize","generic": false,"ret": 965,"args": [1537,965]},{"kind": 18,"name": "fn(std.os.linux.rlimit_resource, *const std.os.linux.rlimit) usize","generic": false,"ret": 965,"args": [1476,1538]},{"kind": 18,"name": "fn() u8","generic": false,"ret": 1015},{"kind": 18,"name": "fn() callconv(.Naked) void","generic": false,"ret": 976},{"kind": 18,"name": "fn(std.os.linux.arm-eabi.SYS, usize, usize, usize, usize) usize","generic": false,"ret": 965,"args": [1537,965,965,965,965]},{"kind": 18,"name": "fn(u8) u8","generic": false,"ret": 1015,"args": [1015]},{"kind": 18,"name": "fn() callconv(.Inline) void","generic": false,"ret": 976},{"kind": 18,"name": "fn(*const i32, u32, i32, ?*const std.os.linux.timespec) usize","generic": false,"ret": 965,"args": [1539,1134,1084,1540]},{"kind": 18,"name": "fn(std.os.linux.arm-eabi.SYS, usize, usize, usize) usize","generic": false,"ret": 965,"args": [1537,965,965,965]},{"kind": 18,"name": "fn(std.os.struct:4985:53) void","generic": false,"ret": 976,"args": [1541]},{"kind": 18,"name": "fn(std.os.linux.arm-eabi.SYS) usize","generic": false,"ret": 965,"args": [1537]},{"kind": 18,"name": "fn([]const u8) std.unicode.Utf8Decode2Error!u21","generic": false,"ret": 1542,"args": [978]},{"kind": 18,"name": "fn([]const u8) std.unicode.Utf8Decode3Error!u21","generic": false,"ret": 1543,"args": [978]},{"kind": 18,"name": "fn([]const u8) std.unicode.Utf8Decode4Error!u21","generic": false,"ret": 1544,"args": [978]},{"kind": 18,"name": "fn(std.os.linux.arm-eabi.SYS, usize, usize) usize","generic": false,"ret": 965,"args": [1537,965,965]},{"kind": 18,"name": "fn(std.mem.Allocator) std.hash_map.HashMap(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80)","generic": false,"ret": 990,"args": [1312]},{"kind": 18,"name": "fn(std.heap.arena_allocator.State, std.mem.Allocator) std.heap.arena_allocator.ArenaAllocator","generic": false,"ret": 1491,"args": [1545,1312]},{"kind": 18,"name": "fn([*]align(4096) u8, u29) ?[*]align(4096) u8","generic": false,"ret": 1334,"args": [1546,1494]},{"kind": 18,"name": "fn([]align(4096) const u8) void","generic": false,"ret": 976,"args": [1547]},{"kind": 18,"name": "fn(usize, usize, u29) usize","generic": false,"ret": 965,"args": [965,965,1494]},{"kind": 18,"name": "fn(*std.heap.arena_allocator.ArenaAllocator, usize, u29, u29, usize) @typeInfo(@typeInfo(@TypeOf(std.heap.arena_allocator.ArenaAllocator.alloc)).Fn.return_type.?).ErrorUnion.error_set![]u8","generic": false,"ret": 1548,"args": [1495,965,1494,1494,965]},{"kind": 18,"name": "fn(*std.heap.arena_allocator.ArenaAllocator, []u8, u29, usize, u29, usize) ?usize","generic": false,"ret": 1172,"args": [1495,1065,1494,965,1494,965]},{"kind": 18,"name": "fn(*std.heap.arena_allocator.ArenaAllocator, []u8, u29, usize) void","generic": false,"ret": 976,"args": [1495,1065,1494,965]},{"kind": 18,"name": "fn(*std.heap.arena_allocator.ArenaAllocator, usize, usize) @typeInfo(@typeInfo(@TypeOf(std.heap.arena_allocator.ArenaAllocator.createNode)).Fn.return_type.?).ErrorUnion.error_set!*std.linked_list.Node","generic": false,"ret": 1549,"args": [1495,965,965]},{"kind": 18,"name": "fn(std.mem.Allocator, usize, u29, u29, usize) callconv(.Inline) std.mem.Allocator.Error![]u8","generic": false,"ret": 1434,"args": [1312,965,1494,1494,965]},{"kind": 18,"name": "fn(*std.linked_list.SinglyLinkedList([]u8), *std.linked_list.Node) void","generic": false,"ret": 976,"args": [1550,1551]},{"kind": 18,"name": "fn(std.mem.Allocator, []u8, usize) ?[]u8","generic": false,"ret": 1552,"args": [1312,1065,965]},{"kind": 18,"name": "fn([]const u8) ?[]const u8","generic": false,"ret": 1135,"args": [978]},{"kind": 18,"name": "fn([*:0]const u8) ?[]const u8","generic": false,"ret": 1135,"args": [1066]},{"kind": 18,"name": "fn([*:0]const u8) [:0]const u8","generic": false,"ret": 1069,"args": [1066]},{"kind": 18,"name": "fn(usize) usize","generic": false,"ret": 965,"args": [965]},{"kind": 18,"name": "fn() ?[*]std.elf.Elf32_Dyn","generic": false,"ret": 1553},{"kind": 18,"name": "fn(usize, usize) std.math.error:454:43!usize","generic": false,"ret": 1554,"args": [965,965]},{"kind": 18,"name": "fn(i32, [*:0]const u8, u32, u32) std.os.OpenError!i32","generic": false,"ret": 1555,"args": [1084,1066,1134,1134]},{"kind": 18,"name": "fn(i32, i32) std.os.FlockError!void","generic": false,"ret": 1556,"args": [1084,1084]},{"kind": 18,"name": "fn([*:0]const u8) bool","generic": false,"ret": 967,"args": [1066]},{"kind": 18,"name": "fn(i32) std.os.FStatError!std.os.linux.arm-eabi.Stat","generic": false,"ret": 1557,"args": [1084]},{"kind": 18,"name": "fn(std.os.linux.arm-eabi.Stat) std.os.linux.timespec","generic": false,"ret": 1558,"args": [1149]},{"kind": 18,"name": "fn(i32) usize","generic": false,"ret": 965,"args": [1084]},{"kind": 18,"name": "fn(std.os.linux.arm-eabi.SYS, usize, usize, usize, usize, usize, usize) usize","generic": false,"ret": 965,"args": [1537,965,965,965,965,965,965]},{"kind": 18,"name": "fn([*:0]const u8) usize","generic": false,"ret": 965,"args": [1066]},{"kind": 18,"name": "fn([]const u8) usize","generic": false,"ret": 965,"args": [978]},{"kind": 18,"name": "fn([]std.dwarf.AbbrevTableEntry) []align(8) u8","generic": false,"ret": 1093,"args": [1092]},{"kind": 18,"name": "fn(std.mem.Allocator, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]std.dwarf.AbbrevTableEntry","generic": false,"ret": 1367,"args": [1312,965,1501,965]},{"kind": 18,"name": "fn(std.mem.Allocator, []u8, u29, usize, u29, usize) usize","generic": false,"ret": 965,"args": [1312,1065,1494,965,1494,965]},{"kind": 18,"name": "fn([]align(8) u8) []std.dwarf.AbbrevTableEntry","generic": false,"ret": 1092,"args": [1093]},{"kind": 18,"name": "fn(std.mem.Allocator, []u8, u29, usize, u29, usize) callconv(.Inline) ?usize","generic": false,"ret": 1172,"args": [1312,1065,1494,965,1494,965]},{"kind": 18,"name": "fn(std.mem.Allocator, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]std.dwarf.AbbrevAttr","generic": false,"ret": 1374,"args": [1312,965,1501,965]},{"kind": 18,"name": "fn(std.mem.Allocator, []std.dwarf.AbbrevAttr) void","generic": false,"ret": 976,"args": [1312,1098]},{"kind": 18,"name": "fn([]std.dwarf.AbbrevAttr) []align(8) u8","generic": false,"ret": 1093,"args": [1098]},{"kind": 18,"name": "fn([]align(8) u8) []std.dwarf.AbbrevAttr","generic": false,"ret": 1098,"args": [1093]},{"kind": 18,"name": "fn(std.mem.Allocator, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]std.dwarf.AbbrevTableHeader","generic": false,"ret": 1379,"args": [1312,965,1501,965]},{"kind": 18,"name": "fn(std.mem.Allocator, []std.dwarf.AbbrevTableHeader) void","generic": false,"ret": 976,"args": [1312,1099]},{"kind": 18,"name": "fn([]std.dwarf.AbbrevTableHeader) []align(8) u8","generic": false,"ret": 1093,"args": [1099]},{"kind": 18,"name": "fn([]align(8) u8) []std.dwarf.AbbrevTableHeader","generic": false,"ret": 1099,"args": [1093]},{"kind": 18,"name": "fn(std.mem.Allocator, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]std.dwarf.Attr","generic": false,"ret": 1388,"args": [1312,965,1501,965]},{"kind": 18,"name": "fn([]std.dwarf.Attr) []align(8) u8","generic": false,"ret": 1093,"args": [1100]},{"kind": 18,"name": "fn([]align(8) u8) []std.dwarf.Attr","generic": false,"ret": 1100,"args": [1093]},{"kind": 18,"name": "fn(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read), std.builtin.Endian, usize) @typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readVarInt)).Fn.return_type.?).ErrorUnion.error_set!usize","generic": false,"ret": 1559,"args": [1025,1013,965]},{"kind": 18,"name": "fn([]const u8, std.builtin.Endian) usize","generic": false,"ret": 965,"args": [978,1013]},{"kind": 18,"name": "fn(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read), std.builtin.Endian) @typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readInt)).Fn.return_type.?).ErrorUnion.error_set!u8","generic": false,"ret": 1560,"args": [1025,1013]},{"kind": 18,"name": "fn(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read)) @typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readBytesNoEof)).Fn.return_type.?).ErrorUnion.error_set![1]u8","generic": false,"ret": 1561,"args": [1025]},{"kind": 18,"name": "fn(*const [1]u8, std.builtin.Endian) u8","generic": false,"ret": 1015,"args": [1562,1013]},{"kind": 18,"name": "fn(std.mem.Allocator, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]@Frame(std.dwarf.parseFormValue)","generic": false,"ret": 1563,"args": [1312,965,1501,965]},{"kind": 18,"name": "fn(std.mem.Allocator, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]std.dwarf.Func","generic": false,"ret": 1403,"args": [1312,965,1501,965]},{"kind": 18,"name": "fn(std.mem.Allocator, []std.dwarf.Func) void","generic": false,"ret": 976,"args": [1312,1101]},{"kind": 18,"name": "fn([]std.dwarf.Func) []align(8) u8","generic": false,"ret": 1093,"args": [1101]},{"kind": 18,"name": "fn([]align(8) u8) []std.dwarf.Func","generic": false,"ret": 1101,"args": [1093]},{"kind": 18,"name": "fn(std.mem.Allocator, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]std.dwarf.CompileUnit","generic": false,"ret": 1412,"args": [1312,965,1501,965]},{"kind": 18,"name": "fn(std.mem.Allocator, []std.dwarf.CompileUnit) void","generic": false,"ret": 976,"args": [1312,1102]},{"kind": 18,"name": "fn([]std.dwarf.CompileUnit) []align(8) u8","generic": false,"ret": 1093,"args": [1102]},{"kind": 18,"name": "fn([]align(8) u8) []std.dwarf.CompileUnit","generic": false,"ret": 1102,"args": [1093]},{"kind": 18,"name": "fn(std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80), usize, std.hash_map.AutoContext(usize)) callconv(.Inline) ?usize","generic": false,"ret": 1172,"args": [994,965,984]},{"kind": 18,"name": "fn(u32) u33","generic": false,"ret": 1103,"args": [1134]},{"kind": 18,"name": "fn([]align(4) u8) []align(4) u8","generic": false,"ret": 1104,"args": [1104]},{"kind": 18,"name": "fn(std.mem.Allocator, []align(4) u8) void","generic": false,"ret": 976,"args": [1312,1104]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:650:50) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1564,"args": [970,1525]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:658:53) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1565,"args": [970,1526]},{"kind": 18,"name": "fn(usize, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), usize) std.os.WriteError!void","generic": false,"ret": 1292,"args": [965,1307,970,965]},{"kind": 18,"name": "fn(i32, []u8) std.os.ReadError!usize","generic": false,"ret": 1529,"args": [1084,1065]},{"kind": 18,"name": "fn(std.mem.Allocator, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![][]const u8","generic": false,"ret": 1440,"args": [1312,965,1501,965]},{"kind": 18,"name": "fn(std.mem.Allocator, [][]const u8) void","generic": false,"ret": 976,"args": [1312,1108]},{"kind": 18,"name": "fn([][]const u8) []align(4) u8","generic": false,"ret": 1104,"args": [1108]},{"kind": 18,"name": "fn([]align(4) u8) [][]const u8","generic": false,"ret": 1108,"args": [1104]},{"kind": 18,"name": "fn(std.mem.Allocator, []u8, usize, usize) []u8","generic": false,"ret": 1065,"args": [1312,1065,965,965]},{"kind": 18,"name": "fn(std.mem.Allocator, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]std.dwarf.FileEntry","generic": false,"ret": 1457,"args": [1312,965,1501,965]},{"kind": 18,"name": "fn(std.mem.Allocator, []std.dwarf.FileEntry) void","generic": false,"ret": 976,"args": [1312,1109]},{"kind": 18,"name": "fn([]std.dwarf.FileEntry) []align(4) u8","generic": false,"ret": 1104,"args": [1109]},{"kind": 18,"name": "fn([]align(4) u8) []std.dwarf.FileEntry","generic": false,"ret": 1109,"args": [1104]},{"kind": 18,"name": "fn(std.mem.Allocator, []const u8) void","generic": false,"ret": 976,"args": [1312,978]},{"kind": 18,"name": "fn(usize, usize) std.math.error:467:43!usize","generic": false,"ret": 1566,"args": [965,965]},{"kind": 18,"name": "fn(*const i32, u32, i32) usize","generic": false,"ret": 965,"args": [1539,1134,1084]},{"kind": 18,"name": "fn(*u32, ?u64) @typeInfo(@typeInfo(@TypeOf(std.Thread.StaticResetEvent.LinuxFutex.wait)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1567,"args": [1568,1534]},{"kind": 18,"name": "fn(i32, std.os.linux.rlimit_resource, ?*const std.os.linux.rlimit, ?*std.os.linux.rlimit) usize","generic": false,"ret": 965,"args": [1084,1476,1569,1570]},{"kind": 18,"name": "fn(i32, *const std.os.linux.siginfo_t, ?*const anyopaque) callconv(.C) noreturn","generic": false,"ret": 1285,"args": [1084,1571,1572]},{"kind": 18,"name": "fn(std.target.Set, u9) bool","generic": false,"ret": 967,"args": [957,962]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.os.struct:4985:53) std.os.WriteError!void","generic": false,"ret": 1292,"args": [970,1541]},{"kind": 18,"name": "fn(u64) std.hash.wyhash.WyhashStateless","generic": false,"ret": 1573,"args": [988]},{"kind": 18,"name": "fn(*std.hash.wyhash.WyhashStateless, []const u8) void","generic": false,"ret": 976,"args": [1574,978]},{"kind": 18,"name": "fn(*std.hash.wyhash.WyhashStateless, []const u8) u64","generic": false,"ret": 988,"args": [1574,978]},{"kind": 18,"name": "fn(u64, u64) bool","generic": false,"ret": 967,"args": [988,988]},{"kind": 18,"name": "fn([*]align(4096) u8, u29) ?usize","generic": false,"ret": 1172,"args": [1546,1494]},{"kind": 18,"name": "fn([*]const u8, usize) usize","generic": false,"ret": 965,"args": [1153,965]},{"kind": 18,"name": "fn(*anyopaque, usize, u29, u29, usize) std.mem.Allocator.Error![]u8","generic": false,"ret": 1434,"args": [1493,965,1494,1494,965]},{"kind": 18,"name": "fn(i32) bool","generic": false,"ret": 967,"args": [1084]},{"kind": 18,"name": "fn(i32, [*:0]const u8, u32, u32) usize","generic": false,"ret": 965,"args": [1084,1066,1134,1134]},{"kind": 18,"name": "fn(i32, *std.os.linux.arm-eabi.Stat) usize","generic": false,"ret": 965,"args": [1084,1150]},{"kind": 18,"name": "fn() std.os.linux.arm-eabi.Stat","generic": false,"ret": 1149},{"kind": 18,"name": "fn(*const [1]u8) u8","generic": false,"ret": 1015,"args": [1562]},{"kind": 18,"name": "fn(u64, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatValue)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1575,"args": [988,1307,970]},{"kind": 18,"name": "fn(u64, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatIntValue)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1576,"args": [988,1307,970]},{"kind": 18,"name": "fn(usize, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatValue)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1577,"args": [965,1307,970]},{"kind": 18,"name": "fn(usize, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatIntValue)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1578,"args": [965,1307,970]},{"kind": 18,"name": "fn(usize, u8, std.fmt.Case, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatInt)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1579,"args": [965,1015,1256,1307,970]},{"kind": 18,"name": "fn(usize) u32","generic": false,"ret": 1134,"args": [965]},{"kind": 18,"name": "fn(i32, [*]u8, usize) usize","generic": false,"ret": 965,"args": [1084,1107,965]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:1684:83) std.os.WriteError!void","generic": false,"ret": 1292,"args": [970,1580]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:1685:83) std.os.WriteError!void","generic": false,"ret": 1292,"args": [970,1581]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:1686:73) std.os.WriteError!void","generic": false,"ret": 1292,"args": [970,1582]},{"kind": 18,"name": "fn(usize, usize) void","generic": false,"ret": 976,"args": [965,965]},{"kind": 18,"name": "fn(*std.Progress, []const u8, usize) @typeInfo(@typeInfo(@TypeOf(std.Progress.start)).Fn.return_type.?).ErrorUnion.error_set!*std.Progress.Node","generic": false,"ret": 1583,"args": [1584,978,965]},{"kind": 18,"name": "fn() std.time.Error!std.time.Timer","generic": false,"ret": 1585},{"kind": 18,"name": "fn(*std.Progress.Node, []const u8, usize) std.Progress.Node","generic": false,"ret": 1586,"args": [1587,978,965]},{"kind": 18,"name": "fn(*std.Progress.Node) void","generic": false,"ret": 976,"args": [1587]},{"kind": 18,"name": "fn(*std.Progress) void","generic": false,"ret": 976,"args": [1584]},{"kind": 18,"name": "fn(std.special.struct:62:49) void","generic": false,"ret": 976,"args": [1588]},{"kind": 18,"name": "fn(*std.Progress, std.special.struct:76:61) void","generic": false,"ret": 976,"args": [1584,1589]},{"kind": 18,"name": "fn(std.special.struct:77:72) void","generic": false,"ret": 976,"args": [1590]},{"kind": 18,"name": "fn(*std.heap.general_purpose_allocator.GeneralPurposeAllocator((struct std.heap.general_purpose_allocator.Config constant))) bool","generic": false,"ret": 967,"args": [1591]},{"kind": 18,"name": "fn(std.special.struct:84:53) void","generic": false,"ret": 976,"args": [1592]},{"kind": 18,"name": "fn(*std.Progress, std.special.struct:95:54) void","generic": false,"ret": 976,"args": [1584,1593]},{"kind": 18,"name": "fn(std.special.struct:96:65) void","generic": false,"ret": 976,"args": [1594]},{"kind": 18,"name": "fn(*std.Progress, std.special.struct:89:48) void","generic": false,"ret": 976,"args": [1584,1595]},{"kind": 18,"name": "fn(std.special.struct:90:59) void","generic": false,"ret": 976,"args": [1596]},{"kind": 18,"name": "fn(std.special.struct:105:53) void","generic": false,"ret": 976,"args": [1597]},{"kind": 18,"name": "fn(std.special.struct:107:68) void","generic": false,"ret": 976,"args": [1598]},{"kind": 18,"name": "fn(std.special.struct:110:55) void","generic": false,"ret": 976,"args": [1599]},{"kind": 18,"name": "fn(std.special.struct:113:56) void","generic": false,"ret": 976,"args": [1600]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.os.struct:4985:53) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1601,"args": [970,1541]},{"kind": 18,"name": "fn(u16, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), usize) std.os.WriteError!void","generic": false,"ret": 1292,"args": [961,1307,970,965]},{"kind": 18,"name": "fn(u64, u64, u64) u64","generic": false,"ret": 988,"args": [988,988,988]},{"kind": 18,"name": "fn([]const u8) u64","generic": false,"ret": 988,"args": [978]},{"kind": 18,"name": "fn(u64, u64) u64","generic": false,"ret": 988,"args": [988,988]},{"kind": 18,"name": "fn([]const u8) bool","generic": false,"ret": 967,"args": [978]},{"kind": 18,"name": "fn(*std.os.linux.arm-eabi.Stat) *align(8) [104]u8","generic": false,"ret": 1151,"args": [1150]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:1684:83) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1602,"args": [970,1580]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:1685:83) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1603,"args": [970,1581]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:1686:73) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1604,"args": [970,1582]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:134:91) std.os.WriteError!void","generic": false,"ret": 1292,"args": [970,1605]},{"kind": 18,"name": "fn(std.mem.Allocator) @typeInfo(@typeInfo(@TypeOf(std.process.argsAlloc)).Fn.return_type.?).ErrorUnion.error_set![][:0]u8","generic": false,"ret": 1606,"args": [1312]},{"kind": 18,"name": "fn([]u8) std.heap.FixedBufferAllocator","generic": false,"ret": 1154,"args": [1065]},{"kind": 18,"name": "fn(*std.heap.FixedBufferAllocator) std.mem.Allocator","generic": false,"ret": 1312,"args": [1607]},{"kind": 18,"name": "fn() std.process.ArgIterator","generic": false,"ret": 1608},{"kind": 18,"name": "fn(std.mem.Allocator) std.array_list.ArrayListAligned(usize,null)","generic": false,"ret": 1155,"args": [1312]},{"kind": 18,"name": "fn(*std.process.ArgIterator, std.mem.Allocator) ?std.process.NextError![:0]u8","generic": false,"ret": 1609,"args": [1610,1312]},{"kind": 18,"name": "fn(std.array_list.ArrayListAligned(usize,null)) void","generic": false,"ret": 976,"args": [1155]},{"kind": 18,"name": "fn(*std.process.ArgIterator) void","generic": false,"ret": 976,"args": [1610]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(u8,null), []const u8) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(u8,null).appendSlice)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1611,"args": [1444,978]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(u8,null), usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(u8,null).ensureUnusedCapacity)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1612,"args": [1444,965]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(u8,null), []const u8) void","generic": false,"ret": 976,"args": [1444,978]},{"kind": 18,"name": "fn(std.mem.Allocator, [:0]u8) void","generic": false,"ret": 976,"args": [1312,1157]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(usize,null), usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(usize,null).append)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1613,"args": [1614,965]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(usize,null)) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(usize,null).addOne)).Fn.return_type.?).ErrorUnion.error_set!*usize","generic": false,"ret": 1615,"args": [1614]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(usize,null), usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(usize,null).ensureTotalCapacity)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1616,"args": [1614,965]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(usize,null), usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(usize,null).ensureTotalCapacityPrecise)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1617,"args": [1614,965]},{"kind": 18,"name": "fn(std.array_list.ArrayListAligned(usize,null)) []usize","generic": false,"ret": 1166,"args": [1155]},{"kind": 18,"name": "fn(std.mem.Allocator, []usize, usize) std.mem.Allocator.Error![]usize","generic": false,"ret": 1618,"args": [1312,1166,965]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned(usize,null)) *usize","generic": false,"ret": 1619,"args": [1614]},{"kind": 18,"name": "fn([]align(4) u8) [][:0]u8","generic": false,"ret": 1156,"args": [1104]},{"kind": 18,"name": "fn(std.special.struct:19:57) void","generic": false,"ret": 976,"args": [1620]},{"kind": 18,"name": "fn(i32, *std.os.linux.timespec) std.os.ClockGetTimeError!void","generic": false,"ret": 1621,"args": [1084,1622]},{"kind": 18,"name": "fn(*std.Thread.Mutex) bool","generic": false,"ret": 967,"args": [1290]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:62:49) std.os.WriteError!void","generic": false,"ret": 1292,"args": [970,1588]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:76:61) std.os.WriteError!void","generic": false,"ret": 1292,"args": [970,1589]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:77:72) std.os.WriteError!void","generic": false,"ret": 1292,"args": [970,1590]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged(usize,std.heap.general_purpose_allocator.LargeAlloc,std.hash_map.AutoContext(usize),80), std.mem.Allocator) void","generic": false,"ret": 976,"args": [1623,1312]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:84:53) std.os.WriteError!void","generic": false,"ret": 1292,"args": [970,1592]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:95:54) std.os.WriteError!void","generic": false,"ret": 1292,"args": [970,1593]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:96:65) std.os.WriteError!void","generic": false,"ret": 1292,"args": [970,1594]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:89:48) std.os.WriteError!void","generic": false,"ret": 1292,"args": [970,1595]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:90:59) std.os.WriteError!void","generic": false,"ret": 1292,"args": [970,1596]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:105:53) std.os.WriteError!void","generic": false,"ret": 1292,"args": [970,1597]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:107:68) std.os.WriteError!void","generic": false,"ret": 1292,"args": [970,1598]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:110:55) std.os.WriteError!void","generic": false,"ret": 1292,"args": [970,1599]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:113:56) std.os.WriteError!void","generic": false,"ret": 1292,"args": [970,1600]},{"kind": 18,"name": "fn(u16, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatValue)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1624,"args": [961,1307,970]},{"kind": 18,"name": "fn(u16, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatIntValue)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1625,"args": [961,1307,970]},{"kind": 18,"name": "fn(u16, u8, std.fmt.Case, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatInt)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1626,"args": [961,1015,1256,1307,970]},{"kind": 18,"name": "fn(u16) u16","generic": false,"ret": 961,"args": [961]},{"kind": 18,"name": "fn(u64, u64) u128","generic": false,"ret": 1158,"args": [988,988]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.debug.struct:134:91) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1627,"args": [970,1605]},{"kind": 18,"name": "fn(*std.heap.FixedBufferAllocator, usize, u29, u29, usize) @typeInfo(@typeInfo(@TypeOf(std.heap.FixedBufferAllocator.alloc)).Fn.return_type.?).ErrorUnion.error_set![]u8","generic": false,"ret": 1628,"args": [1607,965,1494,1494,965]},{"kind": 18,"name": "fn(*std.heap.FixedBufferAllocator, []u8, u29, usize, u29, usize) ?usize","generic": false,"ret": 1172,"args": [1607,1065,1494,965,1494,965]},{"kind": 18,"name": "fn(*std.heap.FixedBufferAllocator, []u8, u29, usize) void","generic": false,"ret": 976,"args": [1607,1065,1494,965]},{"kind": 18,"name": "fn([*]u8, u29) ?usize","generic": false,"ret": 1172,"args": [1107,1494]},{"kind": 18,"name": "fn(*std.process.ArgIteratorPosix) ?[:0]const u8","generic": false,"ret": 1070,"args": [1629]},{"kind": 18,"name": "fn(std.mem.Allocator, []const u8) @typeInfo(@typeInfo(@TypeOf(std.mem.Allocator.dupeZ)).Fn.return_type.?).ErrorUnion.error_set![:0]u8","generic": false,"ret": 1630,"args": [1312,978]},{"kind": 18,"name": "fn(std.mem.Allocator, []usize) void","generic": false,"ret": 976,"args": [1312,1166]},{"kind": 18,"name": "fn([:0]u8) []u8","generic": false,"ret": 1065,"args": [1157]},{"kind": 18,"name": "fn(std.mem.Allocator, []usize, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]usize","generic": false,"ret": 1618,"args": [1312,1166,965,1501,965]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:19:57) std.os.WriteError!void","generic": false,"ret": 1292,"args": [970,1620]},{"kind": 18,"name": "fn(i32, *std.os.linux.timespec) usize","generic": false,"ret": 965,"args": [1084,1622]},{"kind": 18,"name": "fn(*std.Thread.Mutex.AtomicMutex) bool","generic": false,"ret": 967,"args": [1302]},{"kind": 18,"name": "fn([]u8, std.Progress.struct:202:79) std.fmt.BufPrintError![]u8","generic": false,"ret": 1631,"args": [1065,1632]},{"kind": 18,"name": "fn([]u8, std.Progress.struct:203:77) std.fmt.BufPrintError![]u8","generic": false,"ret": 1631,"args": [1065,1633]},{"kind": 18,"name": "fn(*std.Progress, *usize, std.Progress.struct:257:46) void","generic": false,"ret": 976,"args": [1584,1619,1634]},{"kind": 18,"name": "fn(*std.Progress, *usize, std.Progress.struct:264:49) void","generic": false,"ret": 976,"args": [1584,1619,1635]},{"kind": 18,"name": "fn(*std.Progress, *usize, std.Progress.struct:268:65) void","generic": false,"ret": 976,"args": [1584,1619,1636]},{"kind": 18,"name": "fn(*std.Progress, *usize, std.Progress.struct:269:56) void","generic": false,"ret": 976,"args": [1584,1619,1637]},{"kind": 18,"name": "fn(*std.Progress, *usize, std.Progress.struct:272:65) void","generic": false,"ret": 976,"args": [1584,1619,1638]},{"kind": 18,"name": "fn(*std.Progress, *usize, std.Progress.struct:273:52) void","generic": false,"ret": 976,"args": [1584,1619,1639]},{"kind": 18,"name": "fn(*std.Progress, *usize, std.Progress.struct:280:42) void","generic": false,"ret": 976,"args": [1584,1619,1640]},{"kind": 18,"name": "fn(std.time.Timer) u64","generic": false,"ret": 988,"args": [1641]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:62:49) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1642,"args": [970,1588]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:76:61) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1643,"args": [970,1589]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:77:72) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1644,"args": [970,1590]},{"kind": 18,"name": "fn(*std.heap.general_purpose_allocator.BucketHeader, usize, usize) bool","generic": false,"ret": 967,"args": [1645,965,965]},{"kind": 18,"name": "fn(*const std.hash_map.HashMapUnmanaged(usize,std.heap.general_purpose_allocator.LargeAlloc,std.hash_map.AutoContext(usize),80)) std.hash_map.HashMapUnmanaged(usize,std.heap.general_purpose_allocator.LargeAlloc,std.hash_map.AutoContext(usize),80).FieldIterator(std.heap.general_purpose_allocator.LargeAlloc)","generic": false,"ret": 1161,"args": [1646]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged(usize,std.heap.general_purpose_allocator.LargeAlloc,std.hash_map.AutoContext(usize),80).FieldIterator(std.heap.general_purpose_allocator.LargeAlloc)) ?*std.heap.general_purpose_allocator.LargeAlloc","generic": false,"ret": 1647,"args": [1648]},{"kind": 18,"name": "fn(*std.heap.general_purpose_allocator.LargeAlloc, std.heap.general_purpose_allocator.TraceKind) std.builtin.StackTrace","generic": false,"ret": 1175,"args": [1649,1650]},{"kind": 18,"name": "fn(std.heap.general_purpose_allocator.struct:375:62) void","generic": false,"ret": 976,"args": [1651]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:84:53) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1652,"args": [970,1592]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:95:54) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1653,"args": [970,1593]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:96:65) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1654,"args": [970,1594]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:89:48) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1655,"args": [970,1595]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:90:59) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1656,"args": [970,1596]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:105:53) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1657,"args": [970,1597]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:107:68) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1658,"args": [970,1598]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:110:55) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1659,"args": [970,1599]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:113:56) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1660,"args": [970,1600]},{"kind": 18,"name": "fn(*std.heap.FixedBufferAllocator, []u8) bool","generic": false,"ret": 967,"args": [1607,1065]},{"kind": 18,"name": "fn() std.process.ArgIteratorPosix","generic": false,"ret": 1661},{"kind": 18,"name": "fn([*:0]u8) [:0]u8","generic": false,"ret": 1157,"args": [1165]},{"kind": 18,"name": "fn([]usize) []align(4) u8","generic": false,"ret": 1104,"args": [1166]},{"kind": 18,"name": "fn(std.mem.Allocator, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]usize","generic": false,"ret": 1618,"args": [1312,965,1501,965]},{"kind": 18,"name": "fn([]align(4) u8) []usize","generic": false,"ret": 1166,"args": [1104]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:19:57) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1662,"args": [970,1620]},{"kind": 18,"name": "fn(*const [0:0]u8, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), usize) std.os.WriteError!void","generic": false,"ret": 1292,"args": [1174,1307,970,965]},{"kind": 18,"name": "fn(i32, *std.os.linux.timespec) callconv(.C) usize","generic": false,"ret": 965,"args": [1084,1622]},{"kind": 18,"name": "fn([]u8) std.io.fixed_buffer_stream.FixedBufferStream([]u8)","generic": false,"ret": 1167,"args": [1065]},{"kind": 18,"name": "fn(*std.io.fixed_buffer_stream.FixedBufferStream([]u8), []const u8) std.io.fixed_buffer_stream.WriteError!usize","generic": false,"ret": 1663,"args": [1169,978]},{"kind": 18,"name": "fn(*std.io.fixed_buffer_stream.FixedBufferStream([]u8)) std.io.writer.Writer(*std.io.fixed_buffer_stream.FixedBufferStream([]u8),std.io.fixed_buffer_stream.WriteError,std.io.fixed_buffer_stream.FixedBufferStream([]u8).write)","generic": false,"ret": 1168,"args": [1169]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.fixed_buffer_stream.FixedBufferStream([]u8),std.io.fixed_buffer_stream.WriteError,std.io.fixed_buffer_stream.FixedBufferStream([]u8).write), std.Progress.struct:202:79) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1664,"args": [1168,1632]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.fixed_buffer_stream.FixedBufferStream([]u8),std.io.fixed_buffer_stream.WriteError,std.io.fixed_buffer_stream.FixedBufferStream([]u8).write), []const u8) std.io.fixed_buffer_stream.WriteError!void","generic": false,"ret": 1665,"args": [1168,978]},{"kind": 18,"name": "fn(usize, std.fmt.FormatOptions, std.io.writer.Writer(*std.io.fixed_buffer_stream.FixedBufferStream([]u8),std.io.fixed_buffer_stream.WriteError,std.io.fixed_buffer_stream.FixedBufferStream([]u8).write), usize) std.io.fixed_buffer_stream.WriteError!void","generic": false,"ret": 1665,"args": [965,1307,1168,965]},{"kind": 18,"name": "fn(std.io.fixed_buffer_stream.FixedBufferStream([]u8)) []u8","generic": false,"ret": 1065,"args": [1167]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.fixed_buffer_stream.FixedBufferStream([]u8),std.io.fixed_buffer_stream.WriteError,std.io.fixed_buffer_stream.FixedBufferStream([]u8).write), std.Progress.struct:203:77) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1666,"args": [1168,1633]},{"kind": 18,"name": "fn([]u8, std.Progress.struct:257:46) std.fmt.BufPrintError![]u8","generic": false,"ret": 1631,"args": [1065,1634]},{"kind": 18,"name": "fn([]u8, std.Progress.struct:264:49) std.fmt.BufPrintError![]u8","generic": false,"ret": 1631,"args": [1065,1635]},{"kind": 18,"name": "fn([]u8, std.Progress.struct:268:65) std.fmt.BufPrintError![]u8","generic": false,"ret": 1631,"args": [1065,1636]},{"kind": 18,"name": "fn([]u8, std.Progress.struct:269:56) std.fmt.BufPrintError![]u8","generic": false,"ret": 1631,"args": [1065,1637]},{"kind": 18,"name": "fn([]u8, std.Progress.struct:272:65) std.fmt.BufPrintError![]u8","generic": false,"ret": 1631,"args": [1065,1638]},{"kind": 18,"name": "fn([]u8, std.Progress.struct:273:52) std.fmt.BufPrintError![]u8","generic": false,"ret": 1631,"args": [1065,1639]},{"kind": 18,"name": "fn([]u8, std.Progress.struct:280:42) std.fmt.BufPrintError![]u8","generic": false,"ret": 1631,"args": [1065,1640]},{"kind": 18,"name": "fn(std.time.Timer, u64) u64","generic": false,"ret": 988,"args": [1641,988]},{"kind": 18,"name": "fn(usize, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatValue)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1667,"args": [965,1307,970]},{"kind": 18,"name": "fn(usize, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatIntValue)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1668,"args": [965,1307,970]},{"kind": 18,"name": "fn(*std.heap.general_purpose_allocator.BucketHeader, usize) *u8","generic": false,"ret": 1449,"args": [1645,965]},{"kind": 18,"name": "fn(*std.heap.general_purpose_allocator.BucketHeader, usize, u13, std.heap.general_purpose_allocator.TraceKind) std.builtin.StackTrace","generic": false,"ret": 1175,"args": [1645,965,1143,1650]},{"kind": 18,"name": "fn(std.heap.general_purpose_allocator.struct:344:74) void","generic": false,"ret": 976,"args": [1669]},{"kind": 18,"name": "fn(*const std.hash_map.HashMapUnmanaged(usize,std.heap.general_purpose_allocator.LargeAlloc,std.hash_map.AutoContext(usize),80)) u32","generic": false,"ret": 1134,"args": [1646]},{"kind": 18,"name": "fn(*const std.hash_map.HashMapUnmanaged(usize,std.heap.general_purpose_allocator.LargeAlloc,std.hash_map.AutoContext(usize),80)) [*]std.heap.general_purpose_allocator.LargeAlloc","generic": false,"ret": 1670,"args": [1646]},{"kind": 18,"name": "fn(std.hash_map.Metadata) bool","generic": false,"ret": 967,"args": [1671]},{"kind": 18,"name": "fn(*const std.hash_map.HashMapUnmanaged(usize,std.heap.general_purpose_allocator.LargeAlloc,std.hash_map.AutoContext(usize),80)) *std.hash_map.Header","generic": false,"ret": 1672,"args": [1646]},{"kind": 18,"name": "fn([]u8, []u8) bool","generic": false,"ret": 967,"args": [1065,1065]},{"kind": 18,"name": "fn([*:0]u8) usize","generic": false,"ret": 965,"args": [1165]},{"kind": 18,"name": "fn([]const u8, []const u8) usize","generic": false,"ret": 965,"args": [978,978]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.fixed_buffer_stream.FixedBufferStream([]u8),std.io.fixed_buffer_stream.WriteError,std.io.fixed_buffer_stream.FixedBufferStream([]u8).write), []const u8) std.io.fixed_buffer_stream.WriteError!usize","generic": false,"ret": 1663,"args": [1168,978]},{"kind": 18,"name": "fn(usize, std.fmt.FormatOptions, std.io.writer.Writer(*std.io.fixed_buffer_stream.FixedBufferStream([]u8),std.io.fixed_buffer_stream.WriteError,std.io.fixed_buffer_stream.FixedBufferStream([]u8).write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatValue)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1673,"args": [965,1307,1168]},{"kind": 18,"name": "fn(usize, std.fmt.FormatOptions, std.io.writer.Writer(*std.io.fixed_buffer_stream.FixedBufferStream([]u8),std.io.fixed_buffer_stream.WriteError,std.io.fixed_buffer_stream.FixedBufferStream([]u8).write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatIntValue)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1674,"args": [965,1307,1168]},{"kind": 18,"name": "fn(usize, u8, std.fmt.Case, std.fmt.FormatOptions, std.io.writer.Writer(*std.io.fixed_buffer_stream.FixedBufferStream([]u8),std.io.fixed_buffer_stream.WriteError,std.io.fixed_buffer_stream.FixedBufferStream([]u8).write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatInt)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1675,"args": [965,1015,1256,1307,1168]},{"kind": 18,"name": "fn([]const u8, std.fmt.FormatOptions, std.io.writer.Writer(*std.io.fixed_buffer_stream.FixedBufferStream([]u8),std.io.fixed_buffer_stream.WriteError,std.io.fixed_buffer_stream.FixedBufferStream([]u8).write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatBuf)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1676,"args": [978,1307,1168]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.fixed_buffer_stream.FixedBufferStream([]u8),std.io.fixed_buffer_stream.WriteError,std.io.fixed_buffer_stream.FixedBufferStream([]u8).write), u8, usize) std.io.fixed_buffer_stream.WriteError!void","generic": false,"ret": 1665,"args": [1168,1015,965]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.fixed_buffer_stream.FixedBufferStream([]u8),std.io.fixed_buffer_stream.WriteError,std.io.fixed_buffer_stream.FixedBufferStream([]u8).write), std.Progress.struct:257:46) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1677,"args": [1168,1634]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.fixed_buffer_stream.FixedBufferStream([]u8),std.io.fixed_buffer_stream.WriteError,std.io.fixed_buffer_stream.FixedBufferStream([]u8).write), std.Progress.struct:264:49) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1678,"args": [1168,1635]},{"kind": 18,"name": "fn([]const u8, std.fmt.FormatOptions, std.io.writer.Writer(*std.io.fixed_buffer_stream.FixedBufferStream([]u8),std.io.fixed_buffer_stream.WriteError,std.io.fixed_buffer_stream.FixedBufferStream([]u8).write), usize) std.io.fixed_buffer_stream.WriteError!void","generic": false,"ret": 1665,"args": [978,1307,1168,965]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.fixed_buffer_stream.FixedBufferStream([]u8),std.io.fixed_buffer_stream.WriteError,std.io.fixed_buffer_stream.FixedBufferStream([]u8).write), std.Progress.struct:268:65) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1679,"args": [1168,1636]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.fixed_buffer_stream.FixedBufferStream([]u8),std.io.fixed_buffer_stream.WriteError,std.io.fixed_buffer_stream.FixedBufferStream([]u8).write), std.Progress.struct:269:56) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1680,"args": [1168,1637]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.fixed_buffer_stream.FixedBufferStream([]u8),std.io.fixed_buffer_stream.WriteError,std.io.fixed_buffer_stream.FixedBufferStream([]u8).write), std.Progress.struct:272:65) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1681,"args": [1168,1638]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.fixed_buffer_stream.FixedBufferStream([]u8),std.io.fixed_buffer_stream.WriteError,std.io.fixed_buffer_stream.FixedBufferStream([]u8).write), std.Progress.struct:273:52) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1682,"args": [1168,1639]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.fixed_buffer_stream.FixedBufferStream([]u8),std.io.fixed_buffer_stream.WriteError,std.io.fixed_buffer_stream.FixedBufferStream([]u8).write), std.Progress.struct:280:42) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1683,"args": [1168,1640]},{"kind": 18,"name": "fn(*std.heap.general_purpose_allocator.BucketHeader, usize, u13, std.heap.general_purpose_allocator.TraceKind) *[8]usize","generic": false,"ret": 1684,"args": [1645,965,1143,1650]},{"kind": 18,"name": "fn([*]u8) [*:0]u8","generic": false,"ret": 1165,"args": [1107]},{"kind": 18,"name": "fn(*std.elf.Elf32_Verdef, i32, []const u8, [*]u8) bool","generic": false,"ret": 967,"args": [1685,1084,978,1107]},{"kind": 18,"name": "fn(std.special.struct:130:106) void","generic": false,"ret": 976,"args": [1686]},{"kind": 18,"name": "fn(std.special.struct:130:106) void","generic": false,"ret": 976,"args": [1687]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:130:106) std.os.WriteError!void","generic": false,"ret": 1292,"args": [970,1686]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:130:106) std.os.WriteError!void","generic": false,"ret": 1292,"args": [970,1687]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:130:106) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1688,"args": [970,1686]},{"kind": 18,"name": "fn(std.builtin.StackTrace, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), usize) std.os.WriteError!void","generic": false,"ret": 1292,"args": [1175,1307,970,965]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:130:106) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1689,"args": [970,1687]},{"kind": 18,"name": "fn(std.builtin.StackTrace, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)) @typeInfo(@typeInfo(@TypeOf(std.builtin.StackTrace.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1690,"args": [1175,1307,970]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.builtin.struct:74:101) std.os.WriteError!void","generic": false,"ret": 1292,"args": [970,1691]},{"kind": 18,"name": "fn(std.heap.arena_allocator.ArenaAllocator) void","generic": false,"ret": 976,"args": [1491]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.builtin.struct:79:69) std.os.WriteError!void","generic": false,"ret": 1292,"args": [970,1692]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.builtin.struct:74:101) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1693,"args": [970,1691]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.builtin.struct:79:69) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1694,"args": [970,1692]},{"kind": 18,"name": "fn(settings.enum:32:19) usize","generic": false,"ret": 965,"args": [1180]},{"kind": 18,"name": "fn(usize) settings.enum:32:19","generic": false,"ret": 1180,"args": [965]},{"kind": 18,"name": "fn(settings.enum:32:19) usize","generic": false,"ret": 965,"args": [1204]},{"kind": 18,"name": "fn(usize) settings.enum:32:19","generic": false,"ret": 1204,"args": [965]},{"kind": 18,"name": "fn(std.hash_map.StringContext, []const u8) u64","generic": false,"ret": 988,"args": [1210,978]},{"kind": 18,"name": "fn(std.hash_map.StringContext, []const u8, []const u8) bool","generic": false,"ret": 967,"args": [1210,978,978]},{"kind": 18,"name": "fn(settings.enum:32:19) usize","generic": false,"ret": 965,"args": [1233]},{"kind": 18,"name": "fn(usize) settings.enum:32:19","generic": false,"ret": 1233,"args": [965]},{"kind": 18,"name": "fn() std.bit_set.IntegerBitSet(2)","generic": false,"ret": 1239},{"kind": 18,"name": "fn(*const settings.MakeSettings([]const []const u8{\"takes_value\",\"subcommand_required\"}), settings.enum:32:19) bool","generic": false,"ret": 967,"args": [1695,1233]},{"kind": 18,"name": "fn(bool, bool) @typeInfo(@typeInfo(@TypeOf(std.testing.expectEqual)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1696,"args": [967,967]},{"kind": 18,"name": "fn(std.testing.struct:78:61) void","generic": false,"ret": 976,"args": [1697]},{"kind": 18,"name": "fn(*settings.MakeSettings([]const []const u8{\"takes_value\",\"subcommand_required\"}), settings.enum:32:19) void","generic": false,"ret": 976,"args": [1698,1233]},{"kind": 18,"name": "fn([]const u8, ?u8, ?[]const u8) Arg","generic": false,"ret": 1199,"args": [978,1106,1135]},{"kind": 18,"name": "fn([]const u8, ?u8, usize, ?[]const u8) Arg","generic": false,"ret": 1199,"args": [978,1106,965,1135]},{"kind": 18,"name": "fn([]const u8, ?u8, []const []const u8, ?[]const u8) Arg","generic": false,"ret": 1199,"args": [978,1106,1178,1135]},{"kind": 18,"name": "fn([]const u8) Arg","generic": false,"ret": 1199,"args": [978]},{"kind": 18,"name": "fn(*Arg, u8) void","generic": false,"ret": 976,"args": [1699,1015]},{"kind": 18,"name": "fn(*Arg) void","generic": false,"ret": 976,"args": [1699]},{"kind": 18,"name": "fn(*Arg, []const u8) void","generic": false,"ret": 976,"args": [1699,978]},{"kind": 18,"name": "fn(*Arg, usize) void","generic": false,"ret": 976,"args": [1699,965]},{"kind": 18,"name": "fn(*Arg, []const []const u8) void","generic": false,"ret": 976,"args": [1699,1178]},{"kind": 18,"name": "fn(*const Arg, []const u8) bool","generic": false,"ret": 967,"args": [1700,978]},{"kind": 18,"name": "fn(*Arg, settings.enum:32:19) void","generic": false,"ret": 976,"args": [1699,1180]},{"kind": 18,"name": "fn(*const Arg, settings.enum:32:19) bool","generic": false,"ret": 967,"args": [1700,1180]},{"kind": 18,"name": "fn() std.bit_set.IntegerBitSet(3)","generic": false,"ret": 1195},{"kind": 18,"name": "fn(std.mem.Allocator, []const u8) Command","generic": false,"ret": 1202,"args": [1312,978]},{"kind": 18,"name": "fn(std.mem.Allocator, []const u8, []const u8) Command","generic": false,"ret": 1202,"args": [1312,978,978]},{"kind": 18,"name": "fn(*Command) void","generic": false,"ret": 976,"args": [1701]},{"kind": 18,"name": "fn(*Command, Arg) @typeInfo(@typeInfo(@TypeOf(Command.addArg)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1702,"args": [1701,1199]},{"kind": 18,"name": "fn(*Command, []Arg) @typeInfo(@typeInfo(@TypeOf(Command.addArgs)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1703,"args": [1701,1267]},{"kind": 18,"name": "fn(*Command, Command) @typeInfo(@typeInfo(@TypeOf(Command.addSubcommand)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1704,"args": [1701,1202]},{"kind": 18,"name": "fn(*Command, []Command) @typeInfo(@typeInfo(@TypeOf(Command.addSubcommands)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1705,"args": [1701,1268]},{"kind": 18,"name": "fn(*Command, []const u8) @typeInfo(@typeInfo(@TypeOf(Command.takesSingleValue)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1706,"args": [1701,978]},{"kind": 18,"name": "fn(*Command, []const u8, usize) @typeInfo(@typeInfo(@TypeOf(Command.takesNValues)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1707,"args": [1701,978,965]},{"kind": 18,"name": "fn(*const Command) usize","generic": false,"ret": 965,"args": [1708]},{"kind": 18,"name": "fn(*const Command, u8) ?*const Arg","generic": false,"ret": 1709,"args": [1708,1015]},{"kind": 18,"name": "fn(*const Command, []const u8) ?*const Arg","generic": false,"ret": 1709,"args": [1708,978]},{"kind": 18,"name": "fn(*const Command, []const u8) ?*const Command","generic": false,"ret": 1710,"args": [1708,978]},{"kind": 18,"name": "fn(*Command, settings.enum:32:19) void","generic": false,"ret": 976,"args": [1701,1204]},{"kind": 18,"name": "fn(*const Command, settings.enum:32:19) bool","generic": false,"ret": 967,"args": [1708,1204]},{"kind": 18,"name": "fn(*const Command) Help","generic": false,"ret": 1711,"args": [1708]},{"kind": 18,"name": "fn(std.mem.Allocator) parser.ArgsContext","generic": false,"ret": 1242,"args": [1312]},{"kind": 18,"name": "fn(*parser.ArgsContext) void","generic": false,"ret": 976,"args": [1712]},{"kind": 18,"name": "fn(*parser.ArgsContext, *const Arg, parser.ArgsContext.MatchedArgValue) @typeInfo(@typeInfo(@TypeOf(parser.ArgsContext.putMatchedArg)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1713,"args": [1712,1700,1212]},{"kind": 18,"name": "fn(*parser.ArgsContext, parser.ArgsContext.MatchedSubCommand) @typeInfo(@typeInfo(@TypeOf(parser.ArgsContext.setSubcommand)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1714,"args": [1712,1715]},{"kind": 18,"name": "fn(*const parser.ArgsContext, []const u8) bool","generic": false,"ret": 967,"args": [1716,978]},{"kind": 18,"name": "fn(*const parser.ArgsContext) bool","generic": false,"ret": 967,"args": [1716]},{"kind": 18,"name": "fn(*const parser.ArgsContext, []const u8) ?[]const u8","generic": false,"ret": 1135,"args": [1716,978]},{"kind": 18,"name": "fn(*const parser.ArgsContext, []const u8) ?[][]const u8","generic": false,"ret": 1717,"args": [1716,978]},{"kind": 18,"name": "fn(*const parser.ArgsContext, []const u8) ?parser.ArgsContext","generic": false,"ret": 1718,"args": [1716,978]},{"kind": 18,"name": "fn(std.mem.Allocator, []const u8, ?[]const u8) Yazap","generic": false,"ret": 1243,"args": [1312,978,1135]},{"kind": 18,"name": "fn(*Yazap) void","generic": false,"ret": 976,"args": [1719]},{"kind": 18,"name": "fn(*Yazap, []const u8, ?[]const u8) Command","generic": false,"ret": 1202,"args": [1719,978,1135]},{"kind": 18,"name": "fn(*Yazap) *Command","generic": false,"ret": 1701,"args": [1719]},{"kind": 18,"name": "fn(*Yazap) Yazap.Error!*const parser.ArgsContext","generic": false,"ret": 1720,"args": [1719]},{"kind": 18,"name": "fn(*Yazap, []const [:0]const u8) Yazap.Error!*const parser.ArgsContext","generic": false,"ret": 1720,"args": [1719,1721]},{"kind": 18,"name": "fn(*Yazap) @typeInfo(@typeInfo(@TypeOf(Yazap.displayHelp)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1722,"args": [1719]},{"kind": 18,"name": "fn(*Yazap) @typeInfo(@typeInfo(@TypeOf(Yazap.displaySubcommandHelp)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1723,"args": [1719]},{"kind": 18,"name": "fn(*Yazap, *parser.ArgsContext) ?Help","generic": false,"ret": 1724,"args": [1719,1712]},{"kind": 18,"name": "fn(*Yazap) @typeInfo(@typeInfo(@TypeOf(Yazap.displayHelpAndExitIfFound)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1725,"args": [1719]},{"kind": 18,"name": "fn(std.enums.IndexedMap(std.enums.EnumIndexer(settings.enum:32:19),bool,std.enums.mixin.EnumMapExt), settings.enum:32:19) bool","generic": false,"ret": 967,"args": [1235,1233]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.testing.struct:78:61) std.os.WriteError!void","generic": false,"ret": 1292,"args": [970,1697]},{"kind": 18,"name": "fn(*std.enums.IndexedMap(std.enums.EnumIndexer(settings.enum:32:19),bool,std.enums.mixin.EnumMapExt), settings.enum:32:19, bool) void","generic": false,"ret": 976,"args": [1726,1233,967]},{"kind": 18,"name": "fn(*settings.MakeSettings([]const []const u8{\"takes_value\",\"takes_multiple_values\",\"allow_empty_value\"}), settings.enum:32:19) void","generic": false,"ret": 976,"args": [1727,1180]},{"kind": 18,"name": "fn(*const settings.MakeSettings([]const []const u8{\"takes_value\",\"takes_multiple_values\",\"allow_empty_value\"}), settings.enum:32:19) bool","generic": false,"ret": 967,"args": [1728,1180]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAlignedUnmanaged(Arg,null), std.mem.Allocator) void","generic": false,"ret": 976,"args": [1729,1312]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAlignedUnmanaged(Command,null), std.mem.Allocator) void","generic": false,"ret": 976,"args": [1730,1312]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAlignedUnmanaged(Arg,null), std.mem.Allocator, Arg) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAlignedUnmanaged(Arg,null).append)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1731,"args": [1729,1312,1199]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAlignedUnmanaged(Arg,null), std.mem.Allocator) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAlignedUnmanaged(Arg,null).addOne)).Fn.return_type.?).ErrorUnion.error_set!*Arg","generic": false,"ret": 1732,"args": [1729,1312]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAlignedUnmanaged(Arg,null), std.mem.Allocator, usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAlignedUnmanaged(Arg,null).ensureTotalCapacity)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1733,"args": [1729,1312,965]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAlignedUnmanaged(Arg,null), std.mem.Allocator, usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAlignedUnmanaged(Arg,null).ensureTotalCapacityPrecise)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1734,"args": [1729,1312,965]},{"kind": 18,"name": "fn(std.array_list.ArrayListAlignedUnmanaged(Arg,null)) []Arg","generic": false,"ret": 1267,"args": [1198]},{"kind": 18,"name": "fn(std.mem.Allocator, []Arg, usize) std.mem.Allocator.Error![]Arg","generic": false,"ret": 1735,"args": [1312,1267,965]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAlignedUnmanaged(Arg,null)) *Arg","generic": false,"ret": 1699,"args": [1729]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAlignedUnmanaged(Command,null), std.mem.Allocator, Command) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAlignedUnmanaged(Command,null).append)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1736,"args": [1730,1312,1202]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAlignedUnmanaged(Command,null), std.mem.Allocator) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAlignedUnmanaged(Command,null).addOne)).Fn.return_type.?).ErrorUnion.error_set!*Command","generic": false,"ret": 1737,"args": [1730,1312]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAlignedUnmanaged(Command,null), std.mem.Allocator, usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAlignedUnmanaged(Command,null).ensureTotalCapacity)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1738,"args": [1730,1312,965]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAlignedUnmanaged(Command,null), std.mem.Allocator, usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAlignedUnmanaged(Command,null).ensureTotalCapacityPrecise)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1739,"args": [1730,1312,965]},{"kind": 18,"name": "fn(std.array_list.ArrayListAlignedUnmanaged(Command,null)) []Command","generic": false,"ret": 1268,"args": [1201]},{"kind": 18,"name": "fn(std.mem.Allocator, []Command, usize) std.mem.Allocator.Error![]Command","generic": false,"ret": 1740,"args": [1312,1268,965]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAlignedUnmanaged(Command,null)) *Command","generic": false,"ret": 1701,"args": [1730]},{"kind": 18,"name": "fn(*settings.MakeSettings([]const []const u8{\"takes_value\",\"arg_required\",\"subcommand_required\"}), settings.enum:32:19) void","generic": false,"ret": 976,"args": [1741,1204]},{"kind": 18,"name": "fn(*const settings.MakeSettings([]const []const u8{\"takes_value\",\"arg_required\",\"subcommand_required\"}), settings.enum:32:19) bool","generic": false,"ret": 967,"args": [1742,1204]},{"kind": 18,"name": "fn(*const Command, ?Help.Options) Help","generic": false,"ret": 1711,"args": [1708,1743]},{"kind": 18,"name": "fn(std.mem.Allocator) std.hash_map.HashMap([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80)","generic": false,"ret": 1211,"args": [1312]},{"kind": 18,"name": "fn(*const std.hash_map.HashMap([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80)) std.hash_map.HashMapUnmanaged([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80).FieldIterator(parser.ArgsContext.MatchedArgValue)","generic": false,"ret": 1245,"args": [1744]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80).FieldIterator(parser.ArgsContext.MatchedArgValue)) ?*parser.ArgsContext.MatchedArgValue","generic": false,"ret": 1745,"args": [1746]},{"kind": 18,"name": "fn(parser.ArgsContext.MatchedArgValue) bool","generic": false,"ret": 967,"args": [1212]},{"kind": 18,"name": "fn(std.array_list.ArrayListAligned([]const u8,null)) void","generic": false,"ret": 976,"args": [1037]},{"kind": 18,"name": "fn(*std.hash_map.HashMap([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80)) void","generic": false,"ret": 976,"args": [1747]},{"kind": 18,"name": "fn(*parser.ArgsContext.MatchedSubCommand) void","generic": false,"ret": 976,"args": [1748]},{"kind": 18,"name": "fn(std.mem.Allocator, *parser.ArgsContext.MatchedSubCommand) void","generic": false,"ret": 976,"args": [1312,1748]},{"kind": 18,"name": "fn(parser.ArgsContext.MatchedArgValue) usize","generic": false,"ret": 965,"args": [1212]},{"kind": 18,"name": "fn(std.hash_map.HashMap([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80), []const u8) ?*parser.ArgsContext.MatchedArgValue","generic": false,"ret": 1745,"args": [1211,978]},{"kind": 18,"name": "fn(*std.hash_map.HashMap([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80), []const u8, parser.ArgsContext.MatchedArgValue) @typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMap([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80).put)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1749,"args": [1747,978,1212]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned([]const u8,null), []const []const u8) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned([]const u8,null).appendSlice)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1750,"args": [1436,1178]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned([]const u8,null)) [][]const u8","generic": false,"ret": 1108,"args": [1436]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned([]const u8,null), usize) @typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned([]const u8,null).ensureUnusedCapacity)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1751,"args": [1436,965]},{"kind": 18,"name": "fn(*std.array_list.ArrayListAligned([]const u8,null), []const []const u8) void","generic": false,"ret": 976,"args": [1436,1178]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80), std.mem.Allocator, []const u8, parser.ArgsContext.MatchedArgValue, std.hash_map.StringContext) @typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMapUnmanaged([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80).putContext)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1752,"args": [1753,1312,978,1212,1210]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80), std.mem.Allocator, []const u8, std.hash_map.StringContext) @typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMapUnmanaged([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80).getOrPutContext)).Fn.return_type.?).ErrorUnion.error_set!std.hash_map.GetOrPutResult","generic": false,"ret": 1754,"args": [1753,1312,978,1210]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80), std.mem.Allocator, []const u8, std.hash_map.StringContext, std.hash_map.StringContext) @typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMapUnmanaged([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80).getOrPutContextAdapted)).Fn.return_type.?).ErrorUnion.error_set!std.hash_map.GetOrPutResult","generic": false,"ret": 1755,"args": [1753,1312,978,1210,1210]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80), std.mem.Allocator, u32, std.hash_map.StringContext) @typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMapUnmanaged([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80).growIfNeeded)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1756,"args": [1753,1312,1134,1210]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80), std.mem.Allocator, u32, std.hash_map.StringContext) @typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMapUnmanaged([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80).grow)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1757,"args": [1753,1312,1134,1210]},{"kind": 18,"name": "fn(*const std.hash_map.HashMapUnmanaged([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80)) u32","generic": false,"ret": 1134,"args": [1758]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80), std.mem.Allocator, u32) @typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMapUnmanaged([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80).allocate)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1759,"args": [1753,1312,1134]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80), std.mem.Allocator) void","generic": false,"ret": 976,"args": [1753,1312]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80)) void","generic": false,"ret": 976,"args": [1753]},{"kind": 18,"name": "fn(*const std.hash_map.HashMapUnmanaged([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80)) [*][]const u8","generic": false,"ret": 1136,"args": [1758]},{"kind": 18,"name": "fn(*const std.hash_map.HashMapUnmanaged([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80)) [*]parser.ArgsContext.MatchedArgValue","generic": false,"ret": 1760,"args": [1758]},{"kind": 18,"name": "fn(std.hash_map.Metadata) bool","generic": false,"ret": 967,"args": [1761]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80), []const u8, parser.ArgsContext.MatchedArgValue, std.hash_map.StringContext) void","generic": false,"ret": 976,"args": [1753,978,1212,1210]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80), *std.hash_map.HashMapUnmanaged([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80)) void","generic": false,"ret": 976,"args": [1753,1753]},{"kind": 18,"name": "fn(std.hash_map.HashMapUnmanaged([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80), []const u8, std.hash_map.StringContext) callconv(.Inline) ?usize","generic": false,"ret": 1172,"args": [1214,978,1210]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80), []const u8, std.hash_map.StringContext) std.hash_map.GetOrPutResult","generic": false,"ret": 1762,"args": [1753,978,1210]},{"kind": 18,"name": "fn(std.mem.Allocator) std.mem.Allocator.Error!*parser.ArgsContext.MatchedSubCommand","generic": false,"ret": 1763,"args": [1312]},{"kind": 18,"name": "fn(std.hash_map.HashMap([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80), []const u8) bool","generic": false,"ret": 967,"args": [1211,978]},{"kind": 18,"name": "fn(std.hash_map.HashMap([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80)) u32","generic": false,"ret": 1134,"args": [1211]},{"kind": 18,"name": "fn(std.hash_map.HashMap([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80), []const u8) ?parser.ArgsContext.MatchedArgValue","generic": false,"ret": 1764,"args": [1211,978]},{"kind": 18,"name": "fn(std.mem.Allocator, []const [:0]u8) void","generic": false,"ret": 976,"args": [1312,1765]},{"kind": 18,"name": "fn(std.mem.Allocator, parser.tokenizer.Tokenizer, *const Command) parser.Parser","generic": false,"ret": 1766,"args": [1312,1767,1708]},{"kind": 18,"name": "fn([]const [:0]const u8) parser.tokenizer.Tokenizer","generic": false,"ret": 1767,"args": [1721]},{"kind": 18,"name": "fn(*parser.Parser) parser.Parser.Error!parser.ArgsContext","generic": false,"ret": 1768,"args": [1769]},{"kind": 18,"name": "fn(*parser.ErrorBuilder) std.os.WriteError!void","generic": false,"ret": 1292,"args": [1770]},{"kind": 18,"name": "fn(*Help, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)) @typeInfo(@typeInfo(@TypeOf(Help.writeAll)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1771,"args": [1772,970]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)) std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write))","generic": false,"ret": 1247,"args": [970]},{"kind": 18,"name": "fn(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)), []const u8) std.os.WriteError!usize","generic": false,"ret": 1291,"args": [1252,978]},{"kind": 18,"name": "fn(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write))) std.io.writer.Writer(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)),std.os.WriteError,std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)).write)","generic": false,"ret": 1251,"args": [1252]},{"kind": 18,"name": "fn(*Help, std.io.writer.Writer(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)),std.os.WriteError,std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)).write)) @typeInfo(@typeInfo(@TypeOf(Help.writeDescription)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1773,"args": [1772,1251]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)),std.os.WriteError,std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)).write), Help.struct:56:34) std.os.WriteError!void","generic": false,"ret": 1292,"args": [1251,1774]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)),std.os.WriteError,std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)).write)) callconv(.Inline) @typeInfo(@typeInfo(@TypeOf(Help.writeNewLine)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1775,"args": [1251]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)),std.os.WriteError,std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)).write), u8) std.os.WriteError!void","generic": false,"ret": 1292,"args": [1251,1015]},{"kind": 18,"name": "fn(*Help, std.io.writer.Writer(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)),std.os.WriteError,std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)).write)) @typeInfo(@typeInfo(@TypeOf(Help.writeHeader)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1776,"args": [1772,1251]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)),std.os.WriteError,std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)).write), []const u8) std.os.WriteError!void","generic": false,"ret": 1292,"args": [1251,978]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)),std.os.WriteError,std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)).write), Help.struct:67:39) std.os.WriteError!void","generic": false,"ret": 1292,"args": [1251,1777]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)),std.os.WriteError,std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)).write), Help.struct:69:31) std.os.WriteError!void","generic": false,"ret": 1292,"args": [1251,1778]},{"kind": 18,"name": "fn(bool) callconv(.Inline) std.meta.struct:953:38","generic": false,"ret": 1258,"args": [967]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)),std.os.WriteError,std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)).write), Help.struct:75:45) std.os.WriteError!void","generic": false,"ret": 1292,"args": [1251,1779]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)),std.os.WriteError,std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)).write), Help.struct:83:44) std.os.WriteError!void","generic": false,"ret": 1292,"args": [1251,1780]},{"kind": 18,"name": "fn(*Help, std.io.writer.Writer(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)),std.os.WriteError,std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)).write)) @typeInfo(@typeInfo(@TypeOf(Help.writeCommands)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1781,"args": [1772,1251]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)),std.os.WriteError,std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)).write), Help.struct:96:40) std.os.WriteError!void","generic": false,"ret": 1292,"args": [1251,1782]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)),std.os.WriteError,std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)).write), Help.struct:97:62) std.os.WriteError!void","generic": false,"ret": 1292,"args": [1251,1783]},{"kind": 18,"name": "fn(*Help, std.io.writer.Writer(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)),std.os.WriteError,std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)).write)) @typeInfo(@typeInfo(@TypeOf(Help.writeOptions)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1784,"args": [1772,1251]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)),std.os.WriteError,std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)).write), Help.struct:110:45) std.os.WriteError!void","generic": false,"ret": 1292,"args": [1251,1785]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)),std.os.WriteError,std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)).write), Help.struct:118:58) std.os.WriteError!void","generic": false,"ret": 1292,"args": [1251,1264]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)),std.os.WriteError,std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)).write), Help.struct:129:50) std.os.WriteError!void","generic": false,"ret": 1292,"args": [1251,1786]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)),std.os.WriteError,std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)).write), Help.struct:138:48) std.os.WriteError!void","generic": false,"ret": 1292,"args": [1251,1787]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)),std.os.WriteError,std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)).write), Help.struct:144:44) std.os.WriteError!void","generic": false,"ret": 1292,"args": [1251,1788]},{"kind": 18,"name": "fn(*Help, std.io.writer.Writer(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)),std.os.WriteError,std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)).write)) @typeInfo(@typeInfo(@TypeOf(Help.writeFooter)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1789,"args": [1772,1251]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)),std.os.WriteError,std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)).write), Help.struct:158:14) std.os.WriteError!void","generic": false,"ret": 1292,"args": [1251,1790]},{"kind": 18,"name": "fn(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write))) @typeInfo(@typeInfo(@TypeOf(std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)).flush)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1791,"args": [1252]},{"kind": 18,"name": "fn(*std.fifo.LinearFifo(u8,std.fifo.LinearFifoBufferType { .Static = 4096}), usize) []const u8","generic": false,"ret": 978,"args": [1792,965]},{"kind": 18,"name": "fn(*std.fifo.LinearFifo(u8,std.fifo.LinearFifoBufferType { .Static = 4096}), usize) void","generic": false,"ret": 976,"args": [1792,965]},{"kind": 18,"name": "fn(std.bit_set.IntegerBitSet(2), usize) bool","generic": false,"ret": 967,"args": [1239,965]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.testing.struct:78:61) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1793,"args": [970,1697]},{"kind": 18,"name": "fn(bool, std.fmt.FormatOptions, std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), usize) std.os.WriteError!void","generic": false,"ret": 1292,"args": [967,1307,970,965]},{"kind": 18,"name": "fn(*std.bit_set.IntegerBitSet(2), usize) void","generic": false,"ret": 976,"args": [1794,965]},{"kind": 18,"name": "fn(*std.enums.IndexedMap(std.enums.EnumIndexer(settings.enum:32:19),bool,std.enums.mixin.EnumMapExt), settings.enum:32:19, bool) void","generic": false,"ret": 976,"args": [1795,1180,967]},{"kind": 18,"name": "fn(*std.enums.IndexedMap(std.enums.EnumIndexer(settings.enum:32:19),bool,std.enums.mixin.EnumMapExt), settings.enum:32:19) void","generic": false,"ret": 976,"args": [1795,1180]},{"kind": 18,"name": "fn(std.enums.IndexedMap(std.enums.EnumIndexer(settings.enum:32:19),bool,std.enums.mixin.EnumMapExt), settings.enum:32:19) bool","generic": false,"ret": 967,"args": [1189,1180]},{"kind": 18,"name": "fn(std.mem.Allocator, []Arg) void","generic": false,"ret": 976,"args": [1312,1267]},{"kind": 18,"name": "fn(std.mem.Allocator, []Command) void","generic": false,"ret": 976,"args": [1312,1268]},{"kind": 18,"name": "fn(std.mem.Allocator, []Arg, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]Arg","generic": false,"ret": 1735,"args": [1312,1267,965,1501,965]},{"kind": 18,"name": "fn(std.mem.Allocator, []Command, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]Command","generic": false,"ret": 1740,"args": [1312,1268,965,1501,965]},{"kind": 18,"name": "fn(*std.enums.IndexedMap(std.enums.EnumIndexer(settings.enum:32:19),bool,std.enums.mixin.EnumMapExt), settings.enum:32:19, bool) void","generic": false,"ret": 976,"args": [1796,1204,967]},{"kind": 18,"name": "fn(*std.enums.IndexedMap(std.enums.EnumIndexer(settings.enum:32:19),bool,std.enums.mixin.EnumMapExt), settings.enum:32:19) void","generic": false,"ret": 976,"args": [1796,1204]},{"kind": 18,"name": "fn(std.enums.IndexedMap(std.enums.EnumIndexer(settings.enum:32:19),bool,std.enums.mixin.EnumMapExt), settings.enum:32:19) bool","generic": false,"ret": 967,"args": [1206,1204]},{"kind": 18,"name": "fn(*const std.hash_map.HashMapUnmanaged([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80)) std.hash_map.HashMapUnmanaged([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80).FieldIterator(parser.ArgsContext.MatchedArgValue)","generic": false,"ret": 1245,"args": [1758]},{"kind": 18,"name": "fn(std.hash_map.HashMapUnmanaged([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80), []const u8, std.hash_map.StringContext) ?*parser.ArgsContext.MatchedArgValue","generic": false,"ret": 1745,"args": [1214,978,1210]},{"kind": 18,"name": "fn(std.mem.Allocator, [][]const u8, usize) [][]const u8","generic": false,"ret": 1108,"args": [1312,1108,965]},{"kind": 18,"name": "fn([][]const u8, []const []const u8) void","generic": false,"ret": 976,"args": [1108,1178]},{"kind": 18,"name": "fn(*const std.hash_map.HashMapUnmanaged([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80)) *std.hash_map.Header","generic": false,"ret": 1797,"args": [1758]},{"kind": 18,"name": "fn(*const std.hash_map.HashMapUnmanaged([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80), []const u8, std.hash_map.StringContext) bool","generic": false,"ret": 967,"args": [1758,978,1210]},{"kind": 18,"name": "fn(*std.hash_map.Metadata, u7) void","generic": false,"ret": 976,"args": [1798,1522]},{"kind": 18,"name": "fn(std.mem.Allocator, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]parser.ArgsContext.MatchedSubCommand","generic": false,"ret": 1799,"args": [1312,965,1501,965]},{"kind": 18,"name": "fn(std.hash_map.HashMapUnmanaged([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80), []const u8, std.hash_map.StringContext) ?parser.ArgsContext.MatchedArgValue","generic": false,"ret": 1764,"args": [1214,978,1210]},{"kind": 18,"name": "fn(std.mem.Allocator, []align(4) const u8) void","generic": false,"ret": 976,"args": [1312,1269]},{"kind": 18,"name": "fn() parser.ErrorBuilder","generic": false,"ret": 1800},{"kind": 18,"name": "fn(*parser.ErrorBuilder, *const Command) callconv(.Inline) void","generic": false,"ret": 976,"args": [1770,1708]},{"kind": 18,"name": "fn(*parser.tokenizer.Tokenizer) ?parser.tokenizer.Token","generic": false,"ret": 1801,"args": [1802]},{"kind": 18,"name": "fn(*parser.ErrorBuilder, []const u8) callconv(.Inline) void","generic": false,"ret": 976,"args": [1770,978]},{"kind": 18,"name": "fn(*const parser.tokenizer.Token) bool","generic": false,"ret": 967,"args": [1803]},{"kind": 18,"name": "fn(*parser.Parser, *const parser.tokenizer.Token) parser.Parser.Error!void","generic": false,"ret": 1804,"args": [1769,1803]},{"kind": 18,"name": "fn(*parser.ErrorBuilder, parser.Parser.Error) callconv(.Inline) void","generic": false,"ret": 976,"args": [1770,1805]},{"kind": 18,"name": "fn(*parser.Parser, *const parser.tokenizer.Token) parser.Parser.InternalError!void","generic": false,"ret": 1806,"args": [1769,1803]},{"kind": 18,"name": "fn(*parser.Parser, []const u8) parser.Parser.Error!parser.ArgsContext.MatchedSubCommand","generic": false,"ret": 1807,"args": [1769,978]},{"kind": 18,"name": "fn(parser.ErrorBuilder.struct:44:69) void","generic": false,"ret": 976,"args": [1808]},{"kind": 18,"name": "fn(parser.ErrorBuilder.struct:45:75) void","generic": false,"ret": 976,"args": [1809]},{"kind": 18,"name": "fn(parser.ErrorBuilder.struct:46:121) void","generic": false,"ret": 976,"args": [1810]},{"kind": 18,"name": "fn(parser.ErrorBuilder.struct:47:126) void","generic": false,"ret": 976,"args": [1811]},{"kind": 18,"name": "fn(parser.ErrorBuilder.struct:48:109) void","generic": false,"ret": 976,"args": [1812]},{"kind": 18,"name": "fn(parser.ErrorBuilder.struct:49:104) void","generic": false,"ret": 976,"args": [1813]},{"kind": 18,"name": "fn(parser.ErrorBuilder.struct:50:121) void","generic": false,"ret": 976,"args": [1814]},{"kind": 18,"name": "fn(parser.ErrorBuilder.struct:51:113) void","generic": false,"ret": 976,"args": [1815]},{"kind": 18,"name": "fn(parser.ErrorBuilder.struct:53:79) void","generic": false,"ret": 976,"args": [1816]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)),std.os.WriteError,std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)).write), parser.ErrorBuilder.struct:64:61) std.os.WriteError!void","generic": false,"ret": 1292,"args": [1251,1817]},{"kind": 18,"name": "fn(parser.ErrorBuilder.struct:68:108) void","generic": false,"ret": 976,"args": [1818]},{"kind": 18,"name": "fn(parser.ErrorBuilder.struct:84:16) void","generic": false,"ret": 976,"args": [1819]},{"kind": 18,"name": "fn(parser.ErrorBuilder.struct:86:64) void","generic": false,"ret": 976,"args": [1820]},{"kind": 18,"name": "fn() std.fifo.LinearFifo(u8,std.fifo.LinearFifoBufferType { .Static = 4096})","generic": false,"ret": 1249},{"kind": 18,"name": "fn(std.fifo.LinearFifo(u8,std.fifo.LinearFifoBufferType { .Static = 4096})) usize","generic": false,"ret": 965,"args": [1249]},{"kind": 18,"name": "fn(*std.fifo.LinearFifo(u8,std.fifo.LinearFifoBufferType { .Static = 4096}), []const u8) void","generic": false,"ret": 976,"args": [1792,978]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)),std.os.WriteError,std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)).write), Help.struct:56:34) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1821,"args": [1251,1774]},{"kind": 18,"name": "fn([]const u8, std.fmt.FormatOptions, std.io.writer.Writer(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)),std.os.WriteError,std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)).write), usize) std.os.WriteError!void","generic": false,"ret": 1292,"args": [978,1307,1251,965]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)),std.os.WriteError,std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)).write), []const u8) std.os.WriteError!usize","generic": false,"ret": 1291,"args": [1251,978]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)),std.os.WriteError,std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)).write), Help.struct:67:39) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1822,"args": [1251,1777]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)),std.os.WriteError,std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)).write), Help.struct:69:31) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1823,"args": [1251,1778]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)),std.os.WriteError,std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)).write), Help.struct:75:45) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1824,"args": [1251,1779]},{"kind": 18,"name": "fn(u8, std.fmt.FormatOptions, std.io.writer.Writer(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)),std.os.WriteError,std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)).write), usize) std.os.WriteError!void","generic": false,"ret": 1292,"args": [1015,1307,1251,965]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)),std.os.WriteError,std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)).write), Help.struct:83:44) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1825,"args": [1251,1780]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)),std.os.WriteError,std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)).write), Help.struct:96:40) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1826,"args": [1251,1782]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)),std.os.WriteError,std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)).write), Help.struct:97:62) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1827,"args": [1251,1783]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)),std.os.WriteError,std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)).write), Help.struct:110:45) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1828,"args": [1251,1785]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)),std.os.WriteError,std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)).write), Help.struct:118:58) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1829,"args": [1251,1264]},{"kind": 18,"name": "fn(*const [2:0]u8, std.fmt.FormatOptions, std.io.writer.Writer(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)),std.os.WriteError,std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)).write), usize) std.os.WriteError!void","generic": false,"ret": 1292,"args": [1270,1307,1251,965]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)),std.os.WriteError,std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)).write), Help.struct:129:50) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1830,"args": [1251,1786]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)),std.os.WriteError,std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)).write), Help.struct:138:48) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1831,"args": [1251,1787]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)),std.os.WriteError,std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)).write), Help.struct:144:44) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1832,"args": [1251,1788]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)),std.os.WriteError,std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)).write), Help.struct:158:14) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1833,"args": [1251,1790]},{"kind": 18,"name": "fn(*std.fifo.LinearFifo(u8,std.fifo.LinearFifoBufferType { .Static = 4096}), usize) []u8","generic": false,"ret": 1065,"args": [1792,965]},{"kind": 18,"name": "fn(usize) u2","generic": false,"ret": 1240,"args": [965]},{"kind": 18,"name": "fn(*std.bit_set.IntegerBitSet(3), usize) void","generic": false,"ret": 976,"args": [1834,965]},{"kind": 18,"name": "fn(std.bit_set.IntegerBitSet(3), usize) bool","generic": false,"ret": 967,"args": [1195,965]},{"kind": 18,"name": "fn([]Arg) []align(4) u8","generic": false,"ret": 1104,"args": [1267]},{"kind": 18,"name": "fn([]Command) []align(4) u8","generic": false,"ret": 1104,"args": [1268]},{"kind": 18,"name": "fn(std.mem.Allocator, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]Arg","generic": false,"ret": 1735,"args": [1312,965,1501,965]},{"kind": 18,"name": "fn([]align(4) u8) []Arg","generic": false,"ret": 1267,"args": [1104]},{"kind": 18,"name": "fn(std.mem.Allocator, usize, std.mem.Allocator.Exact, usize) std.mem.Allocator.Error![]Command","generic": false,"ret": 1740,"args": [1312,965,1501,965]},{"kind": 18,"name": "fn([]align(4) u8) []Command","generic": false,"ret": 1268,"args": [1104]},{"kind": 18,"name": "fn(std.mem.Allocator, [][]const u8, usize, usize) [][]const u8","generic": false,"ret": 1108,"args": [1312,1108,965,965]},{"kind": 18,"name": "fn([]align(4) const u8) []align(4) const u8","generic": false,"ret": 1269,"args": [1269]},{"kind": 18,"name": "fn(*parser.tokenizer.Tokenizer) ?[]const u8","generic": false,"ret": 1135,"args": [1802]},{"kind": 18,"name": "fn([]const u8) parser.tokenizer.Token","generic": false,"ret": 1835,"args": [978]},{"kind": 18,"name": "fn([]const u8, parser.tokenizer.Tag) parser.tokenizer.Token","generic": false,"ret": 1835,"args": [978,1836]},{"kind": 18,"name": "fn(*parser.Parser, *const Arg, []const u8, bool) parser.Parser.InternalError!void","generic": false,"ret": 1806,"args": [1769,1700,978,967]},{"kind": 18,"name": "fn(*parser.tokenizer.Tokenizer) ?[]const [:0]const u8","generic": false,"ret": 1837,"args": [1802]},{"kind": 18,"name": "fn([]const u8, parser.ArgsContext) parser.ArgsContext.MatchedSubCommand","generic": false,"ret": 1715,"args": [978,1242]},{"kind": 18,"name": "fn([]const u8) parser.ArgsContext.MatchedSubCommand","generic": false,"ret": 1715,"args": [978]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)),std.os.WriteError,std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)).write), parser.ErrorBuilder.struct:64:61) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1838,"args": [1251,1817]},{"kind": 18,"name": "fn([]const u8, std.fmt.FormatOptions, std.io.writer.Writer(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)),std.os.WriteError,std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)).write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatBuf)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1839,"args": [978,1307,1251]},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)),std.os.WriteError,std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)).write), u8, usize) std.os.WriteError!void","generic": false,"ret": 1292,"args": [1251,1015,965]},{"kind": 18,"name": "fn(u8, std.fmt.FormatOptions, std.io.writer.Writer(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)),std.os.WriteError,std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)).write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatValue)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1840,"args": [1015,1307,1251]},{"kind": 18,"name": "fn(u8, std.fmt.FormatOptions, std.io.writer.Writer(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)),std.os.WriteError,std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)).write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatIntValue)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1841,"args": [1015,1307,1251]},{"kind": 18,"name": "fn(u8, std.fmt.FormatOptions, std.io.writer.Writer(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)),std.os.WriteError,std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)).write)) @typeInfo(@typeInfo(@TypeOf(std.fmt.formatAsciiChar)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1842,"args": [1015,1307,1251]},{"kind": 18,"name": "fn(usize) u3","generic": false,"ret": 1171,"args": [965]},{"kind": 18,"name": "fn([]const u8, []const u8) []const u8","generic": false,"ret": 978,"args": [978,978]},{"kind": 18,"name": "fn([]const u8, usize, []const u8) bool","generic": false,"ret": 967,"args": [978,965,978]},{"kind": 18,"name": "fn([]const u8, []const u8) std.mem.SplitIterator(u8)","generic": false,"ret": 1278,"args": [978,978]},{"kind": 18,"name": "fn(*std.mem.SplitIterator(u8)) ?[]const u8","generic": false,"ret": 1135,"args": [1843]},{"kind": 18,"name": "fn(*parser.Parser, *const Arg, *std.array_list.ArrayListAligned([]const u8,null), []const u8) parser.Parser.InternalError!void","generic": false,"ret": 1806,"args": [1769,1700,1436,978]},{"kind": 18,"name": "fn(*parser.Parser, *const Arg, *std.array_list.ArrayListAligned([]const u8,null), usize) parser.Parser.InternalError!void","generic": false,"ret": 1806,"args": [1769,1700,1436,965]},{"kind": 18,"name": "fn(*parser.Parser, *const Arg, *std.array_list.ArrayListAligned([]const u8,null)) parser.Parser.InternalError!void","generic": false,"ret": 1806,"args": [1769,1700,1436]},{"kind": 18,"name": "fn(*const parser.tokenizer.Token) std.meta.struct:953:38","generic": false,"ret": 1279,"args": [1803]},{"kind": 18,"name": "fn([]const u8, ?[]const u8) parser.Parser.ShortOption","generic": false,"ret": 1844,"args": [978,1135]},{"kind": 18,"name": "fn(*parser.Parser.ShortOption) ?*const u8","generic": false,"ret": 1845,"args": [1846]},{"kind": 18,"name": "fn(*parser.ErrorBuilder, *const Arg) callconv(.Inline) void","generic": false,"ret": 976,"args": [1770,1700]},{"kind": 18,"name": "fn(*parser.Parser.ShortOption) bool","generic": false,"ret": 967,"args": [1846]},{"kind": 18,"name": "fn(*parser.Parser.ShortOption) ?[]const u8","generic": false,"ret": 1135,"args": [1846]},{"kind": 18,"name": "fn(*parser.Parser, *const Arg, ?[]const u8) parser.Parser.InternalError!void","generic": false,"ret": 1806,"args": [1769,1700,1135]},{"kind": 18,"name": "fn([]const u8, usize, []const u8) ?usize","generic": false,"ret": 1172,"args": [978,965,978]},{"kind": 18,"name": "fn([]const u8, []const u8) std.mem.TokenIterator(u8)","generic": false,"ret": 1281,"args": [978,978]},{"kind": 18,"name": "fn(*std.mem.TokenIterator(u8)) ?[]const u8","generic": false,"ret": 1135,"args": [1847]},{"kind": 18,"name": "fn(std.mem.TokenIterator(u8)) []const u8","generic": false,"ret": 978,"args": [1281]},{"kind": 18,"name": "fn(std.special.struct:130:106) void","generic": false,"ret": 976,"args": [1848]},{"kind": 18,"name": "fn(std.special.struct:130:106) void","generic": false,"ret": 976,"args": [1849]},{"kind": 18,"name": "fn(std.special.struct:130:106) void","generic": false,"ret": 976,"args": [1850]},{"kind": 18,"name": "fn(std.special.struct:130:106) void","generic": false,"ret": 976,"args": [1851]},{"kind": 18,"name": "fn(std.special.struct:130:106) void","generic": false,"ret": 976,"args": [1852]},{"kind": 18,"name": "fn(std.special.struct:130:106) void","generic": false,"ret": 976,"args": [1853]},{"kind": 18,"name": "fn(std.special.struct:130:106) void","generic": false,"ret": 976,"args": [1854]},{"kind": 18,"name": "fn(std.special.struct:130:106) void","generic": false,"ret": 976,"args": [1855]},{"kind": 18,"name": "fn(std.special.struct:130:106) void","generic": false,"ret": 976,"args": [1856]},{"kind": 18,"name": "fn(std.special.struct:130:106) void","generic": false,"ret": 976,"args": [1857]},{"kind": 18,"name": "fn(std.special.struct:130:106) void","generic": false,"ret": 976,"args": [1858]},{"kind": 18,"name": "fn(std.special.struct:130:106) void","generic": false,"ret": 976,"args": [1859]},{"kind": 18,"name": "fn([]const u8, *[256]usize) void","generic": false,"ret": 976,"args": [978,1860]},{"kind": 18,"name": "fn(std.mem.TokenIterator(u8), u8) bool","generic": false,"ret": 967,"args": [1281,1015]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:130:106) std.os.WriteError!void","generic": false,"ret": 1292,"args": [970,1848]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:130:106) std.os.WriteError!void","generic": false,"ret": 1292,"args": [970,1849]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:130:106) std.os.WriteError!void","generic": false,"ret": 1292,"args": [970,1850]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:130:106) std.os.WriteError!void","generic": false,"ret": 1292,"args": [970,1851]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:130:106) std.os.WriteError!void","generic": false,"ret": 1292,"args": [970,1852]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:130:106) std.os.WriteError!void","generic": false,"ret": 1292,"args": [970,1853]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:130:106) std.os.WriteError!void","generic": false,"ret": 1292,"args": [970,1854]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:130:106) std.os.WriteError!void","generic": false,"ret": 1292,"args": [970,1855]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:130:106) std.os.WriteError!void","generic": false,"ret": 1292,"args": [970,1856]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:130:106) std.os.WriteError!void","generic": false,"ret": 1292,"args": [970,1857]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:130:106) std.os.WriteError!void","generic": false,"ret": 1292,"args": [970,1858]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:130:106) std.os.WriteError!void","generic": false,"ret": 1292,"args": [970,1859]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:130:106) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1861,"args": [970,1848]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:130:106) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1862,"args": [970,1849]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:130:106) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1863,"args": [970,1850]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:130:106) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1864,"args": [970,1851]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:130:106) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1865,"args": [970,1852]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:130:106) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1866,"args": [970,1853]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:130:106) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1867,"args": [970,1854]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:130:106) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1868,"args": [970,1855]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:130:106) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1869,"args": [970,1856]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:130:106) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1870,"args": [970,1857]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:130:106) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1871,"args": [970,1858]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), std.special.struct:130:106) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1872,"args": [970,1859]},{"kind": 18,"name": "fn(parser.tokenizer.Token, parser.tokenizer.Tag) @typeInfo(@typeInfo(@TypeOf(parser.tokenizer.expectToken)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1873,"args": [1835,1836]},{"kind": 18,"name": "fn(bool) @typeInfo(@typeInfo(@TypeOf(std.testing.expect)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1874,"args": [967]},{"kind": 18,"name": "fn(parser.tokenizer.struct:183:61) void","generic": false,"ret": 976,"args": [1875]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), parser.tokenizer.struct:183:61) std.os.WriteError!void","generic": false,"ret": 1292,"args": [970,1875]},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write), parser.tokenizer.struct:183:61) @typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set!void","generic": false,"ret": 1876,"args": [970,1875]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 0},{"kind": 8,"name": "std.target.Feature.feature_set_fns(std.target.arm.Feature)","src": 688,"pubDecls": [0,1,2,3],"privDecls": []},{"kind": 16,"name": "std.target.arm.Feature","src": 689,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172]},{"kind": 8,"name": "std.target.Set","src": 690,"pubDecls": [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],"privDecls": [],"fields": [1878]},{"kind": 18,"name": "fn(std.builtin.Signedness,anytype) anytype","generic": true,"args": [960,null]},{"kind": 4,"u": 288},{"kind": 16,"name": "std.builtin.Signedness","src": 691,"pubDecls": [],"privDecls": [],"fields": [0,1]},{"kind": 4,"u": 16},{"kind": 4,"u": 9},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 4,"u": 5},{"kind": 4,"u": 32},{"kind": 6,"len": 2,"const": true,"elem": 956},{"kind": 2},{"kind": 16,"name": "std.target.Arch","src": 692,"pubDecls": [21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40],"privDecls": [41],"fields": [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56]},{"kind": 18,"name": "fn(type,anytype,anytype) anytype","generic": true,"args": [954,null,null]},{"kind": 8,"name": "std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)","src": 693,"pubDecls": [42,43,44,45,46,47,48,49,50,51,52,53],"privDecls": [54],"fields": [971]},{"kind": 8,"name": "std.fs.file.File","src": 694,"pubDecls": [55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128],"privDecls": [129,130,131],"fields": [1084,1889,1889]},{"kind": 15,"name": "std.os.WriteError","errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 6,"len": 2,"elem": 1890},{"kind": 8,"name": "(root)","src": 695,"pubDecls": [132,133,134,135,136],"privDecls": [137],"file": 0},{"kind": 1,"name": "void"},{"kind": 18,"name": "fn(anytype) anytype","generic": true,"args": [null]},{"kind": 6,"len": 2,"const": true,"elem": 1015},{"kind": 7,"len": 0,"elem": 1015},{"kind": 18,"name": "fn(anytype) anytype","generic": true,"args": [null]},{"kind": 8,"name": "std.fmt.Placeholder","src": 696,"pubDecls": [],"privDecls": [],"fields": [978,1015,1891,1892,1892,1892]},{"kind": 7,"len": 1,"elem": 1015},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 8,"name": "std.hash_map.AutoContext(usize)","src": 697,"pubDecls": [138,139],"privDecls": []},{"kind": 18,"name": "fn(type,anytype) anytype","generic": true,"args": [954,null]},{"kind": 18,"name": "fn(type,anytype) anytype","generic": true,"args": [954,null]},{"kind": 18,"name": "fn(type,anytype,anytype,anytype) anytype","generic": true,"args": [954,null,null,null]},{"kind": 4,"u": 64},{"kind": 18,"name": "fn(type,anytype,anytype,anytype) anytype","generic": true,"args": [954,null,null,null]},{"kind": 8,"name": "std.hash_map.HashMap(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80)","src": 698,"pubDecls": [140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192],"privDecls": [193],"fields": [994,1312,984]},{"kind": 6,"elem": 1894},{"kind": 18,"name": "fn(type,anytype) anytype","generic": true,"args": [954,null]},{"kind": 18,"name": "fn(type,anytype,anytype,anytype) anytype","generic": true,"args": [954,null,null,null]},{"kind": 8,"name": "std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80)","src": 699,"pubDecls": [194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264],"privDecls": [265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281],"fields": [1899,1134,1134]},{"kind": 18,"name": "fn(type,anytype) anytype","generic": true,"args": [954,null]},{"kind": 18,"name": "fn(type,anytype) anytype","generic": true,"args": [954,null]},{"kind": 8,"name": "std.array_list.ArrayListAligned(std.dwarf.AbbrevTableHeader,null)","src": 700,"pubDecls": [282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321],"privDecls": [322,323],"fields": [1099,965,1312]},{"kind": 8,"name": "std.dwarf.AbbrevTableHeader","src": 701,"pubDecls": [],"privDecls": [],"fields": [988,1001]},{"kind": 13,"child": 1494},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 8,"name": "std.array_list.ArrayListAligned(std.dwarf.AbbrevTableEntry,null)","src": 700,"pubDecls": [324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363],"privDecls": [364,365],"fields": [1092,965,1312]},{"kind": 8,"name": "std.dwarf.AbbrevTableEntry","src": 702,"pubDecls": [],"privDecls": [],"fields": [967,988,988,1003]},{"kind": 8,"name": "std.array_list.ArrayListAligned(std.dwarf.AbbrevAttr,null)","src": 700,"pubDecls": [366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405],"privDecls": [406,407],"fields": [1098,965,1312]},{"kind": 8,"name": "std.dwarf.AbbrevAttr","src": 703,"pubDecls": [],"privDecls": [],"fields": [988,988]},{"kind": 8,"name": "std.array_list.ArrayListAligned(std.dwarf.CompileUnit,null)","src": 700,"pubDecls": [408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447],"privDecls": [448,449],"fields": [1102,965,1312]},{"kind": 8,"name": "std.dwarf.CompileUnit","src": 704,"pubDecls": [],"privDecls": [],"fields": [961,967,1901,1902]},{"kind": 8,"name": "std.array_list.ArrayListAligned(std.dwarf.Attr,null)","src": 700,"pubDecls": [450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489],"privDecls": [490,491],"fields": [1100,965,1312]},{"kind": 8,"name": "std.dwarf.Attr","src": 705,"pubDecls": [],"privDecls": [],"fields": [988,1903]},{"kind": 8,"name": "std.array_list.ArrayListAligned(std.dwarf.Func,null)","src": 700,"pubDecls": [492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531],"privDecls": [532,533],"fields": [1101,965,1312]},{"kind": 8,"name": "std.dwarf.Func","src": 706,"pubDecls": [],"privDecls": [],"fields": [1902,1135]},{"kind": 16,"name": "std.target.Tag","src": 707,"pubDecls": [534,535,536,537],"privDecls": [],"fields": [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]},{"kind": 8,"name": "std.target.Target","src": 708,"pubDecls": [538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592],"privDecls": [],"fields": [1908,1904,1906]},{"kind": 16,"name": "std.builtin.Endian","src": 709,"pubDecls": [],"privDecls": [],"fields": [0,1]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 4,"u": 8},{"kind": 6,"len": 1,"align": 4096,"const": true,"elem": 1015},{"kind": 18,"name": "fn(type,anytype) anytype","generic": true,"args": [954,null]},{"kind": 6,"len": 1,"align": 4096,"const": true,"elem": 1015},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 6,"len": 2,"align": 4096,"const": true,"elem": 1015},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 8,"name": "std.io.fixed_buffer_stream.FixedBufferStream([]const u8)","src": 710,"pubDecls": [593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610],"privDecls": [611],"fields": [978,965]},{"kind": 18,"name": "fn(type,anytype,anytype) anytype","generic": true,"args": [954,null,null]},{"kind": 8,"name": "std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read)","src": 711,"pubDecls": [612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638],"privDecls": [639],"fields": [1026]},{"kind": 6,"elem": 1023},{"kind": 15,"name": "std.io.fixed_buffer_stream.ReadError","errors": []},{"kind": 18,"name": "fn(type,anytype,anytype,anytype,anytype,anytype,anytype) anytype","generic": true,"args": [954,null,null,null,null,null,null]},{"kind": 8,"name": "std.io.seekable_stream.SeekableStream(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.SeekError,std.io.fixed_buffer_stream.GetSeekPosError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).seekTo,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).seekBy,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).getPos,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).getEndPos)","src": 712,"pubDecls": [640,641,642,643,644,645],"privDecls": [646],"fields": [1026]},{"kind": 15,"name": "std.io.fixed_buffer_stream.SeekError","errors": []},{"kind": 15,"name": "std.io.fixed_buffer_stream.GetSeekPosError","errors": []},{"kind": 4,"u": 6},{"kind": 18,"name": "fn(anytype,anytype) anytype","generic": true,"args": [null,null]},{"kind": 10,"name": "comptime_int"},{"kind": 18,"name": "fn(anytype,anytype,anytype) anytype","generic": true,"args": [null,null,null]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 8,"name": "std.array_list.ArrayListAligned([]const u8,null)","src": 700,"pubDecls": [647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686],"privDecls": [687,688],"fields": [1108,965,1312]},{"kind": 8,"name": "std.array_list.ArrayListAligned(u8,null)","src": 700,"pubDecls": [689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728],"privDecls": [729,730],"fields": [1065,965,1312]},{"kind": 8,"name": "std.array_list.ArrayListAligned(std.dwarf.FileEntry,null)","src": 700,"pubDecls": [731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770],"privDecls": [771,772],"fields": [1109,965,1312]},{"kind": 8,"name": "std.dwarf.FileEntry","src": 713,"pubDecls": [],"privDecls": [],"fields": [978,965,965,965]},{"kind": 18,"name": "fn(type,anytype,anytype) anytype","generic": true,"args": [954,null,null]},{"kind": 18,"name": "fn([]const u8) anytype","generic": true,"args": [978]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 18,"name": "fn([]const u8) anytype","generic": true,"args": [978]},{"kind": 18,"name": "fn(anytype) anytype","generic": true,"args": [null]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 16,"name": "@typeInfo(std.builtin.TypeInfo).Union.tag_type.?","src": 714,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]},{"kind": 17,"name": "std.builtin.TypeInfo","src": 714,"pubDecls": [773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794],"privDecls": [],"fields": [976,976,976,976,1916,1917,1918,1919,1921,976,976,976,976,1922,1923,1925,1926,1928,1930,1930,1931,1932,1933,1934,976]},{"kind": 18,"name": "fn(@typeInfo(std.builtin.TypeInfo).Union.tag_type.?) anytype","generic": true,"args": [1050]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 6,"const": true,"elem": 965},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 18,"name": "fn(type,anytype,anytype) anytype","generic": true,"args": [954,null,null]},{"kind": 6,"align": 4,"const": true,"elem": 1061},{"kind": 16,"name": "std.builtin.Size","src": 715,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3]},{"kind": 7,"len": 4,"elem": 1015},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 8,"name": "std.linked_list.SinglyLinkedList([]u8)","src": 716,"pubDecls": [795,796,797,798,799],"privDecls": [800],"fields": [1937]},{"kind": 6,"len": 2,"elem": 1015},{"kind": 6,"len": 1,"const": true,"elem": 1015},{"kind": 13,"child": 1066},{"kind": 18,"name": "fn(type,anytype) anytype","generic": true,"args": [954,null]},{"kind": 6,"len": 2,"const": true,"elem": 1015},{"kind": 13,"child": 1069},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 4,"i": 32},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 8,"name": "std.atomic.queue.Queue(anyframe)","src": 717,"pubDecls": [801,802,803,804,805,806,807,808,809,810],"privDecls": [],"fields": [1940,1940,1941]},{"kind": 22},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 8,"name": "std.linked_list.TailQueue(anyframe)","src": 718,"pubDecls": [811,812,813,814,815,816,817,818,819],"privDecls": [820],"fields": [1940,1940,965]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 8,"name": "std.atomic.Atomic.Atomic(std.Thread.enum:338:27)","src": 719,"pubDecls": [821,822,823,824,825,826,827,828],"privDecls": [829,830,831,832],"fields": [1082]},{"kind": 16,"name": "std.Thread.enum:338:27","src": 720,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 8,"name": "std.atomic.Atomic.Atomic(i32)","src": 719,"pubDecls": [833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851],"privDecls": [852,853,854,855],"fields": [1084]},{"kind": 4,"i": 32},{"kind": 8,"name": "std.atomic.queue.Queue(std.event.loop.Request)","src": 717,"pubDecls": [856,857,858,859,860,861,862,863,864,865],"privDecls": [],"fields": [1944,1944,1941]},{"kind": 8,"name": "std.event.loop.Request","src": 721,"pubDecls": [866,867,868],"privDecls": [],"fields": [1947,1946]},{"kind": 8,"name": "std.linked_list.TailQueue(std.event.loop.Request)","src": 718,"pubDecls": [869,870,871,872,873,874,875,876,877],"privDecls": [878],"fields": [1944,1944,965]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 8,"name": "std.atomic.stack.Stack(std.event.loop.EventFd)","src": 722,"pubDecls": [879,880,881,882,883,884,885],"privDecls": [886],"fields": [1950,967]},{"kind": 8,"name": "std.event.loop.EventFd","src": 723,"pubDecls": [],"privDecls": [],"fields": [1951,1134,1084]},{"kind": 4,"i": 64},{"kind": 6,"len": 2,"elem": 1002},{"kind": 6,"len": 2,"align": 8,"elem": 1015},{"kind": 18,"name": "fn(@typeInfo(std.builtin.TypeInfo).Union.tag_type.?) anytype","generic": true,"args": [1050]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 18,"name": "fn(type,anytype) anytype","generic": true,"args": [954,null]},{"kind": 6,"len": 2,"elem": 1004},{"kind": 6,"len": 2,"elem": 998},{"kind": 6,"len": 2,"elem": 1008},{"kind": 6,"len": 2,"elem": 1010},{"kind": 6,"len": 2,"elem": 1006},{"kind": 4,"u": 33},{"kind": 6,"len": 2,"align": 4,"elem": 1015},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 13,"child": 1015},{"kind": 6,"len": 1,"elem": 1015},{"kind": 6,"len": 2,"elem": 978},{"kind": 6,"len": 2,"elem": 1040},{"kind": 8,"name": "std.atomic.struct:62:94","src": 724,"pubDecls": [],"privDecls": [],"fields": [1164,1164]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 18,"name": "fn(std.target.Set,anytype) anytype","generic": true,"args": [957,null]},{"kind": 13,"child": 1002},{"kind": 6,"len": 1,"align": 8,"elem": 1015},{"kind": 6,"len": 1,"elem": 1002},{"kind": 13,"child": 1004},{"kind": 6,"len": 1,"elem": 1004},{"kind": 13,"child": 998},{"kind": 6,"len": 1,"elem": 998},{"kind": 13,"child": 1008},{"kind": 6,"len": 1,"elem": 1008},{"kind": 13,"child": 1010},{"kind": 6,"len": 1,"elem": 1010},{"kind": 13,"child": 1006},{"kind": 6,"len": 1,"elem": 1006},{"kind": 6,"len": 1,"align": 4,"elem": 1015},{"kind": 4,"u": 32},{"kind": 13,"child": 978},{"kind": 6,"len": 1,"elem": 978},{"kind": 13,"child": 1040},{"kind": 6,"len": 1,"elem": 1040},{"kind": 18,"name": "fn(std.heap.general_purpose_allocator.Config) anytype","generic": true,"args": [1141]},{"kind": 8,"name": "std.heap.general_purpose_allocator.GeneralPurposeAllocator((struct std.heap.general_purpose_allocator.Config constant))","src": 725,"pubDecls": [887,888,889,890,891],"privDecls": [892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921],"fields": [1312,1954,1144,976,976,976,1941]},{"kind": 8,"name": "std.heap.general_purpose_allocator.Config","src": 726,"pubDecls": [],"privDecls": [],"fields": [965,967,967,967,1955,967,967,967]},{"kind": 18,"name": "fn(anytype) anytype","generic": true,"args": [null]},{"kind": 4,"u": 13},{"kind": 8,"name": "std.hash_map.HashMapUnmanaged(usize,std.heap.general_purpose_allocator.LargeAlloc,std.hash_map.AutoContext(usize),80)","src": 699,"pubDecls": [922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992],"privDecls": [993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009],"fields": [1957,1134,1134]},{"kind": 8,"name": "std.heap.general_purpose_allocator.LargeAlloc","src": 727,"pubDecls": [],"privDecls": [1010,1011,1012,1013],"fields": [1065,976,1958,976,976]},{"kind": 18,"name": "fn(type,anytype) anytype","generic": true,"args": [954,null]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 16,"name": "std.builtin.ContainerLayout","src": 728,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 8,"name": "std.os.linux.arm-eabi.Stat","src": 729,"pubDecls": [1014,1015,1016],"privDecls": [],"fields": [988,1134,1134,1134,1134,1134,1134,988,1134,1091,1084,1091,1558,1558,1558,988]},{"kind": 6,"elem": 1149},{"kind": 6,"align": 8,"elem": 1152},{"kind": 7,"len": 104,"elem": 1015},{"kind": 6,"len": 1,"const": true,"elem": 1015},{"kind": 8,"name": "std.heap.FixedBufferAllocator","src": 730,"pubDecls": [1017,1018,1019,1020,1021,1022,1023],"privDecls": [1024,1025,1026,1027],"fields": [965,1065]},{"kind": 8,"name": "std.array_list.ArrayListAligned(usize,null)","src": 700,"pubDecls": [1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067],"privDecls": [1068,1069],"fields": [1166,965,1312]},{"kind": 6,"len": 2,"elem": 1157},{"kind": 6,"len": 2,"elem": 1015},{"kind": 4,"u": 128},{"kind": 6,"len": 1,"elem": 1157},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 8,"name": "std.hash_map.HashMapUnmanaged(usize,std.heap.general_purpose_allocator.LargeAlloc,std.hash_map.AutoContext(usize),80).FieldIterator(std.heap.general_purpose_allocator.LargeAlloc)","src": 731,"pubDecls": [1070],"privDecls": [],"fields": [965,1961,1670]},{"kind": 18,"name": "fn(@Type(.EnumLiteral)) anytype","generic": true,"args": [1164]},{"kind": 8,"name": "std.log.scoped(gpa)","src": 732,"pubDecls": [1071,1072,1073,1074,1075,1076,1077,1078],"privDecls": []},{"kind": 24},{"kind": 6,"len": 1,"elem": 1015},{"kind": 6,"len": 2,"elem": 965},{"kind": 8,"name": "std.io.fixed_buffer_stream.FixedBufferStream([]u8)","src": 710,"pubDecls": [1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096],"privDecls": [1097],"fields": [1065,965]},{"kind": 8,"name": "std.io.writer.Writer(*std.io.fixed_buffer_stream.FixedBufferStream([]u8),std.io.fixed_buffer_stream.WriteError,std.io.fixed_buffer_stream.FixedBufferStream([]u8).write)","src": 693,"pubDecls": [1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109],"privDecls": [1110],"fields": [1169]},{"kind": 6,"elem": 1167},{"kind": 15,"name": "std.io.fixed_buffer_stream.WriteError","errors": [12]},{"kind": 4,"u": 3},{"kind": 13,"child": 965},{"kind": 6,"len": 1,"elem": 965},{"kind": 6,"const": true,"elem": 1964},{"kind": 8,"name": "std.builtin.StackTrace","src": 733,"pubDecls": [1111],"privDecls": [],"fields": [965,1166]},{"kind": 18,"name": "fn([]const []const u8) anytype","generic": true,"args": [1178]},{"kind": 8,"name": "settings.MakeSettings([]const []const u8{\"takes_value\",\"takes_multiple_values\",\"allow_empty_value\"})","src": 734,"pubDecls": [1112,1113,1114,1115],"privDecls": [1116],"fields": [1189]},{"kind": 6,"len": 2,"const": true,"elem": 978},{"kind": 18,"name": "fn([]const []const u8) anytype","generic": true,"args": [1178]},{"kind": 16,"name": "settings.enum:32:19","src": 735,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 6,"len": 2,"const": true,"elem": 1184},{"kind": 18,"name": "fn(void,std.builtin.EnumField,anytype) anytype","generic": true,"args": [976,1184,null]},{"kind": 8,"name": "std.builtin.EnumField","src": 736,"pubDecls": [],"privDecls": [],"fields": [978,1034]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 8,"name": "std.enums.EnumIndexer(settings.enum:32:19)","src": 737,"pubDecls": [1117,1118,1119,1120],"privDecls": []},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 18,"name": "fn(type,anytype,anytype) anytype","generic": true,"args": [954,null,null]},{"kind": 8,"name": "std.enums.IndexedMap(std.enums.EnumIndexer(settings.enum:32:19),bool,std.enums.mixin.EnumMapExt)","src": 738,"pubDecls": [1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143],"privDecls": [1144,1145],"fields": [1195,1968]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 18,"name": "fn(type,anytype) anytype","generic": true,"args": [954,null]},{"kind": 8,"name": "std.enums.mixin.EnumMapExt(std.enums.IndexedMap(std.enums.EnumIndexer(settings.enum:32:19),bool,std.enums.mixin.EnumMapExt))","src": 739,"pubDecls": [1140,1141,1142,1143],"privDecls": []},{"kind": 18,"name": "fn(u16) anytype","generic": true,"args": [961]},{"kind": 8,"name": "std.bit_set.IntegerBitSet(3)","src": 740,"pubDecls": [1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165],"privDecls": [1166,1167,1168,1169],"fields": [1171]},{"kind": 18,"name": "fn(usize) anytype","generic": true,"args": [965]},{"kind": 18,"name": "fn(type,anytype) anytype","generic": true,"args": [954,null]},{"kind": 8,"name": "std.array_list.ArrayListAlignedUnmanaged(Arg,null)","src": 741,"pubDecls": [1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206],"privDecls": [1207,1208],"fields": [1267,965]},{"kind": 8,"name": "Arg","src": 742,"pubDecls": [1209,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222],"privDecls": [1223,1224,1225,1226],"fields": [978,1106,1135,1135,1172,1172,1970,1135,1177],"file": 4},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 8,"name": "std.array_list.ArrayListAlignedUnmanaged(Command,null)","src": 741,"pubDecls": [1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263],"privDecls": [1264,1265],"fields": [1268,965]},{"kind": 8,"name": "Command","src": 743,"pubDecls": [1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284],"privDecls": [1285,1286,1287,1288,1289,1290,1291,1292,1293],"fields": [1312,978,1135,1198,1198,1201,1203],"file": 5},{"kind": 8,"name": "settings.MakeSettings([]const []const u8{\"takes_value\",\"arg_required\",\"subcommand_required\"})","src": 734,"pubDecls": [1294,1295,1296,1297],"privDecls": [1298],"fields": [1206]},{"kind": 16,"name": "settings.enum:32:19","src": 735,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 8,"name": "std.enums.EnumIndexer(settings.enum:32:19)","src": 737,"pubDecls": [1299,1300,1301,1302],"privDecls": []},{"kind": 8,"name": "std.enums.IndexedMap(std.enums.EnumIndexer(settings.enum:32:19),bool,std.enums.mixin.EnumMapExt)","src": 738,"pubDecls": [1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325],"privDecls": [1326,1327],"fields": [1195,1968]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 8,"name": "std.enums.mixin.EnumMapExt(std.enums.IndexedMap(std.enums.EnumIndexer(settings.enum:32:19),bool,std.enums.mixin.EnumMapExt))","src": 739,"pubDecls": [1322,1323,1324,1325],"privDecls": []},{"kind": 8,"name": "std.hash_map.StringContext","src": 744,"pubDecls": [1328,1329],"privDecls": []},{"kind": 8,"name": "std.hash_map.HashMap([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80)","src": 698,"pubDecls": [1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1352,1353,1354,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382],"privDecls": [1383],"fields": [1214,1312,1210]},{"kind": 17,"name": "parser.ArgsContext.MatchedArgValue","src": 745,"pubDecls": [1384,1385,1386,1387],"privDecls": [],"fields": [976,978,1037]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 8,"name": "std.hash_map.HashMapUnmanaged([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80)","src": 699,"pubDecls": [1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1399,1400,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1414,1415,1416,1417,1418,1419,1420,1421,1422,1423,1424,1425,1426,1427,1428,1429,1430,1431,1432,1433,1434,1435,1436,1437,1438,1439,1440,1441,1442,1443,1444,1445,1446,1447,1448,1449,1450,1451,1452,1453,1454,1455,1456,1457,1458],"privDecls": [1459,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475],"fields": [1979,1134,1134]},{"kind": 8,"name": "std.hash_map.HashMap([]const u8,std.debug.OFileInfo,std.hash_map.StringContext,80)","src": 698,"pubDecls": [1476,1477,1478,1479,1480,1481,1482,1483,1484,1485,1486,1487,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,1515,1516,1517,1518,1519,1520,1521,1522,1523,1524,1525,1526,1527,1528],"privDecls": [1529],"fields": [1217,1312,1210]},{"kind": 8,"name": "std.debug.OFileInfo","src": 746,"pubDecls": [],"privDecls": [],"fields": [1360,1230]},{"kind": 8,"name": "std.hash_map.HashMapUnmanaged([]const u8,std.debug.OFileInfo,std.hash_map.StringContext,80)","src": 699,"pubDecls": [1530,1531,1532,1533,1534,1535,1536,1537,1538,1539,1540,1541,1542,1543,1544,1545,1546,1547,1548,1549,1550,1551,1552,1553,1554,1555,1556,1557,1558,1559,1560,1561,1562,1563,1564,1565,1566,1567,1568,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,1595,1596,1597,1598,1599,1600],"privDecls": [1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617],"fields": [1981,1134,1134]},{"kind": 8,"name": "std.array_list.ArrayListAligned(std.coff.Section,null)","src": 700,"pubDecls": [1618,1619,1620,1621,1622,1623,1624,1625,1626,1627,1628,1629,1630,1631,1632,1633,1634,1635,1636,1637,1638,1639,1640,1641,1642,1643,1644,1645,1646,1647,1648,1649,1650,1651,1652,1653,1654,1655,1656,1657],"privDecls": [1658,1659],"fields": [1982,965,1312]},{"kind": 8,"name": "std.coff.Section","src": 747,"pubDecls": [],"privDecls": [],"fields": [1983]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 18,"name": "fn(bool,anytype) anytype","generic": true,"args": [967,null]},{"kind": 8,"name": "std.atomic.Atomic.Atomic(std.Thread.enum:338:27).exportWhen(false,std.atomic.Atomic.struct:131:69)","src": 748,"pubDecls": [],"privDecls": []},{"kind": 8,"name": "std.atomic.Atomic.struct:131:69","src": 749,"pubDecls": [1660,1661,1662,1663,1664,1665,1666],"privDecls": [1667,1668,1669]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 8,"name": "std.atomic.Atomic.Atomic(std.Thread.enum:338:27).exportWhen(false,std.atomic.Atomic.struct:113:67)","src": 748,"pubDecls": [],"privDecls": []},{"kind": 8,"name": "std.atomic.Atomic.struct:113:67","src": 750,"pubDecls": [1670,1671,1672,1673],"privDecls": []},{"kind": 18,"name": "fn(bool,anytype) anytype","generic": true,"args": [967,null]},{"kind": 8,"name": "std.atomic.Atomic.struct:131:69","src": 749,"pubDecls": [841,842,843,844,845,846,847],"privDecls": [1674,1675,1676]},{"kind": 8,"name": "std.atomic.Atomic.struct:113:67","src": 750,"pubDecls": [848,849,850,851],"privDecls": []},{"kind": 8,"name": "std.hash_map.HashMap([]const u8,u64,std.hash_map.StringContext,80)","src": 698,"pubDecls": [1677,1678,1679,1680,1681,1682,1683,1684,1685,1686,1687,1688,1689,1690,1691,1692,1693,1694,1695,1696,1697,1698,1699,1700,1701,1702,1703,1704,1705,1706,1707,1708,1709,1710,1711,1712,1713,1714,1715,1716,1717,1718,1719,1720,1721,1722,1723,1724,1725,1726,1727,1728,1729],"privDecls": [1730],"fields": [1231,1312,1210]},{"kind": 8,"name": "std.hash_map.HashMapUnmanaged([]const u8,u64,std.hash_map.StringContext,80)","src": 699,"pubDecls": [1731,1732,1733,1734,1735,1736,1737,1738,1739,1740,1741,1742,1743,1744,1745,1746,1747,1748,1749,1750,1751,1752,1753,1754,1755,1756,1757,1758,1759,1760,1761,1762,1763,1764,1765,1766,1767,1768,1769,1770,1771,1772,1773,1774,1775,1776,1777,1778,1779,1780,1781,1782,1783,1784,1785,1786,1787,1788,1789,1790,1791,1792,1793,1794,1795,1796,1797,1798,1799,1800,1801],"privDecls": [1802,1803,1804,1805,1806,1807,1808,1809,1810,1811,1812,1813,1814,1815,1816,1817,1818],"fields": [1985,1134,1134]},{"kind": 8,"name": "settings.MakeSettings([]const []const u8{\"takes_value\",\"subcommand_required\"})","src": 734,"pubDecls": [1819,1820,1821,1822],"privDecls": [1823],"fields": [1235]},{"kind": 16,"name": "settings.enum:32:19","src": 735,"pubDecls": [],"privDecls": [],"fields": [0,1]},{"kind": 8,"name": "std.enums.EnumIndexer(settings.enum:32:19)","src": 737,"pubDecls": [1824,1825,1826,1827],"privDecls": []},{"kind": 8,"name": "std.enums.IndexedMap(std.enums.EnumIndexer(settings.enum:32:19),bool,std.enums.mixin.EnumMapExt)","src": 738,"pubDecls": [1828,1829,1830,1831,1832,1833,1834,1835,1836,1837,1838,1839,1840,1841,1842,1843,1844,1845,1846,1847,1848,1849,1850],"privDecls": [1851,1852],"fields": [1239,1986]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 8,"name": "std.enums.mixin.EnumMapExt(std.enums.IndexedMap(std.enums.EnumIndexer(settings.enum:32:19),bool,std.enums.mixin.EnumMapExt))","src": 739,"pubDecls": [1847,1848,1849,1850],"privDecls": []},{"kind": 8,"name": "std.bit_set.IntegerBitSet(2)","src": 740,"pubDecls": [1853,1854,1855,1856,1857,1858,1859,1860,1861,1862,1863,1864,1865,1866,1867,1868,1869,1870,1871,1872],"privDecls": [1873,1874,1875,1876],"fields": [1240]},{"kind": 4,"u": 2},{"kind": 8,"name": "flag","src": 751,"pubDecls": [1877,1878,1879,1880],"privDecls": [1881,1882],"file": 6},{"kind": 8,"name": "parser.ArgsContext","src": 752,"pubDecls": [1883,1884,1885,1886,1887,1888,1889,1890,1891,1892,1893],"privDecls": [1894,1895,1896,1897,1898],"fields": [1312,1211,1987],"file": 7},{"kind": 8,"name": "Yazap","src": 753,"pubDecls": [1899,1900,1901,1902,1903,1904,1905,1906,1907],"privDecls": [1908,1909,1910,1911,1912,1913,1914,1915,1916,1917,1918,1919],"fields": [1312,1202,1724,1718,1989],"file": 8},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 8,"name": "std.hash_map.HashMapUnmanaged([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80).FieldIterator(parser.ArgsContext.MatchedArgValue)","src": 731,"pubDecls": [1920],"privDecls": [],"fields": [965,1990,1760]},{"kind": 18,"name": "fn(usize,anytype) anytype","generic": true,"args": [965,null]},{"kind": 8,"name": "std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write))","src": 754,"pubDecls": [1921,1922,1923,1924,1925],"privDecls": [1926,1927],"fields": [970,1249]},{"kind": 18,"name": "fn(type,anytype) anytype","generic": true,"args": [954,null]},{"kind": 8,"name": "std.fifo.LinearFifo(u8,std.fifo.LinearFifoBufferType { .Static = 4096})","src": 755,"pubDecls": [1928,1929,1930,1931,1932,1933,1934,1935,1936,1937,1938,1939,1940,1941,1942,1943,1944,1945,1946,1947,1948,1949,1950,1951,1952,1953,1954],"privDecls": [1955,1956,1957,1958,1959,1960],"fields": [976,1993,965,965]},{"kind": 17,"name": "std.fifo.LinearFifoBufferType","src": 756,"pubDecls": [],"privDecls": [],"fields": [965,976,976]},{"kind": 8,"name": "std.io.writer.Writer(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)),std.os.WriteError,std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)).write)","src": 693,"pubDecls": [1961,1962,1963,1964,1965,1966,1967,1968,1969,1970,1971,1972],"privDecls": [1973],"fields": [1252]},{"kind": 6,"elem": 1247},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 18,"name": "fn(anytype) anytype","generic": true,"args": [null]},{"kind": 16,"name": "std.fmt.Case","src": 757,"pubDecls": [],"privDecls": [],"fields": [0,1]},{"kind": 18,"name": "fn([]const type) anytype","generic": true,"args": [1259]},{"kind": 8,"name": "std.meta.struct:953:38","src": 758,"pubDecls": [],"privDecls": [],"fields": [1015,1015]},{"kind": 6,"len": 2,"const": true,"elem": 954},{"kind": 8,"name": "std.log.scoped(default)","src": 732,"pubDecls": [1974,1975,1976,1977,1978,1979,1980,1981],"privDecls": []},{"kind": 7,"len": 5,"elem": 1015},{"kind": 7,"len": 9,"elem": 1015},{"kind": 6,"len": 2,"const": true,"elem": 1920},{"kind": 8,"name": "Help.struct:118:58","src": 759,"pubDecls": [],"privDecls": [],"fields": [965,1270,978]},{"kind": 18,"name": "fn(type,anytype) anytype","generic": true,"args": [954,null]},{"kind": 13,"child": 1034},{"kind": 6,"len": 2,"elem": 1199},{"kind": 6,"len": 2,"elem": 1202},{"kind": 6,"len": 2,"align": 4,"const": true,"elem": 1015},{"kind": 6,"const": true,"elem": 1996},{"kind": 4,"u": 1},{"kind": 13,"child": 1199},{"kind": 13,"child": 1202},{"kind": 6,"len": 1,"elem": 1199},{"kind": 6,"len": 1,"elem": 1202},{"kind": 6,"len": 1,"align": 4,"const": true,"elem": 1015},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 8,"name": "std.mem.SplitIterator(u8)","src": 760,"pubDecls": [1982,1983],"privDecls": [1984],"fields": [978,1172,978]},{"kind": 8,"name": "std.meta.struct:953:38","src": 758,"pubDecls": [],"privDecls": [],"fields": [978,1135]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 8,"name": "std.mem.TokenIterator(u8)","src": 761,"pubDecls": [1985,1986,1987],"privDecls": [1988,1989],"fields": [978,978,965]},{"kind": 8,"name": "std","src": 762,"pubDecls": [1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2050,2051,2052,2053,2054,2055,2056,2057,2058,2059,2060,2061,2062,2063,2064,2065,2066,2067,2068,2069,2070,2071,2072,2073,2074,2075,2076,2077],"privDecls": [],"file": 1},{"kind": 8,"name": "builtin","src": 763,"pubDecls": [2078,2079,2080,2081,2082,2083,2084,2085,2086,2087,2088,2089,2090,2091,2092,2093,2094,2095,2096,2097,2098,2099,2100,2101],"privDecls": [2102],"file": 2},{"kind": 8,"name": "std.special","src": 764,"pubDecls": [2103,2104,2105,2106],"privDecls": [2107,2108,2109,2110,2111,2112,2113],"file": 3},{"kind": 3,"name": "noreturn"},{"kind": 13,"child": 2025},{"kind": 14,"err": 2026,"payload": 976},{"kind": 6,"elem": 957},{"kind": 13,"child": 2027},{"kind": 6,"elem": 1941},{"kind": 14,"err": 972,"payload": 965},{"kind": 14,"err": 972,"payload": 976},{"kind": 8,"name": "std.debug.struct:296:56","src": 765,"pubDecls": [],"privDecls": [],"fields": [988]},{"kind": 8,"name": "std.debug.struct:298:40","src": 766,"pubDecls": [],"privDecls": [],"fields": [978]},{"kind": 6,"elem": 2028},{"kind": 8,"name": "std.debug.struct:322:67","src": 767,"pubDecls": [],"privDecls": []},{"kind": 6,"len": 2,"elem": 2029},{"kind": 6,"len": 1,"elem": 1165},{"kind": 6,"len": 2,"elem": 1165},{"kind": 13,"child": 2030},{"kind": 13,"child": 2031},{"kind": 6,"elem": 2032},{"kind": 14,"err": 2033,"payload": 976},{"kind": 14,"err": 2034,"payload": 1892},{"kind": 6,"elem": 2035},{"kind": 6,"elem": 2036},{"kind": 8,"name": "std.fmt.FormatOptions","src": 768,"pubDecls": [],"privDecls": [],"fields": [1172,1172,1891,1015]},{"kind": 14,"err": 1480,"payload": 976},{"kind": 14,"err": 2037,"payload": 976},{"kind": 14,"err": 2038,"payload": 1316},{"kind": 14,"err": 2026,"payload": 1490},{"kind": 8,"name": "std.mem.Allocator","src": 769,"pubDecls": [2114,2115,2116,2117,2118,2119,2120,2121,2122,2123,2124,2125,2126,2127,2128,2129,2130,2131,2132,2133,2134,2135,2136,2137,2138,2139,2140,2141,2142,2143,2144,2145,2146],"privDecls": [2147,2148,2149,2150,2151,2152,2153],"fields": [1493,2055],"file": 9},{"kind": 8,"name": "std.debug.struct:204:91","src": 770,"pubDecls": [],"privDecls": [],"fields": [1069]},{"kind": 16,"name": "std.debug.Config","src": 771,"pubDecls": [2154],"privDecls": [],"fields": [0,1,2]},{"kind": 14,"err": 2057,"payload": 976},{"kind": 6,"elem": 1490},{"kind": 14,"err": 2058,"payload": 976},{"kind": 14,"err": 2059,"payload": 991},{"kind": 14,"err": 2060,"payload": 991},{"kind": 14,"err": 2061,"payload": 976},{"kind": 6,"elem": 2062},{"kind": 6,"elem": 2063},{"kind": 13,"child": 991},{"kind": 14,"err": 2039,"payload": 991},{"kind": 8,"name": "std.fs.Dir","src": 772,"pubDecls": [2155,2156,2157,2158,2159,2160,2161,2162,2163,2164,2165,2166,2167,2168,2169,2170,2171,2172,2173,2174,2175,2176,2177,2178,2179,2180,2181,2182,2183,2184,2185,2186,2187,2188,2189,2190,2191,2192,2193,2194,2195,2196,2197,2198,2199,2200,2201,2202,2203,2204,2205,2206,2207,2208,2209,2210,2211,2212,2213,2214,2215,2216,2217,2218,2219,2220,2221,2222,2223,2224,2225,2226,2227],"privDecls": [2228,2229,2230],"fields": [1084]},{"kind": 14,"err": 1883,"payload": 971},{"kind": 8,"name": "std.fs.file.OpenFlags","src": 773,"pubDecls": [],"privDecls": [],"fields": [967,967,1884,967,1889,967]},{"kind": 14,"err": 2064,"payload": 971},{"kind": 14,"err": 2065,"payload": 1894},{"kind": 14,"err": 2066,"payload": 1547},{"kind": 14,"err": 1885,"payload": 988},{"kind": 14,"err": 2067,"payload": 965},{"kind": 14,"err": 2068,"payload": 2069},{"kind": 13,"child": 1546},{"kind": 14,"err": 2070,"payload": 978},{"kind": 14,"err": 2071,"payload": 976},{"kind": 6,"elem": 1360},{"kind": 14,"err": 2072,"payload": 976},{"kind": 14,"err": 1027,"payload": 965},{"kind": 14,"err": 1030,"payload": 976},{"kind": 14,"err": 1031,"payload": 988},{"kind": 14,"err": 2073,"payload": 988},{"kind": 6,"elem": 1025},{"kind": 6,"elem": 967},{"kind": 14,"err": 2074,"payload": 1134},{"kind": 14,"err": 2075,"payload": 1061},{"kind": 14,"err": 2076,"payload": 976},{"kind": 6,"const": true,"elem": 1061},{"kind": 14,"err": 2077,"payload": 988},{"kind": 14,"err": 2078,"payload": 2079},{"kind": 6,"const": true,"elem": 2079},{"kind": 14,"err": 2080,"payload": 961},{"kind": 14,"err": 2081,"payload": 2082},{"kind": 6,"const": true,"elem": 2082},{"kind": 14,"err": 2083,"payload": 1015},{"kind": 14,"err": 2084,"payload": 1382},{"kind": 14,"err": 2085,"payload": 976},{"kind": 6,"elem": 997},{"kind": 14,"err": 2086,"payload": 1001},{"kind": 8,"name": "std.dwarf.DwarfInfo","src": 774,"pubDecls": [2231,2232,2233,2234],"privDecls": [2235,2236,2237,2238,2239,2240],"fields": [1013,978,978,978,978,1135,997,1005,1009]},{"kind": 14,"err": 2088,"payload": 988},{"kind": 14,"err": 2089,"payload": 976},{"kind": 6,"elem": 1001},{"kind": 14,"err": 2090,"payload": 1368},{"kind": 14,"err": 2091,"payload": 976},{"kind": 14,"err": 2092,"payload": 976},{"kind": 14,"err": 2039,"payload": 1092},{"kind": 6,"elem": 1002},{"kind": 14,"err": 2093,"payload": 976},{"kind": 6,"elem": 1003},{"kind": 14,"err": 2094,"payload": 1375},{"kind": 14,"err": 2095,"payload": 976},{"kind": 14,"err": 2096,"payload": 976},{"kind": 14,"err": 2039,"payload": 1098},{"kind": 6,"elem": 1004},{"kind": 14,"err": 2097,"payload": 1380},{"kind": 14,"err": 2098,"payload": 976},{"kind": 14,"err": 2099,"payload": 976},{"kind": 14,"err": 2039,"payload": 1099},{"kind": 6,"elem": 998},{"kind": 14,"err": 2100,"payload": 2101},{"kind": 6,"const": true,"elem": 1001},{"kind": 13,"child": 2102},{"kind": 14,"err": 2103,"payload": 976},{"kind": 6,"elem": 1007},{"kind": 14,"err": 2104,"payload": 976},{"kind": 14,"err": 2105,"payload": 976},{"kind": 14,"err": 2039,"payload": 1100},{"kind": 14,"err": 2026,"payload": 1903},{"kind": 13,"child": 2106},{"kind": 6,"const": true,"elem": 2107},{"kind": 14,"err": 2108,"payload": 978},{"kind": 14,"err": 2109,"payload": 978},{"kind": 14,"err": 2110,"payload": 988},{"kind": 14,"err": 2111,"payload": 988},{"kind": 14,"err": 2112,"payload": 988},{"kind": 6,"const": true,"elem": 2113},{"kind": 14,"err": 2114,"payload": 976},{"kind": 6,"elem": 1009},{"kind": 14,"err": 2115,"payload": 1404},{"kind": 14,"err": 2116,"payload": 976},{"kind": 14,"err": 2117,"payload": 976},{"kind": 14,"err": 2039,"payload": 1101},{"kind": 6,"elem": 1010},{"kind": 14,"err": 2118,"payload": 976},{"kind": 14,"err": 2039,"payload": 1901},{"kind": 14,"err": 2119,"payload": 976},{"kind": 6,"elem": 1005},{"kind": 14,"err": 2120,"payload": 1413},{"kind": 14,"err": 2121,"payload": 976},{"kind": 14,"err": 2122,"payload": 976},{"kind": 14,"err": 2039,"payload": 1102},{"kind": 6,"elem": 1006},{"kind": 14,"err": 2123,"payload": 976},{"kind": 6,"elem": 990},{"kind": 14,"err": 2124,"payload": 976},{"kind": 6,"elem": 994},{"kind": 6,"const": true,"elem": 994},{"kind": 14,"err": 2125,"payload": 976},{"kind": 14,"err": 2126,"payload": 976},{"kind": 14,"err": 2127,"payload": 976},{"kind": 14,"err": 2039,"payload": 1104},{"kind": 6,"len": 1,"elem": 991},{"kind": 8,"name": "std.hash_map.Metadata","src": 775,"pubDecls": [2241,2242,2243,2244,2245,2246],"privDecls": [2247,2248,2249,2250,2251],"fields": [1522,1271]},{"kind": 14,"err": 2128,"payload": 976},{"kind": 13,"child": 1528},{"kind": 14,"err": 2129,"payload": 1466},{"kind": 14,"err": 2130,"payload": 1466},{"kind": 14,"err": 2131,"payload": 2132},{"kind": 14,"err": 2133,"payload": 988},{"kind": 14,"err": 2134,"payload": 965},{"kind": 14,"err": 2135,"payload": 1528},{"kind": 14,"err": 2136,"payload": 2137},{"kind": 14,"err": 2039,"payload": 1065},{"kind": 14,"err": 2138,"payload": 976},{"kind": 6,"elem": 1037},{"kind": 14,"err": 2139,"payload": 1441},{"kind": 14,"err": 2140,"payload": 976},{"kind": 14,"err": 2141,"payload": 976},{"kind": 14,"err": 2039,"payload": 1108},{"kind": 6,"elem": 978},{"kind": 14,"err": 2142,"payload": 1065},{"kind": 14,"err": 2143,"payload": 976},{"kind": 6,"elem": 1038},{"kind": 14,"err": 2144,"payload": 976},{"kind": 14,"err": 2145,"payload": 1449},{"kind": 14,"err": 2146,"payload": 976},{"kind": 14,"err": 2147,"payload": 976},{"kind": 6,"elem": 1015},{"kind": 8,"name": "std.dwarf.LineNumberProgram","src": 776,"pubDecls": [2252,2253,2254],"privDecls": [],"fields": [988,965,1091,988,967,967,967,967,988,1178,1451,967,988,965,1091,988,967,967,967]},{"kind": 6,"elem": 1039},{"kind": 14,"err": 2148,"payload": 965},{"kind": 14,"err": 2149,"payload": 976},{"kind": 14,"err": 2150,"payload": 1458},{"kind": 14,"err": 2151,"payload": 976},{"kind": 14,"err": 2152,"payload": 976},{"kind": 14,"err": 2039,"payload": 1109},{"kind": 6,"elem": 1040},{"kind": 14,"err": 2153,"payload": 1074},{"kind": 14,"err": 2154,"payload": 1426},{"kind": 6,"elem": 1450},{"kind": 14,"err": 2155,"payload": 1065},{"kind": 14,"err": 2156,"payload": 1065},{"kind": 14,"err": 2157,"payload": 1065},{"kind": 14,"err": 2158,"payload": 1091},{"kind": 8,"name": "std.debug.SymbolInfo","src": 777,"pubDecls": [2255],"privDecls": [],"fields": [978,978,1426]},{"kind": 8,"name": "std.debug.struct:208:64","src": 778,"pubDecls": [],"privDecls": [],"fields": [1069]},{"kind": 8,"name": "std.debug.struct:113:91","src": 779,"pubDecls": [],"privDecls": [],"fields": [1069]},{"kind": 14,"err": 2159,"payload": 976},{"kind": 8,"name": "std.debug.StackIterator","src": 780,"pubDecls": [2256,2257],"privDecls": [2258,2259,2260,2261],"fields": [1172,965]},{"kind": 6,"elem": 1470},{"kind": 8,"name": "std.debug.struct:117:64","src": 781,"pubDecls": [],"privDecls": [],"fields": [1069]},{"kind": 6,"elem": 2160},{"kind": 14,"err": 2161,"payload": 976},{"kind": 14,"err": 2162,"payload": 976},{"kind": 16,"name": "std.os.linux.rlimit_resource","src": 782,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]},{"kind": 8,"name": "std.os.linux.rlimit","src": 783,"pubDecls": [],"privDecls": [],"fields": [988,988]},{"kind": 16,"name": "std.os.linux.errno.generic.E","src": 784,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177]},{"kind": 16,"name": "std.Thread.Mutex.State","src": 785,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 15,"name": "std.os.UnexpectedError","errors": [11]},{"kind": 14,"err": 2163,"payload": 976},{"kind": 14,"err": 2164,"payload": 976},{"kind": 14,"err": 2165,"payload": 976},{"kind": 14,"err": 2166,"payload": 976},{"kind": 14,"err": 2167,"payload": 965},{"kind": 14,"err": 2168,"payload": 1171},{"kind": 14,"err": 2169,"payload": 2170},{"kind": 13,"child": 2171},{"kind": 13,"child": 2172},{"kind": 8,"name": "std.debug.DebugInfo","src": 786,"pubDecls": [2262,2263,2264],"privDecls": [2265,2266,2267,2268],"fields": [1312,990]},{"kind": 8,"name": "std.heap.arena_allocator.ArenaAllocator","src": 787,"pubDecls": [2269,2270,2271,2272],"privDecls": [2273,2274,2275,2276,2277],"fields": [1312,1545]},{"kind": 14,"err": 2174,"payload": 1065},{"kind": 6,"elem": 2175},{"kind": 4,"u": 29},{"kind": 6,"elem": 1491},{"kind": 14,"err": 2176,"payload": 976},{"kind": 14,"err": 2177,"payload": 2178},{"kind": 6,"elem": 2178},{"kind": 13,"child": 2179},{"kind": 14,"err": 2039,"payload": 2180},{"kind": 16,"name": "std.mem.Allocator.Exact","src": 788,"pubDecls": [],"privDecls": [],"fields": [0,1]},{"kind": 14,"err": 2181,"payload": 2182},{"kind": 14,"err": 1887,"payload": 1886},{"kind": 13,"child": 1107},{"kind": 14,"err": 2183,"payload": 965},{"kind": 14,"err": 2184,"payload": 965},{"kind": 14,"err": 2185,"payload": 988},{"kind": 14,"err": 2186,"payload": 1903},{"kind": 14,"err": 2187,"payload": 1903},{"kind": 14,"err": 2188,"payload": 1903},{"kind": 14,"err": 2189,"payload": 1903},{"kind": 14,"err": 2190,"payload": 1903},{"kind": 14,"err": 2191,"payload": 1903},{"kind": 14,"err": 2192,"payload": 1903},{"kind": 14,"err": 2193,"payload": 1065},{"kind": 14,"err": 2194,"payload": 1903},{"kind": 14,"err": 2039,"payload": 1518},{"kind": 6,"elem": 2195},{"kind": 14,"err": 2039,"payload": 2196},{"kind": 14,"err": 2197,"payload": 1134},{"kind": 6,"elem": 1897},{"kind": 4,"u": 7},{"kind": 6,"elem": 1424},{"kind": 16,"name": "std.debug.Color","src": 789,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5,6]},{"kind": 8,"name": "std.debug.struct:650:50","src": 790,"pubDecls": [],"privDecls": [],"fields": [978,988,988]},{"kind": 8,"name": "std.debug.struct:658:53","src": 791,"pubDecls": [],"privDecls": [],"fields": [965,978,978]},{"kind": 14,"err": 2198,"payload": 976},{"kind": 8,"name": "std.debug.LineInfo","src": 792,"pubDecls": [2278],"privDecls": [],"fields": [988,988,978,2199]},{"kind": 14,"err": 1888,"payload": 965},{"kind": 14,"err": 2200,"payload": 976},{"kind": 14,"err": 2201,"payload": 976},{"kind": 14,"err": 2202,"payload": 976},{"kind": 16,"name": "std.Thread.ResetEvent.TimedWaitResult","src": 793,"pubDecls": [],"privDecls": [],"fields": [0,1]},{"kind": 13,"child": 988},{"kind": 6,"elem": 2203},{"kind": 6,"elem": 1107},{"kind": 16,"name": "std.os.linux.arm-eabi.SYS","src": 794,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5,6,8,9,10,11,12,14,15,16,19,20,21,23,24,26,29,33,34,36,37,38,39,40,41,42,43,45,46,47,49,50,51,52,54,55,57,60,61,62,63,64,65,66,67,70,71,72,73,74,75,77,78,79,80,81,83,85,86,87,88,91,92,93,94,95,96,97,99,100,103,104,105,106,107,108,111,114,115,116,118,119,120,121,122,124,125,126,128,129,131,132,133,134,135,136,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,403,404,405,406,407,408,409,410,411,412,413,414,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,444,445,446,983041,983042,983043,983044,983045,983046]},{"kind": 6,"const": true,"elem": 1477},{"kind": 6,"const": true,"elem": 1084},{"kind": 13,"child": 2204},{"kind": 8,"name": "std.os.struct:4985:53","src": 795,"pubDecls": [],"privDecls": [],"fields": [961]},{"kind": 14,"err": 2205,"payload": 2170},{"kind": 14,"err": 2206,"payload": 2170},{"kind": 14,"err": 2207,"payload": 2170},{"kind": 8,"name": "std.heap.arena_allocator.State","src": 796,"pubDecls": [2279],"privDecls": [],"fields": [1064,965]},{"kind": 6,"len": 1,"align": 4096,"elem": 1015},{"kind": 6,"len": 2,"align": 4096,"const": true,"elem": 1015},{"kind": 14,"err": 2208,"payload": 1065},{"kind": 14,"err": 2209,"payload": 1551},{"kind": 6,"elem": 1064},{"kind": 6,"elem": 1936},{"kind": 13,"child": 1065},{"kind": 13,"child": 2210},{"kind": 14,"err": 2211,"payload": 965},{"kind": 14,"err": 2212,"payload": 1084},{"kind": 14,"err": 2213,"payload": 976},{"kind": 14,"err": 1887,"payload": 1149},{"kind": 8,"name": "std.os.linux.timespec","src": 797,"pubDecls": [],"privDecls": [],"fields": [1074,1074]},{"kind": 14,"err": 2214,"payload": 965},{"kind": 14,"err": 2215,"payload": 1015},{"kind": 14,"err": 2216,"payload": 982},{"kind": 6,"const": true,"elem": 982},{"kind": 14,"err": 2039,"payload": 2217},{"kind": 14,"err": 2218,"payload": 976},{"kind": 14,"err": 2219,"payload": 976},{"kind": 14,"err": 2220,"payload": 965},{"kind": 14,"err": 2221,"payload": 976},{"kind": 6,"elem": 1134},{"kind": 13,"child": 1538},{"kind": 13,"child": 2222},{"kind": 6,"const": true,"elem": 2223},{"kind": 13,"child": 2224},{"kind": 8,"name": "std.hash.wyhash.WyhashStateless","src": 798,"pubDecls": [2280,2281,2282,2283],"privDecls": [2284],"fields": [988,965]},{"kind": 6,"elem": 1573},{"kind": 14,"err": 2226,"payload": 976},{"kind": 14,"err": 2227,"payload": 976},{"kind": 14,"err": 2228,"payload": 976},{"kind": 14,"err": 2229,"payload": 976},{"kind": 14,"err": 2230,"payload": 976},{"kind": 8,"name": "std.debug.struct:1684:83","src": 799,"pubDecls": [],"privDecls": [],"fields": [965]},{"kind": 8,"name": "std.debug.struct:1685:83","src": 800,"pubDecls": [],"privDecls": [],"fields": [965]},{"kind": 8,"name": "std.debug.struct:1686:73","src": 801,"pubDecls": [],"privDecls": [],"fields": [965]},{"kind": 14,"err": 2231,"payload": 1587},{"kind": 6,"elem": 1997},{"kind": 14,"err": 2232,"payload": 1641},{"kind": 8,"name": "std.Progress.Node","src": 802,"pubDecls": [2285,2286,2287,2288,2289,2290],"privDecls": [],"fields": [1584,2233,978,2233,965,965]},{"kind": 6,"elem": 1586},{"kind": 8,"name": "std.special.struct:62:49","src": 803,"pubDecls": [],"privDecls": [],"fields": [965,965,978]},{"kind": 8,"name": "std.special.struct:76:61","src": 804,"pubDecls": [],"privDecls": [],"fields": [978]},{"kind": 8,"name": "std.special.struct:77:72","src": 805,"pubDecls": [],"privDecls": []},{"kind": 6,"elem": 1140},{"kind": 8,"name": "std.special.struct:84:53","src": 806,"pubDecls": [],"privDecls": []},{"kind": 8,"name": "std.special.struct:95:54","src": 807,"pubDecls": [],"privDecls": [],"fields": [978,1069]},{"kind": 8,"name": "std.special.struct:96:65","src": 808,"pubDecls": [],"privDecls": [],"fields": [1069]},{"kind": 8,"name": "std.special.struct:89:48","src": 809,"pubDecls": [],"privDecls": [],"fields": [978]},{"kind": 8,"name": "std.special.struct:90:59","src": 810,"pubDecls": [],"privDecls": []},{"kind": 8,"name": "std.special.struct:105:53","src": 811,"pubDecls": [],"privDecls": [],"fields": [965]},{"kind": 8,"name": "std.special.struct:107:68","src": 812,"pubDecls": [],"privDecls": [],"fields": [965,965,965]},{"kind": 8,"name": "std.special.struct:110:55","src": 813,"pubDecls": [],"privDecls": [],"fields": [965]},{"kind": 8,"name": "std.special.struct:113:56","src": 814,"pubDecls": [],"privDecls": [],"fields": [965]},{"kind": 14,"err": 2234,"payload": 976},{"kind": 14,"err": 2235,"payload": 976},{"kind": 14,"err": 2236,"payload": 976},{"kind": 14,"err": 2237,"payload": 976},{"kind": 8,"name": "std.debug.struct:134:91","src": 815,"pubDecls": [],"privDecls": [],"fields": [1069]},{"kind": 14,"err": 2238,"payload": 1156},{"kind": 6,"elem": 1154},{"kind": 8,"name": "std.process.ArgIterator","src": 816,"pubDecls": [2291,2292,2293,2294,2295,2296,2297,2298,2299],"privDecls": [2300],"fields": [1661]},{"kind": 13,"child": 2240},{"kind": 6,"elem": 1608},{"kind": 14,"err": 2241,"payload": 976},{"kind": 14,"err": 2242,"payload": 976},{"kind": 14,"err": 2243,"payload": 976},{"kind": 6,"elem": 1155},{"kind": 14,"err": 2244,"payload": 1619},{"kind": 14,"err": 2245,"payload": 976},{"kind": 14,"err": 2246,"payload": 976},{"kind": 14,"err": 2039,"payload": 1166},{"kind": 6,"elem": 965},{"kind": 8,"name": "std.special.struct:19:57","src": 817,"pubDecls": [],"privDecls": [],"fields": [1069,1174]},{"kind": 14,"err": 2247,"payload": 976},{"kind": 6,"elem": 1558},{"kind": 6,"elem": 1144},{"kind": 14,"err": 2248,"payload": 976},{"kind": 14,"err": 2249,"payload": 976},{"kind": 14,"err": 2250,"payload": 976},{"kind": 14,"err": 2251,"payload": 976},{"kind": 14,"err": 2252,"payload": 1065},{"kind": 6,"elem": 1661},{"kind": 14,"err": 2253,"payload": 1157},{"kind": 14,"err": 2254,"payload": 1065},{"kind": 8,"name": "std.Progress.struct:202:79","src": 818,"pubDecls": [],"privDecls": [],"fields": [965]},{"kind": 8,"name": "std.Progress.struct:203:77","src": 819,"pubDecls": [],"privDecls": []},{"kind": 8,"name": "std.Progress.struct:257:46","src": 820,"pubDecls": [],"privDecls": []},{"kind": 8,"name": "std.Progress.struct:264:49","src": 821,"pubDecls": [],"privDecls": [],"fields": [978]},{"kind": 8,"name": "std.Progress.struct:268:65","src": 822,"pubDecls": [],"privDecls": []},{"kind": 8,"name": "std.Progress.struct:269:56","src": 823,"pubDecls": [],"privDecls": [],"fields": [965,965]},{"kind": 8,"name": "std.Progress.struct:272:65","src": 824,"pubDecls": [],"privDecls": []},{"kind": 8,"name": "std.Progress.struct:273:52","src": 825,"pubDecls": [],"privDecls": [],"fields": [965]},{"kind": 8,"name": "std.Progress.struct:280:42","src": 826,"pubDecls": [],"privDecls": []},{"kind": 8,"name": "std.time.Timer","src": 827,"pubDecls": [2301,2302,2303,2304,2305],"privDecls": [2306,2307,2308],"fields": [976,988,988]},{"kind": 14,"err": 2255,"payload": 976},{"kind": 14,"err": 2256,"payload": 976},{"kind": 14,"err": 2257,"payload": 976},{"kind": 6,"elem": 1953},{"kind": 6,"const": true,"elem": 1144},{"kind": 13,"child": 1649},{"kind": 6,"elem": 1161},{"kind": 6,"elem": 1145},{"kind": 16,"name": "std.heap.general_purpose_allocator.TraceKind","src": 828,"pubDecls": [],"privDecls": [],"fields": [0,1]},{"kind": 8,"name": "std.heap.general_purpose_allocator.struct:375:62","src": 829,"pubDecls": [],"privDecls": [],"fields": [965,1175]},{"kind": 14,"err": 2258,"payload": 976},{"kind": 14,"err": 2259,"payload": 976},{"kind": 14,"err": 2260,"payload": 976},{"kind": 14,"err": 2261,"payload": 976},{"kind": 14,"err": 2262,"payload": 976},{"kind": 14,"err": 2263,"payload": 976},{"kind": 14,"err": 2264,"payload": 976},{"kind": 14,"err": 2265,"payload": 976},{"kind": 14,"err": 2266,"payload": 976},{"kind": 8,"name": "std.process.ArgIteratorPosix","src": 830,"pubDecls": [2309,2310,2311],"privDecls": [],"fields": [965,965]},{"kind": 14,"err": 2267,"payload": 976},{"kind": 14,"err": 1170,"payload": 965},{"kind": 14,"err": 2268,"payload": 976},{"kind": 14,"err": 1170,"payload": 976},{"kind": 14,"err": 2269,"payload": 976},{"kind": 14,"err": 2270,"payload": 976},{"kind": 14,"err": 2271,"payload": 976},{"kind": 8,"name": "std.heap.general_purpose_allocator.struct:344:74","src": 831,"pubDecls": [],"privDecls": [],"fields": [965,1175]},{"kind": 6,"len": 1,"elem": 1145},{"kind": 8,"name": "std.hash_map.Metadata","src": 775,"pubDecls": [2312,2313,2314,2315,2316,2317],"privDecls": [2318,2319,2320,2321,2322],"fields": [1522,1271]},{"kind": 6,"elem": 1956},{"kind": 14,"err": 2272,"payload": 976},{"kind": 14,"err": 2273,"payload": 976},{"kind": 14,"err": 2274,"payload": 976},{"kind": 14,"err": 2275,"payload": 976},{"kind": 14,"err": 2276,"payload": 976},{"kind": 14,"err": 2277,"payload": 976},{"kind": 14,"err": 2278,"payload": 976},{"kind": 14,"err": 2279,"payload": 976},{"kind": 14,"err": 2280,"payload": 976},{"kind": 14,"err": 2281,"payload": 976},{"kind": 14,"err": 2282,"payload": 976},{"kind": 6,"elem": 2283},{"kind": 6,"elem": 2284},{"kind": 8,"name": "std.special.struct:130:106","src": 832,"pubDecls": [],"privDecls": [],"fields": [1069,1069,965,1175]},{"kind": 8,"name": "std.special.struct:130:106","src": 832,"pubDecls": [],"privDecls": [],"fields": [1069,1069,965,1175]},{"kind": 14,"err": 2285,"payload": 976},{"kind": 14,"err": 2286,"payload": 976},{"kind": 14,"err": 2287,"payload": 976},{"kind": 8,"name": "std.builtin.struct:74:101","src": 833,"pubDecls": [],"privDecls": [],"fields": [1069]},{"kind": 8,"name": "std.builtin.struct:79:69","src": 834,"pubDecls": [],"privDecls": [],"fields": [1069]},{"kind": 14,"err": 2288,"payload": 976},{"kind": 14,"err": 2289,"payload": 976},{"kind": 6,"const": true,"elem": 1232},{"kind": 14,"err": 2290,"payload": 976},{"kind": 8,"name": "std.testing.struct:78:61","src": 835,"pubDecls": [],"privDecls": [],"fields": [967,967]},{"kind": 6,"elem": 1232},{"kind": 6,"elem": 1199},{"kind": 6,"const": true,"elem": 1199},{"kind": 6,"elem": 1202},{"kind": 14,"err": 2291,"payload": 976},{"kind": 14,"err": 2292,"payload": 976},{"kind": 14,"err": 2293,"payload": 976},{"kind": 14,"err": 2294,"payload": 976},{"kind": 14,"err": 2295,"payload": 976},{"kind": 14,"err": 2296,"payload": 976},{"kind": 6,"const": true,"elem": 1202},{"kind": 13,"child": 1700},{"kind": 13,"child": 1708},{"kind": 8,"name": "Help","src": 836,"pubDecls": [2323,2324,2325],"privDecls": [2326,2327,2328,2329,2330,2331,2332,2333,2334,2335,2336],"fields": [1708,2297],"file": 10},{"kind": 6,"elem": 1242},{"kind": 14,"err": 2305,"payload": 976},{"kind": 14,"err": 2306,"payload": 976},{"kind": 8,"name": "parser.ArgsContext.MatchedSubCommand","src": 837,"pubDecls": [2337,2338,2339],"privDecls": [],"fields": [978,1718]},{"kind": 6,"const": true,"elem": 1242},{"kind": 13,"child": 1108},{"kind": 13,"child": 1242},{"kind": 6,"elem": 1243},{"kind": 14,"err": 1988,"payload": 1716},{"kind": 6,"len": 2,"const": true,"elem": 1069},{"kind": 14,"err": 2307,"payload": 976},{"kind": 14,"err": 2308,"payload": 976},{"kind": 13,"child": 1711},{"kind": 14,"err": 2309,"payload": 976},{"kind": 6,"elem": 1235},{"kind": 6,"elem": 1177},{"kind": 6,"const": true,"elem": 1177},{"kind": 6,"elem": 1198},{"kind": 6,"elem": 1201},{"kind": 14,"err": 2310,"payload": 976},{"kind": 14,"err": 2311,"payload": 1699},{"kind": 14,"err": 2312,"payload": 976},{"kind": 14,"err": 2313,"payload": 976},{"kind": 14,"err": 2039,"payload": 1267},{"kind": 14,"err": 2314,"payload": 976},{"kind": 14,"err": 2315,"payload": 1701},{"kind": 14,"err": 2316,"payload": 976},{"kind": 14,"err": 2317,"payload": 976},{"kind": 14,"err": 2039,"payload": 1268},{"kind": 6,"elem": 1203},{"kind": 6,"const": true,"elem": 1203},{"kind": 13,"child": 2297},{"kind": 6,"const": true,"elem": 1211},{"kind": 13,"child": 2318},{"kind": 6,"elem": 1245},{"kind": 6,"elem": 1211},{"kind": 6,"elem": 1715},{"kind": 14,"err": 2319,"payload": 976},{"kind": 14,"err": 2320,"payload": 976},{"kind": 14,"err": 2321,"payload": 976},{"kind": 14,"err": 2322,"payload": 976},{"kind": 6,"elem": 1214},{"kind": 14,"err": 2323,"payload": 1762},{"kind": 14,"err": 2324,"payload": 1762},{"kind": 14,"err": 2325,"payload": 976},{"kind": 14,"err": 2326,"payload": 976},{"kind": 6,"const": true,"elem": 1214},{"kind": 14,"err": 2327,"payload": 976},{"kind": 6,"len": 1,"elem": 1212},{"kind": 8,"name": "std.hash_map.Metadata","src": 775,"pubDecls": [2340,2341,2342,2343,2344,2345],"privDecls": [2346,2347,2348,2349,2350],"fields": [1522,1271]},{"kind": 8,"name": "std.hash_map.GetOrPutResult","src": 838,"pubDecls": [],"privDecls": [],"fields": [1441,2318,967]},{"kind": 14,"err": 2039,"payload": 1748},{"kind": 13,"child": 1212},{"kind": 6,"len": 2,"const": true,"elem": 1157},{"kind": 8,"name": "parser.Parser","src": 839,"pubDecls": [2351,2352,2353],"privDecls": [2354,2355,2356,2357,2358,2359,2360,2361,2362,2363,2364,2365,2366,2367,2368,2369,2370,2371,2372,2373,2374,2375,2376,2377,2378],"fields": [1312,1708,1767,1242,1800,965,967],"file": 11},{"kind": 8,"name": "parser.tokenizer.Tokenizer","src": 840,"pubDecls": [2379,2380,2381,2382,2383],"privDecls": [2384,2385],"fields": [1721,965]},{"kind": 14,"err": 1805,"payload": 1242},{"kind": 6,"elem": 1766},{"kind": 6,"elem": 1800},{"kind": 14,"err": 2330,"payload": 976},{"kind": 6,"elem": 1711},{"kind": 14,"err": 2331,"payload": 976},{"kind": 8,"name": "Help.struct:56:34","src": 841,"pubDecls": [],"privDecls": [],"fields": [978]},{"kind": 14,"err": 2332,"payload": 976},{"kind": 14,"err": 2333,"payload": 976},{"kind": 8,"name": "Help.struct:67:39","src": 842,"pubDecls": [],"privDecls": [],"fields": [978]},{"kind": 8,"name": "Help.struct:69:31","src": 843,"pubDecls": [],"privDecls": [],"fields": [978]},{"kind": 8,"name": "Help.struct:75:45","src": 844,"pubDecls": [],"privDecls": [],"fields": [1015,978,1015]},{"kind": 8,"name": "Help.struct:83:44","src": 845,"pubDecls": [],"privDecls": [],"fields": [1015,1015]},{"kind": 14,"err": 2334,"payload": 976},{"kind": 8,"name": "Help.struct:96:40","src": 846,"pubDecls": [],"privDecls": [],"fields": [978]},{"kind": 8,"name": "Help.struct:97:62","src": 847,"pubDecls": [],"privDecls": [],"fields": [978]},{"kind": 14,"err": 2335,"payload": 976},{"kind": 8,"name": "Help.struct:110:45","src": 848,"pubDecls": [],"privDecls": [],"fields": [1015]},{"kind": 8,"name": "Help.struct:129:50","src": 849,"pubDecls": [],"privDecls": [],"fields": [978]},{"kind": 8,"name": "Help.struct:138:48","src": 850,"pubDecls": [],"privDecls": [],"fields": [978]},{"kind": 8,"name": "Help.struct:144:44","src": 851,"pubDecls": [],"privDecls": [],"fields": [978]},{"kind": 14,"err": 2336,"payload": 976},{"kind": 8,"name": "Help.struct:158:14","src": 852,"pubDecls": [],"privDecls": [],"fields": [978,978]},{"kind": 14,"err": 2337,"payload": 976},{"kind": 6,"elem": 1249},{"kind": 14,"err": 2338,"payload": 976},{"kind": 6,"elem": 1239},{"kind": 6,"elem": 1189},{"kind": 6,"elem": 1206},{"kind": 6,"elem": 1977},{"kind": 6,"elem": 1761},{"kind": 14,"err": 2039,"payload": 2339},{"kind": 8,"name": "parser.ErrorBuilder","src": 853,"pubDecls": [2386,2387,2388,2389,2390,2391,2392],"privDecls": [2393,2394,2395,2396,2397,2398],"fields": [1805,1709,1710,978],"file": 12},{"kind": 13,"child": 1835},{"kind": 6,"elem": 1767},{"kind": 6,"const": true,"elem": 1835},{"kind": 14,"err": 1805,"payload": 976},{"kind": 15,"name": "parser.Parser.Error","errors": [13,14,15,16,17,18,19,20,21,22,23,24]},{"kind": 14,"err": 2328,"payload": 976},{"kind": 14,"err": 1805,"payload": 1715},{"kind": 8,"name": "parser.ErrorBuilder.struct:44:69","src": 854,"pubDecls": [],"privDecls": [],"fields": [978]},{"kind": 8,"name": "parser.ErrorBuilder.struct:45:75","src": 855,"pubDecls": [],"privDecls": [],"fields": [978]},{"kind": 8,"name": "parser.ErrorBuilder.struct:46:121","src": 856,"pubDecls": [],"privDecls": [],"fields": [978]},{"kind": 8,"name": "parser.ErrorBuilder.struct:47:126","src": 857,"pubDecls": [],"privDecls": [],"fields": [978]},{"kind": 8,"name": "parser.ErrorBuilder.struct:48:109","src": 858,"pubDecls": [],"privDecls": [],"fields": [978]},{"kind": 8,"name": "parser.ErrorBuilder.struct:49:104","src": 859,"pubDecls": [],"privDecls": [],"fields": [978]},{"kind": 8,"name": "parser.ErrorBuilder.struct:50:121","src": 860,"pubDecls": [],"privDecls": [],"fields": [978]},{"kind": 8,"name": "parser.ErrorBuilder.struct:51:113","src": 861,"pubDecls": [],"privDecls": [],"fields": [978]},{"kind": 8,"name": "parser.ErrorBuilder.struct:53:79","src": 862,"pubDecls": [],"privDecls": [],"fields": [978,978]},{"kind": 8,"name": "parser.ErrorBuilder.struct:64:61","src": 863,"pubDecls": [],"privDecls": [],"fields": [978]},{"kind": 8,"name": "parser.ErrorBuilder.struct:68:108","src": 864,"pubDecls": [],"privDecls": [],"fields": [978,965]},{"kind": 8,"name": "parser.ErrorBuilder.struct:84:16","src": 865,"pubDecls": [],"privDecls": [],"fields": [978,965]},{"kind": 8,"name": "parser.ErrorBuilder.struct:86:64","src": 866,"pubDecls": [],"privDecls": []},{"kind": 14,"err": 2340,"payload": 976},{"kind": 14,"err": 2341,"payload": 976},{"kind": 14,"err": 2342,"payload": 976},{"kind": 14,"err": 2343,"payload": 976},{"kind": 14,"err": 2344,"payload": 976},{"kind": 14,"err": 2345,"payload": 976},{"kind": 14,"err": 2346,"payload": 976},{"kind": 14,"err": 2347,"payload": 976},{"kind": 14,"err": 2348,"payload": 976},{"kind": 14,"err": 2349,"payload": 976},{"kind": 14,"err": 2350,"payload": 976},{"kind": 14,"err": 2351,"payload": 976},{"kind": 14,"err": 2352,"payload": 976},{"kind": 6,"elem": 1195},{"kind": 8,"name": "parser.tokenizer.Token","src": 867,"pubDecls": [2399,2400,2401,2402,2403],"privDecls": [],"fields": [978,1836]},{"kind": 16,"name": "parser.tokenizer.Tag","src": 868,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5,6,7,8,9,10]},{"kind": 13,"child": 1721},{"kind": 14,"err": 2353,"payload": 976},{"kind": 14,"err": 2354,"payload": 976},{"kind": 14,"err": 2355,"payload": 976},{"kind": 14,"err": 2356,"payload": 976},{"kind": 14,"err": 2357,"payload": 976},{"kind": 6,"elem": 1278},{"kind": 8,"name": "parser.Parser.ShortOption","src": 869,"pubDecls": [2404,2405,2406,2407,2408,2409,2410],"privDecls": [2411],"fields": [978,1135,965]},{"kind": 13,"child": 2358},{"kind": 6,"elem": 1844},{"kind": 6,"elem": 1281},{"kind": 8,"name": "std.special.struct:130:106","src": 832,"pubDecls": [],"privDecls": [],"fields": [1069,1069,978]},{"kind": 8,"name": "std.special.struct:130:106","src": 832,"pubDecls": [],"privDecls": [],"fields": [1069,1069,978]},{"kind": 8,"name": "std.special.struct:130:106","src": 832,"pubDecls": [],"privDecls": [],"fields": [1069,1069,978]},{"kind": 8,"name": "std.special.struct:130:106","src": 832,"pubDecls": [],"privDecls": [],"fields": [1069,1069,978]},{"kind": 8,"name": "std.special.struct:130:106","src": 832,"pubDecls": [],"privDecls": [],"fields": [1069,1069,978]},{"kind": 8,"name": "std.special.struct:130:106","src": 832,"pubDecls": [],"privDecls": [],"fields": [1069,1069,978]},{"kind": 8,"name": "std.special.struct:130:106","src": 832,"pubDecls": [],"privDecls": [],"fields": [1069,1069,978]},{"kind": 8,"name": "std.special.struct:130:106","src": 832,"pubDecls": [],"privDecls": [],"fields": [1069,1069,978]},{"kind": 8,"name": "std.special.struct:130:106","src": 832,"pubDecls": [],"privDecls": [],"fields": [1069,1069,978,978]},{"kind": 8,"name": "std.special.struct:130:106","src": 832,"pubDecls": [],"privDecls": [],"fields": [1069,1069,978,965]},{"kind": 8,"name": "std.special.struct:130:106","src": 832,"pubDecls": [],"privDecls": [],"fields": [1069,1069,978,965]},{"kind": 8,"name": "std.special.struct:130:106","src": 832,"pubDecls": [],"privDecls": [],"fields": [1069,1069]},{"kind": 6,"elem": 2359},{"kind": 14,"err": 2360,"payload": 976},{"kind": 14,"err": 2361,"payload": 976},{"kind": 14,"err": 2362,"payload": 976},{"kind": 14,"err": 2363,"payload": 976},{"kind": 14,"err": 2364,"payload": 976},{"kind": 14,"err": 2365,"payload": 976},{"kind": 14,"err": 2366,"payload": 976},{"kind": 14,"err": 2367,"payload": 976},{"kind": 14,"err": 2368,"payload": 976},{"kind": 14,"err": 2369,"payload": 976},{"kind": 14,"err": 2370,"payload": 976},{"kind": 14,"err": 2371,"payload": 976},{"kind": 14,"err": 2372,"payload": 976},{"kind": 14,"err": 2373,"payload": 976},{"kind": 8,"name": "parser.tokenizer.struct:183:61","src": 870,"pubDecls": [],"privDecls": [],"fields": [1069,1069]},{"kind": 14,"err": 2374,"payload": 976},{"kind": 8,"name": "std.target","src": 871,"pubDecls": [2412],"privDecls": [2413,2414,2415],"file": 13},{"kind": 7,"len": 9,"elem": 965},{"kind": 8,"name": "std.io.writer","src": 872,"pubDecls": [2416],"privDecls": [2417,2418,2419],"file": 14},{"kind": 18,"name": "fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write),[]const u8,anytype) anytype","generic": true,"args": [970,978,null]},{"kind": 8,"name": "std.fs.file","src": 873,"pubDecls": [2420],"privDecls": [2421,2422,2423,2424,2425,2426,2427,2428,2429,2430,2431],"file": 15},{"kind": 16,"name": "std.fs.file.Kind","src": 874,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5,6,7,8,9,10]},{"kind": 15,"name": "std.fs.file.OpenError","errors": [25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46]},{"kind": 16,"name": "std.fs.file.Lock","src": 875,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 15,"name": "std.fs.file.GetSeekPosError","errors": [47,48,11,49]},{"kind": 8,"name": "std.fs.file.Stat","src": 876,"pubDecls": [],"privDecls": [],"fields": [988,988,1134,1882,2376,2376,2376]},{"kind": 15,"name": "std.os.FStatError","errors": [49,50,11]},{"kind": 15,"name": "std.os.ReadError","errors": [51,52,53,54,55,56,57,58,59,60,11]},{"kind": 16,"name": "std.io.ModeOverride","src": 877,"pubDecls": [],"privDecls": [],"fields": [0]},{"kind": 8,"name": "std.builtin.Declaration","src": 878,"pubDecls": [2432],"privDecls": [],"fields": [978,967,2377]},{"kind": 16,"name": "std.fmt.Alignment","src": 879,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 17,"name": "std.fmt.Specifier","src": 880,"pubDecls": [],"privDecls": [],"fields": [976,965,978]},{"kind": 8,"name": "std.hash_map","src": 881,"pubDecls": [2433,2434,2435,2436,2437,2438,2439,2440,2441,2442,2443,2444,2445,2446,2447,2448,2449],"privDecls": [2450,2451,2452,2453,2454,2455,2456,2457,2458,2459,2460,2461,2462],"file": 16},{"kind": 8,"name": "std.debug.ModuleDebugInfo","src": 882,"pubDecls": [2463],"privDecls": [],"fields": [965,1360,978]},{"kind": 18,"name": "fn(std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80),anytype,anytype) anytype","generic": true,"args": [994,null,null]},{"kind": 18,"name": "fn(*const std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80),anytype,anytype) anytype","generic": true,"args": [1418,null,null]},{"kind": 8,"name": "std.hash_map.Header","src": 883,"pubDecls": [],"privDecls": [],"fields": [1423,1173,1134]},{"kind": 18,"name": "fn(std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80),anytype,anytype) callconv(.Inline) anytype","generic": true,"args": [994,null,null]},{"kind": 13,"child": 2380},{"kind": 8,"name": "std.array_list","src": 884,"pubDecls": [2464,2465,2466,2467],"privDecls": [2468,2469,2470,2471,2472,2473,2474,2475],"file": 17},{"kind": 6,"elem": 2107},{"kind": 13,"child": 2381},{"kind": 17,"name": "std.dwarf.FormValue","src": 885,"pubDecls": [],"privDecls": [],"fields": [988,1065,2113,1065,967,988,988,988,978,988]},{"kind": 8,"name": "std.target.Os","src": 886,"pubDecls": [2476,2477,2478,2479,2480,2481,2482,2483],"privDecls": [],"fields": [1011,2384]},{"kind": 8,"name": "std.target.arm","src": 887,"pubDecls": [2484,2485,2486,2487,2488,2489,2490],"privDecls": [2491,2492,2493],"file": 18},{"kind": 16,"name": "std.target.Abi","src": 888,"pubDecls": [2494,2495,2496,2497],"privDecls": [],"fields": [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]},{"kind": 16,"name": "std.target.ObjectFormat","src": 889,"pubDecls": [2498],"privDecls": [],"fields": [0,1,2,3,4,5,6,7,8]},{"kind": 8,"name": "std.target.Cpu","src": 890,"pubDecls": [2499,2500,2501,2502],"privDecls": [],"fields": [968,2388,957]},{"kind": 8,"name": "std.io.fixed_buffer_stream","src": 891,"pubDecls": [2503,2504],"privDecls": [2505,2506,2507,2508,2509,2510],"file": 19},{"kind": 8,"name": "std.io.reader","src": 892,"pubDecls": [2511],"privDecls": [2512,2513,2514,2515,2516],"file": 20},{"kind": 18,"name": "fn(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read),usize) anytype","generic": true,"args": [1025,965]},{"kind": 18,"name": "fn(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read),type,anytype) anytype","generic": true,"args": [1025,954,null]},{"kind": 18,"name": "fn(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read),type,anytype,anytype) anytype","generic": true,"args": [1025,954,null,null]},{"kind": 8,"name": "std.io.seekable_stream","src": 893,"pubDecls": [2517],"privDecls": [2518],"file": 21},{"kind": 8,"name": "std.builtin","src": 894,"pubDecls": [2519,2520,2521,2522,2523,2524,2525,2526,2527,2528,2529,2530,2531,2532,2533,2534,2535,2536,2537,2538,2539,2540,2541,2542,2543,2544,2545,2546,2547,2548,2549,2550,2551,2552,2553,2554,2555,2556,2557,2558,2559,2560,2561,2562,2563,2564,2565,2566,2567],"privDecls": [2568,2569,2570],"file": 22},{"kind": 8,"name": "std.builtin.Int","src": 895,"pubDecls": [],"privDecls": [],"fields": [960,1034]},{"kind": 8,"name": "std.builtin.Float","src": 896,"pubDecls": [],"privDecls": [],"fields": [1034]},{"kind": 8,"name": "std.builtin.Pointer","src": 897,"pubDecls": [2571],"privDecls": [],"fields": [1060,967,967,1034,2394,954,967,2399]},{"kind": 8,"name": "std.builtin.Array","src": 898,"pubDecls": [],"privDecls": [],"fields": [1034,954,2399]},{"kind": 8,"name": "std.builtin.StructField","src": 899,"pubDecls": [],"privDecls": [],"fields": [978,954,2399,967,1034]},{"kind": 8,"name": "std.builtin.Struct","src": 900,"pubDecls": [],"privDecls": [],"fields": [1148,1263,2400,967]},{"kind": 8,"name": "std.builtin.Optional","src": 901,"pubDecls": [],"privDecls": [],"fields": [954]},{"kind": 8,"name": "std.builtin.ErrorUnion","src": 902,"pubDecls": [],"privDecls": [],"fields": [954,954]},{"kind": 8,"name": "std.builtin.Error","src": 903,"pubDecls": [],"privDecls": [],"fields": [978]},{"kind": 13,"child": 2401},{"kind": 8,"name": "std.builtin.Enum","src": 904,"pubDecls": [],"privDecls": [],"fields": [1148,954,1182,2400,967]},{"kind": 8,"name": "std.builtin.UnionField","src": 905,"pubDecls": [],"privDecls": [],"fields": [978,954,1034]},{"kind": 8,"name": "std.builtin.Union","src": 906,"pubDecls": [],"privDecls": [],"fields": [1148,1955,2402,2400]},{"kind": 8,"name": "std.builtin.FnArg","src": 907,"pubDecls": [],"privDecls": [],"fields": [967,967,1955]},{"kind": 8,"name": "std.builtin.Fn","src": 908,"pubDecls": [],"privDecls": [],"fields": [2393,1034,967,967,1955,2403]},{"kind": 8,"name": "std.builtin.Opaque","src": 909,"pubDecls": [],"privDecls": [],"fields": [2400]},{"kind": 8,"name": "std.builtin.Frame","src": 910,"pubDecls": [],"privDecls": [],"fields": [2399]},{"kind": 8,"name": "std.builtin.AnyFrame","src": 911,"pubDecls": [],"privDecls": [],"fields": [1955]},{"kind": 8,"name": "std.builtin.Vector","src": 912,"pubDecls": [],"privDecls": [],"fields": [1034,954]},{"kind": 8,"name": "std.linked_list","src": 913,"pubDecls": [2572,2573],"privDecls": [2574,2575,2576,2577,2578,2579],"file": 23},{"kind": 8,"name": "std.linked_list.Node","src": 914,"pubDecls": [2580,2581,2582,2583,2584],"privDecls": [],"fields": [1937,1065]},{"kind": 13,"child": 1551},{"kind": 8,"name": "std.atomic.queue","src": 915,"pubDecls": [2585],"privDecls": [2586,2587,2588,2589,2590,2591,2592,2593,2594],"file": 24},{"kind": 8,"name": "std.linked_list.Node","src": 916,"pubDecls": [],"privDecls": [],"fields": [1940,1940,1077]},{"kind": 13,"child": 2404},{"kind": 8,"name": "std.Thread.Mutex","src": 917,"pubDecls": [2595,2596,2597,2598,2599,2600,2601],"privDecls": [2602,2603,2604,2605,2606,2607,2608,2609,2610,2611,2612,2613],"fields": [2032],"file": 25},{"kind": 8,"name": "std.atomic.Atomic","src": 918,"pubDecls": [2614],"privDecls": [2615,2616,2617,2618,2619,2620,2621],"file": 26},{"kind": 8,"name": "std.linked_list.Node","src": 916,"pubDecls": [],"privDecls": [],"fields": [1944,1944,1086]},{"kind": 13,"child": 2406},{"kind": 8,"name": "std.event.loop","src": 919,"pubDecls": [2622],"privDecls": [2623,2624,2625,2626,2627,2628,2629,2630,2631,2632,2633,2634,2635,2636,2637,2638],"file": 27},{"kind": 17,"name": "std.event.loop.Finish","src": 920,"pubDecls": [],"privDecls": [],"fields": [1939,976]},{"kind": 17,"name": "std.event.loop.Msg","src": 921,"pubDecls": [2639,2640,2641,2642,2643,2644,2645,2646,2647,2648,2649,2650],"privDecls": [],"fields": [2409,2410,2411,2412,2413,2414,2415,2416,2417,2418,2419,2420,976]},{"kind": 8,"name": "std.atomic.stack","src": 922,"pubDecls": [2651],"privDecls": [2652,2653,2654,2655,2656,2657,2658,2659,2660],"file": 28},{"kind": 8,"name": "std.atomic.stack.Node","src": 923,"pubDecls": [],"privDecls": [],"fields": [1950,1090]},{"kind": 13,"child": 2421},{"kind": 8,"name": "std.event.loop.ResumeNode","src": 924,"pubDecls": [2661,2662,2663,2664,2665],"privDecls": [2666,2667],"fields": [2422,1077,976]},{"kind": 8,"name": "std.heap.general_purpose_allocator","src": 925,"pubDecls": [2668,2669],"privDecls": [2670,2671,2672,2673,2674,2675,2676,2677,2678,2679,2680,2681,2682,2683,2684,2685],"file": 29},{"kind": 8,"name": "std.heap.general_purpose_allocator.BucketHeader","src": 926,"pubDecls": [],"privDecls": [2686,2687,2688],"fields": [1645,1645,1546,1143,1143]},{"kind": 7,"len": 12,"elem": 2423},{"kind": 13,"child": 954},{"kind": 8,"name": "std.hash_map.Header","src": 883,"pubDecls": [],"privDecls": [],"fields": [1670,1173,1134]},{"kind": 13,"child": 2424},{"kind": 7,"len": 1,"elem": 2283},{"kind": 8,"name": "std.os.linux.arm-eabi","src": 927,"pubDecls": [2689,2690,2691,2692,2693,2694,2695,2696,2697,2698,2699,2700,2701,2702,2703,2704,2705,2706,2707,2708,2709,2710,2711,2712,2713,2714,2715,2716,2717,2718,2719,2720,2721,2722,2723],"privDecls": [2724,2725,2726,2727,2728,2729,2730,2731,2732,2733,2734,2735,2736],"file": 30},{"kind": 8,"name": "std.heap","src": 928,"pubDecls": [2737,2738,2739,2740,2741,2742,2743,2744,2745,2746,2747,2748,2749,2750,2751,2752,2753,2754,2755,2756,2757],"privDecls": [2758,2759,2760,2761,2762,2763,2764,2765,2766,2767,2768,2769,2770,2771,2772,2773,2774,2775,2776,2777,2778,2779],"file": 31},{"kind": 6,"len": 1,"const": true,"elem": 1671},{"kind": 8,"name": "std.log","src": 929,"pubDecls": [2780,2781,2782,2783,2784,2785,2786,2787,2788,2789,2790,2791,2792,2793,2794],"privDecls": [2795,2796,2797,2798,2799],"file": 32},{"kind": 18,"name": "fn([]const u8,anytype) anytype","generic": true,"args": [978,null]},{"kind": 7,"len": 0,"elem": 1015},{"kind": 18,"name": "fn(std.builtin.StackTrace,[]const u8,anytype,anytype) anytype","generic": true,"args": [1175,978,null,null]},{"kind": 8,"name": "settings","src": 930,"pubDecls": [2800],"privDecls": [2801,2802,2803],"file": 33},{"kind": 8,"name": "std.enums","src": 931,"pubDecls": [2804,2805,2806,2807,2808,2809,2810,2811,2812,2813,2814,2815,2816,2817,2818],"privDecls": [2819,2820,2821,2822,2823,2824,2825],"file": 34},{"kind": 7,"len": 3,"elem": 967},{"kind": 8,"name": "std.bit_set","src": 932,"pubDecls": [2826,2827,2828,2829,2830,2831],"privDecls": [2832,2833,2834,2835,2836,2837,2838],"file": 35},{"kind": 13,"child": 1178},{"kind": 8,"name": "std.mem","src": 933,"pubDecls": [2839,2840,2841,2842,2843,2844,2845,2846,2847,2848,2849,2850,2851,2852,2853,2854,2855,2856,2857,2858,2859,2860,2861,2862,2863,2864,2865,2866,2867,2868,2869,2870,2871,2872,2873,2874,2875,2876,2877,2878,2879,2880,2881,2882,2883,2884,2885,2886,2887,2888,2889,2890,2891,2892,2893,2894,2895,2896,2897,2898,2899,2900,2901,2902,2903,2904,2905,2906,2907,2908,2909,2910,2911,2912,2913,2914,2915,2916,2917,2918,2919,2920,2921,2922,2923,2924,2925,2926,2927,2928,2929,2930,2931,2932,2933,2934,2935,2936,2937,2938,2939,2940,2941,2942,2943,2944,2945,2946,2947],"privDecls": [2948,2949,2950,2951,2952,2953,2954,2955,2956,2957,2958,2959,2960,2961,2962,2963,2964,2965,2966,2967,2968,2969,2970,2971,2972,2973,2974,2975],"file": 36},{"kind": 18,"name": "fn(std.hash_map.HashMapUnmanaged([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80),anytype,anytype) anytype","generic": true,"args": [1214,null,null]},{"kind": 18,"name": "fn(std.hash_map.HashMapUnmanaged([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80),anytype,anytype) anytype","generic": true,"args": [1214,null,null]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80),std.mem.Allocator,anytype,anytype,anytype) anytype","generic": true,"args": [1753,1312,null,null,null]},{"kind": 18,"name": "fn(*std.hash_map.HashMapUnmanaged([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80),anytype,anytype) anytype","generic": true,"args": [1753,null,null]},{"kind": 18,"name": "fn(*const std.hash_map.HashMapUnmanaged([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80),anytype,anytype) anytype","generic": true,"args": [1758,null,null]},{"kind": 8,"name": "std.hash_map.Header","src": 883,"pubDecls": [],"privDecls": [],"fields": [1760,1136,1134]},{"kind": 18,"name": "fn(std.hash_map.HashMapUnmanaged([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80),anytype,anytype) callconv(.Inline) anytype","generic": true,"args": [1214,null,null]},{"kind": 13,"child": 2469},{"kind": 8,"name": "std.hash_map.Metadata","src": 775,"pubDecls": [2976,2977,2978,2979,2980,2981],"privDecls": [2982,2983,2984,2985,2986],"fields": [1522,1271]},{"kind": 13,"child": 2470},{"kind": 6,"len": 2,"elem": 1219},{"kind": 8,"name": "std.coff.SectionHeader","src": 934,"pubDecls": [],"privDecls": [2987],"fields": [2472,2471,1134,1134,1134,1134,1134,961,961,1134]},{"kind": 8,"name": "std.hash_map.Metadata","src": 775,"pubDecls": [2988,2989,2990,2991,2992,2993],"privDecls": [2994,2995,2996,2997,2998],"fields": [1522,1271]},{"kind": 13,"child": 2473},{"kind": 7,"len": 2,"elem": 967},{"kind": 13,"child": 1748},{"kind": 15,"name": "Yazap.Error","errors": [61,62,13,14,15,16,17,18,19,20,21,22,23,24,0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 13,"child": 1765},{"kind": 6,"len": 1,"const": true,"elem": 1761},{"kind": 8,"name": "std.io.buffered_writer","src": 935,"pubDecls": [2999,3000],"privDecls": [3001,3002],"file": 37},{"kind": 8,"name": "std.fifo","src": 936,"pubDecls": [3003,3004],"privDecls": [3005,3006,3007,3008,3009,3010,3011],"file": 38},{"kind": 7,"len": 4096,"elem": 1015},{"kind": 18,"name": "fn(std.io.writer.Writer(*std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)),std.os.WriteError,std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)).write),[]const u8,anytype) anytype","generic": true,"args": [1251,978,null]},{"kind": 18,"name": "fn([]const u8,anytype) anytype","generic": true,"args": [978,null]},{"kind": 7,"len": 2,"elem": 1015},{"kind": 8,"name": "std.Progress","src": 937,"pubDecls": [3012,3013,3014,3015,3016],"privDecls": [3017,3018,3019,3020,3021,3022,3023,3024],"fields": [2477,967,967,967,1586,1641,988,2478,988,988,967,1941,965],"file": 39},{"kind": 8,"name": "std.Thread","src": 938,"pubDecls": [3025,3026,3027,3028,3029,3030,3031,3032,3033,3034,3035,3036,3037,3038,3039,3040,3041,3042,3043,3044,3045,3046,3047,3048,3049],"privDecls": [3050,3051,3052,3053,3054,3055,3056,3057,3058,3059,3060,3061,3062,3063,3064,3065,3066,3067],"fields": [2481],"file": 40},{"kind": 8,"name": "std.atomic","src": 939,"pubDecls": [3068,3069,3070,3071,3072,3073,3074],"privDecls": [3075,3076],"file": 41},{"kind": 8,"name": "std.coff","src": 940,"pubDecls": [3077,3078,3079,3080,3081,3082,3083,3084,3085,3086,3087,3088,3089,3090],"privDecls": [3091,3092,3093,3094,3095,3096,3097,3098,3099,3100,3101,3102,3103,3104,3105,3106,3107,3108],"file": 42},{"kind": 8,"name": "std.debug","src": 941,"pubDecls": [3109,3110,3111,3112,3113,3114,3115,3116,3117,3118,3119,3120,3121,3122,3123,3124,3125,3126,3127,3128,3129,3130,3131,3132,3133,3134,3135,3136,3137,3138,3139,3140],"privDecls": [3141,3142,3143,3144,3145,3146,3147,3148,3149,3150,3151,3152,3153,3154,3155,3156,3157,3158,3159,3160,3161,3162,3163,3164,3165,3166,3167,3168,3169,3170,3171,3172,3173,3174,3175,3176,3177,3178,3179,3180,3181,3182,3183,3184,3185,3186,3187,3188,3189,3190,3191,3192],"file": 43},{"kind": 8,"name": "std.dwarf","src": 942,"pubDecls": [3193,3194,3195,3196,3197,3198,3199,3200,3201,3202,3203,3204,3205,3206],"privDecls": [3207,3208,3209,3210,3211,3212,3213,3214,3215,3216,3217,3218,3219,3220,3221,3222,3223,3224,3225,3226,3227,3228,3229,3230,3231,3232,3233,3234,3235],"file": 44},{"kind": 8,"name": "std.elf","src": 943,"pubDecls": [3236,3237,3238,3239,3240,3241,3242,3243,3244,3245,3246,3247,3248,3249,3250,3251,3252,3253,3254,3255,3256,3257,3258,3259,3260,3261,3262,3263,3264,3265,3266,3267,3268,3269,3270,3271,3272,3273,3274,3275,3276,3277,3278,3279,3280,3281,3282,3283,3284,3285,3286,3287,3288,3289,3290,3291,3292,3293,3294,3295,3296,3297,3298,3299,3300,3301,3302,3303,3304,3305,3306,3307,3308,3309,3310,3311,3312,3313,3314,3315,3316,3317,3318,3319,3320,3321,3322,3323,3324,3325,3326,3327,3328,3329,3330,3331,3332,3333,3334,3335,3336,3337,3338,3339,3340,3341,3342,3343,3344,3345,3346,3347,3348,3349,3350,3351,3352,3353,3354,3355,3356,3357,3358,3359,3360,3361,3362,3363,3364,3365,3366,3367,3368,3369,3370,3371,3372,3373,3374,3375,3376,3377,3378,3379,3380,3381,3382,3383,3384,3385,3386,3387,3388,3389,3390,3391,3392,3393,3394,3395,3396,3397,3398,3399,3400,3401,3402,3403,3404,3405,3406,3407,3408,3409,3410,3411,3412,3413,3414,3415,3416,3417,3418,3419,3420,3421,3422,3423,3424,3425,3426,3427,3428,3429,3430,3431,3432,3433,3434,3435,3436,3437,3438,3439,3440,3441,3442,3443,3444,3445,3446,3447,3448,3449,3450,3451,3452,3453,3454,3455,3456,3457,3458,3459,3460,3461,3462,3463,3464,3465,3466,3467,3468,3469,3470,3471,3472,3473,3474,3475,3476,3477,3478,3479,3480,3481,3482,3483,3484,3485,3486,3487,3488,3489,3490,3491,3492,3493,3494,3495,3496,3497,3498,3499,3500,3501,3502,3503,3504,3505,3506,3507,3508,3509,3510,3511,3512,3513,3514,3515,3516,3517,3518,3519,3520,3521,3522,3523,3524,3525,3526,3527,3528,3529,3530,3531,3532,3533,3534,3535,3536,3537,3538,3539,3540,3541,3542,3543,3544,3545,3546,3547,3548,3549,3550,3551,3552,3553,3554,3555,3556,3557,3558,3559,3560,3561,3562,3563,3564,3565,3566,3567,3568,3569,3570,3571,3572,3573,3574,3575,3576,3577,3578,3579,3580,3581,3582,3583,3584,3585,3586,3587,3588,3589,3590,3591,3592,3593,3594,3595,3596,3597,3598,3599,3600,3601,3602,3603,3604,3605,3606,3607,3608,3609,3610,3611,3612,3613,3614,3615,3616,3617,3618,3619,3620,3621,3622,3623,3624,3625,3626,3627,3628,3629,3630,3631,3632,3633,3634,3635,3636,3637,3638,3639,3640,3641,3642,3643,3644,3645,3646,3647,3648,3649,3650,3651,3652,3653,3654,3655,3656,3657,3658,3659,3660,3661,3662,3663,3664,3665,3666],"privDecls": [3667,3668,3669,3670,3671,3672,3673,3674],"file": 45},{"kind": 8,"name": "std.event","src": 944,"pubDecls": [3675,3676,3677,3678,3679,3680,3681,3682,3683,3684],"privDecls": [],"file": 46},{"kind": 8,"name": "std.fmt","src": 945,"pubDecls": [3685,3686,3687,3688,3689,3690,3691,3692,3693,3694,3695,3696,3697,3698,3699,3700,3701,3702,3703,3704,3705,3706,3707,3708,3709,3710,3711,3712,3713,3714,3715,3716,3717,3718,3719,3720,3721,3722,3723,3724,3725,3726,3727,3728,3729],"privDecls": [3730,3731,3732,3733,3734,3735,3736,3737,3738,3739,3740,3741,3742,3743,3744,3745,3746,3747,3748,3749,3750,3751,3752,3753,3754,3755,3756,3757,3758,3759,3760,3761,3762,3763,3764],"file": 47},{"kind": 8,"name": "std.fs","src": 946,"pubDecls": [3765,3766,3767,3768,3769,3770,3771,3772,3773,3774,3775,3776,3777,3778,3779,3780,3781,3782,3783,3784,3785,3786,3787,3788,3789,3790,3791,3792,3793,3794,3795,3796,3797,3798,3799,3800,3801,3802,3803,3804,3805,3806,3807,3808,3809,3810,3811,3812,3813,3814,3815,3816,3817,3818,3819,3820,3821,3822,3823,3824,3825,3826,3827,3828,3829,3830],"privDecls": [3831,3832,3833,3834,3835,3836,3837,3838,3839,3840,3841,3842,3843,3844],"file": 48},{"kind": 8,"name": "std.hash","src": 947,"pubDecls": [3845,3846,3847,3848,3849,3850,3851,3852,3853,3854,3855,3856,3857,3858,3859,3860,3861,3862,3863],"privDecls": [3864,3865,3866,3867,3868],"file": 49},{"kind": 8,"name": "std.io","src": 948,"pubDecls": [3869,3870,3871,3872,3873,3874,3875,3876,3877,3878,3879,3880,3881,3882,3883,3884,3885,3886,3887,3888,3889,3890,3891,3892,3893,3894,3895,3896,3897,3898,3899,3900,3901,3902,3903,3904,3905,3906,3907,3908,3909,3910],"privDecls": [3911,3912,3913,3914,3915,3916,3917,3918,3919,3920,3921,3922,3923,3924,3925,3926,3927],"file": 50},{"kind": 8,"name": "std.math","src": 949,"pubDecls": [3928,3929,3930,3931,3932,3933,3934,3935,3936,3937,3938,3939,3940,3941,3942,3943,3944,3945,3946,3947,3948,3949,3950,3951,3952,3953,3954,3955,3956,3957,3958,3959,3960,3961,3962,3963,3964,3965,3966,3967,3968,3969,3970,3971,3972,3973,3974,3975,3976,3977,3978,3979,3980,3981,3982,3983,3984,3985,3986,3987,3988,3989,3990,3991,3992,3993,3994,3995,3996,3997,3998,3999,4000,4001,4002,4003,4004,4005,4006,4007,4008,4009,4010,4011,4012,4013,4014,4015,4016,4017,4018,4019,4020,4021,4022,4023,4024,4025,4026,4027,4028,4029,4030,4031,4032,4033,4034,4035,4036,4037,4038,4039,4040,4041,4042,4043,4044,4045,4046,4047,4048,4049,4050,4051,4052,4053,4054,4055,4056,4057,4058,4059,4060,4061,4062,4063,4064,4065,4066,4067,4068,4069,4070,4071,4072,4073,4074,4075,4076,4077,4078,4079,4080,4081,4082,4083,4084,4085,4086,4087,4088,4089,4090,4091,4092,4093,4094,4095,4096,4097],"privDecls": [4098,4099,4100,4101,4102,4103,4104,4105,4106,4107,4108,4109,4110,4111,4112,4113],"file": 51},{"kind": 8,"name": "std.meta","src": 950,"pubDecls": [4114,4115,4116,4117,4118,4119,4120,4121,4122,4123,4124,4125,4126,4127,4128,4129,4130,4131,4132,4133,4134,4135,4136,4137,4138,4139,4140,4141,4142,4143,4144,4145,4146,4147,4148,4149],"privDecls": [4150,4151,4152,4153,4154,4155,4156,4157,4158,4159,4160],"file": 52},{"kind": 8,"name": "std.os","src": 951,"pubDecls": [4161,4162,4163,4164,4165,4166,4167,4168,4169,4170,4171,4172,4173,4174,4175,4176,4177,4178,4179,4180,4181,4182,4183,4184,4185,4186,4187,4188,4189,4190,4191,4192,4193,4194,4195,4196,4197,4198,4199,4200,4201,4202,4203,4204,4205,4206,4207,4208,4209,4210,4211,4212,4213,4214,4215,4216,4217,4218,4219,4220,4221,4222,4223,4224,4225,4226,4227,4228,4229,4230,4231,4232,4233,4234,4235,4236,4237,4238,4239,4240,4241,4242,4243,4244,4245,4246,4247,4248,4249,4250,4251,4252,4253,4254,4255,4256,4257,4258,4259,4260,4261,4262,4263,4264,4265,4266,4267,4268,4269,4270,4271,4272,4273,4274,4275,4276,4277,4278,4279,4280,4281,4282,4283,4284,4285,4286,4287,4288,4289,4290,4291,4292,4293,4294,4295,4296,4297,4298,4299,4300,4301,4302,4303,4304,4305,4306,4307,4308,4309,4310,4311,4312,4313,4314,4315,4316,4317,4318,4319,4320,4321,4322,4323,4324,4325,4326,4327,4328,4329,4330,4331,4332,4333,4334,4335,4336,4337,4338,4339,4340,4341,4342,4343,4344,4345,4346,4347,4348,4349,4350,4351,4352,4353,4354,4355,4356,4357,4358,4359,4360,4361,4362,4363,4364,4365,4366,4367,4368,4369,4370,4371,4372,4373,4374,4375,4376,4377,4378,4379,4380,4381,4382,4383,4384,4385,4386,4387,4388,4389,4390,4391,4392,4393,4394,4395,4396,4397,4398,4399,4400,4401,4402,4403,4404,4405,4406,4407,4408,4409,4410,4411,4412,4413,4414,4415,4416,4417,4418,4419,4420,4421,4422,4423,4424,4425,4426,4427,4428,4429,4430,4431,4432,4433,4434,4435,4436,4437,4438,4439,4440,4441,4442,4443,4444,4445,4446,4447,4448,4449,4450,4451,4452,4453,4454,4455,4456,4457,4458,4459,4460,4461,4462,4463,4464,4465,4466,4467,4468,4469,4470,4471,4472,4473,4474,4475,4476,4477,4478,4479,4480,4481,4482,4483,4484,4485,4486,4487,4488,4489,4490,4491,4492,4493,4494,4495,4496,4497,4498,4499,4500,4501,4502,4503,4504,4505,4506,4507,4508,4509,4510,4511,4512,4513,4514,4515,4516,4517,4518,4519,4520,4521,4522,4523,4524,4525,4526,4527,4528,4529,4530,4531,4532,4533,4534,4535,4536,4537,4538,4539,4540,4541,4542,4543,4544,4545,4546,4547,4548,4549,4550,4551,4552,4553,4554],"privDecls": [4555,4556,4557,4558,4559,4560,4561,4562,4563,4564,4565,4566,4567,4568,4569,4570],"file": 53},{"kind": 8,"name": "std.pdb","src": 952,"pubDecls": [4571,4572,4573,4574,4575,4576,4577,4578,4579,4580,4581,4582,4583,4584,4585,4586,4587,4588,4589,4590,4591,4592],"privDecls": [4593,4594,4595,4596,4597,4598,4599,4600,4601,4602,4603,4604,4605,4606,4607],"file": 54},{"kind": 8,"name": "std.process","src": 953,"pubDecls": [4608,4609,4610,4611,4612,4613,4614,4615,4616,4617,4618,4619,4620,4621,4622,4623,4624,4625,4626,4627,4628,4629,4630,4631,4632,4633,4634,4635],"privDecls": [4636,4637,4638,4639,4640,4641,4642,4643,4644,4645,4646,4647],"file": 55},{"kind": 8,"name": "std.sort","src": 954,"pubDecls": [4648,4649,4650,4651,4652,4653,4654,4655,4656,4657],"privDecls": [4658,4659,4660,4661,4662,4663,4664,4665,4666,4667,4668,4669,4670,4671,4672,4673,4674,4675,4676,4677,4678,4679,4680,4681,4682,4683,4684,4685,4686],"file": 56},{"kind": 8,"name": "std.testing","src": 955,"pubDecls": [4687,4688,4689,4690,4691,4692,4693,4694,4695,4696,4697,4698,4699,4700,4701,4702,4703,4704,4705,4706],"privDecls": [4707,4708,4709,4710,4711,4712,4713,4714],"file": 57},{"kind": 8,"name": "std.time","src": 956,"pubDecls": [4715,4716,4717,4718,4719,4720,4721,4722,4723,4724,4725,4726,4727,4728,4729,4730,4731,4732,4733,4734,4735,4736,4737,4738,4739,4740,4741,4742],"privDecls": [4743,4744,4745,4746,4747,4748,4749,4750],"file": 58},{"kind": 8,"name": "std.unicode","src": 957,"pubDecls": [4751,4752,4753,4754,4755,4756,4757,4758,4759,4760,4761,4762,4763,4764,4765,4766,4767,4768,4769,4770],"privDecls": [4771,4772,4773,4774,4775,4776,4777,4778,4779,4780,4781,4782,4783,4784,4785,4786,4787,4788,4789,4790,4791,4792,4793,4794,4795,4796,4797],"file": 59},{"kind": 8,"name": "std.start","src": 958,"pubDecls": [4798,4799],"privDecls": [4800,4801,4802,4803,4804,4805,4806,4807,4808,4809,4810,4811,4812,4813,4814,4815,4816,4817,4818,4819,4820,4821,4822,4823,4824,4825,4826,4827,4828,4829,4830,4831,4832,4833,4834],"file": 60},{"kind": 16,"name": "std.builtin.OutputMode","src": 959,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 16,"name": "std.builtin.Mode","src": 960,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3]},{"kind": 6,"len": 2,"const": true,"elem": 2398},{"kind": 16,"name": "std.io.Mode","src": 961,"pubDecls": [],"privDecls": [],"fields": [0,1]},{"kind": 18,"name": "fn(std.log.Level,anytype,anytype,anytype) anytype","generic": true,"args": [2435,null,null,null]},{"kind": 7,"len": 8192,"elem": 1015},{"kind": 6,"elem": 1175},{"kind": 15},{"kind": 6,"const": true,"elem": 1175},{"kind": 8,"name": "std.Thread.StaticResetEvent","src": 962,"pubDecls": [4835,4836,4837,4838,4839,4840,4841,4842],"privDecls": [4843,4844,4845,4846,4847,4848,4849,4850,4851],"fields": [2160],"file": 61},{"kind": 8,"name": "std.elf.Elf32_Phdr","src": 963,"pubDecls": [],"privDecls": [],"fields": [1134,1134,1134,1134,1134,1134,1134,1134]},{"kind": 6,"const": true,"elem": 2552},{"kind": 6,"elem": 2552},{"kind": 8,"name": "std.Thread.Mutex.AtomicMutex","src": 964,"pubDecls": [4852,4853,4854],"privDecls": [4855,4856,4857],"fields": [1479]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 36,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.Parser.specifier)).Fn.return_type.?).ErrorUnion.error_set","fn": 39,"errors": [63]},{"kind": 8,"name": "std.fmt.Parser","src": 965,"pubDecls": [],"privDecls": [4858,4859,4860,4861,4862,4863],"fields": [978,965]},{"kind": 8,"name": "std.fmt.ArgState","src": 966,"pubDecls": [],"privDecls": [4864,4865],"fields": [965,1134,965]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 49,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15},{"kind": 15,"name": "std.mem.Allocator.Error","errors": [24]},{"kind": 8,"name": "std.mem.Allocator.VTable","src": 967,"pubDecls": [],"privDecls": [],"fields": [452,272,273]},{"kind": 18,"name": "fn(anytype,anytype,anytype,anytype) anytype","generic": true,"args": [null,null,null,null]},{"kind": 18,"name": "fn(std.mem.Allocator,type) anytype","generic": true,"args": [1312,954]},{"kind": 18,"name": "fn(std.mem.Allocator,anytype) anytype","generic": true,"args": [1312,null]},{"kind": 18,"name": "fn(std.mem.Allocator,type,anytype) anytype","generic": true,"args": [1312,954,null]},{"kind": 18,"name": "fn(std.mem.Allocator,type,anytype,anytype) anytype","generic": true,"args": [1312,954,null,null]},{"kind": 18,"name": "fn(std.mem.Allocator,type,anytype,anytype,anytype,anytype) anytype","generic": true,"args": [1312,954,null,null,null,null]},{"kind": 18,"name": "fn(std.mem.Allocator,anytype,anytype) anytype","generic": true,"args": [1312,null,null]},{"kind": 18,"name": "fn(std.mem.Allocator,anytype,anytype) anytype","generic": true,"args": [1312,null,null]},{"kind": 18,"name": "fn(std.mem.Allocator,anytype,anytype,anytype,anytype,anytype) anytype","generic": true,"args": [1312,null,null,null,null,null]},{"kind": 18,"name": "fn(std.mem.Allocator,anytype,anytype) anytype","generic": true,"args": [1312,null,null]},{"kind": 18,"name": "fn(std.mem.Allocator,anytype,anytype,anytype,anytype) anytype","generic": true,"args": [1312,null,null,null,null]},{"kind": 18,"name": "fn(std.mem.Allocator,anytype) anytype","generic": true,"args": [1312,null]},{"kind": 18,"name": "fn(std.mem.Allocator,type,anytype) anytype","generic": true,"args": [1312,954,null]},{"kind": 18,"name": "fn(std.mem.Allocator,type,anytype) anytype","generic": true,"args": [1312,954,null]},{"kind": 6,"const": true,"elem": 2040},{"kind": 18,"name": "fn(std.debug.Config,anytype,anytype) anytype","generic": true,"args": [1314,null,null]},{"kind": 15},{"kind": 15},{"kind": 15},{"kind": 15},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.debug.struct:1231:48.callback)).Fn.return_type.?).ErrorUnion.error_set","fn": 65,"errors": [64]},{"kind": 8,"name": "std.os.linux.dl_phdr_info","src": 968,"pubDecls": [],"privDecls": [],"fields": [965,1067,2575,961]},{"kind": 8,"name": "std.debug.struct:1222:18","src": 969,"pubDecls": [],"privDecls": [],"fields": [965,965,978]},{"kind": 15,"name": "std.fs.OpenSelfExeError","errors": [65,66,67,68,69,70,71,72,73,34,35,36,37,38,39,40,41,42,43,44,45,46,74,75,76,77,78,79,80]},{"kind": 15},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.debug.mapWholeFile)).Fn.return_type.?).ErrorUnion.error_set","fn": 74,"errors": [81,82,83,84,85,11,86,47,49]},{"kind": 15,"name": "std.math.error:998:44","errors": [86]},{"kind": 15,"name": "std.os.MMapError","errors": [81,82,83,84,85,11]},{"kind": 6,"len": 2,"align": 4096,"elem": 1015},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.debug.chopSlice)).Fn.return_type.?).ErrorUnion.error_set","fn": 83,"errors": [86]},{"kind": 15},{"kind": 15},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.dwarf.readUnitLength)).Fn.return_type.?).ErrorUnion.error_set","fn": 99,"errors": [87,88]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readInt)).Fn.return_type.?).ErrorUnion.error_set","fn": 100,"errors": [87]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readBytesNoEof)).Fn.return_type.?).ErrorUnion.error_set","fn": 101,"errors": [87]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readNoEof)).Fn.return_type.?).ErrorUnion.error_set","fn": 102,"errors": [87]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readInt)).Fn.return_type.?).ErrorUnion.error_set","fn": 105,"errors": [87]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readBytesNoEof)).Fn.return_type.?).ErrorUnion.error_set","fn": 106,"errors": [87]},{"kind": 7,"len": 8,"elem": 1015},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readInt)).Fn.return_type.?).ErrorUnion.error_set","fn": 108,"errors": [87]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readBytesNoEof)).Fn.return_type.?).ErrorUnion.error_set","fn": 109,"errors": [87]},{"kind": 7,"len": 2,"elem": 1015},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readByte)).Fn.return_type.?).ErrorUnion.error_set","fn": 111,"errors": [87]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.dwarf.DwarfInfo.getAbbrevTable)).Fn.return_type.?).ErrorUnion.error_set","fn": 114,"errors": [86,87,24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.AbbrevTableHeader,null).append)).Fn.return_type.?).ErrorUnion.error_set","fn": 115,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.dwarf.DwarfInfo.parseAbbrevTable)).Fn.return_type.?).ErrorUnion.error_set","fn": 116,"errors": [86,87,24]},{"kind": 18,"name": "fn(*std.dwarf.DwarfInfo,anytype,anytype,anytype) anytype","generic": true,"args": [1337,null,null,null]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.leb128.readULEB128)).Fn.return_type.?).ErrorUnion.error_set","fn": 119,"errors": [86,87]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.AbbrevTableEntry,null).append)).Fn.return_type.?).ErrorUnion.error_set","fn": 121,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.AbbrevTableEntry,null).addOne)).Fn.return_type.?).ErrorUnion.error_set","fn": 123,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.AbbrevTableEntry,null).ensureTotalCapacity)).Fn.return_type.?).ErrorUnion.error_set","fn": 124,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.AbbrevTableEntry,null).ensureTotalCapacityPrecise)).Fn.return_type.?).ErrorUnion.error_set","fn": 125,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.AbbrevAttr,null).append)).Fn.return_type.?).ErrorUnion.error_set","fn": 129,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.AbbrevAttr,null).addOne)).Fn.return_type.?).ErrorUnion.error_set","fn": 130,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.AbbrevAttr,null).ensureTotalCapacity)).Fn.return_type.?).ErrorUnion.error_set","fn": 131,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.AbbrevAttr,null).ensureTotalCapacityPrecise)).Fn.return_type.?).ErrorUnion.error_set","fn": 132,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.AbbrevTableHeader,null).addOne)).Fn.return_type.?).ErrorUnion.error_set","fn": 136,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.AbbrevTableHeader,null).ensureTotalCapacity)).Fn.return_type.?).ErrorUnion.error_set","fn": 137,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.AbbrevTableHeader,null).ensureTotalCapacityPrecise)).Fn.return_type.?).ErrorUnion.error_set","fn": 138,"errors": [24]},{"kind": 15},{"kind": 13,"child": 2107},{"kind": 6,"const": true,"elem": 1002},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.Attr,null).resize)).Fn.return_type.?).ErrorUnion.error_set","fn": 145,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.Attr,null).ensureTotalCapacity)).Fn.return_type.?).ErrorUnion.error_set","fn": 146,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.Attr,null).ensureTotalCapacityPrecise)).Fn.return_type.?).ErrorUnion.error_set","fn": 147,"errors": [24]},{"kind": 6,"const": true,"elem": 1903},{"kind": 8,"name": "std.dwarf.Die","src": 970,"pubDecls": [4866],"privDecls": [4867,4868,4869,4870,4871,4872],"fields": [988,967,1007]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.dwarf.Die.getAttrString)).Fn.return_type.?).ErrorUnion.error_set","fn": 152,"errors": [88,89]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.dwarf.DwarfInfo.getString)).Fn.return_type.?).ErrorUnion.error_set","fn": 153,"errors": [88]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.dwarf.Die.getAttrRef)).Fn.return_type.?).ErrorUnion.error_set","fn": 155,"errors": [88,89]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.dwarf.Die.getAttrAddr)).Fn.return_type.?).ErrorUnion.error_set","fn": 156,"errors": [88,89]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.dwarf.Constant.asUnsignedLe)).Fn.return_type.?).ErrorUnion.error_set","fn": 157,"errors": [88]},{"kind": 8,"name": "std.dwarf.Constant","src": 971,"pubDecls": [],"privDecls": [4873],"fields": [988,967]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.Func,null).append)).Fn.return_type.?).ErrorUnion.error_set","fn": 158,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.Func,null).addOne)).Fn.return_type.?).ErrorUnion.error_set","fn": 159,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.Func,null).ensureTotalCapacity)).Fn.return_type.?).ErrorUnion.error_set","fn": 160,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.Func,null).ensureTotalCapacityPrecise)).Fn.return_type.?).ErrorUnion.error_set","fn": 161,"errors": [24]},{"kind": 15},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.CompileUnit,null).append)).Fn.return_type.?).ErrorUnion.error_set","fn": 167,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.CompileUnit,null).addOne)).Fn.return_type.?).ErrorUnion.error_set","fn": 168,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.CompileUnit,null).ensureTotalCapacity)).Fn.return_type.?).ErrorUnion.error_set","fn": 169,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.CompileUnit,null).ensureTotalCapacityPrecise)).Fn.return_type.?).ErrorUnion.error_set","fn": 170,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMap(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80).putNoClobber)).Fn.return_type.?).ErrorUnion.error_set","fn": 174,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80).putNoClobberContext)).Fn.return_type.?).ErrorUnion.error_set","fn": 175,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80).growIfNeeded)).Fn.return_type.?).ErrorUnion.error_set","fn": 177,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80).grow)).Fn.return_type.?).ErrorUnion.error_set","fn": 178,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMapUnmanaged(usize,*std.debug.ModuleDebugInfo,std.hash_map.AutoContext(usize),80).allocate)).Fn.return_type.?).ErrorUnion.error_set","fn": 184,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.debug.printLineInfo)).Fn.return_type.?).ErrorUnion.error_set","fn": 194,"errors": [0,1,2,3,4,5,6,7,8,9,10,11,53,57,58,25,26,27,29,30,31,32,34,35,36,37,42,43,44,45,90]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.debug.ModuleDebugInfo.getSymbolAtAddress)).Fn.return_type.?).ErrorUnion.error_set","fn": 195,"errors": [86,87,91,24,88,89]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.debug.getSymbolFromDwarf)).Fn.return_type.?).ErrorUnion.error_set","fn": 196,"errors": [86,87,91,24,88,89]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.dwarf.DwarfInfo.findCompileUnit)).Fn.return_type.?).ErrorUnion.error_set","fn": 197,"errors": [88,89,87]},{"kind": 6,"const": true,"elem": 1006},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.dwarf.Die.getAttrSecOffset)).Fn.return_type.?).ErrorUnion.error_set","fn": 198,"errors": [88,89]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readInt)).Fn.return_type.?).ErrorUnion.error_set","fn": 199,"errors": [87]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.dwarf.DwarfInfo.getLineNumberInfo)).Fn.return_type.?).ErrorUnion.error_set","fn": 202,"errors": [86,87,91,24,88,89]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readByteSigned)).Fn.return_type.?).ErrorUnion.error_set","fn": 203,"errors": [87]},{"kind": 4,"i": 8},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned([]const u8,null).append)).Fn.return_type.?).ErrorUnion.error_set","fn": 207,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned([]const u8,null).addOne)).Fn.return_type.?).ErrorUnion.error_set","fn": 208,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned([]const u8,null).ensureTotalCapacity)).Fn.return_type.?).ErrorUnion.error_set","fn": 209,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned([]const u8,null).ensureTotalCapacityPrecise)).Fn.return_type.?).ErrorUnion.error_set","fn": 210,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readUntilDelimiterAlloc)).Fn.return_type.?).ErrorUnion.error_set","fn": 214,"errors": [87,91,24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readUntilDelimiterArrayList)).Fn.return_type.?).ErrorUnion.error_set","fn": 216,"errors": [87,91,24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(u8,null).append)).Fn.return_type.?).ErrorUnion.error_set","fn": 218,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(u8,null).addOne)).Fn.return_type.?).ErrorUnion.error_set","fn": 219,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(u8,null).ensureTotalCapacity)).Fn.return_type.?).ErrorUnion.error_set","fn": 220,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(u8,null).ensureTotalCapacityPrecise)).Fn.return_type.?).ErrorUnion.error_set","fn": 221,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.leb128.readULEB128)).Fn.return_type.?).ErrorUnion.error_set","fn": 229,"errors": [86,87]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.FileEntry,null).append)).Fn.return_type.?).ErrorUnion.error_set","fn": 230,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.FileEntry,null).addOne)).Fn.return_type.?).ErrorUnion.error_set","fn": 231,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.FileEntry,null).ensureTotalCapacity)).Fn.return_type.?).ErrorUnion.error_set","fn": 232,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(std.dwarf.FileEntry,null).ensureTotalCapacityPrecise)).Fn.return_type.?).ErrorUnion.error_set","fn": 233,"errors": [24]},{"kind": 15,"name": "std.math.error:998:44","errors": [92]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.dwarf.LineNumberProgram.checkLineMatch)).Fn.return_type.?).ErrorUnion.error_set","fn": 239,"errors": [24,88,89]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fs.path.join)).Fn.return_type.?).ErrorUnion.error_set","fn": 240,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fs.path.joinSepMaybeZ)).Fn.return_type.?).ErrorUnion.error_set","fn": 241,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.mem.Allocator.dupe)).Fn.return_type.?).ErrorUnion.error_set","fn": 243,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.leb128.readILEB128)).Fn.return_type.?).ErrorUnion.error_set","fn": 246,"errors": [86,87]},{"kind": 15},{"kind": 8,"name": "std.Thread.StaticResetEvent.AtomicEvent","src": 972,"pubDecls": [4874,4875,4876,4877,4878,4879,4880,4881,4882,4883],"privDecls": [4884,4885],"fields": [1134]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 256,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "std.os.SetrlimitError","errors": [93,94,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatValue)).Fn.return_type.?).ErrorUnion.error_set","fn": 271,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatIntValue)).Fn.return_type.?).ErrorUnion.error_set","fn": 272,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatInt)).Fn.return_type.?).ErrorUnion.error_set","fn": 273,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatBuf)).Fn.return_type.?).ErrorUnion.error_set","fn": 276,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.unicode.utf8CountCodepoints)).Fn.return_type.?).ErrorUnion.error_set","fn": 277,"errors": [95,96,97,98,99,100]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.unicode.utf8ByteSequenceLength)).Fn.return_type.?).ErrorUnion.error_set","fn": 279,"errors": [100]},{"kind": 15,"name": "std.unicode.Utf8DecodeError","errors": [95,96,97,98]},{"kind": 4,"u": 21},{"kind": 6,"const": true,"elem": 2433},{"kind": 6,"elem": 2433},{"kind": 8,"name": "std.heap.arena_allocator","src": 973,"pubDecls": [4886],"privDecls": [4887,4888,4889,4890],"file": 62},{"kind": 15,"name": "std.heap.error:260:82","errors": [101]},{"kind": 20,"name": "anyopaque"},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 294,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.dynamic_library.linkmap_iterator)).Fn.return_type.?).ErrorUnion.error_set","fn": 301,"errors": [102]},{"kind": 8,"name": "std.dynamic_library.Iterator","src": 974,"pubDecls": [4891,4892],"privDecls": [],"fields": [1499]},{"kind": 6,"elem": 2577},{"kind": 6,"len": 2,"elem": 1894},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.os.toPosixPath)).Fn.return_type.?).ErrorUnion.error_set","fn": 306,"errors": [30]},{"kind": 7,"len": 4095,"elem": 1015},{"kind": 15,"name": "std.math.error:998:44","errors": [103]},{"kind": 15,"name": "std.math.error:460:43","errors": [104]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.dwarf.readAddress)).Fn.return_type.?).ErrorUnion.error_set","fn": 330,"errors": [87]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.dwarf.parseFormValueBlock)).Fn.return_type.?).ErrorUnion.error_set","fn": 331,"errors": [90,24,87]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.dwarf.parseFormValueBlockLen)).Fn.return_type.?).ErrorUnion.error_set","fn": 332,"errors": [90,24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.dwarf.parseFormValueConstant)).Fn.return_type.?).ErrorUnion.error_set","fn": 333,"errors": [87]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.dwarf.parseFormValueConstant)).Fn.return_type.?).ErrorUnion.error_set","fn": 334,"errors": [87]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.dwarf.parseFormValueConstant)).Fn.return_type.?).ErrorUnion.error_set","fn": 335,"errors": [87]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.dwarf.parseFormValueConstant)).Fn.return_type.?).ErrorUnion.error_set","fn": 336,"errors": [87]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.dwarf.parseFormValueConstant)).Fn.return_type.?).ErrorUnion.error_set","fn": 337,"errors": [86,87]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.dwarf.readAllocBytes)).Fn.return_type.?).ErrorUnion.error_set","fn": 338,"errors": [90,24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.dwarf.parseFormValueRef)).Fn.return_type.?).ErrorUnion.error_set","fn": 339,"errors": [86,87]},{"kind": 21,"fnName": "std.dwarf.parseFormValue","fn": 150},{"kind": 6,"len": 2,"elem": 2107},{"kind": 15,"name": "std.math.error:1078:52","errors": [105]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.debug.printLineFromFileAnyOs)).Fn.return_type.?).ErrorUnion.error_set","fn": 358,"errors": [0,1,2,3,4,5,6,7,8,9,10,11,53,57,58,25,26,27,29,30,31,32,34,35,36,37,42,43,44,45,90]},{"kind": 13,"child": 1312},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 369,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 370,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 372,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 8,"name": "std.os.linux.tls.DTV","src": 975,"pubDecls": [],"privDecls": [],"fields": [965,2578]},{"kind": 6,"const": true,"elem": 1558},{"kind": 15,"name": "std.unicode.Utf8Decode2Error","errors": [95,96]},{"kind": 15,"name": "std.unicode.Utf8Decode3Error","errors": [106,107,97]},{"kind": 15,"name": "std.unicode.Utf8Decode4Error","errors": [108,109,98]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.heap.arena_allocator.ArenaAllocator.alloc)).Fn.return_type.?).ErrorUnion.error_set","fn": 402,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.heap.arena_allocator.ArenaAllocator.createNode)).Fn.return_type.?).ErrorUnion.error_set","fn": 405,"errors": [24]},{"kind": 6,"len": 1,"elem": 2519},{"kind": 15,"name": "std.math.error:454:43","errors": [110]},{"kind": 15,"name": "std.os.OpenError","errors": [111,34,35,36,37,112,113,38,39,40,41,42,114,43,44,115,116,45,46,11]},{"kind": 15,"name": "std.os.FlockError","errors": [117,118,119,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readVarInt)).Fn.return_type.?).ErrorUnion.error_set","fn": 445,"errors": [87]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readInt)).Fn.return_type.?).ErrorUnion.error_set","fn": 447,"errors": [87]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.io.reader.Reader(*std.io.fixed_buffer_stream.FixedBufferStream([]const u8),std.io.fixed_buffer_stream.ReadError,std.io.fixed_buffer_stream.FixedBufferStream([]const u8).read).readBytesNoEof)).Fn.return_type.?).ErrorUnion.error_set","fn": 448,"errors": [87]},{"kind": 6,"len": 2,"elem": 2195},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 464,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 466,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "std.math.error:467:43","errors": [120]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.Thread.StaticResetEvent.LinuxFutex.wait)).Fn.return_type.?).ErrorUnion.error_set","fn": 484,"errors": [121]},{"kind": 6,"elem": 1477},{"kind": 8,"name": "std.os.linux.siginfo_t","src": 976,"pubDecls": [],"privDecls": [],"fields": [1084,1084,1084,2579]},{"kind": 6,"const": true,"elem": 2175},{"kind": 8,"name": "std.hash.wyhash","src": 977,"pubDecls": [4893],"privDecls": [4894,4895,4896,4897,4898,4899,4900,4901,4902,4903],"file": 63},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatValue)).Fn.return_type.?).ErrorUnion.error_set","fn": 517,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatIntValue)).Fn.return_type.?).ErrorUnion.error_set","fn": 518,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatValue)).Fn.return_type.?).ErrorUnion.error_set","fn": 519,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatIntValue)).Fn.return_type.?).ErrorUnion.error_set","fn": 520,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatInt)).Fn.return_type.?).ErrorUnion.error_set","fn": 521,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.Progress.start)).Fn.return_type.?).ErrorUnion.error_set","fn": 532,"errors": [122]},{"kind": 15,"name": "std.time.Error","errors": [122]},{"kind": 13,"child": 1587},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 551,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 566,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 567,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 568,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.process.argsAlloc)).Fn.return_type.?).ErrorUnion.error_set","fn": 570,"errors": [110,123,124]},{"kind": 15,"name": "std.process.NextError","errors": [123,124]},{"kind": 14,"err": 2239,"payload": 1157},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(u8,null).appendSlice)).Fn.return_type.?).ErrorUnion.error_set","fn": 578,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(u8,null).ensureUnusedCapacity)).Fn.return_type.?).ErrorUnion.error_set","fn": 579,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(usize,null).append)).Fn.return_type.?).ErrorUnion.error_set","fn": 582,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(usize,null).addOne)).Fn.return_type.?).ErrorUnion.error_set","fn": 583,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(usize,null).ensureTotalCapacity)).Fn.return_type.?).ErrorUnion.error_set","fn": 584,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(usize,null).ensureTotalCapacityPrecise)).Fn.return_type.?).ErrorUnion.error_set","fn": 585,"errors": [24]},{"kind": 15,"name": "std.os.ClockGetTimeError","errors": [125,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatValue)).Fn.return_type.?).ErrorUnion.error_set","fn": 611,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatIntValue)).Fn.return_type.?).ErrorUnion.error_set","fn": 612,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatInt)).Fn.return_type.?).ErrorUnion.error_set","fn": 613,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 618,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.heap.FixedBufferAllocator.alloc)).Fn.return_type.?).ErrorUnion.error_set","fn": 619,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.mem.Allocator.dupeZ)).Fn.return_type.?).ErrorUnion.error_set","fn": 626,"errors": [24]},{"kind": 15,"name": "std.fmt.BufPrintError","errors": [126]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 644,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 646,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 647,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 655,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 656,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 657,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 658,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 659,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 660,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 661,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 662,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 663,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 674,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 680,"errors": [12]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 684,"errors": [12]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatValue)).Fn.return_type.?).ErrorUnion.error_set","fn": 694,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatIntValue)).Fn.return_type.?).ErrorUnion.error_set","fn": 695,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatValue)).Fn.return_type.?).ErrorUnion.error_set","fn": 710,"errors": [12]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatIntValue)).Fn.return_type.?).ErrorUnion.error_set","fn": 711,"errors": [12]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatInt)).Fn.return_type.?).ErrorUnion.error_set","fn": 712,"errors": [12]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatBuf)).Fn.return_type.?).ErrorUnion.error_set","fn": 713,"errors": [12]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 715,"errors": [12]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 716,"errors": [12]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 718,"errors": [12]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 719,"errors": [12]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 720,"errors": [12]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 721,"errors": [12]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 722,"errors": [12]},{"kind": 7,"len": 8,"elem": 965},{"kind": 8,"name": "std.elf.Elf32_Verdef","src": 978,"pubDecls": [],"privDecls": [],"fields": [961,961,961,961,1134,1134,1134]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 735,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 737,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.builtin.StackTrace.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 738,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 742,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 743,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.testing.expectEqual)).Fn.return_type.?).ErrorUnion.error_set","fn": 767,"errors": [127]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(Command.addArg)).Fn.return_type.?).ErrorUnion.error_set","fn": 792,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(Command.addArgs)).Fn.return_type.?).ErrorUnion.error_set","fn": 793,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(Command.addSubcommand)).Fn.return_type.?).ErrorUnion.error_set","fn": 794,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(Command.addSubcommands)).Fn.return_type.?).ErrorUnion.error_set","fn": 795,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(Command.takesSingleValue)).Fn.return_type.?).ErrorUnion.error_set","fn": 796,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(Command.takesNValues)).Fn.return_type.?).ErrorUnion.error_set","fn": 797,"errors": [24]},{"kind": 8,"name": "Help.Options","src": 979,"pubDecls": [],"privDecls": [],"fields": [1970,967,967,967]},{"kind": 18,"name": "fn(*Help,anytype) anytype","generic": true,"args": [1772,null]},{"kind": 18,"name": "fn(*Help,anytype) anytype","generic": true,"args": [1772,null]},{"kind": 18,"name": "fn(*Help,anytype) anytype","generic": true,"args": [1772,null]},{"kind": 18,"name": "fn(*Help,anytype) anytype","generic": true,"args": [1772,null]},{"kind": 18,"name": "fn(*Help,anytype) anytype","generic": true,"args": [1772,null]},{"kind": 18,"name": "fn(*Help,anytype) anytype","generic": true,"args": [1772,null]},{"kind": 18,"name": "fn(anytype) callconv(.Inline) anytype","generic": true,"args": [null]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(parser.ArgsContext.putMatchedArg)).Fn.return_type.?).ErrorUnion.error_set","fn": 810,"errors": [24,23]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(parser.ArgsContext.setSubcommand)).Fn.return_type.?).ErrorUnion.error_set","fn": 811,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(Yazap.displayHelp)).Fn.return_type.?).ErrorUnion.error_set","fn": 823,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(Yazap.displaySubcommandHelp)).Fn.return_type.?).ErrorUnion.error_set","fn": 824,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(Yazap.displayHelpAndExitIfFound)).Fn.return_type.?).ErrorUnion.error_set","fn": 827,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAlignedUnmanaged(Arg,null).append)).Fn.return_type.?).ErrorUnion.error_set","fn": 836,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAlignedUnmanaged(Arg,null).addOne)).Fn.return_type.?).ErrorUnion.error_set","fn": 837,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAlignedUnmanaged(Arg,null).ensureTotalCapacity)).Fn.return_type.?).ErrorUnion.error_set","fn": 838,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAlignedUnmanaged(Arg,null).ensureTotalCapacityPrecise)).Fn.return_type.?).ErrorUnion.error_set","fn": 839,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAlignedUnmanaged(Command,null).append)).Fn.return_type.?).ErrorUnion.error_set","fn": 843,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAlignedUnmanaged(Command,null).addOne)).Fn.return_type.?).ErrorUnion.error_set","fn": 844,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAlignedUnmanaged(Command,null).ensureTotalCapacity)).Fn.return_type.?).ErrorUnion.error_set","fn": 845,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAlignedUnmanaged(Command,null).ensureTotalCapacityPrecise)).Fn.return_type.?).ErrorUnion.error_set","fn": 846,"errors": [24]},{"kind": 6,"elem": 1212},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMap([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80).put)).Fn.return_type.?).ErrorUnion.error_set","fn": 865,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned([]const u8,null).appendSlice)).Fn.return_type.?).ErrorUnion.error_set","fn": 867,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned([]const u8,null).ensureUnusedCapacity)).Fn.return_type.?).ErrorUnion.error_set","fn": 869,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMapUnmanaged([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80).putContext)).Fn.return_type.?).ErrorUnion.error_set","fn": 871,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMapUnmanaged([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80).getOrPutContext)).Fn.return_type.?).ErrorUnion.error_set","fn": 872,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMapUnmanaged([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80).getOrPutContextAdapted)).Fn.return_type.?).ErrorUnion.error_set","fn": 873,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMapUnmanaged([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80).growIfNeeded)).Fn.return_type.?).ErrorUnion.error_set","fn": 874,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMapUnmanaged([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80).grow)).Fn.return_type.?).ErrorUnion.error_set","fn": 875,"errors": [24]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.hash_map.HashMapUnmanaged([]const u8,parser.ArgsContext.MatchedArgValue,std.hash_map.StringContext,80).allocate)).Fn.return_type.?).ErrorUnion.error_set","fn": 879,"errors": [24]},{"kind": 15,"name": "parser.Parser.InternalError","errors": [128,129,13,14,15,16,17,18,19,20,21,22,23,24]},{"kind": 8,"name": "parser.tokenizer","src": 980,"pubDecls": [4904,4905],"privDecls": [4906,4907,4908],"file": 64},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(Help.writeAll)).Fn.return_type.?).ErrorUnion.error_set","fn": 899,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(Help.writeDescription)).Fn.return_type.?).ErrorUnion.error_set","fn": 903,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(Help.writeNewLine)).Fn.return_type.?).ErrorUnion.error_set","fn": 905,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(Help.writeHeader)).Fn.return_type.?).ErrorUnion.error_set","fn": 907,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(Help.writeCommands)).Fn.return_type.?).ErrorUnion.error_set","fn": 914,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(Help.writeOptions)).Fn.return_type.?).ErrorUnion.error_set","fn": 917,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(Help.writeFooter)).Fn.return_type.?).ErrorUnion.error_set","fn": 923,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.io.buffered_writer.BufferedWriter(4096,std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)).flush)).Fn.return_type.?).ErrorUnion.error_set","fn": 925,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 929,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 6,"len": 2,"elem": 1715},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 985,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 988,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 989,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 990,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 992,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 993,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 994,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 995,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 996,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 998,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 999,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 1000,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 1001,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 1038,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatBuf)).Fn.return_type.?).ErrorUnion.error_set","fn": 1044,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatValue)).Fn.return_type.?).ErrorUnion.error_set","fn": 1046,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatIntValue)).Fn.return_type.?).ErrorUnion.error_set","fn": 1047,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.formatAsciiChar)).Fn.return_type.?).ErrorUnion.error_set","fn": 1048,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 6,"const": true,"elem": 1015},{"kind": 7,"len": 256,"elem": 965},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 1116,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 1117,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 1118,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 1119,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 1120,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 1121,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 1122,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 1123,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 1124,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 1125,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 1126,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 1127,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(parser.tokenizer.expectToken)).Fn.return_type.?).ErrorUnion.error_set","fn": 1129,"errors": [130]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.testing.expect)).Fn.return_type.?).ErrorUnion.error_set","fn": 1130,"errors": [130]},{"kind": 15,"name": "@typeInfo(@typeInfo(@TypeOf(std.fmt.format)).Fn.return_type.?).ErrorUnion.error_set","fn": 1133,"errors": [0,1,2,3,4,5,6,7,8,9,10,11]},{"kind": 8,"name": "std.builtin.Version","src": 981,"pubDecls": [4909,4910,4911,4912],"privDecls": [],"fields": [1134,1134,1134]},{"kind": 4,"i": 128},{"kind": 17,"name": "std.builtin.Data","src": 982,"pubDecls": [4913],"privDecls": [],"fields": [954,954,2583]},{"kind": 8,"name": "std.meta.trait","src": 983,"pubDecls": [4914,4915,4916,4917,4918,4919,4920,4921,4922,4923,4924,4925,4926,4927,4928,4929,4930,4931,4932,4933,4934,4935,4936,4937,4938,4939],"privDecls": [4940,4941,4942,4943,4944],"file": 65},{"kind": 8,"name": "std.hash.wyhash.Wyhash","src": 984,"pubDecls": [4945,4946,4947,4948],"privDecls": [],"fields": [1573,2472,965]},{"kind": 6,"len": 1,"elem": 1424},{"kind": 8,"name": "std.dwarf.PcRange","src": 985,"pubDecls": [],"privDecls": [],"fields": [988,988]},{"kind": 16,"name": "std.target.WindowsVersion","src": 986,"pubDecls": [4949,4950,4951,4952,4953],"privDecls": [],"fields": [67108864,83886080,83951616,84017152,100663296,100728832,100794368,100859904,167772160,167772161,167772162,167772163,167772164,167772165,167772166,167772167,167772168,167772169,167772170]},{"kind": 8,"name": "std.target.LinuxVersionRange","src": 987,"pubDecls": [4954,4955],"privDecls": [],"fields": [2582,2375]},{"kind": 17,"name": "std.target.VersionRange","src": 988,"pubDecls": [4956],"privDecls": [],"fields": [976,2582,2383,2585]},{"kind": 8,"name": "std.target.arm.cpu","src": 989,"pubDecls": [4957,4958,4959,4960,4961,4962,4963,4964,4965,4966,4967,4968,4969,4970,4971,4972,4973,4974,4975,4976,4977,4978,4979,4980,4981,4982,4983,4984,4985,4986,4987,4988,4989,4990,4991,4992,4993,4994,4995,4996,4997,4998,4999,5000,5001,5002,5003,5004,5005,5006,5007,5008,5009,5010,5011,5012,5013,5014,5015,5016,5017,5018,5019,5020,5021,5022,5023,5024,5025,5026,5027,5028,5029,5030,5031,5032,5033,5034,5035,5036,5037,5038,5039,5040,5041,5042,5043,5044,5045,5046],"privDecls": []},{"kind": 8,"name": "std.target.Feature","src": 990,"pubDecls": [5047,5048],"privDecls": [],"fields": [962,978,1070,978,957]},{"kind": 8,"name": "std.target.Model","src": 991,"pubDecls": [5049,5050,5051],"privDecls": [],"fields": [978,1070,957]},{"kind": 6,"const": true,"elem": 2387},{"kind": 18,"name": "fn(anytype) anytype","generic": true,"args": [null]},{"kind": 16,"name": "std.builtin.GlobalLinkage","src": 992,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3]},{"kind": 16,"name": "std.builtin.AtomicOrder","src": 993,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5]},{"kind": 16,"name": "std.builtin.AtomicRmwOp","src": 994,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5,6,7,8]},{"kind": 16,"name": "std.builtin.CallingConvention","src": 995,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]},{"kind": 16,"name": "std.builtin.AddressSpace","src": 996,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3]},{"kind": 8,"name": "std.builtin.CallOptions","src": 997,"pubDecls": [5052],"privDecls": [],"fields": [2586,2587]},{"kind": 8,"name": "std.builtin.ExportOptions","src": 998,"pubDecls": [],"privDecls": [],"fields": [978,2390,1135]},{"kind": 8,"name": "std.builtin.ExternOptions","src": 999,"pubDecls": [],"privDecls": [],"fields": [978,1135,2390,967]},{"kind": 8,"name": "std.builtin.TestFn","src": 1000,"pubDecls": [],"privDecls": [],"fields": [978,1,1172]},{"kind": 20,"name": "(anytype)"},{"kind": 6,"len": 2,"const": true,"elem": 1890},{"kind": 6,"len": 2,"const": true,"elem": 1924},{"kind": 6,"len": 2,"const": true,"elem": 1927},{"kind": 6,"len": 2,"const": true,"elem": 1929},{"kind": 6,"elem": 1939},{"kind": 8,"name": "std.os.linux","src": 1001,"pubDecls": [5053,5054,5055,5056,5057,5058,5059,5060,5061,5062,5063,5064,5065,5066,5067,5068,5069,5070,5071,5072,5073,5074,5075,5076,5077,5078,5079,5080,5081,5082,5083,5084,5085,5086,5087,5088,5089,5090,5091,5092,5093,5094,5095,5096,5097,5098,5099,5100,5101,5102,5103,5104,5105,5106,5107,5108,5109,5110,5111,5112,5113,5114,5115,5116,5117,5118,5119,5120,5121,5122,5123,5124,5125,5126,5127,5128,5129,5130,5131,5132,5133,5134,5135,5136,5137,5138,5139,5140,5141,5142,5143,5144,5145,5146,5147,5148,5149,5150,5151,5152,5153,5154,5155,5156,5157,5158,5159,5160,5161,5162,5163,5164,5165,5166,5167,5168,5169,5170,5171,5172,5173,5174,5175,5176,5177,5178,5179,5180,5181,5182,5183,5184,5185,5186,5187,5188,5189,5190,5191,5192,5193,5194,5195,5196,5197,5198,5199,5200,5201,5202,5203,5204,5205,5206,5207,5208,5209,5210,5211,5212,5213,5214,5215,5216,5217,5218,5219,5220,5221,5222,5223,5224,5225,5226,5227,5228,5229,5230,5231,5232,5233,5234,5235,5236,5237,5238,5239,5240,5241,5242,5243,5244,5245,5246,5247,5248,5249,5250,5251,5252,5253,5254,5255,5256,5257,5258,5259,5260,5261,5262,5263,5264,5265,5266,5267,5268,5269,5270,5271,5272,5273,5274,5275,5276,5277,5278,5279,5280,5281,5282,5283,5284,5285,5286,5287,5288,5289,5290,5291,5292,5293,5294,5295,5296,5297,5298,5299,5300,5301,5302,5303,5304,5305,5306,5307,5308,5309,5310,5311,5312,5313,5314,5315,5316,5317,5318,5319,5320,5321,5322,5323,5324,5325,5326,5327,5328,5329,5330,5331,5332,5333,5334,5335,5336,5337,5338,5339,5340,5341,5342,5343,5344,5345,5346,5347,5348,5349,5350,5351,5352,5353,5354,5355,5356,5357,5358,5359,5360,5361,5362,5363,5364,5365,5366,5367,5368,5369,5370,5371,5372,5373,5374,5375,5376,5377,5378,5379,5380,5381,5382,5383,5384,5385,5386,5387,5388,5389,5390,5391,5392,5393,5394,5395,5396,5397,5398,5399,5400,5401,5402,5403,5404,5405,5406,5407,5408,5409,5410,5411,5412,5413,5414,5415,5416,5417,5418,5419,5420,5421,5422,5423,5424,5425,5426,5427,5428,5429,5430,5431,5432,5433,5434,5435,5436,5437,5438,5439,5440,5441,5442,5443,5444,5445,5446,5447,5448,5449,5450,5451,5452,5453,5454,5455,5456,5457,5458,5459,5460,5461,5462,5463,5464,5465,5466,5467,5468,5469,5470,5471,5472,5473,5474,5475,5476,5477,5478,5479,5480,5481,5482,5483,5484,5485,5486,5487,5488,5489,5490,5491,5492,5493,5494,5495,5496,5497,5498,5499,5500,5501,5502,5503,5504,5505,5506,5507,5508,5509,5510,5511,5512,5513,5514,5515,5516,5517,5518,5519,5520,5521,5522,5523,5524,5525,5526,5527,5528,5529,5530,5531,5532,5533,5534,5535,5536,5537,5538,5539,5540,5541,5542,5543,5544,5545,5546,5547,5548,5549,5550,5551,5552,5553,5554,5555,5556,5557,5558,5559,5560,5561,5562,5563,5564,5565,5566,5567,5568,5569,5570,5571,5572,5573,5574,5575,5576,5577,5578,5579,5580,5581,5582,5583,5584,5585,5586,5587,5588,5589,5590,5591,5592,5593,5594,5595,5596,5597,5598,5599,5600,5601,5602,5603,5604,5605,5606,5607,5608,5609,5610,5611,5612,5613,5614,5615,5616,5617,5618,5619,5620,5621,5622,5623,5624,5625,5626,5627,5628,5629,5630,5631,5632,5633,5634,5635,5636,5637,5638,5639,5640,5641,5642,5643,5644,5645,5646,5647,5648,5649,5650,5651,5652,5653,5654,5655,5656,5657,5658,5659,5660,5661,5662,5663,5664,5665,5666,5667,5668,5669,5670,5671,5672,5673,5674,5675,5676,5677,5678,5679,5680,5681,5682,5683,5684,5685,5686,5687,5688,5689,5690,5691,5692,5693,5694,5695,5696,5697,5698,5699,5700,5701],"privDecls": [5702,5703,5704,5705,5706,5707,5708,5709,5710,5711,5712,5713,5714,5715,5716,5717,5718,5719,5720,5721,5722,5723,5724,5725,5726,5727,5728],"file": 66},{"kind": 6,"elem": 1943},{"kind": 8,"name": "std.event.loop.Loop","src": 1002,"pubDecls": [5729,5730,5731,5732,5733,5734,5735,5736,5737,5738,5739,5740,5741,5742,5743,5744,5745,5746,5747,5748,5749,5750,5751,5752,5753,5754,5755,5756,5757,5758,5759,5760,5761,5762,5763,5764,5765,5766,5767,5768,5769,5770,5771,5772],"privDecls": [5773,5774,5775,5776,5777,5778,5779,5780,5781,5782,5783,5784,5785,5786,5787],"fields": [1076,2601,1951,965,2602,1998,1085,1943,2480,1491,2600,1089,2603]},{"kind": 8,"name": "std.os.windows","src": 1003,"pubDecls": [5788,5789,5790,5791,5792,5793,5794,5795,5796,5797,5798,5799,5800,5801,5802,5803,5804,5805,5806,5807,5808,5809,5810,5811,5812,5813,5814,5815,5816,5817,5818,5819,5820,5821,5822,5823,5824,5825,5826,5827,5828,5829,5830,5831,5832,5833,5834,5835,5836,5837,5838,5839,5840,5841,5842,5843,5844,5845,5846,5847,5848,5849,5850,5851,5852,5853,5854,5855,5856,5857,5858,5859,5860,5861,5862,5863,5864,5865,5866,5867,5868,5869,5870,5871,5872,5873,5874,5875,5876,5877,5878,5879,5880,5881,5882,5883,5884,5885,5886,5887,5888,5889,5890,5891,5892,5893,5894,5895,5896,5897,5898,5899,5900,5901,5902,5903,5904,5905,5906,5907,5908,5909,5910,5911,5912,5913,5914,5915,5916,5917,5918,5919,5920,5921,5922,5923,5924,5925,5926,5927,5928,5929,5930,5931,5932,5933,5934,5935,5936,5937,5938,5939,5940,5941,5942,5943,5944,5945,5946,5947,5948,5949,5950,5951,5952,5953,5954,5955,5956,5957,5958,5959,5960,5961,5962,5963,5964,5965,5966,5967,5968,5969,5970,5971,5972,5973,5974,5975,5976,5977,5978,5979,5980,5981,5982,5983,5984,5985,5986,5987,5988,5989,5990,5991,5992,5993,5994,5995,5996,5997,5998,5999,6000,6001,6002,6003,6004,6005,6006,6007,6008,6009,6010,6011,6012,6013,6014,6015,6016,6017,6018,6019,6020,6021,6022,6023,6024,6025,6026,6027,6028,6029,6030,6031,6032,6033,6034,6035,6036,6037,6038,6039,6040,6041,6042,6043,6044,6045,6046,6047,6048,6049,6050,6051,6052,6053,6054,6055,6056,6057,6058,6059,6060,6061,6062,6063,6064,6065,6066,6067,6068,6069,6070,6071,6072,6073,6074,6075,6076,6077,6078,6079,6080,6081,6082,6083,6084,6085,6086,6087,6088,6089,6090,6091,6092,6093,6094,6095,6096,6097,6098,6099,6100,6101,6102,6103,6104,6105,6106,6107,6108,6109,6110,6111,6112,6113,6114,6115,6116,6117,6118,6119,6120,6121,6122,6123,6124,6125,6126,6127,6128,6129,6130,6131,6132,6133,6134,6135,6136,6137,6138,6139,6140,6141,6142,6143,6144,6145,6146,6147,6148,6149,6150,6151,6152,6153,6154,6155,6156,6157,6158,6159,6160,6161,6162,6163,6164,6165,6166,6167,6168,6169,6170,6171,6172,6173,6174,6175,6176,6177,6178,6179,6180,6181,6182,6183,6184,6185,6186,6187,6188,6189,6190,6191,6192,6193,6194,6195,6196,6197,6198,6199,6200,6201,6202,6203,6204,6205,6206,6207,6208,6209,6210,6211,6212,6213,6214,6215,6216,6217,6218,6219,6220,6221,6222,6223,6224,6225,6226,6227,6228,6229,6230,6231,6232,6233,6234,6235,6236,6237,6238,6239,6240,6241,6242,6243,6244,6245,6246,6247,6248,6249,6250,6251,6252,6253,6254,6255,6256,6257,6258,6259,6260,6261,6262,6263,6264,6265,6266,6267,6268,6269,6270,6271,6272,6273,6274,6275,6276,6277,6278,6279,6280,6281,6282,6283,6284,6285,6286,6287,6288,6289,6290,6291,6292,6293,6294,6295,6296,6297,6298,6299,6300,6301,6302,6303,6304,6305,6306,6307,6308,6309,6310,6311,6312,6313,6314,6315,6316,6317,6318,6319,6320,6321,6322,6323,6324,6325,6326,6327,6328,6329,6330,6331,6332,6333,6334,6335,6336,6337,6338,6339,6340,6341,6342,6343,6344,6345,6346,6347,6348,6349,6350,6351,6352,6353,6354,6355,6356,6357,6358,6359,6360,6361,6362,6363,6364,6365,6366,6367,6368,6369,6370,6371,6372,6373,6374,6375,6376,6377,6378,6379,6380,6381,6382,6383,6384,6385,6386,6387,6388,6389,6390,6391,6392,6393,6394,6395,6396,6397,6398,6399,6400,6401,6402,6403,6404,6405,6406,6407,6408,6409,6410,6411,6412,6413,6414,6415,6416,6417,6418,6419,6420,6421,6422,6423,6424,6425,6426,6427,6428,6429,6430,6431,6432,6433,6434,6435,6436,6437,6438,6439,6440,6441,6442,6443,6444,6445,6446,6447,6448,6449,6450,6451,6452,6453,6454,6455,6456,6457,6458,6459,6460],"privDecls": [6461,6462,6463,6464,6465,6466,6467,6468,6469,6470,6471,6472],"file": 67},{"kind": 8,"name": "std.event.loop.Read","src": 1004,"pubDecls": [6473],"privDecls": [],"fields": [1084,1065,1529]},{"kind": 8,"name": "std.event.loop.ReadV","src": 1005,"pubDecls": [6474],"privDecls": [],"fields": [1084,2604,1529]},{"kind": 8,"name": "std.event.loop.Write","src": 1006,"pubDecls": [6475],"privDecls": [],"fields": [1084,978,1291]},{"kind": 8,"name": "std.event.loop.WriteV","src": 1007,"pubDecls": [6476],"privDecls": [],"fields": [1084,2605,1291]},{"kind": 8,"name": "std.event.loop.PWrite","src": 1008,"pubDecls": [6477],"privDecls": [],"fields": [1084,978,965,2606]},{"kind": 8,"name": "std.event.loop.PWriteV","src": 1009,"pubDecls": [6478],"privDecls": [],"fields": [1084,2605,965,2606]},{"kind": 8,"name": "std.event.loop.PRead","src": 1010,"pubDecls": [6479],"privDecls": [],"fields": [1084,1065,965,2607]},{"kind": 8,"name": "std.event.loop.PReadV","src": 1011,"pubDecls": [6480],"privDecls": [],"fields": [1084,2604,965,2607]},{"kind": 8,"name": "std.event.loop.Open","src": 1012,"pubDecls": [6481],"privDecls": [],"fields": [1066,1134,1134,1555]},{"kind": 8,"name": "std.event.loop.OpenAt","src": 1013,"pubDecls": [6482],"privDecls": [],"fields": [1084,1066,1134,1134,1555]},{"kind": 8,"name": "std.event.loop.Close","src": 1014,"pubDecls": [],"privDecls": [],"fields": [1084]},{"kind": 8,"name": "std.event.loop.FAccessAt","src": 1015,"pubDecls": [6483],"privDecls": [],"fields": [1084,1066,1134,1134,2608]},{"kind": 6,"elem": 1949},{"kind": 16,"name": "std.event.loop.Id","src": 1016,"pubDecls": [],"privDecls": [],"fields": [0,1,2]},{"kind": 13,"child": 1645},{"kind": 6,"len": 1,"elem": 1671},{"kind": 8,"name": "std.os.linux.arm-eabi.O","src": 1017,"pubDecls": [6484,6485,6486,6487,6488,6489,6490,6491,6492,6493,6494,6495,6496,6497,6498,6499,6500,6501,6502],"privDecls": []},{"kind": 8,"name": "std.os.linux.arm-eabi.LOCK","src": 1018,"pubDecls": [6503,6504,6505,6506],"privDecls": []},{"kind": 8,"name": "std.os.linux.arm-eabi.MAP","src": 1019,"pubDecls": [6507,6508,6509,6510,6511],"privDecls": []},{"kind": 8,"name": "std.os.linux.arm-eabi.VDSO","src": 1020,"pubDecls": [6512,6513],"privDecls": []},{"kind": 8,"name": "std.os.linux.arm-eabi.HWCAP","src": 1021,"pubDecls": [6514,6515,6516,6517,6518,6519,6520,6521,6522,6523,6524,6525,6526,6527,6528,6529,6530,6531,6532,6533,6534,6535,6536],"privDecls": []},{"kind": 8,"name": "std.os.linux.arm-eabi.mcontext_t","src": 1022,"pubDecls": [],"privDecls": [],"fields": [965,965,965,965,965,965,965,965,965,965,965,965,965,965,965,965,965,965,965,965,965]},{"kind": 8,"name": "std.os.linux.arm-eabi.ucontext_t","src": 1023,"pubDecls": [],"privDecls": [],"fields": [965,2611,2432,2430,2433,2612]},{"kind": 8,"name": "std.os.linux.stack_t","src": 1024,"pubDecls": [],"privDecls": [],"fields": [1107,1084,965]},{"kind": 7,"len": 32,"elem": 1134},{"kind": 8,"name": "std.heap.PageAllocator","src": 1025,"pubDecls": [],"privDecls": [6537,6538,6539,6540]},{"kind": 16,"name": "std.log.Level","src": 1026,"pubDecls": [6541],"privDecls": [],"fields": [0,1,2,3]},{"kind": 8,"name": "std.log.ScopeLevel","src": 1027,"pubDecls": [],"privDecls": [],"fields": [1164,2435]},{"kind": 7,"len": 0,"elem": 2436},{"kind": 18,"name": "fn(std.log.Level,anytype,anytype,anytype) anytype","generic": true,"args": [2435,null,null,null]},{"kind": 18,"name": "fn(type,anytype,anytype) anytype","generic": true,"args": [954,null,null]},{"kind": 18,"name": "fn(type,anytype,anytype) anytype","generic": true,"args": [954,null,null]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 18,"name": "fn(anytype) anytype","generic": true,"args": [null]},{"kind": 18,"name": "fn(anytype,anytype) anytype","generic": true,"args": [null,null]},{"kind": 18,"name": "fn(anytype) anytype","generic": true,"args": [null]},{"kind": 18,"name": "fn(type,anytype,anytype) anytype","generic": true,"args": [954,null,null]},{"kind": 18,"name": "fn(type,anytype,anytype) anytype","generic": true,"args": [954,null,null]},{"kind": 18,"name": "fn(type,anytype,anytype) anytype","generic": true,"args": [954,null,null]},{"kind": 18,"name": "fn(type,anytype,anytype,anytype) anytype","generic": true,"args": [954,null,null,null]},{"kind": 18,"name": "fn(type,anytype,anytype,anytype) anytype","generic": true,"args": [954,null,null,null]},{"kind": 18,"name": "fn(type,anytype,anytype,anytype) anytype","generic": true,"args": [954,null,null,null]},{"kind": 18,"name": "fn(type,anytype,anytype,anytype) anytype","generic": true,"args": [954,null,null,null]},{"kind": 18,"name": "fn(type,anytype,anytype) anytype","generic": true,"args": [954,null,null]},{"kind": 18,"name": "fn(type,anytype) anytype","generic": true,"args": [954,null]},{"kind": 18,"name": "fn(type,anytype) anytype","generic": true,"args": [954,null]},{"kind": 18,"name": "fn(type,anytype,anytype) anytype","generic": true,"args": [954,null,null]},{"kind": 18,"name": "fn(type,anytype,anytype) anytype","generic": true,"args": [954,null,null]},{"kind": 18,"name": "fn(type,anytype,anytype) anytype","generic": true,"args": [954,null,null]},{"kind": 18,"name": "fn(type,anytype,anytype) anytype","generic": true,"args": [954,null,null]},{"kind": 18,"name": "fn(type,anytype,anytype) anytype","generic": true,"args": [954,null,null]},{"kind": 18,"name": "fn(anytype,anytype) anytype","generic": true,"args": [null,null]},{"kind": 18,"name": "fn(anytype,anytype) anytype","generic": true,"args": [null,null]},{"kind": 18,"name": "fn(anytype) anytype","generic": true,"args": [null]},{"kind": 18,"name": "fn(type,anytype) anytype","generic": true,"args": [954,null]},{"kind": 18,"name": "fn(anytype) anytype","generic": true,"args": [null]},{"kind": 18,"name": "fn(type,anytype,anytype) anytype","generic": true,"args": [954,null,null]},{"kind": 18,"name": "fn(type,anytype,anytype) anytype","generic": true,"args": [954,null,null]},{"kind": 18,"name": "fn(type,anytype,anytype) anytype","generic": true,"args": [954,null,null]},{"kind": 18,"name": "fn(anytype,anytype) anytype","generic": true,"args": [null,null]},{"kind": 6,"len": 1,"elem": 1761},{"kind": 6,"len": 1,"elem": 1980},{"kind": 17,"name": "std.coff.Misc","src": 1028,"pubDecls": [],"privDecls": [],"fields": [1134,1134]},{"kind": 7,"len": 32,"elem": 1015},{"kind": 6,"len": 1,"elem": 1984},{"kind": 18,"name": "fn(anytype) anytype","generic": true,"args": [null]},{"kind": 18,"name": "fn(*std.Progress,[]const u8,anytype) anytype","generic": true,"args": [1584,978,null]},{"kind": 18,"name": "fn(*std.Progress,*usize,[]const u8,anytype) anytype","generic": true,"args": [1584,1619,978,null]},{"kind": 13,"child": 971},{"kind": 7,"len": 100,"elem": 1015},{"kind": 8,"name": "std.Thread.AutoResetEvent","src": 1029,"pubDecls": [6542,6543,6544],"privDecls": [6545,6546,6547,6548,6549,6550,6551,6552,6553,6554],"fields": [965],"file": 68},{"kind": 8,"name": "std.Thread.ResetEvent","src": 1030,"pubDecls": [6555,6556,6557,6558,6559,6560,6561,6562,6563,6564,6565],"privDecls": [6566,6567,6568,6569,6570,6571,6572,6573],"fields": [2160],"file": 69},{"kind": 8,"name": "std.Thread.LinuxThreadImpl","src": 1031,"pubDecls": [6574],"privDecls": [6575,6576,6577,6578,6579,6580,6581,6582,6583],"fields": [2614]},{"kind": 8,"name": "std.coff.Coff","src": 1032,"pubDecls": [6584,6585,6586,6587,6588,6589],"privDecls": [6590,6591],"fields": [971,1312,2483,2484,1218,2615,1134]},{"kind": 8,"name": "std.coff.CoffHeader","src": 1033,"pubDecls": [],"privDecls": [],"fields": [961,961,1134,1134,1134,961,961]},{"kind": 8,"name": "std.coff.OptionalHeader","src": 1034,"pubDecls": [],"privDecls": [6592],"fields": [961,2617,988]},{"kind": 18,"name": "fn([]const u8,anytype) anytype","generic": true,"args": [978,null]},{"kind": 18,"name": "fn(std.builtin.StackTrace,anytype,anytype,anytype,anytype) anytype","generic": true,"args": [1175,null,null,null,null]},{"kind": 18,"name": "fn(anytype,anytype,anytype,anytype) anytype","generic": true,"args": [null,null,null,null]},{"kind": 8,"name": "std.debug.TTY","src": 1035,"pubDecls": [6593,6594],"privDecls": []},{"kind": 18,"name": "fn(*std.debug.DebugInfo,anytype,anytype,anytype) anytype","generic": true,"args": [1316,null,null,null]},{"kind": 17,"name": "std.debug.PdbOrDwarf","src": 1036,"pubDecls": [],"privDecls": [],"fields": [2566,1360]},{"kind": 13,"child": 1490},{"kind": 6,"const": true,"elem": 2618},{"kind": 6,"const": true,"elem": 2619},{"kind": 18,"name": "fn(anytype,anytype,anytype,anytype,anytype,anytype,anytype) anytype","generic": true,"args": [null,null,null,null,null,null,null]},{"kind": 18,"name": "fn(anytype,anytype) anytype","generic": true,"args": [null,null]},{"kind": 8,"name": "std.debug.MachoSymbol","src": 1037,"pubDecls": [],"privDecls": [6595,6596],"fields": [1134,988,1134,1134]},{"kind": 8,"name": "std.dwarf.TAG","src": 1038,"pubDecls": [6597,6598,6599,6600,6601,6602,6603,6604,6605,6606,6607,6608,6609,6610,6611,6612,6613,6614,6615,6616,6617,6618,6619,6620,6621,6622,6623,6624,6625,6626,6627,6628,6629,6630,6631,6632,6633,6634,6635,6636,6637,6638,6639,6640,6641,6642,6643,6644,6645,6646,6647,6648,6649,6650,6651,6652,6653,6654,6655,6656,6657,6658,6659,6660,6661,6662,6663,6664,6665,6666,6667,6668,6669,6670,6671,6672,6673,6674,6675,6676,6677,6678,6679],"privDecls": [],"file": 70},{"kind": 8,"name": "std.dwarf.AT","src": 1039,"pubDecls": [6680,6681,6682,6683,6684,6685,6686,6687,6688,6689,6690,6691,6692,6693,6694,6695,6696,6697,6698,6699,6700,6701,6702,6703,6704,6705,6706,6707,6708,6709,6710,6711,6712,6713,6714,6715,6716,6717,6718,6719,6720,6721,6722,6723,6724,6725,6726,6727,6728,6729,6730,6731,6732,6733,6734,6735,6736,6737,6738,6739,6740,6741,6742,6743,6744,6745,6746,6747,6748,6749,6750,6751,6752,6753,6754,6755,6756,6757,6758,6759,6760,6761,6762,6763,6764,6765,6766,6767,6768,6769,6770,6771,6772,6773,6774,6775,6776,6777,6778,6779,6780,6781,6782,6783,6784,6785,6786,6787,6788,6789,6790,6791,6792,6793,6794,6795,6796,6797,6798,6799,6800,6801,6802,6803,6804,6805,6806,6807,6808,6809,6810,6811,6812,6813,6814,6815,6816,6817,6818,6819,6820,6821,6822,6823,6824,6825,6826,6827,6828,6829,6830,6831,6832,6833,6834,6835,6836,6837,6838,6839,6840,6841,6842,6843,6844,6845,6846,6847,6848],"privDecls": [],"file": 71},{"kind": 8,"name": "std.dwarf.FORM","src": 1040,"pubDecls": [6849,6850,6851,6852,6853,6854,6855,6856,6857,6858,6859,6860,6861,6862,6863,6864,6865,6866,6867,6868,6869,6870,6871,6872,6873,6874,6875,6876,6877],"privDecls": []},{"kind": 8,"name": "std.dwarf.CHILDREN","src": 1041,"pubDecls": [6878,6879],"privDecls": []},{"kind": 8,"name": "std.dwarf.LNS","src": 1042,"pubDecls": [6880,6881,6882,6883,6884,6885,6886,6887,6888,6889,6890,6891,6892],"privDecls": []},{"kind": 8,"name": "std.dwarf.LNE","src": 1043,"pubDecls": [6893,6894,6895,6896,6897,6898],"privDecls": []},{"kind": 8,"name": "std.leb128","src": 1044,"pubDecls": [6899,6900,6901,6902,6903],"privDecls": [6904,6905,6906,6907,6908,6909,6910,6911,6912],"file": 72},{"kind": 18,"name": "fn(anytype,anytype,anytype) anytype","generic": true,"args": [null,null,null]},{"kind": 18,"name": "fn(std.mem.Allocator,anytype,anytype) anytype","generic": true,"args": [1312,null,null]},{"kind": 18,"name": "fn(anytype,anytype,anytype) anytype","generic": true,"args": [null,null,null]},{"kind": 18,"name": "fn(std.mem.Allocator,anytype,anytype) anytype","generic": true,"args": [1312,null,null]},{"kind": 18,"name": "fn(std.mem.Allocator,anytype,anytype,anytype) anytype","generic": true,"args": [1312,null,null,null]},{"kind": 18,"name": "fn(std.mem.Allocator,anytype,anytype,anytype,anytype) anytype","generic": true,"args": [1312,null,null,null,null]},{"kind": 18,"name": "fn(std.mem.Allocator,anytype,anytype,anytype) anytype","generic": true,"args": [1312,null,null,null]},{"kind": 18,"name": "fn(std.mem.Allocator,anytype,anytype,anytype,anytype) anytype","generic": true,"args": [1312,null,null,null,null]},{"kind": 16,"name": "std.elf.ET","src": 1045,"pubDecls": [6913,6914],"privDecls": [],"fields": [0,1,2,3,4]},{"kind": 8,"name": "std.elf.Elf32_Ehdr","src": 1046,"pubDecls": [],"privDecls": [],"fields": [2615,2512,2522,1134,1134,1134,1134,1134,961,961,961,961,961,961]},{"kind": 8,"name": "std.elf.Elf64_Ehdr","src": 1047,"pubDecls": [],"privDecls": [],"fields": [2615,2512,2522,1134,988,988,988,1134,961,961,961,961,961,961]},{"kind": 8,"name": "std.elf.Elf64_Phdr","src": 1048,"pubDecls": [],"privDecls": [],"fields": [1134,1134,988,988,988,988,988,988]},{"kind": 8,"name": "std.elf.Elf32_Shdr","src": 1049,"pubDecls": [],"privDecls": [],"fields": [1134,1134,1134,1134,1134,1134,1134,1134,1134,1134]},{"kind": 8,"name": "std.elf.Elf64_Shdr","src": 1050,"pubDecls": [],"privDecls": [],"fields": [1134,1134,988,988,988,988,1134,1134,988,988]},{"kind": 8,"name": "std.elf.Elf32_Sym","src": 1051,"pubDecls": [],"privDecls": [],"fields": [1134,1134,1134,1015,1015,961]},{"kind": 8,"name": "std.elf.Elf32_Dyn","src": 1052,"pubDecls": [],"privDecls": [],"fields": [1084,1134]},{"kind": 8,"name": "std.elf.Elf32_Verdaux","src": 1053,"pubDecls": [],"privDecls": [],"fields": [1134,1134]},{"kind": 8,"name": "std.elf.Elf32_auxv_t","src": 1054,"pubDecls": [],"privDecls": [],"fields": [1134,2622]},{"kind": 16,"name": "std.elf.EM","src": 1055,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5,6,7,8,9,10,13,15,17,18,19,20,21,22,23,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,131,132,133,134,135,136,137,138,139,140,141,142,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,183,185,186,187,188,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,224,243,244,247]},{"kind": 18,"name": "fn(anytype,anytype,anytype) anytype","generic": true,"args": [null,null,null]},{"kind": 18,"name": "fn(anytype,anytype,anytype,anytype,anytype) anytype","generic": true,"args": [null,null,null,null,null]},{"kind": 18,"name": "fn(anytype,anytype,anytype,anytype) anytype","generic": true,"args": [null,null,null,null]},{"kind": 18,"name": "fn(u8,std.fmt.FormatOptions,anytype) anytype","generic": true,"args": [1015,1307,null]},{"kind": 18,"name": "fn([]const u8,std.fmt.FormatOptions,anytype) anytype","generic": true,"args": [978,1307,null]},{"kind": 18,"name": "fn(anytype,anytype,anytype,anytype,anytype) anytype","generic": true,"args": [null,null,null,null,null]},{"kind": 18,"name": "fn([]u8,[]const u8,anytype) anytype","generic": true,"args": [1065,978,null]},{"kind": 6,"const": true,"elem": 2623},{"kind": 18,"name": "fn(anytype,anytype,anytype,anytype) anytype","generic": true,"args": [null,null,null,null]},{"kind": 8,"name": "std.fs.path","src": 1056,"pubDecls": [6915,6916,6917,6918,6919,6920,6921,6922,6923,6924,6925,6926,6927,6928,6929,6930,6931,6932,6933,6934,6935,6936,6937,6938,6939,6940,6941,6942,6943,6944,6945,6946,6947,6948,6949,6950,6951],"privDecls": [6952,6953,6954,6955,6956,6957,6958,6959,6960,6961,6962,6963,6964,6965,6966,6967,6968,6969,6970,6971,6972,6973,6974,6975,6976,6977,6978,6979,6980,6981,6982,6983,6984,6985],"file": 73},{"kind": 15,"name": "std.fs.SelfExePathError","errors": [131,74,132,133,134,135,75,136,137,138,76,11,77,78,79,80,139,140,141,142,143,144,145,146,147,148]},{"kind": 18,"name": "fn(anytype,anytype) anytype","generic": true,"args": [null,null]},{"kind": 18,"name": "fn(type,anytype,anytype) anytype","generic": true,"args": [954,null,null]},{"kind": 18,"name": "fn(type,anytype,anytype) anytype","generic": true,"args": [954,null,null]},{"kind": 18,"name": "fn(type,anytype,anytype) anytype","generic": true,"args": [954,null,null]},{"kind": 18,"name": "fn(type,anytype) anytype","generic": true,"args": [954,null]},{"kind": 18,"name": "fn(type,anytype) anytype","generic": true,"args": [954,null]},{"kind": 18,"name": "fn(type,anytype) anytype","generic": true,"args": [954,null]},{"kind": 18,"name": "fn(type,anytype,anytype) anytype","generic": true,"args": [954,null,null]},{"kind": 18,"name": "fn(anytype,anytype) anytype","generic": true,"args": [null,null]},{"kind": 18,"name": "fn(anytype,anytype) anytype","generic": true,"args": [null,null]},{"kind": 8,"name": "std.os.linux.AT","src": 1057,"pubDecls": [6986,6987,6988,6989,6990,6991,6992,6993,6994,6995,6996],"privDecls": []},{"kind": 8,"name": "std.os.linux.CLOCK","src": 1058,"pubDecls": [6997,6998,6999,7000,7001,7002,7003,7004,7005,7006,7007,7008],"privDecls": []},{"kind": 8,"name": "std.os.linux.MAP","src": 1059,"pubDecls": [7009,7010,7011,7012,7013,7014,7015,7016,7017,7018,7019,7020,7021,6507,6508,6509,6510,6511],"privDecls": []},{"kind": 8,"name": "std.os.linux.O","src": 1060,"pubDecls": [7022,7023,7024,6484,6485,6486,6487,6488,6489,6490,6491,6492,6493,6494,6495,6496,6497,6498,6499,6500,6501,6502],"privDecls": []},{"kind": 8,"name": "std.os.linux.PROT","src": 1061,"pubDecls": [7025,7026,7027,7028,7029,7030,7031],"privDecls": []},{"kind": 8,"name": "std.os.linux.S","src": 1062,"pubDecls": [7032,7033,7034,7035,7036,7037,7038,7039,7040,7041,7042,7043,7044,7045,7046,7047,7048,7049,7050,7051,7052,7053,7054,7055,7056,7057,7058,7059,7060,7061],"privDecls": []},{"kind": 8,"name": "std.os.linux.SA","src": 1063,"pubDecls": [7062,7063,7064,7065,7066,7067,7068,7069],"privDecls": []},{"kind": 8,"name": "std.os.linux.SIG","src": 1064,"pubDecls": [7070,7071,7072,7073,7074,7075,7076,7077,7078,7079,7080,7081,7082,7083,7084,7085,7086,7087,7088,7089,7090,7091,7092,7093,7094,7095,7096,7097,7098,7099,7100,7101,7102,7103,7104,7105,7106,7107,7108,7109],"privDecls": []},{"kind": 8,"name": "std.os.linux.Sigaction","src": 1065,"pubDecls": [7110,7111],"privDecls": [],"fields": [2627,2433,2628,2629]},{"kind": 8,"name": "std.os.iovec","src": 1066,"pubDecls": [],"privDecls": [],"fields": [1107,965]},{"kind": 8,"name": "std.os.iovec_const","src": 1067,"pubDecls": [],"privDecls": [],"fields": [1153,965]},{"kind": 15,"name": "std.os.PReadError","errors": [51,52,53,54,55,56,57,58,59,60,11,149]},{"kind": 15,"name": "std.os.PWriteError","errors": [0,1,2,3,4,5,6,7,8,9,10,11,150]},{"kind": 15,"name": "std.os.ReadLinkError","errors": [131,74,132,133,134,135,75,136,137,138,76,11]},{"kind": 15,"name": "std.os.AccessError","errors": [151,152,153,154,155,156,157,158,159,160,11]},{"kind": 15,"name": "std.os.SysCtlError","errors": [77,161,162,78,11]},{"kind": 15,"name": "std.os.SeekError","errors": [47,48,11]},{"kind": 15,"name": "std.os.RealPathError","errors": [163,164,165,79,166,167,80,139,140,141,142,143,168,144,169,170,145,146,147,171,148,11]},{"kind": 18,"name": "fn(anytype,anytype,anytype) anytype","generic": true,"args": [null,null,null]},{"kind": 8,"name": "std.dynamic_library","src": 1068,"pubDecls": [7112,7113,7114,7115,7116,7117],"privDecls": [7118,7119,7120,7121,7122,7123,7124,7125,7126,7127,7128,7129,7130,7131],"file": 74},{"kind": 8,"name": "std.pdb.SectionContribEntry","src": 1069,"pubDecls": [],"privDecls": [],"fields": [961,2082,1134,1134,1134,961,2082,1134,1134]},{"kind": 8,"name": "std.pdb.ModInfo","src": 1070,"pubDecls": [],"privDecls": [],"fields": [1134,2564,961,961,1134,1134,1134,961,2082,1134,1134,1134]},{"kind": 8,"name": "std.pdb.Pdb","src": 1071,"pubDecls": [7132,7133,7134,7135,7136,7137,7138,7139,7140,7141],"privDecls": [],"fields": [971,2567,1312,2632,2632,2633,2634,2615,1134]},{"kind": 8,"name": "std.pdb.Msf","src": 1072,"pubDecls": [],"privDecls": [7142],"fields": [2568,2635]},{"kind": 8,"name": "std.pdb.MsfStream","src": 1073,"pubDecls": [7143,7144,7145,7146],"privDecls": [7147,7148,7149,7150],"fields": [971,988,2636,1134]},{"kind": 18,"name": "fn([]const u8) anytype","generic": true,"args": [978]},{"kind": 8,"name": "std.process.ArgIteratorWindows","src": 1074,"pubDecls": [7151,7152,7153,7154,7155],"privDecls": [7156,7157,7158,7159],"fields": [965,2637]},{"kind": 18,"name": "fn(type,anytype,anytype,anytype) anytype","generic": true,"args": [954,null,null,null]},{"kind": 18,"name": "fn(anytype,anytype) anytype","generic": true,"args": [null,null]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 6,"const": true,"elem": 2638},{"kind": 6,"len": 1,"elem": 2029},{"kind": 8,"name": "std.Thread.StaticResetEvent.LinuxFutex","src": 1075,"pubDecls": [],"privDecls": [7160,7161]},{"kind": 8,"name": "std.dynamic_library.LinkMap","src": 1076,"pubDecls": [7162],"privDecls": [],"fields": [965,1066,2639,1499,1499]},{"kind": 7,"len": 1,"elem": 1107},{"kind": 17,"name": "std.os.linux.siginfo_fields_union","src": 1077,"pubDecls": [],"privDecls": [],"fields": [2640,2641,2642,2643,2644]},{"kind": 7,"len": 5,"elem": 988},{"kind": 18,"name": "fn(u8,anytype) anytype","generic": true,"args": [1015,null]},{"kind": 8,"name": "std.builtin.Range","src": 1078,"pubDecls": [7163,7164],"privDecls": [],"fields": [2375,2375]},{"kind": 8,"name": "std.builtin.FnDecl","src": 1079,"pubDecls": [],"privDecls": [],"fields": [954,967,967,967,967,1135,954,1178]},{"kind": 18,"name": "fn(type) anytype","generic": true,"args": [954]},{"kind": 8,"name": "std.target.Range","src": 1080,"pubDecls": [7165,7166],"privDecls": [],"fields": [2382,2382]},{"kind": 16,"name": "std.builtin.Modifier","src": 1081,"pubDecls": [],"privDecls": [],"fields": [0,1,2,3,4,5,6,7]},{"kind": 13,"child": 2645},{"kind": 8,"name": "std.os.linux.tls","src": 1082,"pubDecls": [7167,7168,7169,7170],"privDecls": [7171,7172,7173,7174,7175,7176,7177,7178,7179,7180,7181,7182,7183,7184,7185,7186,7187,7188,7189],"file": 75},{"kind": 13,"child": 2651},{"kind": 8,"name": "std.os.linux.FUTEX","src": 1083,"pubDecls": [7190,7191,7192,7193,7194,7195,7196,7197,7198,7199,7200,7201,7202,7203,7204],"privDecls": []},{"kind": 8,"name": "std.os.linux.T","src": 1084,"pubDecls": [7205,7206,7207,7208,7209,7210,7211,7212,7213,7214,7215,7216,7217,7218,7219,7220,7221,7222,7223,7224,7225,7226,7227,7228,7229,7230,7231,7232,7233,7234,7235,7236,7237,7238,7239,7240,7241,7242,7243,7244,7245,7246,7247,7248,7249,7250,7251,7252,7253,7254,7255,7256,7257,7258,7259],"privDecls": []},{"kind": 8,"name": "std.os.linux.winsize","src": 1085,"pubDecls": [],"privDecls": [],"fields": [961,961,961,961]},{"kind": 8,"name": "std.os.linux.k_sigaction","src": 1086,"pubDecls": [],"privDecls": [],"fields": [2652,2653,2654,2655]},{"kind": 17,"name": "std.os.linux.epoll_data","src": 1087,"pubDecls": [],"privDecls": [],"fields": [965,1084,1134,988]},{"kind": 8,"name": "std.os.linux.epoll_event","src": 1088,"pubDecls": [],"privDecls": [],"fields": [1134,2594]},{"kind": 17,"name": "std.os.linux.sigval","src": 1089,"pubDecls": [],"privDecls": [],"fields": [1084,1493]},{"kind": 8,"name": "std.os.linux.io_uring","src": 1090,"pubDecls": [5667,5668,5669,5670,5671,5672,5673,5674,5675,5676,5677,5678,5679,5680,5681,5682,5683,5684,5685,5686,5687,5688,5689,5690,5691,5692,5693,5694,5695,5696,5697,5698,5699,5700,5701],"privDecls": [7260,7261,7262,7263,7264,7265,7266,7267,7268,7269,7270],"file": 76},{"kind": 8,"name": "std.os.linux.vdso","src": 1091,"pubDecls": [7271],"privDecls": [7272,7273,7274,7275,7276,7277],"file": 77},{"kind": 13,"child": 2656},{"kind": 8,"name": "std.event.loop.DelayQueue","src": 1092,"pubDecls": [],"privDecls": [7278,7279,7280],"fields": [1641,2657,1998,2479,967]},{"kind": 8,"name": "std.event.loop.LinuxOsData","src": 1093,"pubDecls": [],"privDecls": [],"fields": [1084,1084,2595]},{"kind": 6,"len": 2,"elem": 1998},{"kind": 6,"len": 2,"elem": 1949},{"kind": 6,"len": 2,"const": true,"elem": 2553},{"kind": 6,"len": 2,"const": true,"elem": 2554},{"kind": 14,"err": 2556,"payload": 965},{"kind": 14,"err": 2555,"payload": 965},{"kind": 14,"err": 2558,"payload": 976},{"kind": 6,"const": true,"elem": 2658},{"kind": 6,"const": true,"elem": 2659},{"kind": 6,"elem": 2431},{"kind": 7,"len": 64,"elem": 988},{"kind": 8,"name": "std.Thread.ThreadCompletion","src": 1094,"pubDecls": [],"privDecls": [7281],"fields": [1081,1083,1084,2069]},{"kind": 6,"elem": 2613},{"kind": 7,"len": 16,"elem": 1015},{"kind": 8,"name": "std.coff.DataDirectory","src": 1095,"pubDecls": [],"privDecls": [],"fields": [1134,1134]},{"kind": 7,"len": 16,"elem": 2616},{"kind": 7,"len": 7,"elem": 1015},{"kind": 7,"len": 4,"elem": 1015},{"kind": 18,"name": "fn(type,anytype) anytype","generic": true,"args": [954,null]},{"kind": 18,"name": "fn(type,anytype) anytype","generic": true,"args": [954,null]},{"kind": 17,"name": "std.elf.union:784:11","src": 1096,"pubDecls": [],"privDecls": [],"fields": [1134]},{"kind": 7,"len": 3,"elem": 1015},{"kind": 13,"child": 2626},{"kind": 18,"name": "fn(c_int) callconv(.C) void","generic": false,"ret": 976,"args": [2660]},{"kind": 18,"name": "fn(c_int, *const std.os.linux.siginfo_t, ?*const anyopaque) callconv(.C) void","generic": false,"ret": 976,"args": [2660,1571,1572]},{"kind": 17,"name": "std.os.linux.union:3060:14","src": 1097,"pubDecls": [],"privDecls": [],"fields": [2652,2624]},{"kind": 4,"u": 32},{"kind": 13,"child": 2654},{"kind": 8,"name": "std.dynamic_library.RDebug","src": 1098,"pubDecls": [],"privDecls": [],"fields": [1084,1499,965,965]},{"kind": 8,"name": "std.pdb.Module","src": 1099,"pubDecls": [],"privDecls": [],"fields": [2565,1065,1065,967,1065,1065,1172]},{"kind": 13,"child": 2661},{"kind": 6,"len": 2,"elem": 2631},{"kind": 6,"len": 2,"elem": 2564},{"kind": 6,"len": 2,"elem": 2568},{"kind": 6,"len": 2,"elem": 1134},{"kind": 6,"len": 1,"const": true,"elem": 961},{"kind": 7,"len": 6,"elem": 1015},{"kind": 13,"child": 2662},{"kind": 7,"len": 116,"elem": 1015},{"kind": 8,"name": "std.os.linux.struct:3360:13","src": 1100,"pubDecls": [],"privDecls": [],"fields": [2663,2664]},{"kind": 8,"name": "std.os.linux.struct:3380:15","src": 1101,"pubDecls": [],"privDecls": [],"fields": [1493,2665,2666]},{"kind": 8,"name": "std.os.linux.struct:3391:14","src": 1102,"pubDecls": [],"privDecls": [],"fields": [1074,1084]},{"kind": 8,"name": "std.os.linux.struct:3395:13","src": 1103,"pubDecls": [],"privDecls": [],"fields": [1493,1084,1134]},{"kind": 6,"len": 2,"align": 16,"elem": 1015},{"kind": 8,"name": "std.os.linux.tls.TLSImage","src": 1104,"pubDecls": [],"privDecls": [],"fields": [978,965,965,965,965,965,965,965]},{"kind": 16,"name": "std.os.linux.tls.TLSVariant","src": 1105,"pubDecls": [],"privDecls": [],"fields": [0,1]},{"kind": 8,"name": "std.os.linux.tls.CustomData","src": 1106,"pubDecls": [],"privDecls": [],"fields": [965]},{"kind": 18,"name": "fn(type,anytype) callconv(.Inline) anytype","generic": true,"args": [954,null]},{"kind": 7,"len": 8448,"elem": 1015},{"kind": 6,"len": 1,"elem": 2521},{"kind": 13,"child": 2625},{"kind": 4,"u": 32},{"kind": 18,"name": "fn() callconv(.C) void","generic": false,"ret": 976},{"kind": 7,"len": 2,"elem": 2628},{"kind": 6,"elem": 2407},{"kind": 8,"name": "std.event.loop.Waiters","src": 1107,"pubDecls": [],"privDecls": [7282,7283,7284,7285,7286],"fields": [1076]},{"kind": 7,"len": 20,"elem": 1015},{"kind": 7,"len": 9,"elem": 1015},{"kind": 4,"i": 32},{"kind": 6,"elem": 2568},{"kind": 6,"elem": 2519},{"kind": 17,"name": "std.os.linux.union:3361:16","src": 1108,"pubDecls": [],"privDecls": [],"fields": [2667,2668]},{"kind": 17,"name": "std.os.linux.union:3371:17","src": 1109,"pubDecls": [],"privDecls": [],"fields": [2596,2669]},{"kind": 4,"i": 16},{"kind": 17,"name": "std.os.linux.union:3383:16","src": 1110,"pubDecls": [],"privDecls": [],"fields": [2670,1134]},{"kind": 8,"name": "std.os.linux.struct:3362:21","src": 1111,"pubDecls": [],"privDecls": [],"fields": [1084,1134]},{"kind": 8,"name": "std.os.linux.struct:3366:20","src": 1112,"pubDecls": [],"privDecls": [],"fields": [1084,1084]},{"kind": 8,"name": "std.os.linux.struct:3373:22","src": 1113,"pubDecls": [],"privDecls": [],"fields": [1084,1074,1074]},{"kind": 8,"name": "std.os.linux.struct:3384:23","src": 1114,"pubDecls": [],"privDecls": [],"fields": [1493,1493]}],"decls": [{"import": 1877,"src": 2,"name": "featureSet","kind": "const","type": 2,"value": 2},{"import": 1877,"src": 1115,"name": "featureSetHas"},{"import": 1877,"src": 658,"name": "featureSetHasAny","kind": "const","type": 1119,"value": 1193},{"import": 1877,"src": 1116,"name": "featureSetHasAll"},{"import": 1877,"src": 1117,"name": "needed_bit_count","kind": "const","type": 1034,"value": null},{"import": 1877,"src": 1118,"name": "byte_count","kind": "const","type": 1034,"value": null},{"import": 1877,"src": 1119,"name": "usize_count","kind": "const","type": 1034,"value": null},{"import": 1877,"src": 1120,"name": "Index","kind": "const","type": 954,"value": 962},{"import": 1877,"src": 1121,"name": "ShiftInt","kind": "const","type": 954,"value": 964},{"import": 1877,"src": 1122,"name": "empty"},{"import": 1877,"src": 3,"name": "empty_workaround","kind": "const","type": 3,"value": 3},{"import": 1877,"src": 1123,"name": "isEmpty"},{"import": 1877,"src": 323,"name": "isEnabled","kind": "const","type": 444,"value": 488},{"import": 1877,"src": 4,"name": "addFeature","kind": "const","type": 4,"value": 4},{"import": 1877,"src": 1124,"name": "addFeatureSet"},{"import": 1877,"src": 1125,"name": "removeFeature"},{"import": 1877,"src": 1126,"name": "removeFeatureSet"},{"import": 1877,"src": 1127,"name": "populateDependencies"},{"import": 1877,"src": 1128,"name": "asBytes"},{"import": 1877,"src": 1129,"name": "eql"},{"import": 1877,"src": 1130,"name": "isSuperSetOf"},{"import": 1877,"src": 1131,"name": "isX86"},{"import": 1877,"src": 23,"name": "isARM","kind": "const","type": 5,"value": 25},{"import": 1877,"src": 1132,"name": "isAARCH64"},{"import": 1877,"src": 1133,"name": "isThumb"},{"import": 1877,"src": 5,"name": "isWasm","kind": "const","type": 5,"value": 5},{"import": 1877,"src": 316,"name": "isRISCV","kind": "const","type": 5,"value": 481},{"import": 1877,"src": 6,"name": "isMIPS","kind": "const","type": 5,"value": 6},{"import": 1877,"src": 1134,"name": "isPPC"},{"import": 1877,"src": 360,"name": "isPPC64","kind": "const","type": 5,"value": 563},{"import": 1877,"src": 28,"name": "isSPARC","kind": "const","type": 5,"value": 30},{"import": 1877,"src": 1135,"name": "isSPIRV"},{"import": 1877,"src": 1136,"name": "isBpf"},{"import": 1877,"src": 1137,"name": "parseCpuModel"},{"import": 1877,"src": 1138,"name": "toElfMachine"},{"import": 1877,"src": 1139,"name": "toCoffMachine"},{"import": 1877,"src": 75,"name": "endian","kind": "const","type": 72,"value": 80},{"import": 1877,"src": 1140,"name": "ptrBitWidth"},{"import": 1877,"src": 1141,"name": "genericName"},{"import": 1877,"src": 1142,"name": "allFeaturesList"},{"import": 1877,"src": 1143,"name": "allCpuModels"},{"import": 1877,"src": 1144,"name": "allCpusFromDecls"},{"import": 1879,"src": 1145,"name": "Error","kind": "const","type": 954,"value": 972},{"import": 1879,"src": 187,"name": "write","kind": "const","type": 252,"value": 270},{"import": 1879,"src": 35,"name": "writeAll","kind": "const","type": 29,"value": 37},{"import": 1879,"src": 17,"name": "print","kind": "const","type": 1880,"value": 1229},{"import": 1879,"src": 249,"name": "writeByte","kind": "const","type": 334,"value": 360},{"import": 1879,"src": 198,"name": "writeByteNTimes","kind": "const","type": 263,"value": 281},{"import": 1879,"src": 1146,"name": "writeIntNative"},{"import": 1879,"src": 1147,"name": "writeIntForeign"},{"import": 1879,"src": 1148,"name": "writeIntLittle"},{"import": 1879,"src": 1149,"name": "writeIntBig"},{"import": 1879,"src": 1150,"name": "writeInt"},{"import": 1879,"src": 1151,"name": "writeStruct"},{"import": 1879,"src": 1152,"name": "Self","kind": "const","type": 954,"value": 970},{"import": 1881,"src": 1153,"name": "Handle","kind": "const","type": 954,"value": 1084},{"import": 1881,"src": 1154,"name": "Mode","kind": "const","type": 954,"value": 1134},{"import": 1881,"src": 1155,"name": "INode","kind": "const","type": 954,"value": 988},{"import": 1881,"src": 1156,"name": "Uid"},{"import": 1881,"src": 1157,"name": "Gid"},{"import": 1881,"src": 1158,"name": "Kind","kind": "const","type": 954,"value": 1882},{"import": 1881,"src": 1159,"name": "default_mode"},{"import": 1881,"src": 1160,"name": "OpenError","kind": "const","type": 954,"value": 1883},{"import": 1881,"src": 1161,"name": "Lock","kind": "const","type": 954,"value": 1884},{"import": 1881,"src": 1162,"name": "OpenFlags","kind": "const","type": 954,"value": 1327},{"import": 1881,"src": 1163,"name": "CreateFlags"},{"import": 1881,"src": 71,"name": "close","kind": "const","type": 68,"value": 76},{"import": 1881,"src": 290,"name": "isTty","kind": "const","type": 278,"value": 411},{"import": 1881,"src": 212,"name": "supportsAnsiEscapeCodes","kind": "const","type": 278,"value": 298},{"import": 1881,"src": 1164,"name": "SetEndPosError"},{"import": 1881,"src": 1165,"name": "setEndPos"},{"import": 1881,"src": 1166,"name": "SeekError"},{"import": 1881,"src": 1167,"name": "seekBy"},{"import": 1881,"src": 1168,"name": "seekFromEnd"},{"import": 1881,"src": 1169,"name": "seekTo"},{"import": 1881,"src": 1170,"name": "GetSeekPosError","kind": "const","type": 954,"value": 1885},{"import": 1881,"src": 1171,"name": "getPos"},{"import": 1881,"src": 70,"name": "getEndPos","kind": "const","type": 67,"value": 75},{"import": 1881,"src": 1172,"name": "ModeError"},{"import": 1881,"src": 1173,"name": "mode"},{"import": 1881,"src": 1174,"name": "Stat","kind": "const","type": 954,"value": 1886},{"import": 1881,"src": 1175,"name": "StatError","kind": "const","type": 954,"value": 1887},{"import": 1881,"src": 225,"name": "stat","kind": "const","type": 291,"value": 311},{"import": 1881,"src": 1176,"name": "ChmodError"},{"import": 1881,"src": 1177,"name": "chmod"},{"import": 1881,"src": 1178,"name": "ChownError"},{"import": 1881,"src": 1179,"name": "chown"},{"import": 1881,"src": 1180,"name": "UpdateTimesError"},{"import": 1881,"src": 1181,"name": "updateTimes"},{"import": 1881,"src": 1182,"name": "readToEndAlloc"},{"import": 1881,"src": 1183,"name": "readToEndAllocOptions"},{"import": 1881,"src": 1184,"name": "ReadError","kind": "const","type": 954,"value": 1888},{"import": 1881,"src": 1185,"name": "PReadError"},{"import": 1881,"src": 248,"name": "read","kind": "const","type": 333,"value": 359},{"import": 1881,"src": 1186,"name": "readAll"},{"import": 1881,"src": 1187,"name": "pread"},{"import": 1881,"src": 1188,"name": "preadAll"},{"import": 1881,"src": 1189,"name": "readv"},{"import": 1881,"src": 1190,"name": "readvAll"},{"import": 1881,"src": 1191,"name": "preadv"},{"import": 1881,"src": 1192,"name": "preadvAll"},{"import": 1881,"src": 1193,"name": "WriteError","kind": "const","type": 954,"value": 972},{"import": 1881,"src": 1194,"name": "PWriteError"},{"import": 1881,"src": 14,"name": "write","kind": "const","type": 12,"value": 14},{"import": 1881,"src": 1195,"name": "writeAll"},{"import": 1881,"src": 1196,"name": "pwrite"},{"import": 1881,"src": 1197,"name": "pwriteAll"},{"import": 1881,"src": 1198,"name": "writev"},{"import": 1881,"src": 1199,"name": "writevAll"},{"import": 1881,"src": 1200,"name": "pwritev"},{"import": 1881,"src": 1201,"name": "pwritevAll"},{"import": 1881,"src": 1202,"name": "CopyRangeError"},{"import": 1881,"src": 1203,"name": "copyRange"},{"import": 1881,"src": 1204,"name": "copyRangeAll"},{"import": 1881,"src": 1205,"name": "WriteFileOptions"},{"import": 1881,"src": 1206,"name": "WriteFileError"},{"import": 1881,"src": 1207,"name": "writeFileAll"},{"import": 1881,"src": 1208,"name": "writeFileAllUnseekable"},{"import": 1881,"src": 1209,"name": "Reader"},{"import": 1881,"src": 1210,"name": "reader"},{"import": 1881,"src": 1211,"name": "Writer","kind": "const","type": 954,"value": 970},{"import": 1881,"src": 15,"name": "writer","kind": "const","type": 13,"value": 15},{"import": 1881,"src": 1212,"name": "SeekableStream"},{"import": 1881,"src": 1213,"name": "seekableStream"},{"import": 1881,"src": 1214,"name": "LockError"},{"import": 1881,"src": 1215,"name": "lock"},{"import": 1881,"src": 1216,"name": "unlock"},{"import": 1881,"src": 1217,"name": "tryLock"},{"import": 1881,"src": 1218,"name": "downgradeLock"},{"import": 1881,"src": 1219,"name": "writeFileAllSendfile"},{"import": 1881,"src": 1220,"name": "range_off"},{"import": 1881,"src": 1221,"name": "range_len"},{"import": 975,"src": 1222,"name": "flag","kind": "const","type": 954,"value": 1241},{"import": 975,"src": 1223,"name": "Arg","kind": "const","type": 954,"value": 1199},{"import": 975,"src": 1224,"name": "Command","kind": "const","type": 954,"value": 1202},{"import": 975,"src": 1225,"name": "ArgsContext","kind": "const","type": 954,"value": 1242},{"import": 975,"src": 1226,"name": "Yazap","kind": "const","type": 954,"value": 1243},{"import": 975,"src": 1227,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 1893,"src": 1228,"name": "hash","kind": "const","type": 43,"value": 51},{"import": 1893,"src": 1229,"name": "eql","kind": "const","type": 44,"value": 52},{"import": 1893,"src": 1230,"name": "Unmanaged","kind": "const","type": 954,"value": 994},{"import": 1893,"src": 1231,"name": "Entry"},{"import": 1893,"src": 1232,"name": "KV"},{"import": 1893,"src": 1233,"name": "Hash"},{"import": 1893,"src": 1234,"name": "Iterator"},{"import": 1893,"src": 1235,"name": "KeyIterator"},{"import": 1893,"src": 1236,"name": "ValueIterator"},{"import": 1893,"src": 1237,"name": "Size"},{"import": 1893,"src": 1238,"name": "GetOrPutResult"},{"import": 1893,"src": 275,"name": "init","kind": "const","type": 364,"value": 396},{"import": 1893,"src": 1239,"name": "initContext"},{"import": 1893,"src": 504,"name": "deinit"},{"import": 1893,"src": 1240,"name": "clearRetainingCapacity"},{"import": 1893,"src": 1241,"name": "clearAndFree"},{"import": 1893,"src": 516,"name": "count"},{"import": 1893,"src": 1242,"name": "iterator"},{"import": 1893,"src": 1243,"name": "keyIterator"},{"import": 1893,"src": 502,"name": "valueIterator"},{"import": 1893,"src": 1244,"name": "getOrPut"},{"import": 1893,"src": 1245,"name": "getOrPutAdapted"},{"import": 1893,"src": 1246,"name": "getOrPutAssumeCapacity"},{"import": 1893,"src": 1247,"name": "getOrPutAssumeCapacityAdapted"},{"import": 1893,"src": 1248,"name": "getOrPutValue"},{"import": 1893,"src": 1249,"name": "ensureCapacity"},{"import": 1893,"src": 1250,"name": "ensureTotalCapacity"},{"import": 1893,"src": 1251,"name": "ensureUnusedCapacity"},{"import": 1893,"src": 1252,"name": "capacity"},{"import": 1893,"src": 509,"name": "put"},{"import": 1893,"src": 124,"name": "putNoClobber","kind": "const","type": 163,"value": 174},{"import": 1893,"src": 1253,"name": "putAssumeCapacity"},{"import": 1893,"src": 1254,"name": "putAssumeCapacityNoClobber"},{"import": 1893,"src": 1255,"name": "fetchPut"},{"import": 1893,"src": 1256,"name": "fetchPutAssumeCapacity"},{"import": 1893,"src": 1257,"name": "fetchRemove"},{"import": 1893,"src": 1258,"name": "fetchRemoveAdapted"},{"import": 1893,"src": 62,"name": "get","kind": "const","type": 59,"value": 67},{"import": 1893,"src": 1259,"name": "getAdapted"},{"import": 1893,"src": 507,"name": "getPtr"},{"import": 1893,"src": 1260,"name": "getPtrAdapted"},{"import": 1893,"src": 1261,"name": "getKey"},{"import": 1893,"src": 1262,"name": "getKeyAdapted"},{"import": 1893,"src": 1263,"name": "getKeyPtr"},{"import": 1893,"src": 1264,"name": "getKeyPtrAdapted"},{"import": 1893,"src": 1265,"name": "getEntry"},{"import": 1893,"src": 1266,"name": "getEntryAdapted"},{"import": 1893,"src": 515,"name": "contains"},{"import": 1893,"src": 1267,"name": "containsAdapted"},{"import": 1893,"src": 1268,"name": "remove"},{"import": 1893,"src": 1269,"name": "removeAdapted"},{"import": 1893,"src": 1270,"name": "clone"},{"import": 1893,"src": 1271,"name": "cloneWithAllocator"},{"import": 1893,"src": 1272,"name": "cloneWithContext"},{"import": 1893,"src": 1273,"name": "cloneWithAllocatorAndContext"},{"import": 1893,"src": 1274,"name": "Self","kind": "const","type": 954,"value": 990},{"import": 1893,"src": 1275,"name": "Size","kind": "const","type": 954,"value": 1134},{"import": 1893,"src": 1276,"name": "Hash","kind": "const","type": 954,"value": 988},{"import": 1893,"src": 1277,"name": "Entry"},{"import": 1893,"src": 1278,"name": "KV"},{"import": 1893,"src": 1279,"name": "Iterator"},{"import": 1893,"src": 1280,"name": "KeyIterator"},{"import": 1893,"src": 1281,"name": "ValueIterator"},{"import": 1893,"src": 1282,"name": "GetOrPutResult"},{"import": 1893,"src": 1283,"name": "Managed"},{"import": 1893,"src": 1284,"name": "promote"},{"import": 1893,"src": 1285,"name": "promoteContext"},{"import": 1893,"src": 137,"name": "deinit","kind": "const","type": 173,"value": 187},{"import": 1893,"src": 1286,"name": "ensureCapacity"},{"import": 1893,"src": 1287,"name": "ensureTotalCapacity"},{"import": 1893,"src": 1288,"name": "ensureTotalCapacityContext"},{"import": 1893,"src": 1289,"name": "ensureUnusedCapacity"},{"import": 1893,"src": 1290,"name": "ensureUnusedCapacityContext"},{"import": 1893,"src": 1291,"name": "clearRetainingCapacity"},{"import": 1893,"src": 1292,"name": "clearAndFree"},{"import": 1893,"src": 542,"name": "count"},{"import": 1893,"src": 132,"name": "capacity","kind": "const","type": 169,"value": 182},{"import": 1893,"src": 1293,"name": "iterator"},{"import": 1893,"src": 1294,"name": "keyIterator"},{"import": 1893,"src": 394,"name": "valueIterator"},{"import": 1893,"src": 1295,"name": "putNoClobber"},{"import": 1893,"src": 125,"name": "putNoClobberContext","kind": "const","type": 164,"value": 175},{"import": 1893,"src": 1296,"name": "putAssumeCapacity"},{"import": 1893,"src": 1297,"name": "putAssumeCapacityContext"},{"import": 1893,"src": 1298,"name": "putAssumeCapacityNoClobber"},{"import": 1893,"src": 142,"name": "putAssumeCapacityNoClobberContext","kind": "const","type": 178,"value": 192},{"import": 1893,"src": 1299,"name": "fetchPut"},{"import": 1893,"src": 1300,"name": "fetchPutContext"},{"import": 1893,"src": 1301,"name": "fetchPutAssumeCapacity"},{"import": 1893,"src": 1302,"name": "fetchPutAssumeCapacityContext"},{"import": 1893,"src": 1303,"name": "fetchRemove"},{"import": 1893,"src": 1304,"name": "fetchRemoveContext"},{"import": 1893,"src": 1305,"name": "fetchRemoveAdapted"},{"import": 1893,"src": 1306,"name": "getEntry"},{"import": 1893,"src": 1307,"name": "getEntryContext"},{"import": 1893,"src": 1308,"name": "getEntryAdapted"},{"import": 1893,"src": 1309,"name": "put"},{"import": 1893,"src": 511,"name": "putContext"},{"import": 1893,"src": 1310,"name": "getKeyPtr"},{"import": 1893,"src": 1311,"name": "getKeyPtrContext"},{"import": 1893,"src": 1312,"name": "getKeyPtrAdapted"},{"import": 1893,"src": 1313,"name": "getKey"},{"import": 1893,"src": 1314,"name": "getKeyContext"},{"import": 1893,"src": 1315,"name": "getKeyAdapted"},{"import": 1893,"src": 1316,"name": "getPtr"},{"import": 1893,"src": 540,"name": "getPtrContext"},{"import": 1893,"src": 561,"name": "getPtrAdapted"},{"import": 1893,"src": 1317,"name": "get"},{"import": 1893,"src": 218,"name": "getContext","kind": "const","type": 284,"value": 304},{"import": 1893,"src": 294,"name": "getAdapted","kind": "const","type": 1895,"value": 1230},{"import": 1893,"src": 1318,"name": "getOrPut"},{"import": 1893,"src": 512,"name": "getOrPutContext"},{"import": 1893,"src": 1319,"name": "getOrPutAdapted"},{"import": 1893,"src": 513,"name": "getOrPutContextAdapted"},{"import": 1893,"src": 1320,"name": "getOrPutAssumeCapacity"},{"import": 1893,"src": 1321,"name": "getOrPutAssumeCapacityContext"},{"import": 1893,"src": 514,"name": "getOrPutAssumeCapacityAdapted"},{"import": 1893,"src": 1322,"name": "getOrPutValue"},{"import": 1893,"src": 1323,"name": "getOrPutValueContext"},{"import": 1893,"src": 1324,"name": "contains"},{"import": 1893,"src": 126,"name": "containsContext","kind": "const","type": 165,"value": 176},{"import": 1893,"src": 239,"name": "containsAdapted","kind": "const","type": 1896,"value": 1231},{"import": 1893,"src": 1325,"name": "remove"},{"import": 1893,"src": 1326,"name": "removeContext"},{"import": 1893,"src": 1327,"name": "removeAdapted"},{"import": 1893,"src": 1328,"name": "clone"},{"import": 1893,"src": 1329,"name": "cloneContext"},{"import": 1893,"src": 1330,"name": "Self","kind": "const","type": 954,"value": 994},{"import": 1893,"src": 1331,"name": "minimal_capacity","kind": "const","type": 1034,"value": null},{"import": 1893,"src": 1332,"name": "Header","kind": "const","type": 954,"value": 1897},{"import": 1893,"src": 1333,"name": "Metadata","kind": "const","type": 954,"value": 1424},{"import": 1893,"src": 663,"name": "FieldIterator"},{"import": 1893,"src": 1334,"name": "isUnderMaxLoadPercentage"},{"import": 1893,"src": 129,"name": "capacityForSize","kind": "const","type": 168,"value": 179},{"import": 1893,"src": 241,"name": "header","kind": "const","type": 325,"value": 349},{"import": 1893,"src": 139,"name": "keys","kind": "const","type": 175,"value": 189},{"import": 1893,"src": 140,"name": "values","kind": "const","type": 176,"value": 190},{"import": 1893,"src": 311,"name": "getIndex","kind": "const","type": 1898,"value": 1232},{"import": 1893,"src": 138,"name": "initMetadatas","kind": "const","type": 174,"value": 188},{"import": 1893,"src": 130,"name": "load","kind": "const","type": 169,"value": 180},{"import": 1893,"src": 127,"name": "growIfNeeded","kind": "const","type": 166,"value": 177},{"import": 1893,"src": 128,"name": "grow","kind": "const","type": 167,"value": 178},{"import": 1893,"src": 134,"name": "allocate","kind": "const","type": 171,"value": 184},{"import": 1893,"src": 243,"name": "deallocate","kind": "const","type": 173,"value": 352},{"import": 1900,"src": 1335,"name": "Slice","kind": "const","type": 954,"value": 1099},{"import": 1900,"src": 80,"name": "init","kind": "const","type": 77,"value": 85},{"import": 1900,"src": 1336,"name": "initCapacity"},{"import": 1900,"src": 106,"name": "deinit"},{"import": 1900,"src": 1337,"name": "fromOwnedSlice"},{"import": 1900,"src": 1338,"name": "toUnmanaged"},{"import": 1900,"src": 1339,"name": "moveToUnmanaged"},{"import": 1900,"src": 157,"name": "toOwnedSlice"},{"import": 1900,"src": 1340,"name": "toOwnedSliceSentinel"},{"import": 1900,"src": 1341,"name": "insert"},{"import": 1900,"src": 1342,"name": "insertSlice"},{"import": 1900,"src": 1343,"name": "replaceRange"},{"import": 1900,"src": 102,"name": "append","kind": "const","type": 104,"value": 115},{"import": 1900,"src": 1344,"name": "appendAssumeCapacity"},{"import": 1900,"src": 1345,"name": "orderedRemove"},{"import": 1900,"src": 1346,"name": "swapRemove"},{"import": 1900,"src": 368,"name": "appendSlice"},{"import": 1900,"src": 370,"name": "appendSliceAssumeCapacity"},{"import": 1900,"src": 1347,"name": "Writer"},{"import": 1900,"src": 1348,"name": "writer"},{"import": 1900,"src": 1349,"name": "appendNTimes"},{"import": 1900,"src": 1350,"name": "appendNTimesAssumeCapacity"},{"import": 1900,"src": 115,"name": "resize"},{"import": 1900,"src": 1351,"name": "shrinkAndFree"},{"import": 1900,"src": 156,"name": "shrinkRetainingCapacity"},{"import": 1900,"src": 1352,"name": "clearRetainingCapacity"},{"import": 1900,"src": 1353,"name": "clearAndFree"},{"import": 1900,"src": 1354,"name": "ensureCapacity"},{"import": 1900,"src": 108,"name": "ensureTotalCapacity","kind": "const","type": 126,"value": 137},{"import": 1900,"src": 109,"name": "ensureTotalCapacityPrecise","kind": "const","type": 127,"value": 138},{"import": 1900,"src": 369,"name": "ensureUnusedCapacity"},{"import": 1900,"src": 1355,"name": "expandToCapacity"},{"import": 1900,"src": 107,"name": "addOne","kind": "const","type": 125,"value": 136},{"import": 1900,"src": 112,"name": "addOneAssumeCapacity","kind": "const","type": 130,"value": 141},{"import": 1900,"src": 1356,"name": "addManyAsArray"},{"import": 1900,"src": 1357,"name": "addManyAsArrayAssumeCapacity"},{"import": 1900,"src": 1358,"name": "pop"},{"import": 1900,"src": 1359,"name": "popOrNull"},{"import": 1900,"src": 110,"name": "allocatedSlice","kind": "const","type": 128,"value": 139},{"import": 1900,"src": 1360,"name": "unusedCapacitySlice"},{"import": 1900,"src": 1361,"name": "Self","kind": "const","type": 954,"value": 997},{"import": 1900,"src": 1362,"name": "appendWrite"},{"import": 1900,"src": 1335,"name": "Slice","kind": "const","type": 954,"value": 1092},{"import": 1900,"src": 80,"name": "init","kind": "const","type": 106,"value": 117},{"import": 1900,"src": 1336,"name": "initCapacity"},{"import": 1900,"src": 106,"name": "deinit","kind": "const","type": 109,"value": 120},{"import": 1900,"src": 1337,"name": "fromOwnedSlice"},{"import": 1900,"src": 1338,"name": "toUnmanaged"},{"import": 1900,"src": 1339,"name": "moveToUnmanaged"},{"import": 1900,"src": 157,"name": "toOwnedSlice"},{"import": 1900,"src": 1340,"name": "toOwnedSliceSentinel"},{"import": 1900,"src": 1341,"name": "insert"},{"import": 1900,"src": 1342,"name": "insertSlice"},{"import": 1900,"src": 1343,"name": "replaceRange"},{"import": 1900,"src": 102,"name": "append","kind": "const","type": 110,"value": 121},{"import": 1900,"src": 1344,"name": "appendAssumeCapacity"},{"import": 1900,"src": 1345,"name": "orderedRemove"},{"import": 1900,"src": 1346,"name": "swapRemove"},{"import": 1900,"src": 368,"name": "appendSlice"},{"import": 1900,"src": 370,"name": "appendSliceAssumeCapacity"},{"import": 1900,"src": 1347,"name": "Writer"},{"import": 1900,"src": 1348,"name": "writer"},{"import": 1900,"src": 1349,"name": "appendNTimes"},{"import": 1900,"src": 1350,"name": "appendNTimesAssumeCapacity"},{"import": 1900,"src": 115,"name": "resize"},{"import": 1900,"src": 1351,"name": "shrinkAndFree"},{"import": 1900,"src": 156,"name": "shrinkRetainingCapacity"},{"import": 1900,"src": 1352,"name": "clearRetainingCapacity"},{"import": 1900,"src": 1353,"name": "clearAndFree"},{"import": 1900,"src": 1354,"name": "ensureCapacity"},{"import": 1900,"src": 108,"name": "ensureTotalCapacity","kind": "const","type": 113,"value": 124},{"import": 1900,"src": 109,"name": "ensureTotalCapacityPrecise","kind": "const","type": 114,"value": 125},{"import": 1900,"src": 369,"name": "ensureUnusedCapacity"},{"import": 1900,"src": 1355,"name": "expandToCapacity"},{"import": 1900,"src": 107,"name": "addOne","kind": "const","type": 112,"value": 123},{"import": 1900,"src": 112,"name": "addOneAssumeCapacity","kind": "const","type": 117,"value": 128},{"import": 1900,"src": 1356,"name": "addManyAsArray"},{"import": 1900,"src": 1357,"name": "addManyAsArrayAssumeCapacity"},{"import": 1900,"src": 1358,"name": "pop"},{"import": 1900,"src": 1359,"name": "popOrNull"},{"import": 1900,"src": 110,"name": "allocatedSlice","kind": "const","type": 115,"value": 126},{"import": 1900,"src": 1360,"name": "unusedCapacitySlice"},{"import": 1900,"src": 1361,"name": "Self","kind": "const","type": 954,"value": 1001},{"import": 1900,"src": 1362,"name": "appendWrite"},{"import": 1900,"src": 1335,"name": "Slice","kind": "const","type": 954,"value": 1098},{"import": 1900,"src": 80,"name": "init","kind": "const","type": 111,"value": 122},{"import": 1900,"src": 1336,"name": "initCapacity"},{"import": 1900,"src": 106,"name": "deinit"},{"import": 1900,"src": 1337,"name": "fromOwnedSlice"},{"import": 1900,"src": 1338,"name": "toUnmanaged"},{"import": 1900,"src": 1339,"name": "moveToUnmanaged"},{"import": 1900,"src": 157,"name": "toOwnedSlice"},{"import": 1900,"src": 1340,"name": "toOwnedSliceSentinel"},{"import": 1900,"src": 1341,"name": "insert"},{"import": 1900,"src": 1342,"name": "insertSlice"},{"import": 1900,"src": 1343,"name": "replaceRange"},{"import": 1900,"src": 102,"name": "append","kind": "const","type": 118,"value": 129},{"import": 1900,"src": 1344,"name": "appendAssumeCapacity"},{"import": 1900,"src": 1345,"name": "orderedRemove"},{"import": 1900,"src": 1346,"name": "swapRemove"},{"import": 1900,"src": 368,"name": "appendSlice"},{"import": 1900,"src": 370,"name": "appendSliceAssumeCapacity"},{"import": 1900,"src": 1347,"name": "Writer"},{"import": 1900,"src": 1348,"name": "writer"},{"import": 1900,"src": 1349,"name": "appendNTimes"},{"import": 1900,"src": 1350,"name": "appendNTimesAssumeCapacity"},{"import": 1900,"src": 115,"name": "resize"},{"import": 1900,"src": 1351,"name": "shrinkAndFree"},{"import": 1900,"src": 156,"name": "shrinkRetainingCapacity"},{"import": 1900,"src": 1352,"name": "clearRetainingCapacity"},{"import": 1900,"src": 1353,"name": "clearAndFree"},{"import": 1900,"src": 1354,"name": "ensureCapacity"},{"import": 1900,"src": 108,"name": "ensureTotalCapacity","kind": "const","type": 120,"value": 131},{"import": 1900,"src": 109,"name": "ensureTotalCapacityPrecise","kind": "const","type": 121,"value": 132},{"import": 1900,"src": 369,"name": "ensureUnusedCapacity"},{"import": 1900,"src": 1355,"name": "expandToCapacity"},{"import": 1900,"src": 107,"name": "addOne","kind": "const","type": 119,"value": 130},{"import": 1900,"src": 112,"name": "addOneAssumeCapacity","kind": "const","type": 124,"value": 135},{"import": 1900,"src": 1356,"name": "addManyAsArray"},{"import": 1900,"src": 1357,"name": "addManyAsArrayAssumeCapacity"},{"import": 1900,"src": 1358,"name": "pop"},{"import": 1900,"src": 1359,"name": "popOrNull"},{"import": 1900,"src": 110,"name": "allocatedSlice","kind": "const","type": 122,"value": 133},{"import": 1900,"src": 1360,"name": "unusedCapacitySlice"},{"import": 1900,"src": 1361,"name": "Self","kind": "const","type": 954,"value": 1003},{"import": 1900,"src": 1362,"name": "appendWrite"},{"import": 1900,"src": 1335,"name": "Slice","kind": "const","type": 954,"value": 1102},{"import": 1900,"src": 80,"name": "init","kind": "const","type": 78,"value": 86},{"import": 1900,"src": 1336,"name": "initCapacity"},{"import": 1900,"src": 106,"name": "deinit"},{"import": 1900,"src": 1337,"name": "fromOwnedSlice"},{"import": 1900,"src": 1338,"name": "toUnmanaged"},{"import": 1900,"src": 1339,"name": "moveToUnmanaged"},{"import": 1900,"src": 157,"name": "toOwnedSlice"},{"import": 1900,"src": 1340,"name": "toOwnedSliceSentinel"},{"import": 1900,"src": 1341,"name": "insert"},{"import": 1900,"src": 1342,"name": "insertSlice"},{"import": 1900,"src": 1343,"name": "replaceRange"},{"import": 1900,"src": 102,"name": "append","kind": "const","type": 156,"value": 167},{"import": 1900,"src": 1344,"name": "appendAssumeCapacity"},{"import": 1900,"src": 1345,"name": "orderedRemove"},{"import": 1900,"src": 1346,"name": "swapRemove"},{"import": 1900,"src": 368,"name": "appendSlice"},{"import": 1900,"src": 370,"name": "appendSliceAssumeCapacity"},{"import": 1900,"src": 1347,"name": "Writer"},{"import": 1900,"src": 1348,"name": "writer"},{"import": 1900,"src": 1349,"name": "appendNTimes"},{"import": 1900,"src": 1350,"name": "appendNTimesAssumeCapacity"},{"import": 1900,"src": 115,"name": "resize"},{"import": 1900,"src": 1351,"name": "shrinkAndFree"},{"import": 1900,"src": 156,"name": "shrinkRetainingCapacity"},{"import": 1900,"src": 1352,"name": "clearRetainingCapacity"},{"import": 1900,"src": 1353,"name": "clearAndFree"},{"import": 1900,"src": 1354,"name": "ensureCapacity"},{"import": 1900,"src": 108,"name": "ensureTotalCapacity","kind": "const","type": 158,"value": 169},{"import": 1900,"src": 109,"name": "ensureTotalCapacityPrecise","kind": "const","type": 159,"value": 170},{"import": 1900,"src": 369,"name": "ensureUnusedCapacity"},{"import": 1900,"src": 1355,"name": "expandToCapacity"},{"import": 1900,"src": 107,"name": "addOne","kind": "const","type": 157,"value": 168},{"import": 1900,"src": 112,"name": "addOneAssumeCapacity","kind": "const","type": 162,"value": 173},{"import": 1900,"src": 1356,"name": "addManyAsArray"},{"import": 1900,"src": 1357,"name": "addManyAsArrayAssumeCapacity"},{"import": 1900,"src": 1358,"name": "pop"},{"import": 1900,"src": 1359,"name": "popOrNull"},{"import": 1900,"src": 110,"name": "allocatedSlice","kind": "const","type": 160,"value": 171},{"import": 1900,"src": 1360,"name": "unusedCapacitySlice"},{"import": 1900,"src": 1361,"name": "Self","kind": "const","type": 954,"value": 1005},{"import": 1900,"src": 1362,"name": "appendWrite"},{"import": 1900,"src": 1335,"name": "Slice","kind": "const","type": 954,"value": 1100},{"import": 1900,"src": 80,"name": "init","kind": "const","type": 133,"value": 144},{"import": 1900,"src": 1336,"name": "initCapacity"},{"import": 1900,"src": 106,"name": "deinit","kind": "const","type": 143,"value": 154},{"import": 1900,"src": 1337,"name": "fromOwnedSlice"},{"import": 1900,"src": 1338,"name": "toUnmanaged"},{"import": 1900,"src": 1339,"name": "moveToUnmanaged"},{"import": 1900,"src": 157,"name": "toOwnedSlice"},{"import": 1900,"src": 1340,"name": "toOwnedSliceSentinel"},{"import": 1900,"src": 1341,"name": "insert"},{"import": 1900,"src": 1342,"name": "insertSlice"},{"import": 1900,"src": 1343,"name": "replaceRange"},{"import": 1900,"src": 102,"name": "append"},{"import": 1900,"src": 1344,"name": "appendAssumeCapacity"},{"import": 1900,"src": 1345,"name": "orderedRemove"},{"import": 1900,"src": 1346,"name": "swapRemove"},{"import": 1900,"src": 368,"name": "appendSlice"},{"import": 1900,"src": 370,"name": "appendSliceAssumeCapacity"},{"import": 1900,"src": 1347,"name": "Writer"},{"import": 1900,"src": 1348,"name": "writer"},{"import": 1900,"src": 1349,"name": "appendNTimes"},{"import": 1900,"src": 1350,"name": "appendNTimesAssumeCapacity"},{"import": 1900,"src": 115,"name": "resize","kind": "const","type": 134,"value": 145},{"import": 1900,"src": 1351,"name": "shrinkAndFree"},{"import": 1900,"src": 156,"name": "shrinkRetainingCapacity"},{"import": 1900,"src": 1352,"name": "clearRetainingCapacity"},{"import": 1900,"src": 1353,"name": "clearAndFree"},{"import": 1900,"src": 1354,"name": "ensureCapacity"},{"import": 1900,"src": 108,"name": "ensureTotalCapacity","kind": "const","type": 135,"value": 146},{"import": 1900,"src": 109,"name": "ensureTotalCapacityPrecise","kind": "const","type": 136,"value": 147},{"import": 1900,"src": 369,"name": "ensureUnusedCapacity"},{"import": 1900,"src": 1355,"name": "expandToCapacity"},{"import": 1900,"src": 107,"name": "addOne"},{"import": 1900,"src": 112,"name": "addOneAssumeCapacity"},{"import": 1900,"src": 1356,"name": "addManyAsArray"},{"import": 1900,"src": 1357,"name": "addManyAsArrayAssumeCapacity"},{"import": 1900,"src": 1358,"name": "pop"},{"import": 1900,"src": 1359,"name": "popOrNull"},{"import": 1900,"src": 110,"name": "allocatedSlice","kind": "const","type": 137,"value": 148},{"import": 1900,"src": 1360,"name": "unusedCapacitySlice"},{"import": 1900,"src": 1361,"name": "Self","kind": "const","type": 954,"value": 1007},{"import": 1900,"src": 1362,"name": "appendWrite"},{"import": 1900,"src": 1335,"name": "Slice","kind": "const","type": 954,"value": 1101},{"import": 1900,"src": 80,"name": "init","kind": "const","type": 79,"value": 87},{"import": 1900,"src": 1336,"name": "initCapacity"},{"import": 1900,"src": 106,"name": "deinit"},{"import": 1900,"src": 1337,"name": "fromOwnedSlice"},{"import": 1900,"src": 1338,"name": "toUnmanaged"},{"import": 1900,"src": 1339,"name": "moveToUnmanaged"},{"import": 1900,"src": 157,"name": "toOwnedSlice"},{"import": 1900,"src": 1340,"name": "toOwnedSliceSentinel"},{"import": 1900,"src": 1341,"name": "insert"},{"import": 1900,"src": 1342,"name": "insertSlice"},{"import": 1900,"src": 1343,"name": "replaceRange"},{"import": 1900,"src": 102,"name": "append","kind": "const","type": 147,"value": 158},{"import": 1900,"src": 1344,"name": "appendAssumeCapacity"},{"import": 1900,"src": 1345,"name": "orderedRemove"},{"import": 1900,"src": 1346,"name": "swapRemove"},{"import": 1900,"src": 368,"name": "appendSlice"},{"import": 1900,"src": 370,"name": "appendSliceAssumeCapacity"},{"import": 1900,"src": 1347,"name": "Writer"},{"import": 1900,"src": 1348,"name": "writer"},{"import": 1900,"src": 1349,"name": "appendNTimes"},{"import": 1900,"src": 1350,"name": "appendNTimesAssumeCapacity"},{"import": 1900,"src": 115,"name": "resize"},{"import": 1900,"src": 1351,"name": "shrinkAndFree"},{"import": 1900,"src": 156,"name": "shrinkRetainingCapacity"},{"import": 1900,"src": 1352,"name": "clearRetainingCapacity"},{"import": 1900,"src": 1353,"name": "clearAndFree"},{"import": 1900,"src": 1354,"name": "ensureCapacity"},{"import": 1900,"src": 108,"name": "ensureTotalCapacity","kind": "const","type": 149,"value": 160},{"import": 1900,"src": 109,"name": "ensureTotalCapacityPrecise","kind": "const","type": 150,"value": 161},{"import": 1900,"src": 369,"name": "ensureUnusedCapacity"},{"import": 1900,"src": 1355,"name": "expandToCapacity"},{"import": 1900,"src": 107,"name": "addOne","kind": "const","type": 148,"value": 159},{"import": 1900,"src": 112,"name": "addOneAssumeCapacity","kind": "const","type": 153,"value": 164},{"import": 1900,"src": 1356,"name": "addManyAsArray"},{"import": 1900,"src": 1357,"name": "addManyAsArrayAssumeCapacity"},{"import": 1900,"src": 1358,"name": "pop"},{"import": 1900,"src": 1359,"name": "popOrNull"},{"import": 1900,"src": 110,"name": "allocatedSlice","kind": "const","type": 151,"value": 162},{"import": 1900,"src": 1360,"name": "unusedCapacitySlice"},{"import": 1900,"src": 1361,"name": "Self","kind": "const","type": 954,"value": 1009},{"import": 1900,"src": 1362,"name": "appendWrite"},{"import": 1877,"src": 58,"name": "isDarwin","kind": "const","type": 55,"value": 63},{"import": 1877,"src": 1363,"name": "isBSD"},{"import": 1877,"src": 1364,"name": "dynamicLibSuffix"},{"import": 1877,"src": 1365,"name": "defaultVersionRange"},{"import": 1877,"src": 1366,"name": "Os","kind": "const","type": 954,"value": 1904},{"import": 1877,"src": 1367,"name": "aarch64"},{"import": 1877,"src": 1368,"name": "arc"},{"import": 1877,"src": 1369,"name": "amdgpu"},{"import": 1877,"src": 1370,"name": "arm","kind": "const","type": 954,"value": 1905},{"import": 1877,"src": 1371,"name": "avr"},{"import": 1877,"src": 1372,"name": "bpf"},{"import": 1877,"src": 1373,"name": "hexagon"},{"import": 1877,"src": 1374,"name": "mips"},{"import": 1877,"src": 1375,"name": "msp430"},{"import": 1877,"src": 1376,"name": "nvptx"},{"import": 1877,"src": 1377,"name": "powerpc"},{"import": 1877,"src": 1378,"name": "riscv"},{"import": 1877,"src": 1379,"name": "sparc"},{"import": 1877,"src": 1380,"name": "spirv"},{"import": 1877,"src": 1381,"name": "systemz"},{"import": 1877,"src": 1382,"name": "ve"},{"import": 1877,"src": 1383,"name": "wasm"},{"import": 1877,"src": 1384,"name": "x86"},{"import": 1877,"src": 1385,"name": "Abi","kind": "const","type": 954,"value": 1906},{"import": 1877,"src": 1386,"name": "ObjectFormat","kind": "const","type": 954,"value": 1907},{"import": 1877,"src": 1387,"name": "SubSystem"},{"import": 1877,"src": 1388,"name": "Cpu","kind": "const","type": 954,"value": 1908},{"import": 1877,"src": 1389,"name": "current"},{"import": 1877,"src": 1390,"name": "stack_align","kind": "const","type": 1034,"value": null},{"import": 1877,"src": 1391,"name": "zigTriple"},{"import": 1877,"src": 1392,"name": "linuxTripleSimple"},{"import": 1877,"src": 1393,"name": "linuxTriple"},{"import": 1877,"src": 1394,"name": "exeFileExtSimple"},{"import": 1877,"src": 1395,"name": "exeFileExt"},{"import": 1877,"src": 1396,"name": "staticLibSuffix_os_abi"},{"import": 1877,"src": 1397,"name": "staticLibSuffix"},{"import": 1877,"src": 1398,"name": "dynamicLibSuffix"},{"import": 1877,"src": 1399,"name": "libPrefix_os_abi"},{"import": 1877,"src": 1400,"name": "libPrefix"},{"import": 1877,"src": 1401,"name": "getObjectFormatSimple"},{"import": 1877,"src": 1402,"name": "getObjectFormat"},{"import": 1877,"src": 1403,"name": "isMinGW"},{"import": 1877,"src": 1404,"name": "isGnu"},{"import": 1877,"src": 1405,"name": "isMusl"},{"import": 1877,"src": 1406,"name": "isAndroid"},{"import": 1877,"src": 206,"name": "isWasm","kind": "const","type": 54,"value": 289},{"import": 1877,"src": 57,"name": "isDarwin","kind": "const","type": 54,"value": 62},{"import": 1877,"src": 1407,"name": "isBSD"},{"import": 1877,"src": 1408,"name": "isBpfFreestanding"},{"import": 1877,"src": 1409,"name": "isGnuLibC_os_tag_abi"},{"import": 1877,"src": 1410,"name": "isGnuLibC"},{"import": 1877,"src": 1411,"name": "supportsNewStackCall"},{"import": 1877,"src": 1412,"name": "FloatAbi"},{"import": 1877,"src": 1413,"name": "getFloatAbi"},{"import": 1877,"src": 1414,"name": "hasDynamicLinker"},{"import": 1877,"src": 1415,"name": "DynamicLinker"},{"import": 1877,"src": 1416,"name": "standardDynamicLinkerPath"},{"import": 1877,"src": 1417,"name": "plan9Ext"},{"import": 1877,"src": 1418,"name": "longDoubleIsF128"},{"import": 1909,"src": 1419,"name": "ReadError","kind": "const","type": 954,"value": 1027},{"import": 1909,"src": 1420,"name": "WriteError"},{"import": 1909,"src": 1421,"name": "SeekError","kind": "const","type": 954,"value": 1030},{"import": 1909,"src": 1422,"name": "GetSeekPosError","kind": "const","type": 954,"value": 1031},{"import": 1909,"src": 1423,"name": "Reader","kind": "const","type": 954,"value": 1025},{"import": 1909,"src": 1424,"name": "Writer"},{"import": 1909,"src": 1425,"name": "SeekableStream","kind": "const","type": 954,"value": 1029},{"import": 1909,"src": 84,"name": "reader","kind": "const","type": 83,"value": 91},{"import": 1909,"src": 403,"name": "writer"},{"import": 1909,"src": 89,"name": "seekableStream","kind": "const","type": 87,"value": 96},{"import": 1909,"src": 83,"name": "read","kind": "const","type": 82,"value": 90},{"import": 1909,"src": 402,"name": "write"},{"import": 1909,"src": 85,"name": "seekTo","kind": "const","type": 84,"value": 92},{"import": 1909,"src": 86,"name": "seekBy","kind": "const","type": 85,"value": 93},{"import": 1909,"src": 88,"name": "getEndPos","kind": "const","type": 86,"value": 95},{"import": 1909,"src": 87,"name": "getPos","kind": "const","type": 86,"value": 94},{"import": 1909,"src": 404,"name": "getWritten"},{"import": 1909,"src": 1426,"name": "reset"},{"import": 1909,"src": 1427,"name": "Self","kind": "const","type": 954,"value": 1023},{"import": 1910,"src": 1428,"name": "Error","kind": "const","type": 954,"value": 1027},{"import": 1910,"src": 99,"name": "read","kind": "const","type": 94,"value": 112},{"import": 1910,"src": 96,"name": "readAll","kind": "const","type": 94,"value": 103},{"import": 1910,"src": 95,"name": "readNoEof","kind": "const","type": 93,"value": 102},{"import": 1910,"src": 1429,"name": "readAllArrayList"},{"import": 1910,"src": 1430,"name": "readAllArrayListAligned"},{"import": 1910,"src": 1431,"name": "readAllAlloc"},{"import": 1910,"src": 155,"name": "readUntilDelimiterArrayList","kind": "const","type": 202,"value": 216},{"import": 1910,"src": 154,"name": "readUntilDelimiterAlloc","kind": "const","type": 200,"value": 214},{"import": 1910,"src": 1432,"name": "readUntilDelimiter"},{"import": 1910,"src": 1433,"name": "readUntilDelimiterOrEofAlloc"},{"import": 1910,"src": 1434,"name": "readUntilDelimiterOrEof"},{"import": 1910,"src": 1435,"name": "skipUntilDelimiterOrEof"},{"import": 1910,"src": 98,"name": "readByte","kind": "const","type": 102,"value": 111},{"import": 1910,"src": 151,"name": "readByteSigned","kind": "const","type": 189,"value": 203},{"import": 1910,"src": 94,"name": "readBytesNoEof","kind": "const","type": 1911,"value": 1233},{"import": 1910,"src": 1436,"name": "readIntNative"},{"import": 1910,"src": 1437,"name": "readIntForeign"},{"import": 1910,"src": 1438,"name": "readIntLittle"},{"import": 1910,"src": 1439,"name": "readIntBig"},{"import": 1910,"src": 93,"name": "readInt","kind": "const","type": 1912,"value": 1234},{"import": 1910,"src": 309,"name": "readVarInt","kind": "const","type": 1913,"value": 1235},{"import": 1910,"src": 1440,"name": "SkipBytesOptions"},{"import": 1910,"src": 1441,"name": "skipBytes"},{"import": 1910,"src": 1442,"name": "isBytes"},{"import": 1910,"src": 1443,"name": "readStruct"},{"import": 1910,"src": 1444,"name": "readEnum"},{"import": 1910,"src": 1445,"name": "Self","kind": "const","type": 954,"value": 1025},{"import": 1914,"src": 1446,"name": "SeekError","kind": "const","type": 954,"value": 1030},{"import": 1914,"src": 1447,"name": "GetSeekPosError","kind": "const","type": 954,"value": 1031},{"import": 1914,"src": 91,"name": "seekTo","kind": "const","type": 89,"value": 98},{"import": 1914,"src": 159,"name": "seekBy","kind": "const","type": 224,"value": 238},{"import": 1914,"src": 90,"name": "getEndPos","kind": "const","type": 88,"value": 97},{"import": 1914,"src": 100,"name": "getPos","kind": "const","type": 88,"value": 113},{"import": 1914,"src": 1448,"name": "Self","kind": "const","type": 954,"value": 1029},{"import": 1900,"src": 1335,"name": "Slice","kind": "const","type": 954,"value": 1108},{"import": 1900,"src": 80,"name": "init","kind": "const","type": 192,"value": 206},{"import": 1900,"src": 1336,"name": "initCapacity"},{"import": 1900,"src": 106,"name": "deinit","kind": "const","type": 735,"value": 858},{"import": 1900,"src": 1337,"name": "fromOwnedSlice"},{"import": 1900,"src": 1338,"name": "toUnmanaged"},{"import": 1900,"src": 1339,"name": "moveToUnmanaged"},{"import": 1900,"src": 157,"name": "toOwnedSlice","kind": "const","type": 743,"value": 868},{"import": 1900,"src": 1340,"name": "toOwnedSliceSentinel"},{"import": 1900,"src": 1341,"name": "insert"},{"import": 1900,"src": 1342,"name": "insertSlice"},{"import": 1900,"src": 1343,"name": "replaceRange"},{"import": 1900,"src": 102,"name": "append","kind": "const","type": 193,"value": 207},{"import": 1900,"src": 1344,"name": "appendAssumeCapacity"},{"import": 1900,"src": 1345,"name": "orderedRemove"},{"import": 1900,"src": 1346,"name": "swapRemove"},{"import": 1900,"src": 368,"name": "appendSlice","kind": "const","type": 742,"value": 867},{"import": 1900,"src": 370,"name": "appendSliceAssumeCapacity","kind": "const","type": 745,"value": 870},{"import": 1900,"src": 1347,"name": "Writer"},{"import": 1900,"src": 1348,"name": "writer"},{"import": 1900,"src": 1349,"name": "appendNTimes"},{"import": 1900,"src": 1350,"name": "appendNTimesAssumeCapacity"},{"import": 1900,"src": 115,"name": "resize"},{"import": 1900,"src": 1351,"name": "shrinkAndFree"},{"import": 1900,"src": 156,"name": "shrinkRetainingCapacity"},{"import": 1900,"src": 1352,"name": "clearRetainingCapacity"},{"import": 1900,"src": 1353,"name": "clearAndFree"},{"import": 1900,"src": 1354,"name": "ensureCapacity"},{"import": 1900,"src": 108,"name": "ensureTotalCapacity","kind": "const","type": 195,"value": 209},{"import": 1900,"src": 109,"name": "ensureTotalCapacityPrecise","kind": "const","type": 196,"value": 210},{"import": 1900,"src": 369,"name": "ensureUnusedCapacity","kind": "const","type": 744,"value": 869},{"import": 1900,"src": 1355,"name": "expandToCapacity"},{"import": 1900,"src": 107,"name": "addOne","kind": "const","type": 194,"value": 208},{"import": 1900,"src": 112,"name": "addOneAssumeCapacity","kind": "const","type": 199,"value": 213},{"import": 1900,"src": 1356,"name": "addManyAsArray"},{"import": 1900,"src": 1357,"name": "addManyAsArrayAssumeCapacity"},{"import": 1900,"src": 1358,"name": "pop"},{"import": 1900,"src": 1359,"name": "popOrNull"},{"import": 1900,"src": 110,"name": "allocatedSlice","kind": "const","type": 197,"value": 211},{"import": 1900,"src": 1360,"name": "unusedCapacitySlice"},{"import": 1900,"src": 1361,"name": "Self","kind": "const","type": 954,"value": 1037},{"import": 1900,"src": 1362,"name": "appendWrite"},{"import": 1900,"src": 1335,"name": "Slice","kind": "const","type": 954,"value": 1065},{"import": 1900,"src": 80,"name": "init","kind": "const","type": 201,"value": 215},{"import": 1900,"src": 1336,"name": "initCapacity"},{"import": 1900,"src": 106,"name": "deinit","kind": "const","type": 211,"value": 225},{"import": 1900,"src": 1337,"name": "fromOwnedSlice"},{"import": 1900,"src": 1338,"name": "toUnmanaged"},{"import": 1900,"src": 1339,"name": "moveToUnmanaged"},{"import": 1900,"src": 157,"name": "toOwnedSlice","kind": "const","type": 212,"value": 226},{"import": 1900,"src": 1340,"name": "toOwnedSliceSentinel"},{"import": 1900,"src": 1341,"name": "insert"},{"import": 1900,"src": 1342,"name": "insertSlice"},{"import": 1900,"src": 1343,"name": "replaceRange"},{"import": 1900,"src": 102,"name": "append","kind": "const","type": 204,"value": 218},{"import": 1900,"src": 1344,"name": "appendAssumeCapacity"},{"import": 1900,"src": 1345,"name": "orderedRemove"},{"import": 1900,"src": 1346,"name": "swapRemove"},{"import": 1900,"src": 368,"name": "appendSlice","kind": "const","type": 506,"value": 578},{"import": 1900,"src": 370,"name": "appendSliceAssumeCapacity","kind": "const","type": 508,"value": 580},{"import": 1900,"src": 1347,"name": "Writer"},{"import": 1900,"src": 1348,"name": "writer"},{"import": 1900,"src": 1349,"name": "appendNTimes"},{"import": 1900,"src": 1350,"name": "appendNTimesAssumeCapacity"},{"import": 1900,"src": 115,"name": "resize"},{"import": 1900,"src": 1351,"name": "shrinkAndFree"},{"import": 1900,"src": 156,"name": "shrinkRetainingCapacity","kind": "const","type": 203,"value": 217},{"import": 1900,"src": 1352,"name": "clearRetainingCapacity"},{"import": 1900,"src": 1353,"name": "clearAndFree"},{"import": 1900,"src": 1354,"name": "ensureCapacity"},{"import": 1900,"src": 108,"name": "ensureTotalCapacity","kind": "const","type": 206,"value": 220},{"import": 1900,"src": 109,"name": "ensureTotalCapacityPrecise","kind": "const","type": 207,"value": 221},{"import": 1900,"src": 369,"name": "ensureUnusedCapacity","kind": "const","type": 507,"value": 579},{"import": 1900,"src": 1355,"name": "expandToCapacity"},{"import": 1900,"src": 107,"name": "addOne","kind": "const","type": 205,"value": 219},{"import": 1900,"src": 112,"name": "addOneAssumeCapacity","kind": "const","type": 210,"value": 224},{"import": 1900,"src": 1356,"name": "addManyAsArray"},{"import": 1900,"src": 1357,"name": "addManyAsArrayAssumeCapacity"},{"import": 1900,"src": 1358,"name": "pop"},{"import": 1900,"src": 1359,"name": "popOrNull"},{"import": 1900,"src": 110,"name": "allocatedSlice","kind": "const","type": 208,"value": 222},{"import": 1900,"src": 1360,"name": "unusedCapacitySlice"},{"import": 1900,"src": 1361,"name": "Self","kind": "const","type": 954,"value": 1038},{"import": 1900,"src": 1362,"name": "appendWrite"},{"import": 1900,"src": 1335,"name": "Slice","kind": "const","type": 954,"value": 1109},{"import": 1900,"src": 80,"name": "init","kind": "const","type": 213,"value": 227},{"import": 1900,"src": 1336,"name": "initCapacity"},{"import": 1900,"src": 106,"name": "deinit"},{"import": 1900,"src": 1337,"name": "fromOwnedSlice"},{"import": 1900,"src": 1338,"name": "toUnmanaged"},{"import": 1900,"src": 1339,"name": "moveToUnmanaged"},{"import": 1900,"src": 157,"name": "toOwnedSlice"},{"import": 1900,"src": 1340,"name": "toOwnedSliceSentinel"},{"import": 1900,"src": 1341,"name": "insert"},{"import": 1900,"src": 1342,"name": "insertSlice"},{"import": 1900,"src": 1343,"name": "replaceRange"},{"import": 1900,"src": 102,"name": "append","kind": "const","type": 216,"value": 230},{"import": 1900,"src": 1344,"name": "appendAssumeCapacity"},{"import": 1900,"src": 1345,"name": "orderedRemove"},{"import": 1900,"src": 1346,"name": "swapRemove"},{"import": 1900,"src": 368,"name": "appendSlice"},{"import": 1900,"src": 370,"name": "appendSliceAssumeCapacity"},{"import": 1900,"src": 1347,"name": "Writer"},{"import": 1900,"src": 1348,"name": "writer"},{"import": 1900,"src": 1349,"name": "appendNTimes"},{"import": 1900,"src": 1350,"name": "appendNTimesAssumeCapacity"},{"import": 1900,"src": 115,"name": "resize"},{"import": 1900,"src": 1351,"name": "shrinkAndFree"},{"import": 1900,"src": 156,"name": "shrinkRetainingCapacity"},{"import": 1900,"src": 1352,"name": "clearRetainingCapacity"},{"import": 1900,"src": 1353,"name": "clearAndFree"},{"import": 1900,"src": 1354,"name": "ensureCapacity"},{"import": 1900,"src": 108,"name": "ensureTotalCapacity","kind": "const","type": 218,"value": 232},{"import": 1900,"src": 109,"name": "ensureTotalCapacityPrecise","kind": "const","type": 219,"value": 233},{"import": 1900,"src": 369,"name": "ensureUnusedCapacity"},{"import": 1900,"src": 1355,"name": "expandToCapacity"},{"import": 1900,"src": 107,"name": "addOne","kind": "const","type": 217,"value": 231},{"import": 1900,"src": 112,"name": "addOneAssumeCapacity","kind": "const","type": 222,"value": 236},{"import": 1900,"src": 1356,"name": "addManyAsArray"},{"import": 1900,"src": 1357,"name": "addManyAsArrayAssumeCapacity"},{"import": 1900,"src": 1358,"name": "pop"},{"import": 1900,"src": 1359,"name": "popOrNull"},{"import": 1900,"src": 110,"name": "allocatedSlice","kind": "const","type": 220,"value": 234},{"import": 1900,"src": 1360,"name": "unusedCapacitySlice"},{"import": 1900,"src": 1361,"name": "Self","kind": "const","type": 954,"value": 1039},{"import": 1900,"src": 1362,"name": "appendWrite"},{"import": 1915,"src": 1449,"name": "Int","kind": "const","type": 954,"value": 1916},{"import": 1915,"src": 1450,"name": "Float","kind": "const","type": 954,"value": 1917},{"import": 1915,"src": 1451,"name": "Pointer","kind": "const","type": 954,"value": 1918},{"import": 1915,"src": 1452,"name": "Array","kind": "const","type": 954,"value": 1919},{"import": 1915,"src": 1453,"name": "ContainerLayout","kind": "const","type": 954,"value": 1148},{"import": 1915,"src": 1454,"name": "StructField","kind": "const","type": 954,"value": 1920},{"import": 1915,"src": 1455,"name": "Struct","kind": "const","type": 954,"value": 1921},{"import": 1915,"src": 1456,"name": "Optional","kind": "const","type": 954,"value": 1922},{"import": 1915,"src": 1457,"name": "ErrorUnion","kind": "const","type": 954,"value": 1923},{"import": 1915,"src": 1458,"name": "Error","kind": "const","type": 954,"value": 1924},{"import": 1915,"src": 1459,"name": "ErrorSet","kind": "const","type": 954,"value": 1925},{"import": 1915,"src": 1460,"name": "EnumField","kind": "const","type": 954,"value": 1184},{"import": 1915,"src": 1461,"name": "Enum","kind": "const","type": 954,"value": 1926},{"import": 1915,"src": 1462,"name": "UnionField","kind": "const","type": 954,"value": 1927},{"import": 1915,"src": 1463,"name": "Union","kind": "const","type": 954,"value": 1928},{"import": 1915,"src": 1464,"name": "FnArg","kind": "const","type": 954,"value": 1929},{"import": 1915,"src": 1465,"name": "Fn","kind": "const","type": 954,"value": 1930},{"import": 1915,"src": 1466,"name": "Opaque","kind": "const","type": 954,"value": 1931},{"import": 1915,"src": 1467,"name": "Frame","kind": "const","type": 954,"value": 1932},{"import": 1915,"src": 1468,"name": "AnyFrame","kind": "const","type": 954,"value": 1933},{"import": 1915,"src": 1469,"name": "Vector","kind": "const","type": 954,"value": 1934},{"import": 1915,"src": 1470,"name": "Declaration","kind": "const","type": 954,"value": 1890},{"import": 1935,"src": 1471,"name": "Node","kind": "const","type": 954,"value": 1936},{"import": 1935,"src": 286,"name": "prepend","kind": "const","type": 374,"value": 407},{"import": 1935,"src": 1472,"name": "remove"},{"import": 1935,"src": 1473,"name": "popFirst"},{"import": 1935,"src": 1474,"name": "len"},{"import": 1935,"src": 1475,"name": "Self","kind": "const","type": 954,"value": 1064},{"import": 1938,"src": 1476,"name": "Self"},{"import": 1938,"src": 1477,"name": "Node","kind": "const","type": 954,"value": 1939},{"import": 1938,"src": 1478,"name": "init"},{"import": 1938,"src": 1479,"name": "put"},{"import": 1938,"src": 1480,"name": "get"},{"import": 1938,"src": 1481,"name": "unget"},{"import": 1938,"src": 1482,"name": "remove"},{"import": 1938,"src": 1483,"name": "isEmpty"},{"import": 1938,"src": 1484,"name": "dump"},{"import": 1938,"src": 1485,"name": "dumpToStream"},{"import": 1935,"src": 1486,"name": "Node","kind": "const","type": 954,"value": 1939},{"import": 1935,"src": 1487,"name": "insertAfter"},{"import": 1935,"src": 1488,"name": "insertBefore"},{"import": 1935,"src": 1489,"name": "concatByMoving"},{"import": 1935,"src": 1490,"name": "append"},{"import": 1935,"src": 1491,"name": "prepend"},{"import": 1935,"src": 1492,"name": "remove"},{"import": 1935,"src": 1493,"name": "pop"},{"import": 1935,"src": 1494,"name": "popFirst"},{"import": 1935,"src": 1495,"name": "Self"},{"import": 1942,"src": 1496,"name": "init"},{"import": 1942,"src": 1497,"name": "loadUnchecked"},{"import": 1942,"src": 1498,"name": "storeUnchecked"},{"import": 1942,"src": 1499,"name": "load"},{"import": 1942,"src": 1500,"name": "store"},{"import": 1942,"src": 1501,"name": "swap"},{"import": 1942,"src": 1502,"name": "compareAndSwap"},{"import": 1942,"src": 1503,"name": "tryCompareAndSwap"},{"import": 1942,"src": 1504,"name": "Self"},{"import": 1942,"src": 1505,"name": "cmpxchg"},{"import": 1942,"src": 1506,"name": "rmw"},{"import": 1942,"src": 680,"name": "exportWhen","kind": "const","type": 1221,"value": 1216},{"import": 1942,"src": 1496,"name": "init"},{"import": 1942,"src": 1497,"name": "loadUnchecked"},{"import": 1942,"src": 1498,"name": "storeUnchecked"},{"import": 1942,"src": 1499,"name": "load"},{"import": 1942,"src": 1500,"name": "store"},{"import": 1942,"src": 1501,"name": "swap"},{"import": 1942,"src": 1502,"name": "compareAndSwap"},{"import": 1942,"src": 1503,"name": "tryCompareAndSwap"},{"import": 1942,"src": 1507,"name": "fetchAnd"},{"import": 1942,"src": 1508,"name": "fetchNand"},{"import": 1942,"src": 1509,"name": "fetchOr"},{"import": 1942,"src": 1510,"name": "fetchXor"},{"import": 1942,"src": 1511,"name": "bitSet"},{"import": 1942,"src": 1512,"name": "bitReset"},{"import": 1942,"src": 1513,"name": "bitToggle"},{"import": 1942,"src": 1514,"name": "fetchAdd"},{"import": 1942,"src": 1515,"name": "fetchSub"},{"import": 1942,"src": 1516,"name": "fetchMin"},{"import": 1942,"src": 1517,"name": "fetchMax"},{"import": 1942,"src": 1504,"name": "Self"},{"import": 1942,"src": 1505,"name": "cmpxchg"},{"import": 1942,"src": 1506,"name": "rmw"},{"import": 1942,"src": 680,"name": "exportWhen","kind": "const","type": 1227,"value": 1218},{"import": 1938,"src": 1476,"name": "Self"},{"import": 1938,"src": 1477,"name": "Node","kind": "const","type": 954,"value": 1943},{"import": 1938,"src": 1478,"name": "init"},{"import": 1938,"src": 1479,"name": "put"},{"import": 1938,"src": 1480,"name": "get"},{"import": 1938,"src": 1481,"name": "unget"},{"import": 1938,"src": 1482,"name": "remove"},{"import": 1938,"src": 1483,"name": "isEmpty"},{"import": 1938,"src": 1484,"name": "dump"},{"import": 1938,"src": 1485,"name": "dumpToStream"},{"import": 1945,"src": 1518,"name": "Node","kind": "const","type": 954,"value": 1943},{"import": 1945,"src": 1519,"name": "Finish","kind": "const","type": 954,"value": 1946},{"import": 1945,"src": 1520,"name": "Msg","kind": "const","type": 954,"value": 1947},{"import": 1935,"src": 1486,"name": "Node","kind": "const","type": 954,"value": 1943},{"import": 1935,"src": 1487,"name": "insertAfter"},{"import": 1935,"src": 1488,"name": "insertBefore"},{"import": 1935,"src": 1489,"name": "concatByMoving"},{"import": 1935,"src": 1490,"name": "append"},{"import": 1935,"src": 1491,"name": "prepend"},{"import": 1935,"src": 1492,"name": "remove"},{"import": 1935,"src": 1493,"name": "pop"},{"import": 1935,"src": 1494,"name": "popFirst"},{"import": 1935,"src": 1495,"name": "Self"},{"import": 1948,"src": 1521,"name": "Self"},{"import": 1948,"src": 1522,"name": "Node","kind": "const","type": 954,"value": 1949},{"import": 1948,"src": 1523,"name": "init"},{"import": 1948,"src": 1524,"name": "pushFirst"},{"import": 1948,"src": 1525,"name": "push"},{"import": 1948,"src": 1526,"name": "pop"},{"import": 1948,"src": 1527,"name": "isEmpty"},{"import": 1948,"src": 1528,"name": "lock_init","kind": "const","type": 967,"value": "false"},{"import": 1952,"src": 1529,"name": "Error"},{"import": 1952,"src": 1530,"name": "allocator"},{"import": 1952,"src": 377,"name": "detectLeaks","kind": "const","type": 477,"value": 600},{"import": 1952,"src": 352,"name": "deinit","kind": "const","type": 477,"value": 541},{"import": 1952,"src": 1531,"name": "setRequestedMemoryLimit"},{"import": 1952,"src": 1532,"name": "Self","kind": "const","type": 954,"value": 1140},{"import": 1952,"src": 1533,"name": "total_requested_bytes_init","kind": "const","type": 976,"value": null},{"import": 1952,"src": 1534,"name": "requested_memory_limit_init","kind": "const","type": 976,"value": null},{"import": 1952,"src": 1535,"name": "mutex_init","kind": "const","type": 1941,"value": null},{"import": 1952,"src": 1536,"name": "stack_n","kind": "const","type": 965,"value": 8},{"import": 1952,"src": 1537,"name": "one_trace_size","kind": "const","type": 965,"value": 32},{"import": 1952,"src": 1538,"name": "traces_per_slot","kind": "const","type": 1034,"value": null},{"import": 1952,"src": 1539,"name": "small_bucket_count","kind": "const","type": 1034,"value": null},{"import": 1952,"src": 1540,"name": "largest_bucket_object_size"},{"import": 1952,"src": 1541,"name": "LargeAlloc","kind": "const","type": 954,"value": 1145},{"import": 1952,"src": 1542,"name": "LargeAllocTable","kind": "const","type": 954,"value": 1144},{"import": 1952,"src": 1543,"name": "BucketHeader","kind": "const","type": 954,"value": 1953},{"import": 1952,"src": 408,"name": "bucketStackTrace","kind": "const","type": 607,"value": 697},{"import": 1952,"src": 415,"name": "bucketStackFramesStart","kind": "const","type": 379,"value": 729},{"import": 1952,"src": 1544,"name": "bucketSize"},{"import": 1952,"src": 392,"name": "usedBitsCount","kind": "const","type": 379,"value": 648},{"import": 1952,"src": 393,"name": "detectLeaksInBucket","kind": "const","type": 565,"value": 649},{"import": 1952,"src": 1545,"name": "freeBucket"},{"import": 1952,"src": 1546,"name": "freeRetainedMetadata"},{"import": 1952,"src": 1547,"name": "collectStackTrace"},{"import": 1952,"src": 1548,"name": "reportDoubleFree"},{"import": 1952,"src": 1549,"name": "allocSlot"},{"import": 1952,"src": 1550,"name": "searchBucket"},{"import": 1952,"src": 1551,"name": "resizeLarge"},{"import": 1952,"src": 1552,"name": "freeLarge"},{"import": 1952,"src": 1553,"name": "resize"},{"import": 1952,"src": 1554,"name": "free"},{"import": 1952,"src": 1555,"name": "isAllocationAllowed"},{"import": 1952,"src": 1556,"name": "alloc"},{"import": 1952,"src": 1557,"name": "createBucket"},{"import": 1893,"src": 1275,"name": "Size","kind": "const","type": 954,"value": 1134},{"import": 1893,"src": 1276,"name": "Hash"},{"import": 1893,"src": 1277,"name": "Entry"},{"import": 1893,"src": 1278,"name": "KV"},{"import": 1893,"src": 1279,"name": "Iterator"},{"import": 1893,"src": 1280,"name": "KeyIterator"},{"import": 1893,"src": 1281,"name": "ValueIterator","kind": "const","type": 954,"value": 1161},{"import": 1893,"src": 1282,"name": "GetOrPutResult"},{"import": 1893,"src": 1283,"name": "Managed"},{"import": 1893,"src": 1284,"name": "promote"},{"import": 1893,"src": 1285,"name": "promoteContext"},{"import": 1893,"src": 137,"name": "deinit","kind": "const","type": 524,"value": 601},{"import": 1893,"src": 1286,"name": "ensureCapacity"},{"import": 1893,"src": 1287,"name": "ensureTotalCapacity"},{"import": 1893,"src": 1288,"name": "ensureTotalCapacityContext"},{"import": 1893,"src": 1289,"name": "ensureUnusedCapacity"},{"import": 1893,"src": 1290,"name": "ensureUnusedCapacityContext"},{"import": 1893,"src": 1291,"name": "clearRetainingCapacity"},{"import": 1893,"src": 1292,"name": "clearAndFree"},{"import": 1893,"src": 542,"name": "count"},{"import": 1893,"src": 132,"name": "capacity","kind": "const","type": 609,"value": 699},{"import": 1893,"src": 1293,"name": "iterator"},{"import": 1893,"src": 1294,"name": "keyIterator"},{"import": 1893,"src": 394,"name": "valueIterator","kind": "const","type": 566,"value": 650},{"import": 1893,"src": 1295,"name": "putNoClobber"},{"import": 1893,"src": 125,"name": "putNoClobberContext"},{"import": 1893,"src": 1296,"name": "putAssumeCapacity"},{"import": 1893,"src": 1297,"name": "putAssumeCapacityContext"},{"import": 1893,"src": 1298,"name": "putAssumeCapacityNoClobber"},{"import": 1893,"src": 142,"name": "putAssumeCapacityNoClobberContext"},{"import": 1893,"src": 1299,"name": "fetchPut"},{"import": 1893,"src": 1300,"name": "fetchPutContext"},{"import": 1893,"src": 1301,"name": "fetchPutAssumeCapacity"},{"import": 1893,"src": 1302,"name": "fetchPutAssumeCapacityContext"},{"import": 1893,"src": 1303,"name": "fetchRemove"},{"import": 1893,"src": 1304,"name": "fetchRemoveContext"},{"import": 1893,"src": 1305,"name": "fetchRemoveAdapted"},{"import": 1893,"src": 1306,"name": "getEntry"},{"import": 1893,"src": 1307,"name": "getEntryContext"},{"import": 1893,"src": 1308,"name": "getEntryAdapted"},{"import": 1893,"src": 1309,"name": "put"},{"import": 1893,"src": 511,"name": "putContext"},{"import": 1893,"src": 1310,"name": "getKeyPtr"},{"import": 1893,"src": 1311,"name": "getKeyPtrContext"},{"import": 1893,"src": 1312,"name": "getKeyPtrAdapted"},{"import": 1893,"src": 1313,"name": "getKey"},{"import": 1893,"src": 1314,"name": "getKeyContext"},{"import": 1893,"src": 1315,"name": "getKeyAdapted"},{"import": 1893,"src": 1316,"name": "getPtr"},{"import": 1893,"src": 540,"name": "getPtrContext"},{"import": 1893,"src": 561,"name": "getPtrAdapted"},{"import": 1893,"src": 1317,"name": "get"},{"import": 1893,"src": 218,"name": "getContext"},{"import": 1893,"src": 294,"name": "getAdapted"},{"import": 1893,"src": 1318,"name": "getOrPut"},{"import": 1893,"src": 512,"name": "getOrPutContext"},{"import": 1893,"src": 1319,"name": "getOrPutAdapted"},{"import": 1893,"src": 513,"name": "getOrPutContextAdapted"},{"import": 1893,"src": 1320,"name": "getOrPutAssumeCapacity"},{"import": 1893,"src": 1321,"name": "getOrPutAssumeCapacityContext"},{"import": 1893,"src": 514,"name": "getOrPutAssumeCapacityAdapted"},{"import": 1893,"src": 1322,"name": "getOrPutValue"},{"import": 1893,"src": 1323,"name": "getOrPutValueContext"},{"import": 1893,"src": 1324,"name": "contains"},{"import": 1893,"src": 126,"name": "containsContext"},{"import": 1893,"src": 239,"name": "containsAdapted"},{"import": 1893,"src": 1325,"name": "remove"},{"import": 1893,"src": 1326,"name": "removeContext"},{"import": 1893,"src": 1327,"name": "removeAdapted"},{"import": 1893,"src": 1328,"name": "clone"},{"import": 1893,"src": 1329,"name": "cloneContext"},{"import": 1893,"src": 1330,"name": "Self","kind": "const","type": 954,"value": 1144},{"import": 1893,"src": 1331,"name": "minimal_capacity"},{"import": 1893,"src": 1332,"name": "Header","kind": "const","type": 954,"value": 1956},{"import": 1893,"src": 1333,"name": "Metadata","kind": "const","type": 954,"value": 1671},{"import": 1893,"src": 663,"name": "FieldIterator","kind": "const","type": 1160,"value": 1198},{"import": 1893,"src": 1334,"name": "isUnderMaxLoadPercentage"},{"import": 1893,"src": 129,"name": "capacityForSize"},{"import": 1893,"src": 241,"name": "header","kind": "const","type": 612,"value": 703},{"import": 1893,"src": 139,"name": "keys"},{"import": 1893,"src": 140,"name": "values","kind": "const","type": 610,"value": 700},{"import": 1893,"src": 311,"name": "getIndex"},{"import": 1893,"src": 138,"name": "initMetadatas"},{"import": 1893,"src": 130,"name": "load"},{"import": 1893,"src": 127,"name": "growIfNeeded"},{"import": 1893,"src": 128,"name": "grow"},{"import": 1893,"src": 134,"name": "allocate"},{"import": 1893,"src": 243,"name": "deallocate","kind": "const","type": 524,"value": 654},{"import": 1952,"src": 1558,"name": "trace_n","kind": "const","type": 1034,"value": null},{"import": 1952,"src": 1559,"name": "dumpStackTrace"},{"import": 1952,"src": 396,"name": "getStackTrace","kind": "const","type": 568,"value": 652},{"import": 1952,"src": 1560,"name": "captureStackTrace"},{"import": 1959,"src": 300,"name": "atime","kind": "const","type": 386,"value": 422},{"import": 1959,"src": 301,"name": "mtime","kind": "const","type": 386,"value": 423},{"import": 1959,"src": 302,"name": "ctime","kind": "const","type": 386,"value": 424},{"import": 1960,"src": 363,"name": "init","kind": "const","type": 499,"value": 571},{"import": 1960,"src": 364,"name": "allocator","kind": "const","type": 500,"value": 572},{"import": 1960,"src": 1561,"name": "threadSafeAllocator"},{"import": 1960,"src": 1562,"name": "ownsPtr"},{"import": 1960,"src": 398,"name": "ownsSlice","kind": "const","type": 579,"value": 664},{"import": 1960,"src": 399,"name": "isLastAllocation","kind": "const","type": 579,"value": 665},{"import": 1960,"src": 1563,"name": "reset"},{"import": 1960,"src": 380,"name": "alloc","kind": "const","type": 540,"value": 619},{"import": 1960,"src": 381,"name": "resize","kind": "const","type": 541,"value": 620},{"import": 1960,"src": 382,"name": "free","kind": "const","type": 542,"value": 621},{"import": 1960,"src": 1564,"name": "threadSafeAlloc"},{"import": 1900,"src": 1335,"name": "Slice","kind": "const","type": 954,"value": 1166},{"import": 1900,"src": 80,"name": "init","kind": "const","type": 502,"value": 574},{"import": 1900,"src": 1336,"name": "initCapacity"},{"import": 1900,"src": 106,"name": "deinit","kind": "const","type": 504,"value": 576},{"import": 1900,"src": 1337,"name": "fromOwnedSlice"},{"import": 1900,"src": 1338,"name": "toUnmanaged"},{"import": 1900,"src": 1339,"name": "moveToUnmanaged"},{"import": 1900,"src": 157,"name": "toOwnedSlice"},{"import": 1900,"src": 1340,"name": "toOwnedSliceSentinel"},{"import": 1900,"src": 1341,"name": "insert"},{"import": 1900,"src": 1342,"name": "insertSlice"},{"import": 1900,"src": 1343,"name": "replaceRange"},{"import": 1900,"src": 102,"name": "append","kind": "const","type": 510,"value": 582},{"import": 1900,"src": 1344,"name": "appendAssumeCapacity"},{"import": 1900,"src": 1345,"name": "orderedRemove"},{"import": 1900,"src": 1346,"name": "swapRemove"},{"import": 1900,"src": 368,"name": "appendSlice"},{"import": 1900,"src": 370,"name": "appendSliceAssumeCapacity"},{"import": 1900,"src": 1347,"name": "Writer"},{"import": 1900,"src": 1348,"name": "writer"},{"import": 1900,"src": 1349,"name": "appendNTimes"},{"import": 1900,"src": 1350,"name": "appendNTimesAssumeCapacity"},{"import": 1900,"src": 115,"name": "resize"},{"import": 1900,"src": 1351,"name": "shrinkAndFree"},{"import": 1900,"src": 156,"name": "shrinkRetainingCapacity"},{"import": 1900,"src": 1352,"name": "clearRetainingCapacity"},{"import": 1900,"src": 1353,"name": "clearAndFree"},{"import": 1900,"src": 1354,"name": "ensureCapacity"},{"import": 1900,"src": 108,"name": "ensureTotalCapacity","kind": "const","type": 512,"value": 584},{"import": 1900,"src": 109,"name": "ensureTotalCapacityPrecise","kind": "const","type": 513,"value": 585},{"import": 1900,"src": 369,"name": "ensureUnusedCapacity"},{"import": 1900,"src": 1355,"name": "expandToCapacity"},{"import": 1900,"src": 107,"name": "addOne","kind": "const","type": 511,"value": 583},{"import": 1900,"src": 112,"name": "addOneAssumeCapacity","kind": "const","type": 516,"value": 588},{"import": 1900,"src": 1356,"name": "addManyAsArray"},{"import": 1900,"src": 1357,"name": "addManyAsArrayAssumeCapacity"},{"import": 1900,"src": 1358,"name": "pop"},{"import": 1900,"src": 1359,"name": "popOrNull"},{"import": 1900,"src": 110,"name": "allocatedSlice","kind": "const","type": 514,"value": 586},{"import": 1900,"src": 1360,"name": "unusedCapacitySlice"},{"import": 1900,"src": 1361,"name": "Self","kind": "const","type": 954,"value": 1155},{"import": 1900,"src": 1362,"name": "appendWrite"},{"import": 1893,"src": 395,"name": "next","kind": "const","type": 567,"value": 651},{"import": 1962,"src": 1565,"name": "emerg"},{"import": 1962,"src": 1566,"name": "alert"},{"import": 1962,"src": 1567,"name": "crit"},{"import": 1962,"src": 397,"name": "err","kind": "const","type": 1963,"value": 1236},{"import": 1962,"src": 1568,"name": "warn"},{"import": 1962,"src": 1569,"name": "notice"},{"import": 1962,"src": 1570,"name": "info"},{"import": 1962,"src": 1571,"name": "debug"},{"import": 1909,"src": 1419,"name": "ReadError"},{"import": 1909,"src": 1420,"name": "WriteError","kind": "const","type": 954,"value": 1170},{"import": 1909,"src": 1421,"name": "SeekError"},{"import": 1909,"src": 1422,"name": "GetSeekPosError"},{"import": 1909,"src": 1423,"name": "Reader"},{"import": 1909,"src": 1424,"name": "Writer","kind": "const","type": 954,"value": 1168},{"import": 1909,"src": 1425,"name": "SeekableStream"},{"import": 1909,"src": 84,"name": "reader"},{"import": 1909,"src": 403,"name": "writer","kind": "const","type": 590,"value": 679},{"import": 1909,"src": 89,"name": "seekableStream"},{"import": 1909,"src": 83,"name": "read"},{"import": 1909,"src": 402,"name": "write","kind": "const","type": 589,"value": 678},{"import": 1909,"src": 85,"name": "seekTo"},{"import": 1909,"src": 86,"name": "seekBy"},{"import": 1909,"src": 88,"name": "getEndPos"},{"import": 1909,"src": 87,"name": "getPos"},{"import": 1909,"src": 404,"name": "getWritten","kind": "const","type": 594,"value": 683},{"import": 1909,"src": 1426,"name": "reset"},{"import": 1909,"src": 1427,"name": "Self","kind": "const","type": 954,"value": 1167},{"import": 1879,"src": 1145,"name": "Error","kind": "const","type": 954,"value": 1170},{"import": 1879,"src": 187,"name": "write","kind": "const","type": 616,"value": 709},{"import": 1879,"src": 35,"name": "writeAll","kind": "const","type": 592,"value": 681},{"import": 1879,"src": 17,"name": "print"},{"import": 1879,"src": 249,"name": "writeByte"},{"import": 1879,"src": 198,"name": "writeByteNTimes","kind": "const","type": 621,"value": 714},{"import": 1879,"src": 1146,"name": "writeIntNative"},{"import": 1879,"src": 1147,"name": "writeIntForeign"},{"import": 1879,"src": 1148,"name": "writeIntLittle"},{"import": 1879,"src": 1149,"name": "writeIntBig"},{"import": 1879,"src": 1150,"name": "writeInt"},{"import": 1879,"src": 1151,"name": "writeStruct"},{"import": 1879,"src": 1152,"name": "Self","kind": "const","type": 954,"value": 1168},{"import": 1915,"src": 416,"name": "format","kind": "const","type": 1965,"value": 1237},{"import": 1966,"src": 1572,"name": "Options","kind": "const","type": 954,"value": 1180},{"import": 1966,"src": 433,"name": "apply","kind": "const","type": 710,"value": 831},{"import": 1966,"src": 493,"name": "remove","kind": "const","type": 710,"value": 832},{"import": 1966,"src": 431,"name": "isApplied","kind": "const","type": 711,"value": 833},{"import": 1966,"src": 1573,"name": "Self","kind": "const","type": 954,"value": 1177},{"import": 1967,"src": 1574,"name": "Key","kind": "const","type": 954,"value": 1180},{"import": 1967,"src": 1575,"name": "count","kind": "const","type": 965,"value": 3},{"import": 1967,"src": 420,"name": "indexOf","kind": "const","type": 646,"value": 746},{"import": 1967,"src": 421,"name": "keyForIndex","kind": "const","type": 647,"value": 747},{"import": 1967,"src": 1576,"name": "Indexer","kind": "const","type": 954,"value": 1186},{"import": 1967,"src": 1577,"name": "Key","kind": "const","type": 954,"value": 1180},{"import": 1967,"src": 1578,"name": "Value","kind": "const","type": 954,"value": 967},{"import": 1967,"src": 1579,"name": "len"},{"import": 1967,"src": 1580,"name": "count"},{"import": 1967,"src": 491,"name": "contains","kind": "const","type": 806,"value": 934},{"import": 1967,"src": 1581,"name": "get"},{"import": 1967,"src": 1582,"name": "getAssertContains"},{"import": 1967,"src": 1583,"name": "getPtr"},{"import": 1967,"src": 1584,"name": "getPtrConst"},{"import": 1967,"src": 1585,"name": "getPtrAssertContains"},{"import": 1967,"src": 492,"name": "put","kind": "const","type": 804,"value": 932},{"import": 1967,"src": 1586,"name": "putUninitialized"},{"import": 1967,"src": 1587,"name": "fetchPut"},{"import": 1967,"src": 539,"name": "remove","kind": "const","type": 805,"value": 933},{"import": 1967,"src": 1588,"name": "fetchRemove"},{"import": 1967,"src": 1589,"name": "iterator"},{"import": 1967,"src": 1590,"name": "Entry"},{"import": 1967,"src": 1591,"name": "Iterator"},{"import": 1967,"src": 1592,"name": "init"},{"import": 1967,"src": 1593,"name": "initFull"},{"import": 1967,"src": 1594,"name": "initFullWith"},{"import": 1967,"src": 1595,"name": "initFullWithDefault"},{"import": 1967,"src": 1596,"name": "Self","kind": "const","type": 954,"value": 1189},{"import": 1967,"src": 1597,"name": "BitSet","kind": "const","type": 954,"value": 1195},{"import": 1969,"src": 1598,"name": "bit_length","kind": "const","type": 965,"value": 3},{"import": 1969,"src": 1599,"name": "MaskInt","kind": "const","type": 954,"value": 1171},{"import": 1969,"src": 1600,"name": "ShiftInt","kind": "const","type": 954,"value": 1240},{"import": 1969,"src": 430,"name": "initEmpty","kind": "const","type": 671,"value": 788},{"import": 1969,"src": 1601,"name": "initFull"},{"import": 1969,"src": 1602,"name": "capacity"},{"import": 1969,"src": 537,"name": "isSet","kind": "const","type": 869,"value": 1006},{"import": 1969,"src": 1603,"name": "count"},{"import": 1969,"src": 1604,"name": "setValue"},{"import": 1969,"src": 538,"name": "set","kind": "const","type": 868,"value": 1004},{"import": 1969,"src": 560,"name": "unset","kind": "const","type": 868,"value": 1005},{"import": 1969,"src": 1605,"name": "toggle"},{"import": 1969,"src": 1606,"name": "toggleSet"},{"import": 1969,"src": 1607,"name": "toggleAll"},{"import": 1969,"src": 1608,"name": "setUnion"},{"import": 1969,"src": 1609,"name": "setIntersection"},{"import": 1969,"src": 1610,"name": "findFirstSet"},{"import": 1969,"src": 1611,"name": "toggleFirstSet"},{"import": 1969,"src": 1612,"name": "iterator"},{"import": 1969,"src": 1613,"name": "Iterator"},{"import": 1969,"src": 1614,"name": "Self","kind": "const","type": 954,"value": 1195},{"import": 1969,"src": 1615,"name": "SingleWordIterator"},{"import": 1969,"src": 559,"name": "maskBit","kind": "const","type": 891,"value": 1049},{"import": 1969,"src": 1616,"name": "boolMaskBit"},{"import": 1900,"src": 1617,"name": "Slice","kind": "const","type": 954,"value": 1267},{"import": 1900,"src": 1618,"name": "initCapacity"},{"import": 1900,"src": 494,"name": "deinit","kind": "const","type": 712,"value": 834},{"import": 1900,"src": 1619,"name": "toManaged"},{"import": 1900,"src": 1620,"name": "toOwnedSlice"},{"import": 1900,"src": 1621,"name": "toOwnedSliceSentinel"},{"import": 1900,"src": 1622,"name": "insert"},{"import": 1900,"src": 1623,"name": "insertSlice"},{"import": 1900,"src": 1624,"name": "replaceRange"},{"import": 1900,"src": 495,"name": "append","kind": "const","type": 714,"value": 836},{"import": 1900,"src": 1625,"name": "appendAssumeCapacity"},{"import": 1900,"src": 1626,"name": "orderedRemove"},{"import": 1900,"src": 1627,"name": "swapRemove"},{"import": 1900,"src": 1628,"name": "appendSlice"},{"import": 1900,"src": 1629,"name": "appendSliceAssumeCapacity"},{"import": 1900,"src": 1630,"name": "WriterContext"},{"import": 1900,"src": 1631,"name": "Writer"},{"import": 1900,"src": 1632,"name": "writer"},{"import": 1900,"src": 1633,"name": "appendNTimes"},{"import": 1900,"src": 1634,"name": "appendNTimesAssumeCapacity"},{"import": 1900,"src": 1635,"name": "resize"},{"import": 1900,"src": 1636,"name": "shrinkAndFree"},{"import": 1900,"src": 1637,"name": "shrinkRetainingCapacity"},{"import": 1900,"src": 1638,"name": "clearRetainingCapacity"},{"import": 1900,"src": 1639,"name": "clearAndFree"},{"import": 1900,"src": 1640,"name": "ensureCapacity"},{"import": 1900,"src": 497,"name": "ensureTotalCapacity","kind": "const","type": 716,"value": 838},{"import": 1900,"src": 498,"name": "ensureTotalCapacityPrecise","kind": "const","type": 717,"value": 839},{"import": 1900,"src": 1641,"name": "ensureUnusedCapacity"},{"import": 1900,"src": 1642,"name": "expandToCapacity"},{"import": 1900,"src": 496,"name": "addOne","kind": "const","type": 715,"value": 837},{"import": 1900,"src": 500,"name": "addOneAssumeCapacity","kind": "const","type": 720,"value": 842},{"import": 1900,"src": 1643,"name": "addManyAsArray"},{"import": 1900,"src": 1644,"name": "addManyAsArrayAssumeCapacity"},{"import": 1900,"src": 1645,"name": "pop"},{"import": 1900,"src": 1646,"name": "popOrNull"},{"import": 1900,"src": 499,"name": "allocatedSlice","kind": "const","type": 718,"value": 840},{"import": 1900,"src": 1647,"name": "Self","kind": "const","type": 954,"value": 1198},{"import": 1900,"src": 1648,"name": "appendWrite"},{"import": 1199,"src": 438,"name": "new","kind": "const","type": 662,"value": 774},{"import": 1199,"src": 439,"name": "shortName","kind": "const","type": 663,"value": 775},{"import": 1199,"src": 440,"name": "setShortNameFromName","kind": "const","type": 664,"value": 776},{"import": 1199,"src": 441,"name": "longName","kind": "const","type": 665,"value": 777},{"import": 1199,"src": 442,"name": "setLongNameSameAsName","kind": "const","type": 664,"value": 778},{"import": 1199,"src": 443,"name": "setDescription","kind": "const","type": 665,"value": 779},{"import": 1199,"src": 444,"name": "minValues","kind": "const","type": 666,"value": 780},{"import": 1199,"src": 445,"name": "maxValues","kind": "const","type": 666,"value": 781},{"import": 1199,"src": 446,"name": "allowedValues","kind": "const","type": 667,"value": 782},{"import": 1199,"src": 447,"name": "valuesDelimiter","kind": "const","type": 665,"value": 783},{"import": 1199,"src": 448,"name": "verifyValueInAllowedValues","kind": "const","type": 668,"value": 784},{"import": 1199,"src": 449,"name": "applySetting","kind": "const","type": 669,"value": 785},{"import": 1199,"src": 450,"name": "removeSetting","kind": "const","type": 669,"value": 786},{"import": 1199,"src": 451,"name": "isSettingApplied","kind": "const","type": 670,"value": 787},{"import": 1199,"src": 1649,"name": "Arg","kind": "const","type": 954,"value": 1199},{"import": 1199,"src": 1650,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 1199,"src": 1651,"name": "MakeSettings","kind": "const","type": 1176,"value": 1200},{"import": 1199,"src": 1652,"name": "Settings","kind": "const","type": 954,"value": 1177},{"import": 1900,"src": 1617,"name": "Slice","kind": "const","type": 954,"value": 1268},{"import": 1900,"src": 1618,"name": "initCapacity"},{"import": 1900,"src": 494,"name": "deinit","kind": "const","type": 713,"value": 835},{"import": 1900,"src": 1619,"name": "toManaged"},{"import": 1900,"src": 1620,"name": "toOwnedSlice"},{"import": 1900,"src": 1621,"name": "toOwnedSliceSentinel"},{"import": 1900,"src": 1622,"name": "insert"},{"import": 1900,"src": 1623,"name": "insertSlice"},{"import": 1900,"src": 1624,"name": "replaceRange"},{"import": 1900,"src": 495,"name": "append","kind": "const","type": 721,"value": 843},{"import": 1900,"src": 1625,"name": "appendAssumeCapacity"},{"import": 1900,"src": 1626,"name": "orderedRemove"},{"import": 1900,"src": 1627,"name": "swapRemove"},{"import": 1900,"src": 1628,"name": "appendSlice"},{"import": 1900,"src": 1629,"name": "appendSliceAssumeCapacity"},{"import": 1900,"src": 1630,"name": "WriterContext"},{"import": 1900,"src": 1631,"name": "Writer"},{"import": 1900,"src": 1632,"name": "writer"},{"import": 1900,"src": 1633,"name": "appendNTimes"},{"import": 1900,"src": 1634,"name": "appendNTimesAssumeCapacity"},{"import": 1900,"src": 1635,"name": "resize"},{"import": 1900,"src": 1636,"name": "shrinkAndFree"},{"import": 1900,"src": 1637,"name": "shrinkRetainingCapacity"},{"import": 1900,"src": 1638,"name": "clearRetainingCapacity"},{"import": 1900,"src": 1639,"name": "clearAndFree"},{"import": 1900,"src": 1640,"name": "ensureCapacity"},{"import": 1900,"src": 497,"name": "ensureTotalCapacity","kind": "const","type": 723,"value": 845},{"import": 1900,"src": 498,"name": "ensureTotalCapacityPrecise","kind": "const","type": 724,"value": 846},{"import": 1900,"src": 1641,"name": "ensureUnusedCapacity"},{"import": 1900,"src": 1642,"name": "expandToCapacity"},{"import": 1900,"src": 496,"name": "addOne","kind": "const","type": 722,"value": 844},{"import": 1900,"src": 500,"name": "addOneAssumeCapacity","kind": "const","type": 727,"value": 849},{"import": 1900,"src": 1643,"name": "addManyAsArray"},{"import": 1900,"src": 1644,"name": "addManyAsArrayAssumeCapacity"},{"import": 1900,"src": 1645,"name": "pop"},{"import": 1900,"src": 1646,"name": "popOrNull"},{"import": 1900,"src": 499,"name": "allocatedSlice","kind": "const","type": 725,"value": 847},{"import": 1900,"src": 1647,"name": "Self","kind": "const","type": 954,"value": 1201},{"import": 1900,"src": 1648,"name": "appendWrite"},{"import": 1202,"src": 452,"name": "new","kind": "const","type": 672,"value": 789},{"import": 1202,"src": 453,"name": "newWithDescription","kind": "const","type": 673,"value": 790},{"import": 1202,"src": 454,"name": "deinit","kind": "const","type": 674,"value": 791},{"import": 1202,"src": 455,"name": "addArg","kind": "const","type": 675,"value": 792},{"import": 1202,"src": 456,"name": "addArgs","kind": "const","type": 676,"value": 793},{"import": 1202,"src": 457,"name": "addSubcommand","kind": "const","type": 677,"value": 794},{"import": 1202,"src": 458,"name": "addSubcommands","kind": "const","type": 678,"value": 795},{"import": 1202,"src": 459,"name": "takesSingleValue","kind": "const","type": 679,"value": 796},{"import": 1202,"src": 460,"name": "takesNValues","kind": "const","type": 680,"value": 797},{"import": 1202,"src": 461,"name": "countArgs","kind": "const","type": 681,"value": 798},{"import": 1202,"src": 462,"name": "countOptions","kind": "const","type": 681,"value": 799},{"import": 1202,"src": 463,"name": "countSubcommands","kind": "const","type": 681,"value": 800},{"import": 1202,"src": 464,"name": "findShortOption","kind": "const","type": 682,"value": 801},{"import": 1202,"src": 465,"name": "findLongOption","kind": "const","type": 683,"value": 802},{"import": 1202,"src": 466,"name": "findSubcommand","kind": "const","type": 684,"value": 803},{"import": 1202,"src": 467,"name": "applySetting","kind": "const","type": 685,"value": 804},{"import": 1202,"src": 468,"name": "removeSetting","kind": "const","type": 685,"value": 805},{"import": 1202,"src": 469,"name": "isSettingApplied","kind": "const","type": 686,"value": 806},{"import": 1202,"src": 470,"name": "help","kind": "const","type": 687,"value": 807},{"import": 1202,"src": 1653,"name": "Command","kind": "const","type": 954,"value": 1202},{"import": 1202,"src": 1654,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 1202,"src": 1655,"name": "Arg","kind": "const","type": 954,"value": 1199},{"import": 1202,"src": 1656,"name": "Help","kind": "const","type": 954,"value": 1711},{"import": 1202,"src": 1657,"name": "MakeSettings","kind": "const","type": 1176,"value": 1200},{"import": 1202,"src": 1658,"name": "mem","kind": "const","type": 954,"value": 1971},{"import": 1202,"src": 1659,"name": "ArrayList","kind": "const","type": 1200,"value": 1212},{"import": 1202,"src": 1660,"name": "Allocator","kind": "const","type": 954,"value": 1312},{"import": 1202,"src": 1661,"name": "Settings","kind": "const","type": 954,"value": 1203},{"import": 1966,"src": 1572,"name": "Options","kind": "const","type": 954,"value": 1204},{"import": 1966,"src": 433,"name": "apply","kind": "const","type": 728,"value": 850},{"import": 1966,"src": 493,"name": "remove","kind": "const","type": 728,"value": 851},{"import": 1966,"src": 431,"name": "isApplied","kind": "const","type": 729,"value": 852},{"import": 1966,"src": 1573,"name": "Self","kind": "const","type": 954,"value": 1203},{"import": 1967,"src": 1574,"name": "Key","kind": "const","type": 954,"value": 1204},{"import": 1967,"src": 1575,"name": "count","kind": "const","type": 965,"value": 3},{"import": 1967,"src": 420,"name": "indexOf","kind": "const","type": 648,"value": 749},{"import": 1967,"src": 421,"name": "keyForIndex","kind": "const","type": 649,"value": 750},{"import": 1967,"src": 1576,"name": "Indexer","kind": "const","type": 954,"value": 1205},{"import": 1967,"src": 1577,"name": "Key","kind": "const","type": 954,"value": 1204},{"import": 1967,"src": 1578,"name": "Value","kind": "const","type": 954,"value": 967},{"import": 1967,"src": 1579,"name": "len"},{"import": 1967,"src": 1580,"name": "count"},{"import": 1967,"src": 491,"name": "contains","kind": "const","type": 813,"value": 941},{"import": 1967,"src": 1581,"name": "get"},{"import": 1967,"src": 1582,"name": "getAssertContains"},{"import": 1967,"src": 1583,"name": "getPtr"},{"import": 1967,"src": 1584,"name": "getPtrConst"},{"import": 1967,"src": 1585,"name": "getPtrAssertContains"},{"import": 1967,"src": 492,"name": "put","kind": "const","type": 811,"value": 939},{"import": 1967,"src": 1586,"name": "putUninitialized"},{"import": 1967,"src": 1587,"name": "fetchPut"},{"import": 1967,"src": 539,"name": "remove","kind": "const","type": 812,"value": 940},{"import": 1967,"src": 1588,"name": "fetchRemove"},{"import": 1967,"src": 1589,"name": "iterator"},{"import": 1967,"src": 1590,"name": "Entry"},{"import": 1967,"src": 1591,"name": "Iterator"},{"import": 1967,"src": 1592,"name": "init"},{"import": 1967,"src": 1593,"name": "initFull"},{"import": 1967,"src": 1594,"name": "initFullWith"},{"import": 1967,"src": 1595,"name": "initFullWithDefault"},{"import": 1967,"src": 1596,"name": "Self","kind": "const","type": 954,"value": 1206},{"import": 1967,"src": 1597,"name": "BitSet","kind": "const","type": 954,"value": 1195},{"import": 1893,"src": 424,"name": "hash","kind": "const","type": 650,"value": 752},{"import": 1893,"src": 425,"name": "eql","kind": "const","type": 651,"value": 753},{"import": 1893,"src": 1230,"name": "Unmanaged","kind": "const","type": 954,"value": 1214},{"import": 1893,"src": 1231,"name": "Entry"},{"import": 1893,"src": 1232,"name": "KV"},{"import": 1893,"src": 1233,"name": "Hash"},{"import": 1893,"src": 1234,"name": "Iterator"},{"import": 1893,"src": 1235,"name": "KeyIterator"},{"import": 1893,"src": 1236,"name": "ValueIterator","kind": "const","type": 954,"value": 1245},{"import": 1893,"src": 1237,"name": "Size","kind": "const","type": 954,"value": 1134},{"import": 1893,"src": 1238,"name": "GetOrPutResult"},{"import": 1893,"src": 275,"name": "init","kind": "const","type": 731,"value": 854},{"import": 1893,"src": 1239,"name": "initContext"},{"import": 1893,"src": 504,"name": "deinit","kind": "const","type": 736,"value": 859},{"import": 1893,"src": 1240,"name": "clearRetainingCapacity"},{"import": 1893,"src": 1241,"name": "clearAndFree"},{"import": 1893,"src": 516,"name": "count","kind": "const","type": 764,"value": 891},{"import": 1893,"src": 1242,"name": "iterator"},{"import": 1893,"src": 1243,"name": "keyIterator"},{"import": 1893,"src": 502,"name": "valueIterator","kind": "const","type": 732,"value": 855},{"import": 1893,"src": 1244,"name": "getOrPut"},{"import": 1893,"src": 1245,"name": "getOrPutAdapted"},{"import": 1893,"src": 1246,"name": "getOrPutAssumeCapacity"},{"import": 1893,"src": 1247,"name": "getOrPutAssumeCapacityAdapted"},{"import": 1893,"src": 1248,"name": "getOrPutValue"},{"import": 1893,"src": 1249,"name": "ensureCapacity"},{"import": 1893,"src": 1250,"name": "ensureTotalCapacity"},{"import": 1893,"src": 1251,"name": "ensureUnusedCapacity"},{"import": 1893,"src": 1252,"name": "capacity"},{"import": 1893,"src": 509,"name": "put","kind": "const","type": 741,"value": 865},{"import": 1893,"src": 124,"name": "putNoClobber"},{"import": 1893,"src": 1253,"name": "putAssumeCapacity"},{"import": 1893,"src": 1254,"name": "putAssumeCapacityNoClobber"},{"import": 1893,"src": 1255,"name": "fetchPut"},{"import": 1893,"src": 1256,"name": "fetchPutAssumeCapacity"},{"import": 1893,"src": 1257,"name": "fetchRemove"},{"import": 1893,"src": 1258,"name": "fetchRemoveAdapted"},{"import": 1893,"src": 62,"name": "get","kind": "const","type": 765,"value": 892},{"import": 1893,"src": 1259,"name": "getAdapted"},{"import": 1893,"src": 507,"name": "getPtr","kind": "const","type": 740,"value": 863},{"import": 1893,"src": 1260,"name": "getPtrAdapted"},{"import": 1893,"src": 1261,"name": "getKey"},{"import": 1893,"src": 1262,"name": "getKeyAdapted"},{"import": 1893,"src": 1263,"name": "getKeyPtr"},{"import": 1893,"src": 1264,"name": "getKeyPtrAdapted"},{"import": 1893,"src": 1265,"name": "getEntry"},{"import": 1893,"src": 1266,"name": "getEntryAdapted"},{"import": 1893,"src": 515,"name": "contains","kind": "const","type": 763,"value": 890},{"import": 1893,"src": 1267,"name": "containsAdapted"},{"import": 1893,"src": 1268,"name": "remove"},{"import": 1893,"src": 1269,"name": "removeAdapted"},{"import": 1893,"src": 1270,"name": "clone"},{"import": 1893,"src": 1271,"name": "cloneWithAllocator"},{"import": 1893,"src": 1272,"name": "cloneWithContext"},{"import": 1893,"src": 1273,"name": "cloneWithAllocatorAndContext"},{"import": 1893,"src": 1274,"name": "Self","kind": "const","type": 954,"value": 1211},{"import": 1242,"src": 506,"name": "count","kind": "const","type": 739,"value": 862},{"import": 1242,"src": 508,"name": "isNone","kind": "const","type": 734,"value": 864},{"import": 1242,"src": 510,"name": "isSingle","kind": "const","type": 734,"value": 866},{"import": 1242,"src": 503,"name": "isMany","kind": "const","type": 734,"value": 857},{"import": 1893,"src": 1275,"name": "Size","kind": "const","type": 954,"value": 1134},{"import": 1893,"src": 1276,"name": "Hash","kind": "const","type": 954,"value": 988},{"import": 1893,"src": 1277,"name": "Entry"},{"import": 1893,"src": 1278,"name": "KV"},{"import": 1893,"src": 1279,"name": "Iterator"},{"import": 1893,"src": 1280,"name": "KeyIterator"},{"import": 1893,"src": 1281,"name": "ValueIterator","kind": "const","type": 954,"value": 1245},{"import": 1893,"src": 1282,"name": "GetOrPutResult","kind": "const","type": 954,"value": 1762},{"import": 1893,"src": 1283,"name": "Managed"},{"import": 1893,"src": 1284,"name": "promote"},{"import": 1893,"src": 1285,"name": "promoteContext"},{"import": 1893,"src": 137,"name": "deinit","kind": "const","type": 753,"value": 880},{"import": 1893,"src": 1286,"name": "ensureCapacity"},{"import": 1893,"src": 1287,"name": "ensureTotalCapacity"},{"import": 1893,"src": 1288,"name": "ensureTotalCapacityContext"},{"import": 1893,"src": 1289,"name": "ensureUnusedCapacity"},{"import": 1893,"src": 1290,"name": "ensureUnusedCapacityContext"},{"import": 1893,"src": 1291,"name": "clearRetainingCapacity"},{"import": 1893,"src": 1292,"name": "clearAndFree"},{"import": 1893,"src": 542,"name": "count","kind": "const","type": 751,"value": 954},{"import": 1893,"src": 132,"name": "capacity","kind": "const","type": 751,"value": 878},{"import": 1893,"src": 1293,"name": "iterator"},{"import": 1893,"src": 1294,"name": "keyIterator"},{"import": 1893,"src": 394,"name": "valueIterator","kind": "const","type": 814,"value": 942},{"import": 1893,"src": 1295,"name": "putNoClobber"},{"import": 1893,"src": 125,"name": "putNoClobberContext"},{"import": 1893,"src": 1296,"name": "putAssumeCapacity"},{"import": 1893,"src": 1297,"name": "putAssumeCapacityContext"},{"import": 1893,"src": 1298,"name": "putAssumeCapacityNoClobber"},{"import": 1893,"src": 142,"name": "putAssumeCapacityNoClobberContext","kind": "const","type": 758,"value": 885},{"import": 1893,"src": 1299,"name": "fetchPut"},{"import": 1893,"src": 1300,"name": "fetchPutContext"},{"import": 1893,"src": 1301,"name": "fetchPutAssumeCapacity"},{"import": 1893,"src": 1302,"name": "fetchPutAssumeCapacityContext"},{"import": 1893,"src": 1303,"name": "fetchRemove"},{"import": 1893,"src": 1304,"name": "fetchRemoveContext"},{"import": 1893,"src": 1305,"name": "fetchRemoveAdapted"},{"import": 1893,"src": 1306,"name": "getEntry"},{"import": 1893,"src": 1307,"name": "getEntryContext"},{"import": 1893,"src": 1308,"name": "getEntryAdapted"},{"import": 1893,"src": 1309,"name": "put"},{"import": 1893,"src": 511,"name": "putContext","kind": "const","type": 746,"value": 871},{"import": 1893,"src": 1310,"name": "getKeyPtr"},{"import": 1893,"src": 1311,"name": "getKeyPtrContext"},{"import": 1893,"src": 1312,"name": "getKeyPtrAdapted"},{"import": 1893,"src": 1313,"name": "getKey"},{"import": 1893,"src": 1314,"name": "getKeyContext"},{"import": 1893,"src": 1315,"name": "getKeyAdapted"},{"import": 1893,"src": 1316,"name": "getPtr"},{"import": 1893,"src": 540,"name": "getPtrContext","kind": "const","type": 815,"value": 943},{"import": 1893,"src": 561,"name": "getPtrAdapted","kind": "const","type": 1972,"value": 1238},{"import": 1893,"src": 1317,"name": "get"},{"import": 1893,"src": 218,"name": "getContext","kind": "const","type": 822,"value": 955},{"import": 1893,"src": 294,"name": "getAdapted","kind": "const","type": 1973,"value": 1239},{"import": 1893,"src": 1318,"name": "getOrPut"},{"import": 1893,"src": 512,"name": "getOrPutContext","kind": "const","type": 747,"value": 872},{"import": 1893,"src": 1319,"name": "getOrPutAdapted"},{"import": 1893,"src": 513,"name": "getOrPutContextAdapted","kind": "const","type": 1974,"value": 1240},{"import": 1893,"src": 1320,"name": "getOrPutAssumeCapacity"},{"import": 1893,"src": 1321,"name": "getOrPutAssumeCapacityContext"},{"import": 1893,"src": 514,"name": "getOrPutAssumeCapacityAdapted","kind": "const","type": 1975,"value": 1241},{"import": 1893,"src": 1322,"name": "getOrPutValue"},{"import": 1893,"src": 1323,"name": "getOrPutValueContext"},{"import": 1893,"src": 1324,"name": "contains"},{"import": 1893,"src": 126,"name": "containsContext","kind": "const","type": 819,"value": 948},{"import": 1893,"src": 239,"name": "containsAdapted","kind": "const","type": 1976,"value": 1242},{"import": 1893,"src": 1325,"name": "remove"},{"import": 1893,"src": 1326,"name": "removeContext"},{"import": 1893,"src": 1327,"name": "removeAdapted"},{"import": 1893,"src": 1328,"name": "clone"},{"import": 1893,"src": 1329,"name": "cloneContext"},{"import": 1893,"src": 1330,"name": "Self","kind": "const","type": 954,"value": 1214},{"import": 1893,"src": 1331,"name": "minimal_capacity","kind": "const","type": 1034,"value": null},{"import": 1893,"src": 1332,"name": "Header","kind": "const","type": 954,"value": 1977},{"import": 1893,"src": 1333,"name": "Metadata","kind": "const","type": 954,"value": 1761},{"import": 1893,"src": 663,"name": "FieldIterator","kind": "const","type": 1244,"value": 1220},{"import": 1893,"src": 1334,"name": "isUnderMaxLoadPercentage"},{"import": 1893,"src": 129,"name": "capacityForSize","kind": "const","type": 168,"value": 876},{"import": 1893,"src": 241,"name": "header","kind": "const","type": 818,"value": 946},{"import": 1893,"src": 139,"name": "keys","kind": "const","type": 755,"value": 882},{"import": 1893,"src": 140,"name": "values","kind": "const","type": 756,"value": 883},{"import": 1893,"src": 311,"name": "getIndex","kind": "const","type": 1978,"value": 1243},{"import": 1893,"src": 138,"name": "initMetadatas","kind": "const","type": 754,"value": 881},{"import": 1893,"src": 130,"name": "load","kind": "const","type": 751,"value": 877},{"import": 1893,"src": 127,"name": "growIfNeeded","kind": "const","type": 749,"value": 874},{"import": 1893,"src": 128,"name": "grow","kind": "const","type": 750,"value": 875},{"import": 1893,"src": 134,"name": "allocate","kind": "const","type": 752,"value": 879},{"import": 1893,"src": 243,"name": "deallocate","kind": "const","type": 753,"value": 947},{"import": 1893,"src": 1230,"name": "Unmanaged","kind": "const","type": 954,"value": 1217},{"import": 1893,"src": 1231,"name": "Entry"},{"import": 1893,"src": 1232,"name": "KV"},{"import": 1893,"src": 1233,"name": "Hash"},{"import": 1893,"src": 1234,"name": "Iterator"},{"import": 1893,"src": 1235,"name": "KeyIterator"},{"import": 1893,"src": 1236,"name": "ValueIterator"},{"import": 1893,"src": 1237,"name": "Size"},{"import": 1893,"src": 1238,"name": "GetOrPutResult"},{"import": 1893,"src": 275,"name": "init"},{"import": 1893,"src": 1239,"name": "initContext"},{"import": 1893,"src": 504,"name": "deinit"},{"import": 1893,"src": 1240,"name": "clearRetainingCapacity"},{"import": 1893,"src": 1241,"name": "clearAndFree"},{"import": 1893,"src": 516,"name": "count"},{"import": 1893,"src": 1242,"name": "iterator"},{"import": 1893,"src": 1243,"name": "keyIterator"},{"import": 1893,"src": 502,"name": "valueIterator"},{"import": 1893,"src": 1244,"name": "getOrPut"},{"import": 1893,"src": 1245,"name": "getOrPutAdapted"},{"import": 1893,"src": 1246,"name": "getOrPutAssumeCapacity"},{"import": 1893,"src": 1247,"name": "getOrPutAssumeCapacityAdapted"},{"import": 1893,"src": 1248,"name": "getOrPutValue"},{"import": 1893,"src": 1249,"name": "ensureCapacity"},{"import": 1893,"src": 1250,"name": "ensureTotalCapacity"},{"import": 1893,"src": 1251,"name": "ensureUnusedCapacity"},{"import": 1893,"src": 1252,"name": "capacity"},{"import": 1893,"src": 509,"name": "put"},{"import": 1893,"src": 124,"name": "putNoClobber"},{"import": 1893,"src": 1253,"name": "putAssumeCapacity"},{"import": 1893,"src": 1254,"name": "putAssumeCapacityNoClobber"},{"import": 1893,"src": 1255,"name": "fetchPut"},{"import": 1893,"src": 1256,"name": "fetchPutAssumeCapacity"},{"import": 1893,"src": 1257,"name": "fetchRemove"},{"import": 1893,"src": 1258,"name": "fetchRemoveAdapted"},{"import": 1893,"src": 62,"name": "get"},{"import": 1893,"src": 1259,"name": "getAdapted"},{"import": 1893,"src": 507,"name": "getPtr"},{"import": 1893,"src": 1260,"name": "getPtrAdapted"},{"import": 1893,"src": 1261,"name": "getKey"},{"import": 1893,"src": 1262,"name": "getKeyAdapted"},{"import": 1893,"src": 1263,"name": "getKeyPtr"},{"import": 1893,"src": 1264,"name": "getKeyPtrAdapted"},{"import": 1893,"src": 1265,"name": "getEntry"},{"import": 1893,"src": 1266,"name": "getEntryAdapted"},{"import": 1893,"src": 515,"name": "contains"},{"import": 1893,"src": 1267,"name": "containsAdapted"},{"import": 1893,"src": 1268,"name": "remove"},{"import": 1893,"src": 1269,"name": "removeAdapted"},{"import": 1893,"src": 1270,"name": "clone"},{"import": 1893,"src": 1271,"name": "cloneWithAllocator"},{"import": 1893,"src": 1272,"name": "cloneWithContext"},{"import": 1893,"src": 1273,"name": "cloneWithAllocatorAndContext"},{"import": 1893,"src": 1274,"name": "Self"},{"import": 1893,"src": 1275,"name": "Size","kind": "const","type": 954,"value": 1134},{"import": 1893,"src": 1276,"name": "Hash"},{"import": 1893,"src": 1277,"name": "Entry"},{"import": 1893,"src": 1278,"name": "KV"},{"import": 1893,"src": 1279,"name": "Iterator"},{"import": 1893,"src": 1280,"name": "KeyIterator"},{"import": 1893,"src": 1281,"name": "ValueIterator"},{"import": 1893,"src": 1282,"name": "GetOrPutResult"},{"import": 1893,"src": 1283,"name": "Managed"},{"import": 1893,"src": 1284,"name": "promote"},{"import": 1893,"src": 1285,"name": "promoteContext"},{"import": 1893,"src": 137,"name": "deinit"},{"import": 1893,"src": 1286,"name": "ensureCapacity"},{"import": 1893,"src": 1287,"name": "ensureTotalCapacity"},{"import": 1893,"src": 1288,"name": "ensureTotalCapacityContext"},{"import": 1893,"src": 1289,"name": "ensureUnusedCapacity"},{"import": 1893,"src": 1290,"name": "ensureUnusedCapacityContext"},{"import": 1893,"src": 1291,"name": "clearRetainingCapacity"},{"import": 1893,"src": 1292,"name": "clearAndFree"},{"import": 1893,"src": 542,"name": "count"},{"import": 1893,"src": 132,"name": "capacity"},{"import": 1893,"src": 1293,"name": "iterator"},{"import": 1893,"src": 1294,"name": "keyIterator"},{"import": 1893,"src": 394,"name": "valueIterator"},{"import": 1893,"src": 1295,"name": "putNoClobber"},{"import": 1893,"src": 125,"name": "putNoClobberContext"},{"import": 1893,"src": 1296,"name": "putAssumeCapacity"},{"import": 1893,"src": 1297,"name": "putAssumeCapacityContext"},{"import": 1893,"src": 1298,"name": "putAssumeCapacityNoClobber"},{"import": 1893,"src": 142,"name": "putAssumeCapacityNoClobberContext"},{"import": 1893,"src": 1299,"name": "fetchPut"},{"import": 1893,"src": 1300,"name": "fetchPutContext"},{"import": 1893,"src": 1301,"name": "fetchPutAssumeCapacity"},{"import": 1893,"src": 1302,"name": "fetchPutAssumeCapacityContext"},{"import": 1893,"src": 1303,"name": "fetchRemove"},{"import": 1893,"src": 1304,"name": "fetchRemoveContext"},{"import": 1893,"src": 1305,"name": "fetchRemoveAdapted"},{"import": 1893,"src": 1306,"name": "getEntry"},{"import": 1893,"src": 1307,"name": "getEntryContext"},{"import": 1893,"src": 1308,"name": "getEntryAdapted"},{"import": 1893,"src": 1309,"name": "put"},{"import": 1893,"src": 511,"name": "putContext"},{"import": 1893,"src": 1310,"name": "getKeyPtr"},{"import": 1893,"src": 1311,"name": "getKeyPtrContext"},{"import": 1893,"src": 1312,"name": "getKeyPtrAdapted"},{"import": 1893,"src": 1313,"name": "getKey"},{"import": 1893,"src": 1314,"name": "getKeyContext"},{"import": 1893,"src": 1315,"name": "getKeyAdapted"},{"import": 1893,"src": 1316,"name": "getPtr"},{"import": 1893,"src": 540,"name": "getPtrContext"},{"import": 1893,"src": 561,"name": "getPtrAdapted"},{"import": 1893,"src": 1317,"name": "get"},{"import": 1893,"src": 218,"name": "getContext"},{"import": 1893,"src": 294,"name": "getAdapted"},{"import": 1893,"src": 1318,"name": "getOrPut"},{"import": 1893,"src": 512,"name": "getOrPutContext"},{"import": 1893,"src": 1319,"name": "getOrPutAdapted"},{"import": 1893,"src": 513,"name": "getOrPutContextAdapted"},{"import": 1893,"src": 1320,"name": "getOrPutAssumeCapacity"},{"import": 1893,"src": 1321,"name": "getOrPutAssumeCapacityContext"},{"import": 1893,"src": 514,"name": "getOrPutAssumeCapacityAdapted"},{"import": 1893,"src": 1322,"name": "getOrPutValue"},{"import": 1893,"src": 1323,"name": "getOrPutValueContext"},{"import": 1893,"src": 1324,"name": "contains"},{"import": 1893,"src": 126,"name": "containsContext"},{"import": 1893,"src": 239,"name": "containsAdapted"},{"import": 1893,"src": 1325,"name": "remove"},{"import": 1893,"src": 1326,"name": "removeContext"},{"import": 1893,"src": 1327,"name": "removeAdapted"},{"import": 1893,"src": 1328,"name": "clone"},{"import": 1893,"src": 1329,"name": "cloneContext"},{"import": 1893,"src": 1330,"name": "Self"},{"import": 1893,"src": 1331,"name": "minimal_capacity"},{"import": 1893,"src": 1332,"name": "Header"},{"import": 1893,"src": 1333,"name": "Metadata","kind": "const","type": 954,"value": 1980},{"import": 1893,"src": 663,"name": "FieldIterator"},{"import": 1893,"src": 1334,"name": "isUnderMaxLoadPercentage"},{"import": 1893,"src": 129,"name": "capacityForSize"},{"import": 1893,"src": 241,"name": "header"},{"import": 1893,"src": 139,"name": "keys"},{"import": 1893,"src": 140,"name": "values"},{"import": 1893,"src": 311,"name": "getIndex"},{"import": 1893,"src": 138,"name": "initMetadatas"},{"import": 1893,"src": 130,"name": "load"},{"import": 1893,"src": 127,"name": "growIfNeeded"},{"import": 1893,"src": 128,"name": "grow"},{"import": 1893,"src": 134,"name": "allocate"},{"import": 1893,"src": 243,"name": "deallocate"},{"import": 1900,"src": 1335,"name": "Slice","kind": "const","type": 954,"value": 1982},{"import": 1900,"src": 80,"name": "init"},{"import": 1900,"src": 1336,"name": "initCapacity"},{"import": 1900,"src": 106,"name": "deinit"},{"import": 1900,"src": 1337,"name": "fromOwnedSlice"},{"import": 1900,"src": 1338,"name": "toUnmanaged"},{"import": 1900,"src": 1339,"name": "moveToUnmanaged"},{"import": 1900,"src": 157,"name": "toOwnedSlice"},{"import": 1900,"src": 1340,"name": "toOwnedSliceSentinel"},{"import": 1900,"src": 1341,"name": "insert"},{"import": 1900,"src": 1342,"name": "insertSlice"},{"import": 1900,"src": 1343,"name": "replaceRange"},{"import": 1900,"src": 102,"name": "append"},{"import": 1900,"src": 1344,"name": "appendAssumeCapacity"},{"import": 1900,"src": 1345,"name": "orderedRemove"},{"import": 1900,"src": 1346,"name": "swapRemove"},{"import": 1900,"src": 368,"name": "appendSlice"},{"import": 1900,"src": 370,"name": "appendSliceAssumeCapacity"},{"import": 1900,"src": 1347,"name": "Writer"},{"import": 1900,"src": 1348,"name": "writer"},{"import": 1900,"src": 1349,"name": "appendNTimes"},{"import": 1900,"src": 1350,"name": "appendNTimesAssumeCapacity"},{"import": 1900,"src": 115,"name": "resize"},{"import": 1900,"src": 1351,"name": "shrinkAndFree"},{"import": 1900,"src": 156,"name": "shrinkRetainingCapacity"},{"import": 1900,"src": 1352,"name": "clearRetainingCapacity"},{"import": 1900,"src": 1353,"name": "clearAndFree"},{"import": 1900,"src": 1354,"name": "ensureCapacity"},{"import": 1900,"src": 108,"name": "ensureTotalCapacity"},{"import": 1900,"src": 109,"name": "ensureTotalCapacityPrecise"},{"import": 1900,"src": 369,"name": "ensureUnusedCapacity"},{"import": 1900,"src": 1355,"name": "expandToCapacity"},{"import": 1900,"src": 107,"name": "addOne"},{"import": 1900,"src": 112,"name": "addOneAssumeCapacity"},{"import": 1900,"src": 1356,"name": "addManyAsArray"},{"import": 1900,"src": 1357,"name": "addManyAsArrayAssumeCapacity"},{"import": 1900,"src": 1358,"name": "pop"},{"import": 1900,"src": 1359,"name": "popOrNull"},{"import": 1900,"src": 110,"name": "allocatedSlice"},{"import": 1900,"src": 1360,"name": "unusedCapacitySlice"},{"import": 1900,"src": 1361,"name": "Self"},{"import": 1900,"src": 1362,"name": "appendWrite"},{"import": 1942,"src": 1507,"name": "fetchAnd"},{"import": 1942,"src": 1508,"name": "fetchNand"},{"import": 1942,"src": 1509,"name": "fetchOr"},{"import": 1942,"src": 1510,"name": "fetchXor"},{"import": 1942,"src": 1511,"name": "bitSet"},{"import": 1942,"src": 1512,"name": "bitReset"},{"import": 1942,"src": 1513,"name": "bitToggle"},{"import": 1942,"src": 1662,"name": "Bit"},{"import": 1942,"src": 1663,"name": "BitRmwOp"},{"import": 1942,"src": 1664,"name": "bitRmw"},{"import": 1942,"src": 1514,"name": "fetchAdd"},{"import": 1942,"src": 1515,"name": "fetchSub"},{"import": 1942,"src": 1516,"name": "fetchMin"},{"import": 1942,"src": 1517,"name": "fetchMax"},{"import": 1942,"src": 1662,"name": "Bit"},{"import": 1942,"src": 1663,"name": "BitRmwOp"},{"import": 1942,"src": 1664,"name": "bitRmw"},{"import": 1893,"src": 1230,"name": "Unmanaged","kind": "const","type": 954,"value": 1231},{"import": 1893,"src": 1231,"name": "Entry"},{"import": 1893,"src": 1232,"name": "KV"},{"import": 1893,"src": 1233,"name": "Hash"},{"import": 1893,"src": 1234,"name": "Iterator"},{"import": 1893,"src": 1235,"name": "KeyIterator"},{"import": 1893,"src": 1236,"name": "ValueIterator"},{"import": 1893,"src": 1237,"name": "Size"},{"import": 1893,"src": 1238,"name": "GetOrPutResult"},{"import": 1893,"src": 275,"name": "init"},{"import": 1893,"src": 1239,"name": "initContext"},{"import": 1893,"src": 504,"name": "deinit"},{"import": 1893,"src": 1240,"name": "clearRetainingCapacity"},{"import": 1893,"src": 1241,"name": "clearAndFree"},{"import": 1893,"src": 516,"name": "count"},{"import": 1893,"src": 1242,"name": "iterator"},{"import": 1893,"src": 1243,"name": "keyIterator"},{"import": 1893,"src": 502,"name": "valueIterator"},{"import": 1893,"src": 1244,"name": "getOrPut"},{"import": 1893,"src": 1245,"name": "getOrPutAdapted"},{"import": 1893,"src": 1246,"name": "getOrPutAssumeCapacity"},{"import": 1893,"src": 1247,"name": "getOrPutAssumeCapacityAdapted"},{"import": 1893,"src": 1248,"name": "getOrPutValue"},{"import": 1893,"src": 1249,"name": "ensureCapacity"},{"import": 1893,"src": 1250,"name": "ensureTotalCapacity"},{"import": 1893,"src": 1251,"name": "ensureUnusedCapacity"},{"import": 1893,"src": 1252,"name": "capacity"},{"import": 1893,"src": 509,"name": "put"},{"import": 1893,"src": 124,"name": "putNoClobber"},{"import": 1893,"src": 1253,"name": "putAssumeCapacity"},{"import": 1893,"src": 1254,"name": "putAssumeCapacityNoClobber"},{"import": 1893,"src": 1255,"name": "fetchPut"},{"import": 1893,"src": 1256,"name": "fetchPutAssumeCapacity"},{"import": 1893,"src": 1257,"name": "fetchRemove"},{"import": 1893,"src": 1258,"name": "fetchRemoveAdapted"},{"import": 1893,"src": 62,"name": "get"},{"import": 1893,"src": 1259,"name": "getAdapted"},{"import": 1893,"src": 507,"name": "getPtr"},{"import": 1893,"src": 1260,"name": "getPtrAdapted"},{"import": 1893,"src": 1261,"name": "getKey"},{"import": 1893,"src": 1262,"name": "getKeyAdapted"},{"import": 1893,"src": 1263,"name": "getKeyPtr"},{"import": 1893,"src": 1264,"name": "getKeyPtrAdapted"},{"import": 1893,"src": 1265,"name": "getEntry"},{"import": 1893,"src": 1266,"name": "getEntryAdapted"},{"import": 1893,"src": 515,"name": "contains"},{"import": 1893,"src": 1267,"name": "containsAdapted"},{"import": 1893,"src": 1268,"name": "remove"},{"import": 1893,"src": 1269,"name": "removeAdapted"},{"import": 1893,"src": 1270,"name": "clone"},{"import": 1893,"src": 1271,"name": "cloneWithAllocator"},{"import": 1893,"src": 1272,"name": "cloneWithContext"},{"import": 1893,"src": 1273,"name": "cloneWithAllocatorAndContext"},{"import": 1893,"src": 1274,"name": "Self"},{"import": 1893,"src": 1275,"name": "Size","kind": "const","type": 954,"value": 1134},{"import": 1893,"src": 1276,"name": "Hash"},{"import": 1893,"src": 1277,"name": "Entry"},{"import": 1893,"src": 1278,"name": "KV"},{"import": 1893,"src": 1279,"name": "Iterator"},{"import": 1893,"src": 1280,"name": "KeyIterator"},{"import": 1893,"src": 1281,"name": "ValueIterator"},{"import": 1893,"src": 1282,"name": "GetOrPutResult"},{"import": 1893,"src": 1283,"name": "Managed"},{"import": 1893,"src": 1284,"name": "promote"},{"import": 1893,"src": 1285,"name": "promoteContext"},{"import": 1893,"src": 137,"name": "deinit"},{"import": 1893,"src": 1286,"name": "ensureCapacity"},{"import": 1893,"src": 1287,"name": "ensureTotalCapacity"},{"import": 1893,"src": 1288,"name": "ensureTotalCapacityContext"},{"import": 1893,"src": 1289,"name": "ensureUnusedCapacity"},{"import": 1893,"src": 1290,"name": "ensureUnusedCapacityContext"},{"import": 1893,"src": 1291,"name": "clearRetainingCapacity"},{"import": 1893,"src": 1292,"name": "clearAndFree"},{"import": 1893,"src": 542,"name": "count"},{"import": 1893,"src": 132,"name": "capacity"},{"import": 1893,"src": 1293,"name": "iterator"},{"import": 1893,"src": 1294,"name": "keyIterator"},{"import": 1893,"src": 394,"name": "valueIterator"},{"import": 1893,"src": 1295,"name": "putNoClobber"},{"import": 1893,"src": 125,"name": "putNoClobberContext"},{"import": 1893,"src": 1296,"name": "putAssumeCapacity"},{"import": 1893,"src": 1297,"name": "putAssumeCapacityContext"},{"import": 1893,"src": 1298,"name": "putAssumeCapacityNoClobber"},{"import": 1893,"src": 142,"name": "putAssumeCapacityNoClobberContext"},{"import": 1893,"src": 1299,"name": "fetchPut"},{"import": 1893,"src": 1300,"name": "fetchPutContext"},{"import": 1893,"src": 1301,"name": "fetchPutAssumeCapacity"},{"import": 1893,"src": 1302,"name": "fetchPutAssumeCapacityContext"},{"import": 1893,"src": 1303,"name": "fetchRemove"},{"import": 1893,"src": 1304,"name": "fetchRemoveContext"},{"import": 1893,"src": 1305,"name": "fetchRemoveAdapted"},{"import": 1893,"src": 1306,"name": "getEntry"},{"import": 1893,"src": 1307,"name": "getEntryContext"},{"import": 1893,"src": 1308,"name": "getEntryAdapted"},{"import": 1893,"src": 1309,"name": "put"},{"import": 1893,"src": 511,"name": "putContext"},{"import": 1893,"src": 1310,"name": "getKeyPtr"},{"import": 1893,"src": 1311,"name": "getKeyPtrContext"},{"import": 1893,"src": 1312,"name": "getKeyPtrAdapted"},{"import": 1893,"src": 1313,"name": "getKey"},{"import": 1893,"src": 1314,"name": "getKeyContext"},{"import": 1893,"src": 1315,"name": "getKeyAdapted"},{"import": 1893,"src": 1316,"name": "getPtr"},{"import": 1893,"src": 540,"name": "getPtrContext"},{"import": 1893,"src": 561,"name": "getPtrAdapted"},{"import": 1893,"src": 1317,"name": "get"},{"import": 1893,"src": 218,"name": "getContext"},{"import": 1893,"src": 294,"name": "getAdapted"},{"import": 1893,"src": 1318,"name": "getOrPut"},{"import": 1893,"src": 512,"name": "getOrPutContext"},{"import": 1893,"src": 1319,"name": "getOrPutAdapted"},{"import": 1893,"src": 513,"name": "getOrPutContextAdapted"},{"import": 1893,"src": 1320,"name": "getOrPutAssumeCapacity"},{"import": 1893,"src": 1321,"name": "getOrPutAssumeCapacityContext"},{"import": 1893,"src": 514,"name": "getOrPutAssumeCapacityAdapted"},{"import": 1893,"src": 1322,"name": "getOrPutValue"},{"import": 1893,"src": 1323,"name": "getOrPutValueContext"},{"import": 1893,"src": 1324,"name": "contains"},{"import": 1893,"src": 126,"name": "containsContext"},{"import": 1893,"src": 239,"name": "containsAdapted"},{"import": 1893,"src": 1325,"name": "remove"},{"import": 1893,"src": 1326,"name": "removeContext"},{"import": 1893,"src": 1327,"name": "removeAdapted"},{"import": 1893,"src": 1328,"name": "clone"},{"import": 1893,"src": 1329,"name": "cloneContext"},{"import": 1893,"src": 1330,"name": "Self"},{"import": 1893,"src": 1331,"name": "minimal_capacity"},{"import": 1893,"src": 1332,"name": "Header"},{"import": 1893,"src": 1333,"name": "Metadata","kind": "const","type": 954,"value": 1984},{"import": 1893,"src": 663,"name": "FieldIterator"},{"import": 1893,"src": 1334,"name": "isUnderMaxLoadPercentage"},{"import": 1893,"src": 129,"name": "capacityForSize"},{"import": 1893,"src": 241,"name": "header"},{"import": 1893,"src": 139,"name": "keys"},{"import": 1893,"src": 140,"name": "values"},{"import": 1893,"src": 311,"name": "getIndex"},{"import": 1893,"src": 138,"name": "initMetadatas"},{"import": 1893,"src": 130,"name": "load"},{"import": 1893,"src": 127,"name": "growIfNeeded"},{"import": 1893,"src": 128,"name": "grow"},{"import": 1893,"src": 134,"name": "allocate"},{"import": 1893,"src": 243,"name": "deallocate"},{"import": 1966,"src": 1572,"name": "Options","kind": "const","type": 954,"value": 1233},{"import": 1966,"src": 433,"name": "apply","kind": "const","type": 658,"value": 769},{"import": 1966,"src": 493,"name": "remove"},{"import": 1966,"src": 431,"name": "isApplied","kind": "const","type": 655,"value": 766},{"import": 1966,"src": 1573,"name": "Self","kind": "const","type": 954,"value": 1232},{"import": 1967,"src": 1574,"name": "Key","kind": "const","type": 954,"value": 1233},{"import": 1967,"src": 1575,"name": "count","kind": "const","type": 965,"value": 2},{"import": 1967,"src": 420,"name": "indexOf","kind": "const","type": 652,"value": 763},{"import": 1967,"src": 421,"name": "keyForIndex","kind": "const","type": 653,"value": 764},{"import": 1967,"src": 1576,"name": "Indexer","kind": "const","type": 954,"value": 1234},{"import": 1967,"src": 1577,"name": "Key","kind": "const","type": 954,"value": 1233},{"import": 1967,"src": 1578,"name": "Value","kind": "const","type": 954,"value": 967},{"import": 1967,"src": 1579,"name": "len"},{"import": 1967,"src": 1580,"name": "count"},{"import": 1967,"src": 491,"name": "contains","kind": "const","type": 707,"value": 828},{"import": 1967,"src": 1581,"name": "get"},{"import": 1967,"src": 1582,"name": "getAssertContains"},{"import": 1967,"src": 1583,"name": "getPtr"},{"import": 1967,"src": 1584,"name": "getPtrConst"},{"import": 1967,"src": 1585,"name": "getPtrAssertContains"},{"import": 1967,"src": 492,"name": "put","kind": "const","type": 709,"value": 830},{"import": 1967,"src": 1586,"name": "putUninitialized"},{"import": 1967,"src": 1587,"name": "fetchPut"},{"import": 1967,"src": 539,"name": "remove"},{"import": 1967,"src": 1588,"name": "fetchRemove"},{"import": 1967,"src": 1589,"name": "iterator"},{"import": 1967,"src": 1590,"name": "Entry"},{"import": 1967,"src": 1591,"name": "Iterator"},{"import": 1967,"src": 1592,"name": "init"},{"import": 1967,"src": 1593,"name": "initFull"},{"import": 1967,"src": 1594,"name": "initFullWith"},{"import": 1967,"src": 1595,"name": "initFullWithDefault"},{"import": 1967,"src": 1596,"name": "Self","kind": "const","type": 954,"value": 1235},{"import": 1967,"src": 1597,"name": "BitSet","kind": "const","type": 954,"value": 1239},{"import": 1969,"src": 1598,"name": "bit_length","kind": "const","type": 965,"value": 2},{"import": 1969,"src": 1599,"name": "MaskInt","kind": "const","type": 954,"value": 1240},{"import": 1969,"src": 1600,"name": "ShiftInt","kind": "const","type": 954,"value": 1271},{"import": 1969,"src": 430,"name": "initEmpty","kind": "const","type": 654,"value": 765},{"import": 1969,"src": 1601,"name": "initFull"},{"import": 1969,"src": 1602,"name": "capacity"},{"import": 1969,"src": 537,"name": "isSet","kind": "const","type": 800,"value": 928},{"import": 1969,"src": 1603,"name": "count"},{"import": 1969,"src": 1604,"name": "setValue"},{"import": 1969,"src": 538,"name": "set","kind": "const","type": 803,"value": 931},{"import": 1969,"src": 560,"name": "unset"},{"import": 1969,"src": 1605,"name": "toggle"},{"import": 1969,"src": 1606,"name": "toggleSet"},{"import": 1969,"src": 1607,"name": "toggleAll"},{"import": 1969,"src": 1608,"name": "setUnion"},{"import": 1969,"src": 1609,"name": "setIntersection"},{"import": 1969,"src": 1610,"name": "findFirstSet"},{"import": 1969,"src": 1611,"name": "toggleFirstSet"},{"import": 1969,"src": 1612,"name": "iterator"},{"import": 1969,"src": 1613,"name": "Iterator"},{"import": 1969,"src": 1614,"name": "Self","kind": "const","type": 954,"value": 1239},{"import": 1969,"src": 1615,"name": "SingleWordIterator"},{"import": 1969,"src": 559,"name": "maskBit","kind": "const","type": 867,"value": 1003},{"import": 1969,"src": 1616,"name": "boolMaskBit"},{"import": 1241,"src": 434,"name": "boolean","kind": "const","type": 659,"value": 770},{"import": 1241,"src": 435,"name": "argOne","kind": "const","type": 659,"value": 771},{"import": 1241,"src": 436,"name": "argN","kind": "const","type": 660,"value": 772},{"import": 1241,"src": 437,"name": "option","kind": "const","type": 661,"value": 773},{"import": 1241,"src": 1665,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 1241,"src": 1666,"name": "Arg","kind": "const","type": 954,"value": 1199},{"import": 1242,"src": 1667,"name": "MatchedArgValue","kind": "const","type": 954,"value": 1212},{"import": 1242,"src": 1668,"name": "MatchedSubCommand","kind": "const","type": 954,"value": 1715},{"import": 1242,"src": 471,"name": "init","kind": "const","type": 688,"value": 808},{"import": 1242,"src": 472,"name": "deinit","kind": "const","type": 689,"value": 809},{"import": 1242,"src": 473,"name": "putMatchedArg","kind": "const","type": 690,"value": 810},{"import": 1242,"src": 474,"name": "setSubcommand","kind": "const","type": 691,"value": 811},{"import": 1242,"src": 475,"name": "isPresent","kind": "const","type": 692,"value": 812},{"import": 1242,"src": 476,"name": "hasArgs","kind": "const","type": 693,"value": 813},{"import": 1242,"src": 477,"name": "valueOf","kind": "const","type": 694,"value": 814},{"import": 1242,"src": 478,"name": "valuesOf","kind": "const","type": 695,"value": 815},{"import": 1242,"src": 479,"name": "subcommandContext","kind": "const","type": 696,"value": 816},{"import": 1242,"src": 1669,"name": "ArgsContext","kind": "const","type": 954,"value": 1242},{"import": 1242,"src": 1670,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 1242,"src": 1671,"name": "Arg","kind": "const","type": 954,"value": 1199},{"import": 1242,"src": 1672,"name": "Help","kind": "const","type": 954,"value": 1711},{"import": 1242,"src": 1673,"name": "ArgHashMap","kind": "const","type": 954,"value": 1211},{"import": 1243,"src": 1674,"name": "Error","kind": "const","type": 954,"value": 1988},{"import": 1243,"src": 480,"name": "init","kind": "const","type": 697,"value": 817},{"import": 1243,"src": 481,"name": "deinit","kind": "const","type": 698,"value": 818},{"import": 1243,"src": 482,"name": "createCommand","kind": "const","type": 699,"value": 819},{"import": 1243,"src": 483,"name": "rootCommand","kind": "const","type": 700,"value": 820},{"import": 1243,"src": 484,"name": "parseProcess","kind": "const","type": 701,"value": 821},{"import": 1243,"src": 485,"name": "parseFrom","kind": "const","type": 702,"value": 822},{"import": 1243,"src": 486,"name": "displayHelp","kind": "const","type": 703,"value": 823},{"import": 1243,"src": 487,"name": "displaySubcommandHelp","kind": "const","type": 704,"value": 824},{"import": 1243,"src": 1675,"name": "Yazap","kind": "const","type": 954,"value": 1243},{"import": 1243,"src": 1676,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 1243,"src": 1677,"name": "Command","kind": "const","type": 954,"value": 1202},{"import": 1243,"src": 1678,"name": "Help","kind": "const","type": 954,"value": 1711},{"import": 1243,"src": 1679,"name": "Parser","kind": "const","type": 954,"value": 1766},{"import": 1243,"src": 1680,"name": "ArgsContext","kind": "const","type": 954,"value": 1242},{"import": 1243,"src": 1681,"name": "Tokenizer","kind": "const","type": 954,"value": 1767},{"import": 1243,"src": 1682,"name": "PrintError","kind": "const","type": 954,"value": 972},{"import": 1243,"src": 1683,"name": "Allocator","kind": "const","type": 954,"value": 1312},{"import": 1243,"src": 488,"name": "setSubcommandHelp","kind": "const","type": 698,"value": 825},{"import": 1243,"src": 489,"name": "findSubcommandHelp","kind": "const","type": 705,"value": 826},{"import": 1243,"src": 490,"name": "displayHelpAndExitIfFound","kind": "const","type": 706,"value": 827},{"import": 1893,"src": 395,"name": "next","kind": "const","type": 733,"value": 856},{"import": 1991,"src": 1684,"name": "Error","kind": "const","type": 954,"value": 972},{"import": 1991,"src": 1685,"name": "Writer","kind": "const","type": 954,"value": 1251},{"import": 1991,"src": 534,"name": "flush","kind": "const","type": 797,"value": 925},{"import": 1991,"src": 526,"name": "writer","kind": "const","type": 774,"value": 902},{"import": 1991,"src": 525,"name": "write","kind": "const","type": 773,"value": 901},{"import": 1991,"src": 1686,"name": "Self","kind": "const","type": 954,"value": 1247},{"import": 1991,"src": 1687,"name": "FifoType","kind": "const","type": 954,"value": 1249},{"import": 1992,"src": 1688,"name": "Reader"},{"import": 1992,"src": 1689,"name": "Writer"},{"import": 1992,"src": 1690,"name": "deinit"},{"import": 1992,"src": 1691,"name": "realign"},{"import": 1992,"src": 1692,"name": "shrink"},{"import": 1992,"src": 1693,"name": "ensureCapacity"},{"import": 1992,"src": 1694,"name": "ensureTotalCapacity"},{"import": 1992,"src": 1695,"name": "ensureUnusedCapacity"},{"import": 1992,"src": 1696,"name": "readableLength"},{"import": 1992,"src": 535,"name": "readableSlice","kind": "const","type": 798,"value": 926},{"import": 1992,"src": 536,"name": "discard","kind": "const","type": 799,"value": 927},{"import": 1992,"src": 1697,"name": "readItem"},{"import": 1992,"src": 1698,"name": "read"},{"import": 1992,"src": 1699,"name": "reader"},{"import": 1992,"src": 556,"name": "writableLength","kind": "const","type": 847,"value": 983},{"import": 1992,"src": 573,"name": "writableSlice","kind": "const","type": 866,"value": 1042},{"import": 1992,"src": 1700,"name": "writableWithSize"},{"import": 1992,"src": 574,"name": "update","kind": "const","type": 799,"value": 1043},{"import": 1992,"src": 557,"name": "writeAssumeCapacity","kind": "const","type": 848,"value": 984},{"import": 1992,"src": 1701,"name": "writeItem"},{"import": 1992,"src": 1702,"name": "writeItemAssumeCapacity"},{"import": 1992,"src": 1703,"name": "write"},{"import": 1992,"src": 1704,"name": "writer"},{"import": 1992,"src": 1705,"name": "unget"},{"import": 1992,"src": 1706,"name": "peekItem"},{"import": 1992,"src": 1707,"name": "pump"},{"import": 1992,"src": 555,"name": "init","kind": "const","type": 846,"value": 982},{"import": 1992,"src": 1708,"name": "Self","kind": "const","type": 954,"value": 1249},{"import": 1992,"src": 1709,"name": "SliceSelfArg","kind": "const","type": 954,"value": 1792},{"import": 1992,"src": 558,"name": "readableSliceMut","kind": "const","type": 866,"value": 1002},{"import": 1992,"src": 1710,"name": "readFn"},{"import": 1992,"src": 1711,"name": "appendWrite"},{"import": 1992,"src": 1712,"name": "rewind"},{"import": 1879,"src": 1145,"name": "Error","kind": "const","type": 954,"value": 972},{"import": 1879,"src": 187,"name": "write","kind": "const","type": 851,"value": 987},{"import": 1879,"src": 35,"name": "writeAll","kind": "const","type": 780,"value": 908},{"import": 1879,"src": 17,"name": "print","kind": "const","type": 1994,"value": 1244},{"import": 1879,"src": 249,"name": "writeByte","kind": "const","type": 778,"value": 906},{"import": 1879,"src": 198,"name": "writeByteNTimes","kind": "const","type": 887,"value": 1045},{"import": 1879,"src": 1146,"name": "writeIntNative"},{"import": 1879,"src": 1147,"name": "writeIntForeign"},{"import": 1879,"src": 1148,"name": "writeIntLittle"},{"import": 1879,"src": 1149,"name": "writeIntBig"},{"import": 1879,"src": 1150,"name": "writeInt"},{"import": 1879,"src": 1151,"name": "writeStruct"},{"import": 1879,"src": 1152,"name": "Self","kind": "const","type": 954,"value": 1251},{"import": 1962,"src": 1565,"name": "emerg"},{"import": 1962,"src": 1566,"name": "alert"},{"import": 1962,"src": 1567,"name": "crit"},{"import": 1962,"src": 397,"name": "err","kind": "const","type": 1995,"value": 1245},{"import": 1962,"src": 1568,"name": "warn"},{"import": 1962,"src": 1569,"name": "notice"},{"import": 1962,"src": 1570,"name": "info"},{"import": 1962,"src": 1571,"name": "debug"},{"import": 1971,"src": 579,"name": "next","kind": "const","type": 895,"value": 1055},{"import": 1971,"src": 1713,"name": "rest"},{"import": 1971,"src": 1714,"name": "Self","kind": "const","type": 954,"value": 1278},{"import": 1971,"src": 596,"name": "next","kind": "const","type": 908,"value": 1084},{"import": 1971,"src": 597,"name": "rest","kind": "const","type": 909,"value": 1085},{"import": 1971,"src": 1715,"name": "reset"},{"import": 1971,"src": 1716,"name": "Self","kind": "const","type": 954,"value": 1281},{"import": 1971,"src": 602,"name": "isSplitByte","kind": "const","type": 923,"value": 1102},{"import": 1282,"src": 1717,"name": "ArrayHashMap"},{"import": 1282,"src": 1718,"name": "ArrayHashMapUnmanaged"},{"import": 1282,"src": 1719,"name": "ArrayList","kind": "const","type": 1000,"value": 1150},{"import": 1282,"src": 1720,"name": "ArrayListAligned"},{"import": 1282,"src": 1721,"name": "ArrayListAlignedUnmanaged"},{"import": 1282,"src": 1722,"name": "ArrayListUnmanaged","kind": "const","type": 1200,"value": 1212},{"import": 1282,"src": 1723,"name": "AutoArrayHashMap"},{"import": 1282,"src": 1724,"name": "AutoArrayHashMapUnmanaged"},{"import": 1282,"src": 1725,"name": "AutoHashMap","kind": "const","type": 992,"value": 1146},{"import": 1282,"src": 1726,"name": "AutoHashMapUnmanaged","kind": "const","type": 1146,"value": 1196},{"import": 1282,"src": 1727,"name": "BoundedArray"},{"import": 1282,"src": 1728,"name": "BufMap"},{"import": 1282,"src": 1729,"name": "BufSet"},{"import": 1282,"src": 1730,"name": "ChildProcess"},{"import": 1282,"src": 1731,"name": "ComptimeStringMap"},{"import": 1282,"src": 1732,"name": "DynLib"},{"import": 1282,"src": 1733,"name": "DynamicBitSet"},{"import": 1282,"src": 1734,"name": "DynamicBitSetUnmanaged"},{"import": 1282,"src": 1735,"name": "EnumArray"},{"import": 1282,"src": 1736,"name": "EnumMap","kind": "const","type": 1192,"value": 1208},{"import": 1282,"src": 1737,"name": "EnumSet"},{"import": 1282,"src": 1738,"name": "HashMap"},{"import": 1282,"src": 1739,"name": "HashMapUnmanaged"},{"import": 1282,"src": 1740,"name": "MultiArrayList"},{"import": 1282,"src": 1741,"name": "PackedIntArray"},{"import": 1282,"src": 1742,"name": "PackedIntArrayEndian"},{"import": 1282,"src": 1743,"name": "PackedIntSlice"},{"import": 1282,"src": 1744,"name": "PackedIntSliceEndian"},{"import": 1282,"src": 1745,"name": "PriorityQueue"},{"import": 1282,"src": 1746,"name": "PriorityDequeue"},{"import": 1282,"src": 1747,"name": "Progress","kind": "const","type": 954,"value": 1997},{"import": 1282,"src": 1748,"name": "SemanticVersion"},{"import": 1282,"src": 1749,"name": "SinglyLinkedList","kind": "const","type": 1063,"value": 1175},{"import": 1282,"src": 1750,"name": "StaticBitSet","kind": "const","type": 1196,"value": 1210},{"import": 1282,"src": 1751,"name": "StringHashMap","kind": "const","type": 1213,"value": 1214},{"import": 1282,"src": 1752,"name": "StringHashMapUnmanaged"},{"import": 1282,"src": 1753,"name": "StringArrayHashMap"},{"import": 1282,"src": 1754,"name": "StringArrayHashMapUnmanaged"},{"import": 1282,"src": 1755,"name": "TailQueue","kind": "const","type": 1078,"value": 1181},{"import": 1282,"src": 1756,"name": "Target","kind": "const","type": 954,"value": 1012},{"import": 1282,"src": 1757,"name": "Thread","kind": "const","type": 954,"value": 1998},{"import": 1282,"src": 1758,"name": "array_hash_map"},{"import": 1282,"src": 1759,"name": "atomic","kind": "const","type": 954,"value": 1999},{"import": 1282,"src": 1760,"name": "base64"},{"import": 1282,"src": 1761,"name": "bit_set","kind": "const","type": 954,"value": 1969},{"import": 1282,"src": 1762,"name": "build"},{"import": 1282,"src": 1763,"name": "builtin","kind": "const","type": 954,"value": 1915},{"import": 1282,"src": 1764,"name": "c"},{"import": 1282,"src": 1765,"name": "coff","kind": "const","type": 954,"value": 2000},{"import": 1282,"src": 1766,"name": "compress"},{"import": 1282,"src": 1767,"name": "crypto"},{"import": 1282,"src": 1768,"name": "cstr"},{"import": 1282,"src": 1769,"name": "debug","kind": "const","type": 954,"value": 2001},{"import": 1282,"src": 1770,"name": "dwarf","kind": "const","type": 954,"value": 2002},{"import": 1282,"src": 1771,"name": "elf","kind": "const","type": 954,"value": 2003},{"import": 1282,"src": 1772,"name": "enums","kind": "const","type": 954,"value": 1967},{"import": 1282,"src": 1773,"name": "event","kind": "const","type": 954,"value": 2004},{"import": 1282,"src": 1774,"name": "fifo","kind": "const","type": 954,"value": 1992},{"import": 1282,"src": 1775,"name": "fmt","kind": "const","type": 954,"value": 2005},{"import": 1282,"src": 1776,"name": "fs","kind": "const","type": 954,"value": 2006},{"import": 1282,"src": 1777,"name": "hash","kind": "const","type": 954,"value": 2007},{"import": 1282,"src": 1778,"name": "hash_map","kind": "const","type": 954,"value": 1893},{"import": 1282,"src": 1779,"name": "heap","kind": "const","type": 954,"value": 1960},{"import": 1282,"src": 1780,"name": "io","kind": "const","type": 954,"value": 2008},{"import": 1282,"src": 1781,"name": "json"},{"import": 1282,"src": 1782,"name": "leb"},{"import": 1282,"src": 1783,"name": "log","kind": "const","type": 954,"value": 1962},{"import": 1282,"src": 1784,"name": "macho"},{"import": 1282,"src": 1785,"name": "math","kind": "const","type": 954,"value": 2009},{"import": 1282,"src": 1786,"name": "mem","kind": "const","type": 954,"value": 1971},{"import": 1282,"src": 1787,"name": "meta","kind": "const","type": 954,"value": 2010},{"import": 1282,"src": 1788,"name": "net"},{"import": 1282,"src": 1789,"name": "os","kind": "const","type": 954,"value": 2011},{"import": 1282,"src": 1790,"name": "once"},{"import": 1282,"src": 1791,"name": "packed_int_array"},{"import": 1282,"src": 1792,"name": "pdb","kind": "const","type": 954,"value": 2012},{"import": 1282,"src": 1793,"name": "process","kind": "const","type": 954,"value": 2013},{"import": 1282,"src": 1794,"name": "rand"},{"import": 1282,"src": 1795,"name": "sort","kind": "const","type": 954,"value": 2014},{"import": 1282,"src": 1796,"name": "ascii"},{"import": 1282,"src": 1797,"name": "testing","kind": "const","type": 954,"value": 2015},{"import": 1282,"src": 1798,"name": "time","kind": "const","type": 954,"value": 2016},{"import": 1282,"src": 1799,"name": "unicode","kind": "const","type": 954,"value": 2017},{"import": 1282,"src": 1800,"name": "valgrind"},{"import": 1282,"src": 1801,"name": "wasm"},{"import": 1282,"src": 1802,"name": "x"},{"import": 1282,"src": 1803,"name": "zig"},{"import": 1282,"src": 1804,"name": "start","kind": "const","type": 954,"value": 2018},{"import": 1283,"src": 1805,"name": "zig_version"},{"import": 1283,"src": 1806,"name": "zig_is_stage2","kind": "const","type": 967,"value": "false"},{"import": 1283,"src": 1807,"name": "stage2_arch"},{"import": 1283,"src": 1808,"name": "stage2_x86_cx16"},{"import": 1283,"src": 1809,"name": "output_mode","kind": "const","type": 2019,"value": null},{"import": 1283,"src": 1810,"name": "link_mode"},{"import": 1283,"src": 1811,"name": "is_test","kind": "const","type": 967,"value": "true"},{"import": 1283,"src": 1812,"name": "single_threaded","kind": "const","type": 967,"value": "false"},{"import": 1283,"src": 1813,"name": "abi","kind": "const","type": 1906,"value": null},{"import": 1283,"src": 1814,"name": "cpu","kind": "const","type": 1908,"value": null},{"import": 1283,"src": 1815,"name": "os","kind": "const","type": 1904,"value": null},{"import": 1283,"src": 1816,"name": "target","kind": "const","type": 1012,"value": null},{"import": 1283,"src": 1817,"name": "object_format","kind": "const","type": 1907,"value": null},{"import": 1283,"src": 1818,"name": "mode","kind": "const","type": 2020,"value": null},{"import": 1283,"src": 1819,"name": "link_libc","kind": "const","type": 967,"value": "false"},{"import": 1283,"src": 1820,"name": "link_libcpp"},{"import": 1283,"src": 1821,"name": "have_error_return_tracing"},{"import": 1283,"src": 1822,"name": "valgrind_support"},{"import": 1283,"src": 1823,"name": "position_independent_code"},{"import": 1283,"src": 1824,"name": "position_independent_executable","kind": "const","type": 967,"value": "false"},{"import": 1283,"src": 1825,"name": "strip_debug_info","kind": "const","type": 967,"value": "false"},{"import": 1283,"src": 1826,"name": "code_model"},{"import": 1283,"src": 1827,"name": "test_functions","kind": "var","type": 2021,"value": null},{"import": 1283,"src": 1828,"name": "test_io_mode","kind": "const","type": 1164,"value": null},{"import": 1283,"src": 1829,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 1284,"src": 1830,"name": "io_mode","kind": "const","type": 2022,"value": null},{"import": 1284,"src": 322,"name": "main","kind": "const","type": 8,"value": 487},{"import": 1284,"src": 413,"name": "log","kind": "const","type": 2023,"value": 1246},{"import": 1284,"src": 1831,"name": "main2"},{"import": 1284,"src": 1832,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 1284,"src": 1833,"name": "io","kind": "const","type": 954,"value": 2008},{"import": 1284,"src": 1834,"name": "builtin","kind": "const","type": 954,"value": 1283},{"import": 1284,"src": 1835,"name": "log_err_count","kind": "var","type": 965,"value": 0},{"import": 1284,"src": 1836,"name": "args_buffer","kind": "var","type": 2024,"value": "undefined"},{"import": 1284,"src": 1837,"name": "args_allocator","kind": "var","type": 1154,"value": null},{"import": 1284,"src": 344,"name": "processArgs","kind": "const","type": 8,"value": 531},{"import": 1312,"src": 1838,"name": "Error","kind": "const","type": 954,"value": 2039},{"import": 1312,"src": 1839,"name": "VTable","kind": "const","type": 954,"value": 2040},{"import": 1312,"src": 288,"name": "init","kind": "const","type": 2041,"value": 1247},{"import": 1312,"src": 1840,"name": "NoResize"},{"import": 1312,"src": 1841,"name": "NoOpFree"},{"import": 1312,"src": 1842,"name": "PanicFree"},{"import": 1312,"src": 285,"name": "rawAlloc","kind": "const","type": 373,"value": 406},{"import": 1312,"src": 308,"name": "rawResize","kind": "const","type": 395,"value": 433},{"import": 1312,"src": 224,"name": "rawFree","kind": "const","type": 290,"value": 310},{"import": 1312,"src": 63,"name": "create","kind": "const","type": 2042,"value": 1248},{"import": 1312,"src": 67,"name": "destroy","kind": "const","type": 2043,"value": 1249},{"import": 1312,"src": 152,"name": "alloc","kind": "const","type": 2044,"value": 1250},{"import": 1312,"src": 1843,"name": "allocWithOptions"},{"import": 1312,"src": 1844,"name": "allocWithOptionsRetAddr"},{"import": 1312,"src": 1845,"name": "allocSentinel"},{"import": 1312,"src": 136,"name": "alignedAlloc","kind": "const","type": 2045,"value": 1251},{"import": 1312,"src": 1846,"name": "allocAdvanced"},{"import": 1312,"src": 1847,"name": "Exact","kind": "const","type": 954,"value": 1501},{"import": 1312,"src": 219,"name": "allocAdvancedWithRetAddr","kind": "const","type": 2046,"value": 1252},{"import": 1312,"src": 287,"name": "resize","kind": "const","type": 2047,"value": 1253},{"import": 1312,"src": 1848,"name": "realloc"},{"import": 1312,"src": 111,"name": "reallocAtLeast","kind": "const","type": 2048,"value": 1254},{"import": 1312,"src": 1849,"name": "reallocAdvanced"},{"import": 1312,"src": 231,"name": "reallocAdvancedWithRetAddr","kind": "const","type": 2049,"value": 1255},{"import": 1312,"src": 251,"name": "shrink","kind": "const","type": 2050,"value": 1256},{"import": 1312,"src": 1850,"name": "alignedShrink"},{"import": 1312,"src": 315,"name": "alignedShrinkWithRetAddr","kind": "const","type": 2051,"value": 1257},{"import": 1312,"src": 153,"name": "free","kind": "const","type": 2052,"value": 1258},{"import": 1312,"src": 164,"name": "dupe","kind": "const","type": 2053,"value": 1259},{"import": 1312,"src": 385,"name": "dupeZ","kind": "const","type": 2054,"value": 1260},{"import": 1312,"src": 1851,"name": "allocBytes"},{"import": 1312,"src": 1852,"name": "reallocBytes"},{"import": 1312,"src": 306,"name": "shrinkBytes","kind": "const","type": 393,"value": 431},{"import": 1312,"src": 1853,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 1312,"src": 1854,"name": "assert","kind": "const","type": 30,"value": 38},{"import": 1312,"src": 1855,"name": "math","kind": "const","type": 954,"value": 2009},{"import": 1312,"src": 1856,"name": "mem","kind": "const","type": 954,"value": 1971},{"import": 1312,"src": 1857,"name": "Allocator","kind": "const","type": 954,"value": 1312},{"import": 1312,"src": 1858,"name": "builtin"},{"import": 1312,"src": 1859,"name": "AllocWithOptionsPayload"},{"import": 2001,"src": 246,"name": "setColor","kind": "const","type": 2056,"value": 1261},{"import": 2006,"src": 1860,"name": "Entry"},{"import": 2006,"src": 1861,"name": "Iterator"},{"import": 2006,"src": 1862,"name": "iterate"},{"import": 2006,"src": 1863,"name": "Walker"},{"import": 2006,"src": 1864,"name": "walk"},{"import": 2006,"src": 1865,"name": "OpenError"},{"import": 2006,"src": 1866,"name": "close"},{"import": 2006,"src": 65,"name": "openFile","kind": "const","type": 62,"value": 70},{"import": 2006,"src": 1867,"name": "openFileWasi"},{"import": 2006,"src": 222,"name": "openFileZ","kind": "const","type": 288,"value": 308},{"import": 2006,"src": 1868,"name": "openFileW"},{"import": 2006,"src": 1869,"name": "createFile"},{"import": 2006,"src": 1870,"name": "createFileWasi"},{"import": 2006,"src": 1871,"name": "createFileZ"},{"import": 2006,"src": 1872,"name": "createFileW"},{"import": 2006,"src": 1873,"name": "makeDir"},{"import": 2006,"src": 1874,"name": "makeDirZ"},{"import": 2006,"src": 1875,"name": "makeDirW"},{"import": 2006,"src": 1876,"name": "makePath"},{"import": 2006,"src": 1877,"name": "makeOpenPath"},{"import": 2006,"src": 1878,"name": "realpath"},{"import": 2006,"src": 1879,"name": "realpathZ"},{"import": 2006,"src": 1880,"name": "realpathW"},{"import": 2006,"src": 1881,"name": "realpathAlloc"},{"import": 2006,"src": 1882,"name": "setAsCwd"},{"import": 2006,"src": 1883,"name": "OpenDirOptions"},{"import": 2006,"src": 1884,"name": "openDir"},{"import": 2006,"src": 1885,"name": "openDirWasi"},{"import": 2006,"src": 1886,"name": "openDirZ"},{"import": 2006,"src": 1887,"name": "openDirW"},{"import": 2006,"src": 1888,"name": "DeleteFileError"},{"import": 2006,"src": 1889,"name": "deleteFile"},{"import": 2006,"src": 1890,"name": "deleteFileZ"},{"import": 2006,"src": 1891,"name": "deleteFileW"},{"import": 2006,"src": 1892,"name": "DeleteDirError"},{"import": 2006,"src": 1893,"name": "deleteDir"},{"import": 2006,"src": 1894,"name": "deleteDirZ"},{"import": 2006,"src": 1895,"name": "deleteDirW"},{"import": 2006,"src": 1896,"name": "RenameError"},{"import": 2006,"src": 1897,"name": "rename"},{"import": 2006,"src": 1898,"name": "renameZ"},{"import": 2006,"src": 1899,"name": "renameW"},{"import": 2006,"src": 1900,"name": "symLink"},{"import": 2006,"src": 1901,"name": "symLinkWasi"},{"import": 2006,"src": 1902,"name": "symLinkZ"},{"import": 2006,"src": 1903,"name": "symLinkW"},{"import": 2006,"src": 1904,"name": "readLink"},{"import": 2006,"src": 1905,"name": "readLinkWasi"},{"import": 2006,"src": 1906,"name": "readLinkZ"},{"import": 2006,"src": 1907,"name": "readLinkW"},{"import": 2006,"src": 1908,"name": "readFile"},{"import": 2006,"src": 1909,"name": "readFileAlloc"},{"import": 2006,"src": 1910,"name": "readFileAllocOptions"},{"import": 2006,"src": 1911,"name": "DeleteTreeError"},{"import": 2006,"src": 1912,"name": "deleteTree"},{"import": 2006,"src": 1913,"name": "writeFile"},{"import": 2006,"src": 1914,"name": "AccessError"},{"import": 2006,"src": 1915,"name": "access"},{"import": 2006,"src": 1916,"name": "accessZ"},{"import": 2006,"src": 1917,"name": "accessW"},{"import": 2006,"src": 1918,"name": "updateFile"},{"import": 2006,"src": 1919,"name": "copyFile"},{"import": 2006,"src": 1920,"name": "AtomicFileOptions"},{"import": 2006,"src": 1921,"name": "atomicFile"},{"import": 2006,"src": 1922,"name": "Stat"},{"import": 2006,"src": 1923,"name": "StatError"},{"import": 2006,"src": 1924,"name": "stat"},{"import": 2006,"src": 1925,"name": "StatFileError"},{"import": 2006,"src": 1926,"name": "statFile"},{"import": 2006,"src": 1927,"name": "ChmodError"},{"import": 2006,"src": 1928,"name": "chmod"},{"import": 2006,"src": 1929,"name": "chown"},{"import": 2006,"src": 1930,"name": "ChownError"},{"import": 2006,"src": 1931,"name": "IteratorError"},{"import": 2006,"src": 1932,"name": "openDirFlagsZ"},{"import": 2006,"src": 1933,"name": "openDirAccessMaskW"},{"import": 2002,"src": 104,"name": "allocator","kind": "const","type": 107,"value": 118},{"import": 2002,"src": 149,"name": "getSymbolName","kind": "const","type": 187,"value": 201},{"import": 2002,"src": 147,"name": "findCompileUnit","kind": "const","type": 183,"value": 197},{"import": 2002,"src": 150,"name": "getLineNumberInfo","kind": "const","type": 188,"value": 202},{"import": 2002,"src": 81,"name": "scanAllFunctions","kind": "const","type": 80,"value": 88},{"import": 2002,"src": 123,"name": "scanAllCompileUnits","kind": "const","type": 154,"value": 165},{"import": 2002,"src": 101,"name": "getAbbrevTable","kind": "const","type": 103,"value": 114},{"import": 2002,"src": 103,"name": "parseAbbrevTable","kind": "const","type": 105,"value": 116},{"import": 2002,"src": 113,"name": "parseDie","kind": "const","type": 2087,"value": 1262},{"import": 2002,"src": 119,"name": "getString","kind": "const","type": 142,"value": 153},{"import": 1893,"src": 141,"name": "isUsed","kind": "const","type": 177,"value": 191},{"import": 1893,"src": 541,"name": "isTombstone"},{"import": 1893,"src": 341,"name": "isFree","kind": "const","type": 177,"value": 515},{"import": 1893,"src": 244,"name": "takeFingerprint","kind": "const","type": 327,"value": 353},{"import": 1893,"src": 245,"name": "fill","kind": "const","type": 328,"value": 354},{"import": 1893,"src": 1934,"name": "remove"},{"import": 1893,"src": 1935,"name": "FingerPrint","kind": "const","type": 954,"value": 1522},{"import": 1893,"src": 1936,"name": "free","kind": "const","type": 1522,"value": 0},{"import": 1893,"src": 1937,"name": "tombstone"},{"import": 1893,"src": 1938,"name": "slot_free","kind": "const","type": 1015,"value": 0},{"import": 1893,"src": 1939,"name": "slot_tombstone"},{"import": 2002,"src": 166,"name": "reset","kind": "const","type": 231,"value": 245},{"import": 2002,"src": 158,"name": "init","kind": "const","type": 214,"value": 228},{"import": 2002,"src": 160,"name": "checkLineMatch","kind": "const","type": 225,"value": 239},{"import": 2001,"src": 168,"name": "deinit","kind": "const","type": 233,"value": 247},{"import": 2001,"src": 170,"name": "init","kind": "const","type": 237,"value": 251},{"import": 2001,"src": 171,"name": "next","kind": "const","type": 238,"value": 252},{"import": 2001,"src": 1940,"name": "fp_offset","kind": "const","type": 1034,"value": null},{"import": 2001,"src": 1941,"name": "fp_bias","kind": "const","type": 1034,"value": null},{"import": 2001,"src": 1942,"name": "pc_offset","kind": "const","type": 1034,"value": null},{"import": 2001,"src": 253,"name": "next_internal","kind": "const","type": 238,"value": 371},{"import": 2001,"src": 204,"name": "init","kind": "const","type": 269,"value": 287},{"import": 2001,"src": 1943,"name": "deinit"},{"import": 2001,"src": 56,"name": "getModuleForAddress","kind": "const","type": 53,"value": 61},{"import": 2001,"src": 1944,"name": "lookupModuleDyld"},{"import": 2001,"src": 1945,"name": "lookupModuleWin32"},{"import": 2001,"src": 59,"name": "lookupModuleDl","kind": "const","type": 56,"value": 64},{"import": 2001,"src": 1946,"name": "lookupModuleHaiku"},{"import": 2173,"src": 1947,"name": "State","kind": "const","type": 954,"value": 1545},{"import": 2173,"src": 210,"name": "allocator","kind": "const","type": 274,"value": 293},{"import": 2173,"src": 205,"name": "init","kind": "const","type": 270,"value": 288},{"import": 2173,"src": 417,"name": "deinit","kind": "const","type": 642,"value": 740},{"import": 2173,"src": 1948,"name": "BufNode","kind": "const","type": 954,"value": 1936},{"import": 2173,"src": 284,"name": "createNode","kind": "const","type": 372,"value": 405},{"import": 2173,"src": 281,"name": "alloc","kind": "const","type": 369,"value": 402},{"import": 2173,"src": 282,"name": "resize","kind": "const","type": 370,"value": 403},{"import": 2173,"src": 283,"name": "free","kind": "const","type": 371,"value": 404},{"import": 2001,"src": 252,"name": "deinit","kind": "const","type": 341,"value": 368},{"import": 2173,"src": 276,"name": "promote","kind": "const","type": 365,"value": 397},{"import": 2225,"src": 324,"name": "init","kind": "const","type": 446,"value": 490},{"import": 2225,"src": 325,"name": "update","kind": "const","type": 447,"value": 491},{"import": 2225,"src": 326,"name": "final","kind": "const","type": 448,"value": 492},{"import": 2225,"src": 274,"name": "hash","kind": "const","type": 266,"value": 395},{"import": 2225,"src": 353,"name": "round","kind": "const","type": 447,"value": 553},{"import": 1997,"src": 347,"name": "start","kind": "const","type": 471,"value": 534},{"import": 1997,"src": 376,"name": "completeOne","kind": "const","type": 472,"value": 597},{"import": 1997,"src": 350,"name": "end","kind": "const","type": 472,"value": 538},{"import": 1997,"src": 348,"name": "activate","kind": "const","type": 472,"value": 535},{"import": 1997,"src": 1949,"name": "setEstimatedTotalItems"},{"import": 1997,"src": 1950,"name": "setCompletedItems"},{"import": 2013,"src": 383,"name": "init","kind": "const","type": 501,"value": 624},{"import": 2013,"src": 1951,"name": "InitError"},{"import": 2013,"src": 1952,"name": "initWithAllocator"},{"import": 2013,"src": 1953,"name": "NextError","kind": "const","type": 954,"value": 2239},{"import": 2013,"src": 366,"name": "next","kind": "const","type": 503,"value": 575},{"import": 2013,"src": 1954,"name": "nextPosix"},{"import": 2013,"src": 1955,"name": "nextWasi"},{"import": 2013,"src": 1956,"name": "skip"},{"import": 2013,"src": 367,"name": "deinit","kind": "const","type": 505,"value": 577},{"import": 2013,"src": 1957,"name": "InnerType","kind": "const","type": 954,"value": 1661},{"import": 2016,"src": 1958,"name": "Error","kind": "const","type": 954,"value": 2232},{"import": 2016,"src": 346,"name": "start","kind": "const","type": 470,"value": 533},{"import": 2016,"src": 391,"name": "read","kind": "const","type": 561,"value": 643},{"import": 2016,"src": 1959,"name": "reset"},{"import": 2016,"src": 1960,"name": "lap"},{"import": 2016,"src": 1961,"name": "monotonic_clock_id","kind": "const","type": 1034,"value": null},{"import": 2016,"src": 405,"name": "clockNative","kind": "const","type": 14,"value": 692},{"import": 2016,"src": 406,"name": "nativeDurationToNanos","kind": "const","type": 603,"value": 693},{"import": 2013,"src": 400,"name": "init","kind": "const","type": 580,"value": 669},{"import": 2013,"src": 384,"name": "next","kind": "const","type": 544,"value": 625},{"import": 2013,"src": 1962,"name": "skip"},{"import": 1893,"src": 141,"name": "isUsed","kind": "const","type": 611,"value": 701},{"import": 1893,"src": 541,"name": "isTombstone"},{"import": 1893,"src": 341,"name": "isFree"},{"import": 1893,"src": 244,"name": "takeFingerprint"},{"import": 1893,"src": 245,"name": "fill"},{"import": 1893,"src": 1934,"name": "remove"},{"import": 1893,"src": 1935,"name": "FingerPrint","kind": "const","type": 954,"value": 1522},{"import": 1893,"src": 1936,"name": "free"},{"import": 1893,"src": 1937,"name": "tombstone"},{"import": 1893,"src": 1938,"name": "slot_free"},{"import": 1893,"src": 1939,"name": "slot_tombstone"},{"import": 1711,"src": 1963,"name": "Options","kind": "const","type": 954,"value": 2297},{"import": 1711,"src": 501,"name": "init","kind": "const","type": 730,"value": 853},{"import": 1711,"src": 523,"name": "writeAll","kind": "const","type": 2298,"value": 1263},{"import": 1711,"src": 1964,"name": "Help","kind": "const","type": 954,"value": 1711},{"import": 1711,"src": 1965,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 1711,"src": 1966,"name": "Command","kind": "const","type": 954,"value": 1202},{"import": 1711,"src": 1967,"name": "Braces","kind": "const","type": 954,"value": 1258},{"import": 1711,"src": 527,"name": "writeDescription","kind": "const","type": 2299,"value": 1264},{"import": 1711,"src": 529,"name": "writeHeader","kind": "const","type": 2300,"value": 1265},{"import": 1711,"src": 531,"name": "writeCommands","kind": "const","type": 2301,"value": 1266},{"import": 1711,"src": 532,"name": "writeOptions","kind": "const","type": 2302,"value": 1267},{"import": 1711,"src": 533,"name": "writeFooter","kind": "const","type": 2303,"value": 1268},{"import": 1711,"src": 530,"name": "getBraces","kind": "const","type": 783,"value": 911},{"import": 1711,"src": 528,"name": "writeNewLine","kind": "const","type": 2304,"value": 1269},{"import": 1242,"src": 572,"name": "initWithoutArg","kind": "const","type": 884,"value": 1028},{"import": 1242,"src": 571,"name": "initWithArg","kind": "const","type": 883,"value": 1027},{"import": 1242,"src": 505,"name": "deinit","kind": "const","type": 737,"value": 860},{"import": 1893,"src": 141,"name": "isUsed","kind": "const","type": 757,"value": 884},{"import": 1893,"src": 541,"name": "isTombstone","kind": "const","type": 757,"value": 952},{"import": 1893,"src": 341,"name": "isFree","kind": "const","type": 757,"value": 951},{"import": 1893,"src": 244,"name": "takeFingerprint","kind": "const","type": 327,"value": 949},{"import": 1893,"src": 245,"name": "fill","kind": "const","type": 820,"value": 950},{"import": 1893,"src": 1934,"name": "remove"},{"import": 1893,"src": 1935,"name": "FingerPrint","kind": "const","type": 954,"value": 1522},{"import": 1893,"src": 1936,"name": "free","kind": "const","type": 1522,"value": 0},{"import": 1893,"src": 1937,"name": "tombstone","kind": "const","type": 1522,"value": 1},{"import": 1893,"src": 1938,"name": "slot_free","kind": "const","type": 1015,"value": 0},{"import": 1893,"src": 1939,"name": "slot_tombstone","kind": "const","type": 1015,"value": 1},{"import": 1766,"src": 1968,"name": "Error","kind": "const","type": 954,"value": 1805},{"import": 1766,"src": 518,"name": "init","kind": "const","type": 767,"value": 894},{"import": 1766,"src": 520,"name": "parse","kind": "const","type": 769,"value": 896},{"import": 1766,"src": 1969,"name": "Parser","kind": "const","type": 954,"value": 1766},{"import": 1766,"src": 1970,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 1766,"src": 1971,"name": "Arg","kind": "const","type": 954,"value": 1199},{"import": 1766,"src": 1972,"name": "Command","kind": "const","type": 954,"value": 1202},{"import": 1766,"src": 1973,"name": "ArgsContext","kind": "const","type": 954,"value": 1242},{"import": 1766,"src": 1974,"name": "ErrorBuilder","kind": "const","type": 954,"value": 1800},{"import": 1766,"src": 1975,"name": "Token","kind": "const","type": 954,"value": 1835},{"import": 1766,"src": 1976,"name": "Tokenizer","kind": "const","type": 954,"value": 1767},{"import": 1766,"src": 1977,"name": "mem","kind": "const","type": 954,"value": 1971},{"import": 1766,"src": 1978,"name": "Allocator","kind": "const","type": 954,"value": 1312},{"import": 1766,"src": 1979,"name": "OptionTuple","kind": "const","type": 954,"value": 1279},{"import": 1766,"src": 1980,"name": "MatchedSubCommand","kind": "const","type": 954,"value": 1715},{"import": 1766,"src": 1981,"name": "InternalError","kind": "const","type": 954,"value": 2328},{"import": 1766,"src": 1982,"name": "ShortOption","kind": "const","type": 954,"value": 1844},{"import": 1766,"src": 548,"name": "consumeCommandArg","kind": "const","type": 829,"value": 962},{"import": 1766,"src": 552,"name": "parseOption","kind": "const","type": 831,"value": 966},{"import": 1766,"src": 568,"name": "parseShortOption","kind": "const","type": 831,"value": 1024},{"import": 1766,"src": 569,"name": "parseLongOption","kind": "const","type": 831,"value": 1025},{"import": 1766,"src": 583,"name": "optionTokenToOptionTuple","kind": "const","type": 899,"value": 1059},{"import": 1766,"src": 592,"name": "consumeArgValue","kind": "const","type": 905,"value": 1068},{"import": 1766,"src": 567,"name": "processValue","kind": "const","type": 881,"value": 1023},{"import": 1766,"src": 581,"name": "consumeNValues","kind": "const","type": 897,"value": 1057},{"import": 1766,"src": 582,"name": "consumeValuesTillNextOption","kind": "const","type": 898,"value": 1058},{"import": 1766,"src": 580,"name": "verifyAndAppendValue","kind": "const","type": 896,"value": 1056},{"import": 1766,"src": 553,"name": "parseSubCommand","kind": "const","type": 832,"value": 967},{"import": 2329,"src": 519,"name": "init","kind": "const","type": 768,"value": 895},{"import": 2329,"src": 545,"name": "nextToken","kind": "const","type": 826,"value": 959},{"import": 2329,"src": 562,"name": "nextRawArg","kind": "const","type": 878,"value": 1018},{"import": 2329,"src": 594,"name": "nextNonOptionArg","kind": "const","type": 878,"value": 1082},{"import": 2329,"src": 570,"name": "restArg","kind": "const","type": 882,"value": 1026},{"import": 2329,"src": 564,"name": "processLongOption","kind": "const","type": 879,"value": 1020},{"import": 2329,"src": 565,"name": "processShortOption","kind": "const","type": 879,"value": 1021},{"import": 1800,"src": 1983,"name": "PrintError","kind": "const","type": 954,"value": 972},{"import": 1800,"src": 543,"name": "init","kind": "const","type": 824,"value": 957},{"import": 1800,"src": 551,"name": "setErr","kind": "const","type": 830,"value": 965},{"import": 1800,"src": 586,"name": "setArg","kind": "const","type": 902,"value": 1062},{"import": 1800,"src": 544,"name": "setCmd","kind": "const","type": 825,"value": 958},{"import": 1800,"src": 546,"name": "setProvidedArg","kind": "const","type": 827,"value": 960},{"import": 1800,"src": 521,"name": "logError","kind": "const","type": 770,"value": 897},{"import": 1800,"src": 1984,"name": "ErrorBuilder","kind": "const","type": 954,"value": 1800},{"import": 1800,"src": 1985,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 1800,"src": 1986,"name": "Arg","kind": "const","type": 954,"value": 1199},{"import": 1800,"src": 1987,"name": "Command","kind": "const","type": 954,"value": 1202},{"import": 1800,"src": 1988,"name": "ParserError","kind": "const","type": 954,"value": 1805},{"import": 1800,"src": 1989,"name": "log","kind": "const","type": 954,"value": 1962},{"import": 2329,"src": 1990,"name": "Tag","kind": "const","type": 954,"value": 1836},{"import": 2329,"src": 566,"name": "init","kind": "const","type": 880,"value": 1022},{"import": 2329,"src": 549,"name": "isShortOption","kind": "const","type": 828,"value": 963},{"import": 2329,"src": 550,"name": "isLongOption","kind": "const","type": 828,"value": 964},{"import": 2329,"src": 547,"name": "isHelpOption","kind": "const","type": 828,"value": 961},{"import": 1766,"src": 584,"name": "init","kind": "const","type": 900,"value": 1060},{"import": 1766,"src": 585,"name": "next","kind": "const","type": 901,"value": 1061},{"import": 1766,"src": 589,"name": "getValue","kind": "const","type": 904,"value": 1065},{"import": 1766,"src": 591,"name": "getRemainTail","kind": "const","type": 904,"value": 1067},{"import": 1766,"src": 587,"name": "hasValue","kind": "const","type": 903,"value": 1063},{"import": 1766,"src": 588,"name": "hasEmptyValue","kind": "const","type": 903,"value": 1064},{"import": 1766,"src": 590,"name": "hasTail","kind": "const","type": 903,"value": 1066},{"import": 1766,"src": 598,"name": "isAtEnd","kind": "const","type": 903,"value": 1086},{"import": 1877,"src": 1991,"name": "Target","kind": "const","type": 954,"value": 1012},{"import": 1877,"src": 1992,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 1877,"src": 1993,"name": "mem"},{"import": 1877,"src": 1994,"name": "Version","kind": "const","type": 954,"value": 2375},{"import": 1879,"src": 609,"name": "Writer","kind": "const","type": 969,"value": 1137},{"import": 1879,"src": 1995,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 1879,"src": 1996,"name": "assert"},{"import": 1879,"src": 1997,"name": "mem","kind": "const","type": 954,"value": 1971},{"import": 1881,"src": 1998,"name": "File","kind": "const","type": 954,"value": 971},{"import": 1881,"src": 1999,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 1881,"src": 2000,"name": "builtin","kind": "const","type": 954,"value": 1283},{"import": 1881,"src": 2001,"name": "os","kind": "const","type": 954,"value": 2011},{"import": 1881,"src": 2002,"name": "io","kind": "const","type": 954,"value": 2008},{"import": 1881,"src": 2003,"name": "mem"},{"import": 1881,"src": 2004,"name": "math"},{"import": 1881,"src": 2005,"name": "assert"},{"import": 1881,"src": 2006,"name": "windows"},{"import": 1881,"src": 2007,"name": "Os"},{"import": 1881,"src": 2008,"name": "maxInt"},{"import": 1881,"src": 2009,"name": "is_windows","kind": "const","type": 967,"value": "false"},{"import": 1915,"src": 2010,"name": "Data","kind": "const","type": 954,"value": 2377},{"import": 1893,"src": 614,"name": "getAutoHashFn","kind": "const","type": 985,"value": 1142},{"import": 1893,"src": 615,"name": "getAutoEqlFn","kind": "const","type": 986,"value": 1143},{"import": 1893,"src": 618,"name": "AutoHashMap","kind": "const","type": 992,"value": 1146},{"import": 1893,"src": 661,"name": "AutoHashMapUnmanaged","kind": "const","type": 1146,"value": 1196},{"import": 1893,"src": 613,"name": "AutoContext","kind": "const","type": 983,"value": 1141},{"import": 1893,"src": 678,"name": "StringHashMap","kind": "const","type": 1213,"value": 1214},{"import": 1893,"src": 2011,"name": "StringHashMapUnmanaged"},{"import": 1893,"src": 2012,"name": "StringContext","kind": "const","type": 954,"value": 1210},{"import": 1893,"src": 429,"name": "eqlString","kind": "const","type": 71,"value": 761},{"import": 1893,"src": 428,"name": "hashString","kind": "const","type": 490,"value": 760},{"import": 1893,"src": 2013,"name": "StringIndexContext"},{"import": 1893,"src": 2014,"name": "StringIndexAdapter"},{"import": 1893,"src": 2015,"name": "DefaultMaxLoadPercentage"},{"import": 1893,"src": 2016,"name": "default_max_load_percentage","kind": "const","type": 1034,"value": null},{"import": 1893,"src": 616,"name": "verifyContext","kind": "const","type": 987,"value": 1144},{"import": 1893,"src": 617,"name": "HashMap","kind": "const","type": 989,"value": 1145},{"import": 1893,"src": 619,"name": "HashMapUnmanaged","kind": "const","type": 993,"value": 1147},{"import": 1893,"src": 2017,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 1893,"src": 2018,"name": "assert","kind": "const","type": 30,"value": 38},{"import": 1893,"src": 2019,"name": "autoHash"},{"import": 1893,"src": 2020,"name": "debug","kind": "const","type": 954,"value": 2001},{"import": 1893,"src": 2021,"name": "math","kind": "const","type": 954,"value": 2009},{"import": 1893,"src": 2022,"name": "mem","kind": "const","type": 954,"value": 1971},{"import": 1893,"src": 2023,"name": "meta","kind": "const","type": 954,"value": 2010},{"import": 1893,"src": 2024,"name": "trait","kind": "const","type": 954,"value": 2378},{"import": 1893,"src": 2025,"name": "Allocator","kind": "const","type": 954,"value": 1312},{"import": 1893,"src": 2026,"name": "Wyhash","kind": "const","type": 954,"value": 2379},{"import": 1893,"src": 2027,"name": "testing"},{"import": 1893,"src": 2028,"name": "expect"},{"import": 1893,"src": 2029,"name": "expectEqual"},{"import": 2001,"src": 145,"name": "getSymbolAtAddress","kind": "const","type": 181,"value": 195},{"import": 1900,"src": 622,"name": "ArrayList","kind": "const","type": 1000,"value": 1150},{"import": 1900,"src": 621,"name": "ArrayListAligned","kind": "const","type": 996,"value": 1149},{"import": 1900,"src": 677,"name": "ArrayListUnmanaged","kind": "const","type": 1200,"value": 1212},{"import": 1900,"src": 676,"name": "ArrayListAlignedUnmanaged","kind": "const","type": 1197,"value": 1211},{"import": 1900,"src": 2030,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 1900,"src": 2031,"name": "debug","kind": "const","type": 954,"value": 2001},{"import": 1900,"src": 2032,"name": "assert","kind": "const","type": 30,"value": 38},{"import": 1900,"src": 2033,"name": "testing"},{"import": 1900,"src": 2034,"name": "mem","kind": "const","type": 954,"value": 1971},{"import": 1900,"src": 2035,"name": "Allocator","kind": "const","type": 954,"value": 1312},{"import": 1900,"src": 2036,"name": "Item"},{"import": 1900,"src": 2037,"name": "ItemUnmanaged"},{"import": 1877,"src": 2038,"name": "Tag","kind": "const","type": 954,"value": 1011},{"import": 1877,"src": 2039,"name": "WindowsVersion","kind": "const","type": 954,"value": 2382},{"import": 1877,"src": 2040,"name": "LinuxVersionRange","kind": "const","type": 954,"value": 2383},{"import": 1877,"src": 2041,"name": "VersionRange","kind": "const","type": 954,"value": 2384},{"import": 1877,"src": 2042,"name": "TaggedVersionRange"},{"import": 1877,"src": 2043,"name": "getVersionRange"},{"import": 1877,"src": 2044,"name": "isAtLeast"},{"import": 1877,"src": 2045,"name": "requiresLibC"},{"import": 1905,"src": 2046,"name": "Feature","kind": "const","type": 954,"value": 956},{"import": 1905,"src": 2047,"name": "featureSet","kind": "const","type": 2,"value": 2},{"import": 1905,"src": 2048,"name": "featureSetHas"},{"import": 1905,"src": 2049,"name": "featureSetHasAny","kind": "const","type": 1119,"value": 1193},{"import": 1905,"src": 2050,"name": "featureSetHasAll"},{"import": 1905,"src": 2051,"name": "all_features"},{"import": 1905,"src": 2052,"name": "cpu","kind": "const","type": 954,"value": 2385},{"import": 1905,"src": 2053,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 1905,"src": 2054,"name": "CpuFeature","kind": "const","type": 954,"value": 2386},{"import": 1905,"src": 2055,"name": "CpuModel","kind": "const","type": 954,"value": 2387},{"import": 1877,"src": 2056,"name": "default"},{"import": 1877,"src": 2057,"name": "isGnu"},{"import": 1877,"src": 2058,"name": "isMusl"},{"import": 1877,"src": 2059,"name": "floatAbi"},{"import": 1877,"src": 2060,"name": "fileExt"},{"import": 1877,"src": 2061,"name": "Feature","kind": "const","type": 954,"value": 2386},{"import": 1877,"src": 2062,"name": "Arch","kind": "const","type": 954,"value": 968},{"import": 1877,"src": 2063,"name": "Model","kind": "const","type": 954,"value": 2387},{"import": 1877,"src": 2064,"name": "baseline"},{"import": 1909,"src": 627,"name": "FixedBufferStream","kind": "const","type": 1022,"value": 1155},{"import": 1909,"src": 82,"name": "fixedBufferStream","kind": "const","type": 2389,"value": 1270},{"import": 1909,"src": 2065,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 1909,"src": 2066,"name": "io","kind": "const","type": 954,"value": 2008},{"import": 1909,"src": 2067,"name": "testing"},{"import": 1909,"src": 2068,"name": "mem","kind": "const","type": 954,"value": 1971},{"import": 1909,"src": 2069,"name": "assert"},{"import": 1909,"src": 626,"name": "NonSentinelSpan","kind": "const","type": 1021,"value": 1154},{"import": 1910,"src": 628,"name": "Reader","kind": "const","type": 1024,"value": 1156},{"import": 1910,"src": 2070,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 1910,"src": 2071,"name": "math"},{"import": 1910,"src": 2072,"name": "assert","kind": "const","type": 30,"value": 38},{"import": 1910,"src": 2073,"name": "mem","kind": "const","type": 954,"value": 1971},{"import": 1910,"src": 2074,"name": "testing"},{"import": 1914,"src": 629,"name": "SeekableStream","kind": "const","type": 1028,"value": 1157},{"import": 1914,"src": 2075,"name": "std"},{"import": 1915,"src": 2076,"name": "zig_version"},{"import": 1915,"src": 2077,"name": "zig_is_stage2"},{"import": 1915,"src": 2078,"name": "output_mode"},{"import": 1915,"src": 2079,"name": "link_mode"},{"import": 1915,"src": 2080,"name": "is_test"},{"import": 1915,"src": 2081,"name": "single_threaded"},{"import": 1915,"src": 2082,"name": "abi"},{"import": 1915,"src": 2083,"name": "cpu"},{"import": 1915,"src": 2084,"name": "os"},{"import": 1915,"src": 2085,"name": "target"},{"import": 1915,"src": 2086,"name": "object_format"},{"import": 1915,"src": 2087,"name": "mode"},{"import": 1915,"src": 2088,"name": "link_libc"},{"import": 1915,"src": 2089,"name": "link_libcpp"},{"import": 1915,"src": 2090,"name": "have_error_return_tracing"},{"import": 1915,"src": 2091,"name": "valgrind_support"},{"import": 1915,"src": 2092,"name": "position_independent_code"},{"import": 1915,"src": 2093,"name": "position_independent_executable"},{"import": 1915,"src": 2094,"name": "strip_debug_info"},{"import": 1915,"src": 2095,"name": "code_model"},{"import": 1915,"src": 2096,"name": "subsystem"},{"import": 1915,"src": 2097,"name": "StackTrace","kind": "const","type": 954,"value": 1175},{"import": 1915,"src": 2098,"name": "GlobalLinkage","kind": "const","type": 954,"value": 2390},{"import": 1915,"src": 2099,"name": "AtomicOrder","kind": "const","type": 954,"value": 2391},{"import": 1915,"src": 2100,"name": "ReduceOp"},{"import": 1915,"src": 2101,"name": "AtomicRmwOp","kind": "const","type": 954,"value": 2392},{"import": 1915,"src": 2102,"name": "CodeModel"},{"import": 1915,"src": 2103,"name": "Mode","kind": "const","type": 954,"value": 2020},{"import": 1915,"src": 2104,"name": "CallingConvention","kind": "const","type": 954,"value": 2393},{"import": 1915,"src": 2105,"name": "AddressSpace","kind": "const","type": 954,"value": 2394},{"import": 1915,"src": 2106,"name": "SourceLocation"},{"import": 1915,"src": 2107,"name": "TypeId","kind": "const","type": 954,"value": 1050},{"import": 1915,"src": 2108,"name": "TypeInfo","kind": "const","type": 954,"value": 1051},{"import": 1915,"src": 2109,"name": "FloatMode"},{"import": 1915,"src": 2110,"name": "Endian","kind": "const","type": 954,"value": 1013},{"import": 1915,"src": 2111,"name": "Signedness","kind": "const","type": 954,"value": 960},{"import": 1915,"src": 2112,"name": "OutputMode","kind": "const","type": 954,"value": 2019},{"import": 1915,"src": 2113,"name": "LinkMode"},{"import": 1915,"src": 2114,"name": "WasiExecModel"},{"import": 1915,"src": 2115,"name": "Version","kind": "const","type": 954,"value": 2375},{"import": 1915,"src": 2116,"name": "testVersionParse"},{"import": 1915,"src": 2117,"name": "CallOptions","kind": "const","type": 954,"value": 2395},{"import": 1915,"src": 2118,"name": "PrefetchOptions"},{"import": 1915,"src": 2119,"name": "ExportOptions","kind": "const","type": 954,"value": 2396},{"import": 1915,"src": 2120,"name": "ExternOptions","kind": "const","type": 954,"value": 2397},{"import": 1915,"src": 2121,"name": "TestFn","kind": "const","type": 954,"value": 2398},{"import": 1915,"src": 2122,"name": "PanicFn","kind": "const","type": 954,"value": 0},{"import": 1915,"src": 2123,"name": "panic","kind": "const","type": 0,"value": 0},{"import": 1915,"src": 0,"name": "default_panic","kind": "const","type": 0,"value": 0},{"import": 1915,"src": 2124,"name": "builtin","kind": "const","type": 954,"value": 1283},{"import": 1915,"src": 2125,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 1915,"src": 2126,"name": "root","kind": "const","type": 954,"value": 1284},{"import": 1915,"src": 2127,"name": "Size","kind": "const","type": 954,"value": 1060},{"import": 1935,"src": 643,"name": "SinglyLinkedList","kind": "const","type": 1063,"value": 1175},{"import": 1935,"src": 649,"name": "TailQueue","kind": "const","type": 1078,"value": 1181},{"import": 1935,"src": 2128,"name": "std"},{"import": 1935,"src": 2129,"name": "debug"},{"import": 1935,"src": 2130,"name": "assert"},{"import": 1935,"src": 2131,"name": "testing"},{"import": 1935,"src": 2132,"name": "mem"},{"import": 1935,"src": 2133,"name": "Allocator"},{"import": 1935,"src": 2134,"name": "Data"},{"import": 1935,"src": 2135,"name": "insertAfter"},{"import": 1935,"src": 2136,"name": "removeNext"},{"import": 1935,"src": 2137,"name": "findLast"},{"import": 1935,"src": 2138,"name": "countChildren"},{"import": 1938,"src": 648,"name": "Queue","kind": "const","type": 1075,"value": 1180},{"import": 1938,"src": 2139,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 1938,"src": 2140,"name": "builtin"},{"import": 1938,"src": 2141,"name": "assert"},{"import": 1938,"src": 2142,"name": "expect"},{"import": 1938,"src": 2143,"name": "Context"},{"import": 1938,"src": 2144,"name": "puts_per_thread"},{"import": 1938,"src": 2145,"name": "put_thread_count"},{"import": 1938,"src": 2146,"name": "startPuts"},{"import": 1938,"src": 2147,"name": "startGets"},{"import": 1941,"src": 373,"name": "tryLock","kind": "const","type": 520,"value": 593},{"import": 1941,"src": 12,"name": "lock","kind": "const","type": 10,"value": 12},{"import": 1941,"src": 21,"name": "unlock","kind": "const","type": 10,"value": 22},{"import": 1941,"src": 2148,"name": "AtomicMutex","kind": "const","type": 954,"value": 2032},{"import": 1941,"src": 2149,"name": "PthreadMutex"},{"import": 1941,"src": 2150,"name": "Dummy"},{"import": 1941,"src": 2151,"name": "WindowsMutex"},{"import": 1941,"src": 2152,"name": "Mutex","kind": "const","type": 954,"value": 1941},{"import": 1941,"src": 2153,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 1941,"src": 2154,"name": "builtin","kind": "const","type": 954,"value": 1283},{"import": 1941,"src": 2155,"name": "os","kind": "const","type": 954,"value": 2011},{"import": 1941,"src": 2156,"name": "assert"},{"import": 1941,"src": 2157,"name": "windows"},{"import": 1941,"src": 2158,"name": "linux","kind": "const","type": 954,"value": 2405},{"import": 1941,"src": 2159,"name": "testing"},{"import": 1941,"src": 2160,"name": "StaticResetEvent"},{"import": 1941,"src": 2161,"name": "Impl","kind": "const","type": 954,"value": 2032},{"import": 1941,"src": 2162,"name": "TestContext"},{"import": 1941,"src": 2163,"name": "worker"},{"import": 1942,"src": 650,"name": "Atomic","kind": "const","type": 1080,"value": 1182},{"import": 1942,"src": 2164,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 1942,"src": 2165,"name": "testing"},{"import": 1942,"src": 2166,"name": "target"},{"import": 1942,"src": 2167,"name": "Ordering"},{"import": 1942,"src": 2168,"name": "atomicIntTypes"},{"import": 1942,"src": 2169,"name": "atomic_rmw_orderings"},{"import": 1942,"src": 2170,"name": "atomic_cmpxchg_orderings"},{"import": 1945,"src": 2171,"name": "Loop","kind": "const","type": 954,"value": 2407},{"import": 1945,"src": 2172,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 1945,"src": 2173,"name": "builtin","kind": "const","type": 954,"value": 1283},{"import": 1945,"src": 2174,"name": "root","kind": "const","type": 954,"value": 1284},{"import": 1945,"src": 2175,"name": "assert"},{"import": 1945,"src": 2176,"name": "testing"},{"import": 1945,"src": 2177,"name": "mem"},{"import": 1945,"src": 2178,"name": "os","kind": "const","type": 954,"value": 2011},{"import": 1945,"src": 2179,"name": "windows","kind": "const","type": 954,"value": 2408},{"import": 1945,"src": 2180,"name": "maxInt"},{"import": 1945,"src": 2181,"name": "Thread","kind": "const","type": 954,"value": 1998},{"import": 1945,"src": 2182,"name": "is_windows"},{"import": 1945,"src": 2183,"name": "testEventLoop"},{"import": 1945,"src": 2184,"name": "testEventLoop2"},{"import": 1945,"src": 2185,"name": "testRunDetachedData"},{"import": 1945,"src": 2186,"name": "testRunDetached"},{"import": 1945,"src": 2187,"name": "testSleep"},{"import": 1945,"src": 2188,"name": "Read","kind": "const","type": 954,"value": 2409},{"import": 1945,"src": 2189,"name": "ReadV","kind": "const","type": 954,"value": 2410},{"import": 1945,"src": 2190,"name": "Write","kind": "const","type": 954,"value": 2411},{"import": 1945,"src": 2191,"name": "WriteV","kind": "const","type": 954,"value": 2412},{"import": 1945,"src": 2192,"name": "PWrite","kind": "const","type": 954,"value": 2413},{"import": 1945,"src": 2193,"name": "PWriteV","kind": "const","type": 954,"value": 2414},{"import": 1945,"src": 2194,"name": "PRead","kind": "const","type": 954,"value": 2415},{"import": 1945,"src": 2195,"name": "PReadV","kind": "const","type": 954,"value": 2416},{"import": 1945,"src": 2196,"name": "Open","kind": "const","type": 954,"value": 2417},{"import": 1945,"src": 2197,"name": "OpenAt","kind": "const","type": 954,"value": 2418},{"import": 1945,"src": 2198,"name": "Close","kind": "const","type": 954,"value": 2419},{"import": 1945,"src": 2199,"name": "FAccessAt","kind": "const","type": 954,"value": 2420},{"import": 1948,"src": 651,"name": "Stack","kind": "const","type": 1088,"value": 1183},{"import": 1948,"src": 2200,"name": "std"},{"import": 1948,"src": 2201,"name": "builtin","kind": "const","type": 954,"value": 1283},{"import": 1948,"src": 2202,"name": "assert"},{"import": 1948,"src": 2203,"name": "expect"},{"import": 1948,"src": 2204,"name": "Context"},{"import": 1948,"src": 2205,"name": "puts_per_thread"},{"import": 1948,"src": 2206,"name": "put_thread_count"},{"import": 1948,"src": 2207,"name": "startPuts"},{"import": 1948,"src": 2208,"name": "startGets"},{"import": 1945,"src": 2209,"name": "overlapped_init","kind": "const","type": 976,"value": null},{"import": 1945,"src": 2210,"name": "Overlapped","kind": "const","type": 954,"value": 976},{"import": 1945,"src": 2211,"name": "Id","kind": "const","type": 954,"value": 2422},{"import": 1945,"src": 2212,"name": "EventFd","kind": "const","type": 954,"value": 1090},{"import": 1945,"src": 2213,"name": "Basic"},{"import": 1945,"src": 2214,"name": "KEventFd"},{"import": 1945,"src": 2215,"name": "KEventBasic"},{"import": 1952,"src": 2216,"name": "Config","kind": "const","type": 954,"value": 1141},{"import": 1952,"src": 659,"name": "GeneralPurposeAllocator","kind": "const","type": 1139,"value": 1194},{"import": 1952,"src": 2217,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 1952,"src": 2218,"name": "builtin","kind": "const","type": 954,"value": 1283},{"import": 1952,"src": 2219,"name": "log","kind": "const","type": 954,"value": 1163},{"import": 1952,"src": 2220,"name": "math","kind": "const","type": 954,"value": 2009},{"import": 1952,"src": 2221,"name": "assert","kind": "const","type": 30,"value": 38},{"import": 1952,"src": 2222,"name": "mem","kind": "const","type": 954,"value": 1971},{"import": 1952,"src": 2223,"name": "Allocator","kind": "const","type": 954,"value": 1312},{"import": 1952,"src": 2224,"name": "page_size","kind": "const","type": 1034,"value": null},{"import": 1952,"src": 2225,"name": "StackTrace","kind": "const","type": 954,"value": 1175},{"import": 1952,"src": 2226,"name": "SlotIndex","kind": "const","type": 954,"value": 1143},{"import": 1952,"src": 2227,"name": "sys_can_stack_trace","kind": "const","type": 967,"value": "true"},{"import": 1952,"src": 2228,"name": "default_test_stack_trace_frames","kind": "const","type": 965,"value": 8},{"import": 1952,"src": 2229,"name": "default_sys_stack_trace_frames","kind": "const","type": 965,"value": 8},{"import": 1952,"src": 2230,"name": "default_stack_trace_frames","kind": "const","type": 965,"value": 8},{"import": 1952,"src": 2231,"name": "TraceKind","kind": "const","type": 954,"value": 1650},{"import": 1952,"src": 2232,"name": "test_config"},{"import": 1952,"src": 407,"name": "usedBits","kind": "const","type": 606,"value": 696},{"import": 1952,"src": 412,"name": "stackTracePtr","kind": "const","type": 630,"value": 723},{"import": 1952,"src": 2233,"name": "captureStackTrace"},{"import": 1959,"src": 269,"name": "syscall0","kind": "const","type": 359,"value": 390},{"import": 1959,"src": 258,"name": "syscall1","kind": "const","type": 349,"value": 378},{"import": 1959,"src": 273,"name": "syscall2","kind": "const","type": 363,"value": 394},{"import": 1959,"src": 267,"name": "syscall3","kind": "const","type": 357,"value": 388},{"import": 1959,"src": 264,"name": "syscall4","kind": "const","type": 353,"value": 384},{"import": 1959,"src": 2234,"name": "syscall5"},{"import": 1959,"src": 304,"name": "syscall6","kind": "const","type": 388,"value": 426},{"import": 1959,"src": 2235,"name": "clone"},{"import": 1959,"src": 263,"name": "restore","kind": "const","type": 352,"value": 383},{"import": 1959,"src": 262,"name": "restore_rt","kind": "const","type": 352,"value": 382},{"import": 1959,"src": 2236,"name": "SYS","kind": "const","type": 954,"value": 1537},{"import": 1959,"src": 2237,"name": "MMAP2_UNIT","kind": "const","type": 1034,"value": null},{"import": 1959,"src": 2238,"name": "O","kind": "const","type": 954,"value": 2425},{"import": 1959,"src": 2239,"name": "F"},{"import": 1959,"src": 2240,"name": "LOCK","kind": "const","type": 954,"value": 2426},{"import": 1959,"src": 2241,"name": "MAP","kind": "const","type": 954,"value": 2427},{"import": 1959,"src": 2242,"name": "VDSO","kind": "const","type": 954,"value": 2428},{"import": 1959,"src": 2243,"name": "HWCAP","kind": "const","type": 954,"value": 2429},{"import": 1959,"src": 2244,"name": "Flock"},{"import": 1959,"src": 2245,"name": "msghdr"},{"import": 1959,"src": 2246,"name": "msghdr_const"},{"import": 1959,"src": 2247,"name": "blksize_t","kind": "const","type": 954,"value": 1084},{"import": 1959,"src": 2248,"name": "nlink_t","kind": "const","type": 954,"value": 1134},{"import": 1959,"src": 2249,"name": "time_t"},{"import": 1959,"src": 2250,"name": "mode_t","kind": "const","type": 954,"value": 1134},{"import": 1959,"src": 2251,"name": "off_t","kind": "const","type": 954,"value": 1091},{"import": 1959,"src": 2252,"name": "ino_t","kind": "const","type": 954,"value": 988},{"import": 1959,"src": 2253,"name": "dev_t","kind": "const","type": 954,"value": 988},{"import": 1959,"src": 2254,"name": "blkcnt_t","kind": "const","type": 954,"value": 1091},{"import": 1959,"src": 2255,"name": "Stat","kind": "const","type": 954,"value": 1149},{"import": 1959,"src": 2256,"name": "timeval"},{"import": 1959,"src": 2257,"name": "timezone"},{"import": 1959,"src": 2258,"name": "mcontext_t","kind": "const","type": 954,"value": 2430},{"import": 1959,"src": 2259,"name": "ucontext_t","kind": "const","type": 954,"value": 2431},{"import": 1959,"src": 2260,"name": "Elf_Symndx","kind": "const","type": 954,"value": 1134},{"import": 1959,"src": 2261,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 1959,"src": 2262,"name": "maxInt"},{"import": 1959,"src": 2263,"name": "linux","kind": "const","type": 954,"value": 2405},{"import": 1959,"src": 2264,"name": "iovec"},{"import": 1959,"src": 2265,"name": "iovec_const"},{"import": 1959,"src": 2266,"name": "socklen_t"},{"import": 1959,"src": 2267,"name": "stack_t","kind": "const","type": 954,"value": 2432},{"import": 1959,"src": 2268,"name": "sigset_t","kind": "const","type": 954,"value": 2433},{"import": 1959,"src": 2269,"name": "uid_t","kind": "const","type": 954,"value": 1134},{"import": 1959,"src": 2270,"name": "gid_t","kind": "const","type": 954,"value": 1134},{"import": 1959,"src": 2271,"name": "pid_t"},{"import": 1959,"src": 2272,"name": "sockaddr"},{"import": 1959,"src": 2273,"name": "timespec","kind": "const","type": 954,"value": 1558},{"import": 1960,"src": 2274,"name": "LoggingAllocator"},{"import": 1960,"src": 2275,"name": "loggingAllocator"},{"import": 1960,"src": 2276,"name": "ScopedLoggingAllocator"},{"import": 1960,"src": 2277,"name": "LogToWriterAllocator"},{"import": 1960,"src": 2278,"name": "logToWriterAllocator"},{"import": 1960,"src": 2279,"name": "ArenaAllocator","kind": "const","type": 954,"value": 1491},{"import": 1960,"src": 2280,"name": "GeneralPurposeAllocator","kind": "const","type": 1139,"value": 1194},{"import": 1960,"src": 2281,"name": "c_allocator"},{"import": 1960,"src": 2282,"name": "raw_c_allocator"},{"import": 1960,"src": 2283,"name": "page_allocator","kind": "const","type": 1312,"value": null},{"import": 1960,"src": 280,"name": "alignPageAllocLen","kind": "const","type": 368,"value": 401},{"import": 1960,"src": 2284,"name": "next_mmap_addr_hint","kind": "var","type": 1334,"value": "null"},{"import": 1960,"src": 2285,"name": "HeapAllocator"},{"import": 1960,"src": 2286,"name": "FixedBufferAllocator","kind": "const","type": 954,"value": 1154},{"import": 1960,"src": 2287,"name": "ThreadSafeFixedBufferAllocator"},{"import": 1960,"src": 2288,"name": "stackFallback"},{"import": 1960,"src": 2289,"name": "StackFallbackAllocator"},{"import": 1960,"src": 2290,"name": "testAllocator"},{"import": 1960,"src": 2291,"name": "testAllocatorAligned"},{"import": 1960,"src": 2292,"name": "testAllocatorLargeAlignment"},{"import": 1960,"src": 2293,"name": "testAllocatorAlignedShrink"},{"import": 1960,"src": 2294,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 1960,"src": 2295,"name": "builtin","kind": "const","type": 954,"value": 1283},{"import": 1960,"src": 2296,"name": "root"},{"import": 1960,"src": 2297,"name": "debug","kind": "const","type": 954,"value": 2001},{"import": 1960,"src": 2298,"name": "assert","kind": "const","type": 30,"value": 38},{"import": 1960,"src": 2299,"name": "testing"},{"import": 1960,"src": 2300,"name": "mem","kind": "const","type": 954,"value": 1971},{"import": 1960,"src": 2301,"name": "os","kind": "const","type": 954,"value": 2011},{"import": 1960,"src": 2302,"name": "c"},{"import": 1960,"src": 2303,"name": "maxInt"},{"import": 1960,"src": 2304,"name": "Allocator","kind": "const","type": 954,"value": 1312},{"import": 1960,"src": 2305,"name": "CAllocator"},{"import": 1960,"src": 2306,"name": "c_allocator_vtable"},{"import": 1960,"src": 2307,"name": "raw_c_allocator_vtable"},{"import": 1960,"src": 2308,"name": "rawCAlloc"},{"import": 1960,"src": 2309,"name": "rawCResize"},{"import": 1960,"src": 2310,"name": "rawCFree"},{"import": 1960,"src": 2311,"name": "PageAllocator","kind": "const","type": 954,"value": 2434},{"import": 1960,"src": 2312,"name": "WasmPageAllocator"},{"import": 1960,"src": 2313,"name": "sliceContainsPtr"},{"import": 1960,"src": 410,"name": "sliceContainsSlice","kind": "const","type": 613,"value": 704},{"import": 1960,"src": 2314,"name": "test_fixed_buffer_allocator_memory"},{"import": 1962,"src": 2315,"name": "Level","kind": "const","type": 954,"value": 2435},{"import": 1962,"src": 2316,"name": "default_level","kind": "const","type": 2435,"value": null},{"import": 1962,"src": 2317,"name": "level","kind": "const","type": 2435,"value": null},{"import": 1962,"src": 2318,"name": "ScopeLevel","kind": "const","type": 954,"value": 2436},{"import": 1962,"src": 2319,"name": "defaultLog"},{"import": 1962,"src": 664,"name": "scoped","kind": "const","type": 1162,"value": 1199},{"import": 1962,"src": 2320,"name": "default","kind": "const","type": 954,"value": 1260},{"import": 1962,"src": 2321,"name": "emerg"},{"import": 1962,"src": 2322,"name": "alert"},{"import": 1962,"src": 2323,"name": "crit"},{"import": 1962,"src": 2324,"name": "err","kind": "const","type": 1995,"value": 1245},{"import": 1962,"src": 2325,"name": "warn"},{"import": 1962,"src": 2326,"name": "notice"},{"import": 1962,"src": 2327,"name": "info"},{"import": 1962,"src": 2328,"name": "debug"},{"import": 1962,"src": 2329,"name": "std"},{"import": 1962,"src": 2330,"name": "builtin","kind": "const","type": 954,"value": 1283},{"import": 1962,"src": 2331,"name": "root","kind": "const","type": 954,"value": 1284},{"import": 1962,"src": 2332,"name": "scope_levels","kind": "const","type": 2437,"value": null},{"import": 1962,"src": 409,"name": "log","kind": "const","type": 2438,"value": 1271},{"import": 1966,"src": 665,"name": "MakeSettings","kind": "const","type": 1176,"value": 1200},{"import": 1966,"src": 2333,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 1966,"src": 2334,"name": "EnumField","kind": "const","type": 954,"value": 1184},{"import": 1966,"src": 666,"name": "MakeOptions","kind": "const","type": 1179,"value": 1201},{"import": 1967,"src": 2335,"name": "EnumFieldStruct"},{"import": 1967,"src": 2336,"name": "valuesFromFields"},{"import": 1967,"src": 2337,"name": "values"},{"import": 1967,"src": 2338,"name": "directEnumArray"},{"import": 1967,"src": 2339,"name": "directEnumArrayDefault"},{"import": 1967,"src": 2340,"name": "nameCast"},{"import": 1967,"src": 2341,"name": "EnumSet"},{"import": 1967,"src": 673,"name": "EnumMap","kind": "const","type": 1192,"value": 1208},{"import": 1967,"src": 2342,"name": "EnumArray"},{"import": 1967,"src": 2343,"name": "NoExtension"},{"import": 1967,"src": 2344,"name": "IndexedSet"},{"import": 1967,"src": 671,"name": "IndexedMap","kind": "const","type": 1188,"value": 1206},{"import": 1967,"src": 2345,"name": "IndexedArray"},{"import": 1967,"src": 670,"name": "ensureIndexer","kind": "const","type": 1187,"value": 1205},{"import": 1967,"src": 669,"name": "EnumIndexer","kind": "const","type": 1185,"value": 1204},{"import": 1967,"src": 2346,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 1967,"src": 2347,"name": "assert"},{"import": 1967,"src": 2348,"name": "testing"},{"import": 1967,"src": 2349,"name": "EnumField","kind": "const","type": 954,"value": 1184},{"import": 1967,"src": 2350,"name": "directEnumArrayLen"},{"import": 1967,"src": 2351,"name": "NoExt"},{"import": 1967,"src": 668,"name": "ascByValue","kind": "const","type": 1183,"value": 1203},{"import": 1969,"src": 675,"name": "StaticBitSet","kind": "const","type": 1196,"value": 1210},{"import": 1969,"src": 674,"name": "IntegerBitSet","kind": "const","type": 1194,"value": 1209},{"import": 1969,"src": 2352,"name": "ArrayBitSet"},{"import": 1969,"src": 2353,"name": "DynamicBitSetUnmanaged"},{"import": 1969,"src": 2354,"name": "DynamicBitSet"},{"import": 1969,"src": 2355,"name": "IteratorOptions"},{"import": 1969,"src": 2356,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 1969,"src": 2357,"name": "assert","kind": "const","type": 30,"value": 38},{"import": 1969,"src": 2358,"name": "Allocator"},{"import": 1969,"src": 2359,"name": "BitSetIterator"},{"import": 1969,"src": 2360,"name": "testing"},{"import": 1969,"src": 2361,"name": "testBitSet"},{"import": 1969,"src": 2362,"name": "testStaticBitSet"},{"import": 1971,"src": 2363,"name": "page_size","kind": "const","type": 1034,"value": null},{"import": 1971,"src": 2364,"name": "byte_size_in_bits"},{"import": 1971,"src": 2365,"name": "Allocator","kind": "const","type": 954,"value": 1312},{"import": 1971,"src": 2366,"name": "ValidationAllocator"},{"import": 1971,"src": 2367,"name": "validationWrap"},{"import": 1971,"src": 330,"name": "alignAllocLen","kind": "const","type": 368,"value": 496},{"import": 1971,"src": 165,"name": "copy","kind": "const","type": 2439,"value": 1272},{"import": 1971,"src": 2368,"name": "copyBackwards"},{"import": 1971,"src": 256,"name": "set","kind": "const","type": 2440,"value": 1273},{"import": 1971,"src": 340,"name": "zeroes","kind": "const","type": 2441,"value": 1274},{"import": 1971,"src": 2369,"name": "zeroInit"},{"import": 1971,"src": 2370,"name": "order"},{"import": 1971,"src": 2371,"name": "lessThan"},{"import": 1971,"src": 74,"name": "eql","kind": "const","type": 1041,"value": 1161},{"import": 1971,"src": 2372,"name": "indexOfDiff"},{"import": 1971,"src": 625,"name": "Span","kind": "const","type": 1019,"value": 1153},{"import": 1971,"src": 77,"name": "span","kind": "const","type": 2442,"value": 1275},{"import": 1971,"src": 2373,"name": "spanZ"},{"import": 1971,"src": 213,"name": "sliceTo","kind": "const","type": 2443,"value": 1276},{"import": 1971,"src": 228,"name": "len","kind": "const","type": 2444,"value": 1277},{"import": 1971,"src": 2374,"name": "lenZ"},{"import": 1971,"src": 305,"name": "indexOfSentinel","kind": "const","type": 2445,"value": 1278},{"import": 1971,"src": 2375,"name": "allEqual"},{"import": 1971,"src": 2376,"name": "dupe"},{"import": 1971,"src": 2377,"name": "dupeZ"},{"import": 1971,"src": 576,"name": "trimLeft","kind": "const","type": 2446,"value": 1279},{"import": 1971,"src": 2378,"name": "trimRight"},{"import": 1971,"src": 2379,"name": "trim"},{"import": 1971,"src": 221,"name": "indexOfScalar","kind": "const","type": 2447,"value": 1280},{"import": 1971,"src": 2380,"name": "lastIndexOfScalar"},{"import": 1971,"src": 238,"name": "indexOfScalarPos","kind": "const","type": 2448,"value": 1281},{"import": 1971,"src": 2381,"name": "indexOfAny"},{"import": 1971,"src": 2382,"name": "lastIndexOfAny"},{"import": 1971,"src": 2383,"name": "indexOfAnyPos"},{"import": 1971,"src": 2384,"name": "indexOf"},{"import": 1971,"src": 2385,"name": "lastIndexOfLinear"},{"import": 1971,"src": 600,"name": "indexOfPosLinear","kind": "const","type": 2449,"value": 1282},{"import": 1971,"src": 2386,"name": "lastIndexOf"},{"import": 1971,"src": 593,"name": "indexOfPos","kind": "const","type": 2450,"value": 1283},{"import": 1971,"src": 2387,"name": "count"},{"import": 1971,"src": 577,"name": "containsAtLeast","kind": "const","type": 2451,"value": 1284},{"import": 1971,"src": 310,"name": "readVarInt","kind": "const","type": 2452,"value": 1285},{"import": 1971,"src": 195,"name": "readIntNative","kind": "const","type": 2453,"value": 1286},{"import": 1971,"src": 230,"name": "readIntForeign","kind": "const","type": 2454,"value": 1287},{"import": 1971,"src": 2388,"name": "readIntLittle","kind": "const","type": 2453,"value": 1286},{"import": 1971,"src": 2389,"name": "readIntBig"},{"import": 1971,"src": 2390,"name": "readIntSliceNative"},{"import": 1971,"src": 2391,"name": "readIntSliceForeign"},{"import": 1971,"src": 2392,"name": "readIntSliceLittle"},{"import": 1971,"src": 2393,"name": "readIntSliceBig"},{"import": 1971,"src": 97,"name": "readInt","kind": "const","type": 2455,"value": 1288},{"import": 1971,"src": 2394,"name": "readIntSlice"},{"import": 1971,"src": 2395,"name": "writeIntNative"},{"import": 1971,"src": 2396,"name": "writeIntForeign"},{"import": 1971,"src": 2397,"name": "writeIntLittle"},{"import": 1971,"src": 2398,"name": "writeIntBig"},{"import": 1971,"src": 2399,"name": "writeInt"},{"import": 1971,"src": 2400,"name": "writeIntSliceLittle"},{"import": 1971,"src": 2401,"name": "writeIntSliceBig"},{"import": 1971,"src": 2402,"name": "writeIntSliceNative"},{"import": 1971,"src": 2403,"name": "writeIntSliceForeign"},{"import": 1971,"src": 2404,"name": "writeIntSlice"},{"import": 1971,"src": 2405,"name": "bswapAllFields"},{"import": 1971,"src": 595,"name": "tokenize","kind": "const","type": 2456,"value": 1289},{"import": 1971,"src": 578,"name": "split","kind": "const","type": 2457,"value": 1290},{"import": 1971,"src": 563,"name": "startsWith","kind": "const","type": 2458,"value": 1291},{"import": 1971,"src": 2406,"name": "endsWith"},{"import": 1971,"src": 687,"name": "TokenIterator","kind": "const","type": 1280,"value": 1228},{"import": 1971,"src": 686,"name": "SplitIterator","kind": "const","type": 1277,"value": 1227},{"import": 1971,"src": 2407,"name": "join"},{"import": 1971,"src": 2408,"name": "joinZ"},{"import": 1971,"src": 2409,"name": "concat"},{"import": 1971,"src": 2410,"name": "min"},{"import": 1971,"src": 2411,"name": "max"},{"import": 1971,"src": 143,"name": "swap","kind": "const","type": 2459,"value": 1292},{"import": 1971,"src": 2412,"name": "reverse"},{"import": 1971,"src": 2413,"name": "rotate"},{"import": 1971,"src": 2414,"name": "replace"},{"import": 1971,"src": 2415,"name": "replaceScalar"},{"import": 1971,"src": 2416,"name": "collapseRepeatsLen"},{"import": 1971,"src": 2417,"name": "collapseRepeats"},{"import": 1971,"src": 2418,"name": "replacementSize"},{"import": 1971,"src": 2419,"name": "replaceOwned"},{"import": 1971,"src": 2420,"name": "littleToNative"},{"import": 1971,"src": 2421,"name": "bigToNative"},{"import": 1971,"src": 2422,"name": "toNative"},{"import": 1971,"src": 2423,"name": "nativeTo"},{"import": 1971,"src": 2424,"name": "nativeToLittle"},{"import": 1971,"src": 2425,"name": "nativeToBig"},{"import": 1971,"src": 328,"name": "alignPointerOffset","kind": "const","type": 2460,"value": 1293},{"import": 1971,"src": 278,"name": "alignPointer","kind": "const","type": 2461,"value": 1294},{"import": 1971,"src": 202,"name": "asBytes","kind": "const","type": 2462,"value": 1295},{"import": 1971,"src": 2426,"name": "toBytes"},{"import": 1971,"src": 2427,"name": "bytesAsValue"},{"import": 1971,"src": 2428,"name": "bytesToValue"},{"import": 1971,"src": 307,"name": "bytesAsSlice","kind": "const","type": 2463,"value": 1296},{"import": 1971,"src": 250,"name": "sliceAsBytes","kind": "const","type": 2464,"value": 1297},{"import": 1971,"src": 135,"name": "alignForward","kind": "const","type": 51,"value": 185},{"import": 1971,"src": 242,"name": "alignForwardGeneric","kind": "const","type": 2465,"value": 1298},{"import": 1971,"src": 2429,"name": "doNotOptimizeAway"},{"import": 1971,"src": 359,"name": "alignBackwardAnyAlign","kind": "const","type": 51,"value": 562},{"import": 1971,"src": 379,"name": "alignBackward","kind": "const","type": 51,"value": 617},{"import": 1971,"src": 313,"name": "alignBackwardGeneric","kind": "const","type": 2466,"value": 1299},{"import": 1971,"src": 2430,"name": "isValidAlign"},{"import": 1971,"src": 2431,"name": "isAlignedAnyAlign"},{"import": 1971,"src": 277,"name": "isAligned","kind": "const","type": 268,"value": 398},{"import": 1971,"src": 327,"name": "isAlignedGeneric","kind": "const","type": 2467,"value": 1300},{"import": 1971,"src": 2432,"name": "alignInBytes"},{"import": 1971,"src": 2433,"name": "alignInSlice"},{"import": 1971,"src": 2434,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 1971,"src": 2435,"name": "builtin","kind": "const","type": 954,"value": 1283},{"import": 1971,"src": 2436,"name": "debug","kind": "const","type": 954,"value": 2001},{"import": 1971,"src": 2437,"name": "assert","kind": "const","type": 30,"value": 38},{"import": 1971,"src": 2438,"name": "math","kind": "const","type": 954,"value": 2009},{"import": 1971,"src": 2439,"name": "mem","kind": "const","type": 954,"value": 1971},{"import": 1971,"src": 2440,"name": "meta","kind": "const","type": 954,"value": 2010},{"import": 1971,"src": 2441,"name": "trait","kind": "const","type": 954,"value": 2378},{"import": 1971,"src": 2442,"name": "testing"},{"import": 1971,"src": 2443,"name": "Endian","kind": "const","type": 954,"value": 1013},{"import": 1971,"src": 2444,"name": "native_endian","kind": "const","type": 1013,"value": null},{"import": 1971,"src": 2445,"name": "fail_allocator"},{"import": 1971,"src": 2446,"name": "failAllocator_vtable"},{"import": 1971,"src": 2447,"name": "failAllocatorAlloc"},{"import": 1971,"src": 644,"name": "SliceTo","kind": "const","type": 1068,"value": 1176},{"import": 1971,"src": 335,"name": "lenSliceTo","kind": "const","type": 2468,"value": 1301},{"import": 1971,"src": 2448,"name": "boyerMooreHorspoolPreprocessReverse"},{"import": 1971,"src": 601,"name": "boyerMooreHorspoolPreprocess","kind": "const","type": 922,"value": 1101},{"import": 1971,"src": 2449,"name": "joinMaybeZ"},{"import": 1971,"src": 2450,"name": "testReadIntImpl"},{"import": 1971,"src": 2451,"name": "testWriteIntImpl"},{"import": 1971,"src": 2452,"name": "testCollapseRepeats"},{"import": 1971,"src": 641,"name": "CopyPtrAttrs","kind": "const","type": 1058,"value": 1173},{"import": 1971,"src": 642,"name": "AsBytesReturnType","kind": "const","type": 1062,"value": 1174},{"import": 1971,"src": 2453,"name": "BytesAsValueReturnType"},{"import": 1971,"src": 654,"name": "BytesAsSliceReturnType","kind": "const","type": 1097,"value": 1186},{"import": 1971,"src": 647,"name": "SliceAsBytesReturnType","kind": "const","type": 1073,"value": 1179},{"import": 1971,"src": 2454,"name": "AlignedSlice"},{"import": 1893,"src": 141,"name": "isUsed"},{"import": 1893,"src": 541,"name": "isTombstone"},{"import": 1893,"src": 341,"name": "isFree"},{"import": 1893,"src": 244,"name": "takeFingerprint"},{"import": 1893,"src": 245,"name": "fill"},{"import": 1893,"src": 1934,"name": "remove"},{"import": 1893,"src": 1935,"name": "FingerPrint","kind": "const","type": 954,"value": 1522},{"import": 1893,"src": 1936,"name": "free"},{"import": 1893,"src": 1937,"name": "tombstone"},{"import": 1893,"src": 1938,"name": "slot_free"},{"import": 1893,"src": 1939,"name": "slot_tombstone"},{"import": 2000,"src": 2455,"name": "Misc","kind": "const","type": 954,"value": 2471},{"import": 1893,"src": 141,"name": "isUsed"},{"import": 1893,"src": 541,"name": "isTombstone"},{"import": 1893,"src": 341,"name": "isFree"},{"import": 1893,"src": 244,"name": "takeFingerprint"},{"import": 1893,"src": 245,"name": "fill"},{"import": 1893,"src": 1934,"name": "remove"},{"import": 1893,"src": 1935,"name": "FingerPrint","kind": "const","type": 954,"value": 1522},{"import": 1893,"src": 1936,"name": "free"},{"import": 1893,"src": 1937,"name": "tombstone"},{"import": 1893,"src": 1938,"name": "slot_free"},{"import": 1893,"src": 1939,"name": "slot_tombstone"},{"import": 1991,"src": 682,"name": "BufferedWriter","kind": "const","type": 1246,"value": 1221},{"import": 1991,"src": 524,"name": "bufferedWriter","kind": "const","type": 2474,"value": 1302},{"import": 1991,"src": 2456,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 1991,"src": 2457,"name": "io","kind": "const","type": 954,"value": 2008},{"import": 1992,"src": 2458,"name": "LinearFifoBufferType","kind": "const","type": 954,"value": 1250},{"import": 1992,"src": 683,"name": "LinearFifo","kind": "const","type": 1248,"value": 1222},{"import": 1992,"src": 2459,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 1992,"src": 2460,"name": "math","kind": "const","type": 954,"value": 2009},{"import": 1992,"src": 2461,"name": "mem","kind": "const","type": 954,"value": 1971},{"import": 1992,"src": 2462,"name": "Allocator"},{"import": 1992,"src": 2463,"name": "debug","kind": "const","type": 954,"value": 2001},{"import": 1992,"src": 2464,"name": "assert","kind": "const","type": 30,"value": 38},{"import": 1992,"src": 2465,"name": "testing"},{"import": 1997,"src": 2466,"name": "Node","kind": "const","type": 954,"value": 1586},{"import": 1997,"src": 345,"name": "start","kind": "const","type": 469,"value": 532},{"import": 1997,"src": 375,"name": "maybeRefresh","kind": "const","type": 473,"value": 596},{"import": 1997,"src": 349,"name": "refresh","kind": "const","type": 473,"value": 536},{"import": 1997,"src": 351,"name": "log","kind": "const","type": 2475,"value": 1303},{"import": 1997,"src": 2467,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 1997,"src": 2468,"name": "builtin","kind": "const","type": 954,"value": 1283},{"import": 1997,"src": 2469,"name": "windows"},{"import": 1997,"src": 2470,"name": "testing"},{"import": 1997,"src": 2471,"name": "assert"},{"import": 1997,"src": 2472,"name": "Progress","kind": "const","type": 954,"value": 1997},{"import": 1997,"src": 374,"name": "refreshWithHeldLock","kind": "const","type": 473,"value": 594},{"import": 1997,"src": 390,"name": "bufWrite","kind": "const","type": 2476,"value": 1304},{"import": 1998,"src": 2473,"name": "AutoResetEvent","kind": "const","type": 954,"value": 2479},{"import": 1998,"src": 2474,"name": "Futex"},{"import": 1998,"src": 2475,"name": "ResetEvent","kind": "const","type": 954,"value": 2480},{"import": 1998,"src": 2476,"name": "StaticResetEvent","kind": "const","type": 954,"value": 2028},{"import": 1998,"src": 2477,"name": "Mutex","kind": "const","type": 954,"value": 1941},{"import": 1998,"src": 2478,"name": "Semaphore"},{"import": 1998,"src": 2479,"name": "Condition"},{"import": 1998,"src": 2480,"name": "RwLock"},{"import": 1998,"src": 2481,"name": "use_pthreads","kind": "const","type": 967,"value": "false"},{"import": 1998,"src": 2482,"name": "max_name_len"},{"import": 1998,"src": 2483,"name": "SetNameError"},{"import": 1998,"src": 2484,"name": "setName"},{"import": 1998,"src": 2485,"name": "GetNameError"},{"import": 1998,"src": 2486,"name": "getName"},{"import": 1998,"src": 2487,"name": "Id","kind": "const","type": 954,"value": 988},{"import": 1998,"src": 16,"name": "getCurrentId","kind": "const","type": 14,"value": 16},{"import": 1998,"src": 2488,"name": "CpuCountError"},{"import": 1998,"src": 2489,"name": "getCpuCount"},{"import": 1998,"src": 2490,"name": "SpawnConfig"},{"import": 1998,"src": 2491,"name": "SpawnError"},{"import": 1998,"src": 2492,"name": "spawn"},{"import": 1998,"src": 2493,"name": "Handle"},{"import": 1998,"src": 2494,"name": "getHandle"},{"import": 1998,"src": 2495,"name": "detach"},{"import": 1998,"src": 2496,"name": "join"},{"import": 1998,"src": 2497,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 1998,"src": 2498,"name": "builtin","kind": "const","type": 954,"value": 1283},{"import": 1998,"src": 2499,"name": "os","kind": "const","type": 954,"value": 2011},{"import": 1998,"src": 2500,"name": "assert"},{"import": 1998,"src": 2501,"name": "target","kind": "const","type": 1012,"value": null},{"import": 1998,"src": 2502,"name": "Atomic","kind": "const","type": 1080,"value": 1182},{"import": 1998,"src": 2503,"name": "is_gnu"},{"import": 1998,"src": 2504,"name": "Thread"},{"import": 1998,"src": 2505,"name": "Impl","kind": "const","type": 954,"value": 2481},{"import": 1998,"src": 2506,"name": "Completion","kind": "const","type": 954,"value": 1081},{"import": 1998,"src": 2507,"name": "callFn"},{"import": 1998,"src": 2508,"name": "UnsupportedImpl"},{"import": 1998,"src": 2509,"name": "WindowsThreadImpl"},{"import": 1998,"src": 2510,"name": "PosixThreadImpl"},{"import": 1998,"src": 2511,"name": "LinuxThreadImpl","kind": "const","type": 954,"value": 2481},{"import": 1998,"src": 2512,"name": "testThreadName"},{"import": 1998,"src": 2513,"name": "testIncrementNotify"},{"import": 1998,"src": 2514,"name": "testWaitForSignal"},{"import": 1999,"src": 2515,"name": "Ordering"},{"import": 1999,"src": 2516,"name": "Stack","kind": "const","type": 1088,"value": 1183},{"import": 1999,"src": 2517,"name": "Queue","kind": "const","type": 1075,"value": 1180},{"import": 1999,"src": 2518,"name": "Atomic","kind": "const","type": 1080,"value": 1182},{"import": 1999,"src": 2519,"name": "fence"},{"import": 1999,"src": 2520,"name": "compilerFence"},{"import": 1999,"src": 265,"name": "spinLoopHint","kind": "const","type": 355,"value": 386},{"import": 1999,"src": 2521,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 1999,"src": 2522,"name": "target","kind": "const","type": 1012,"value": null},{"import": 2000,"src": 2523,"name": "MachineType"},{"import": 2000,"src": 2524,"name": "IMAGE_FILE_RELOCS_STRIPPED"},{"import": 2000,"src": 2525,"name": "IMAGE_FILE_DEBUG_STRIPPED"},{"import": 2000,"src": 2526,"name": "IMAGE_FILE_EXECUTABLE_IMAGE"},{"import": 2000,"src": 2527,"name": "IMAGE_FILE_32BIT_MACHINE"},{"import": 2000,"src": 2528,"name": "IMAGE_FILE_LARGE_ADDRESS_AWARE"},{"import": 2000,"src": 2529,"name": "IMAGE_SCN_CNT_INITIALIZED_DATA"},{"import": 2000,"src": 2530,"name": "IMAGE_SCN_MEM_READ"},{"import": 2000,"src": 2531,"name": "IMAGE_SCN_CNT_CODE"},{"import": 2000,"src": 2532,"name": "IMAGE_SCN_MEM_EXECUTE"},{"import": 2000,"src": 2533,"name": "IMAGE_SCN_MEM_WRITE"},{"import": 2000,"src": 2534,"name": "CoffError"},{"import": 2000,"src": 2535,"name": "Coff","kind": "const","type": 954,"value": 2482},{"import": 2000,"src": 2536,"name": "Section","kind": "const","type": 954,"value": 1219},{"import": 2000,"src": 2537,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 2000,"src": 2538,"name": "io"},{"import": 2000,"src": 2539,"name": "mem","kind": "const","type": 954,"value": 1971},{"import": 2000,"src": 2540,"name": "os"},{"import": 2000,"src": 2541,"name": "File","kind": "const","type": 954,"value": 971},{"import": 2000,"src": 2542,"name": "ArrayList","kind": "const","type": 1000,"value": 1150},{"import": 2000,"src": 2543,"name": "IMAGE_FILE_MACHINE_I386"},{"import": 2000,"src": 2544,"name": "IMAGE_FILE_MACHINE_IA64"},{"import": 2000,"src": 2545,"name": "IMAGE_FILE_MACHINE_AMD64"},{"import": 2000,"src": 2546,"name": "IMAGE_NT_OPTIONAL_HDR32_MAGIC"},{"import": 2000,"src": 2547,"name": "IMAGE_NT_OPTIONAL_HDR64_MAGIC"},{"import": 2000,"src": 2548,"name": "IMAGE_NUMBEROF_DIRECTORY_ENTRIES","kind": "const","type": 1034,"value": null},{"import": 2000,"src": 2549,"name": "IMAGE_DEBUG_TYPE_CODEVIEW"},{"import": 2000,"src": 2550,"name": "DEBUG_DIRECTORY"},{"import": 2000,"src": 2551,"name": "CoffHeader","kind": "const","type": 954,"value": 2483},{"import": 2000,"src": 2552,"name": "OptionalHeader","kind": "const","type": 954,"value": 2484},{"import": 2000,"src": 2553,"name": "DebugDirectoryEntry"},{"import": 2000,"src": 2554,"name": "SectionHeader","kind": "const","type": 954,"value": 1983},{"import": 2001,"src": 2555,"name": "runtime_safety","kind": "const","type": 967,"value": "true"},{"import": 2001,"src": 2556,"name": "LineInfo","kind": "const","type": 954,"value": 1528},{"import": 2001,"src": 2557,"name": "SymbolInfo","kind": "const","type": 954,"value": 1466},{"import": 2001,"src": 2558,"name": "warn"},{"import": 2001,"src": 268,"name": "print","kind": "const","type": 2485,"value": 1305},{"import": 2001,"src": 2559,"name": "getStderrMutex"},{"import": 2001,"src": 49,"name": "getSelfDebugInfo","kind": "const","type": 45,"value": 53},{"import": 2001,"src": 52,"name": "detectTTYConfig","kind": "const","type": 49,"value": 57},{"import": 2001,"src": 20,"name": "dumpCurrentStackTrace","kind": "const","type": 18,"value": 21},{"import": 2001,"src": 343,"name": "dumpStackTraceFromBase","kind": "const","type": 468,"value": 530},{"import": 2001,"src": 2560,"name": "captureStackTrace"},{"import": 2001,"src": 19,"name": "dumpStackTrace","kind": "const","type": 17,"value": 20},{"import": 2001,"src": 36,"name": "assert","kind": "const","type": 30,"value": 38},{"import": 2001,"src": 2561,"name": "panic"},{"import": 2001,"src": 2562,"name": "panicExtra"},{"import": 2001,"src": 8,"name": "panicImpl","kind": "const","type": 7,"value": 8},{"import": 2001,"src": 53,"name": "writeStackTrace","kind": "const","type": 2486,"value": 1306},{"import": 2001,"src": 2563,"name": "StackIterator","kind": "const","type": 954,"value": 1470},{"import": 2001,"src": 169,"name": "writeCurrentStackTrace","kind": "const","type": 2487,"value": 1307},{"import": 2001,"src": 2564,"name": "writeCurrentStackTraceWindows"},{"import": 2001,"src": 2565,"name": "TTY","kind": "const","type": 954,"value": 2488},{"import": 2001,"src": 55,"name": "printSourceAtAddress","kind": "const","type": 2489,"value": 1308},{"import": 2001,"src": 2566,"name": "OpenSelfDebugInfoError"},{"import": 2001,"src": 50,"name": "openSelfDebugInfo","kind": "const","type": 46,"value": 54},{"import": 2001,"src": 68,"name": "readElfDebugInfo","kind": "const","type": 65,"value": 73},{"import": 2001,"src": 2567,"name": "DebugInfo","kind": "const","type": 954,"value": 1490},{"import": 2001,"src": 2568,"name": "ModuleDebugInfo","kind": "const","type": 954,"value": 1894},{"import": 2001,"src": 2569,"name": "have_segfault_handling_support","kind": "const","type": 967,"value": "true"},{"import": 2001,"src": 2570,"name": "enable_segfault_handler","kind": "const","type": 967,"value": "true"},{"import": 2001,"src": 179,"name": "maybeEnableSegfaultHandler","kind": "const","type": 8,"value": 262},{"import": 2001,"src": 260,"name": "attachSegfaultHandler","kind": "const","type": 8,"value": 380},{"import": 2001,"src": 2571,"name": "dumpStackPointerAddr"},{"import": 2001,"src": 2572,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 2001,"src": 2573,"name": "builtin","kind": "const","type": 954,"value": 1283},{"import": 2001,"src": 2574,"name": "math","kind": "const","type": 954,"value": 2009},{"import": 2001,"src": 2575,"name": "mem","kind": "const","type": 954,"value": 1971},{"import": 2001,"src": 2576,"name": "io","kind": "const","type": 954,"value": 2008},{"import": 2001,"src": 2577,"name": "os","kind": "const","type": 954,"value": 2011},{"import": 2001,"src": 2578,"name": "fs","kind": "const","type": 954,"value": 2006},{"import": 2001,"src": 2579,"name": "process","kind": "const","type": 954,"value": 2013},{"import": 2001,"src": 2580,"name": "testing"},{"import": 2001,"src": 2581,"name": "elf","kind": "const","type": 954,"value": 2003},{"import": 2001,"src": 2582,"name": "DW","kind": "const","type": 954,"value": 2002},{"import": 2001,"src": 2583,"name": "macho"},{"import": 2001,"src": 2584,"name": "coff","kind": "const","type": 954,"value": 2000},{"import": 2001,"src": 2585,"name": "pdb","kind": "const","type": 954,"value": 2012},{"import": 2001,"src": 2586,"name": "ArrayList"},{"import": 2001,"src": 2587,"name": "root","kind": "const","type": 954,"value": 1284},{"import": 2001,"src": 2588,"name": "maxInt"},{"import": 2001,"src": 2589,"name": "File","kind": "const","type": 954,"value": 971},{"import": 2001,"src": 2590,"name": "windows"},{"import": 2001,"src": 2591,"name": "native_arch","kind": "const","type": 968,"value": null},{"import": 2001,"src": 2592,"name": "native_os","kind": "const","type": 1011,"value": null},{"import": 2001,"src": 2593,"name": "native_endian","kind": "const","type": 1013,"value": null},{"import": 2001,"src": 2594,"name": "PdbOrDwarf","kind": "const","type": 954,"value": 2490},{"import": 2001,"src": 2595,"name": "stderr_mutex","kind": "var","type": 1941,"value": null},{"import": 2001,"src": 2596,"name": "self_debug_info","kind": "var","type": 2491,"value": "null"},{"import": 2001,"src": 2597,"name": "panicking","kind": "var","type": 1015,"value": 0},{"import": 2001,"src": 2598,"name": "panic_mutex","kind": "var","type": 1941,"value": null},{"import": 2001,"src": 2599,"name": "panic_stage","kind": "var","threadlocal": true,"type": 965,"value": 0},{"import": 2001,"src": 2600,"name": "RED","kind": "const","type": 2492,"value": null},{"import": 2001,"src": 2601,"name": "GREEN","kind": "const","type": 2492,"value": null},{"import": 2001,"src": 2602,"name": "CYAN","kind": "const","type": 2492,"value": null},{"import": 2001,"src": 2603,"name": "WHITE","kind": "const","type": 2492,"value": null},{"import": 2001,"src": 2604,"name": "BOLD","kind": "const","type": 2493,"value": null},{"import": 2001,"src": 2605,"name": "DIM","kind": "const","type": 2493,"value": null},{"import": 2001,"src": 2606,"name": "RESET","kind": "const","type": 2493,"value": null},{"import": 2001,"src": 2607,"name": "machoSearchSymbols"},{"import": 2001,"src": 144,"name": "printLineInfo","kind": "const","type": 2494,"value": 1309},{"import": 2001,"src": 2608,"name": "readCoffDebugInfo"},{"import": 2001,"src": 78,"name": "chopSlice","kind": "const","type": 75,"value": 83},{"import": 2001,"src": 2609,"name": "readMachODebugInfo"},{"import": 2001,"src": 247,"name": "printLineFromFileAnyOs","kind": "const","type": 2495,"value": 1310},{"import": 2001,"src": 2610,"name": "MachoSymbol","kind": "const","type": 954,"value": 2496},{"import": 2001,"src": 69,"name": "mapWholeFile","kind": "const","type": 66,"value": 74},{"import": 2001,"src": 146,"name": "getSymbolFromDwarf","kind": "const","type": 182,"value": 196},{"import": 2001,"src": 2611,"name": "debug_info_allocator","kind": "var","type": 2199,"value": "null"},{"import": 2001,"src": 2612,"name": "debug_info_arena_allocator","kind": "var","type": 1491,"value": "undefined"},{"import": 2001,"src": 51,"name": "getDebugInfoAllocator","kind": "const","type": 47,"value": 55},{"import": 2001,"src": 2613,"name": "windows_segfault_handle"},{"import": 2001,"src": 11,"name": "resetSegfaultHandler","kind": "const","type": 8,"value": 11},{"import": 2001,"src": 321,"name": "handleSegfaultPosix","kind": "const","type": 443,"value": 486},{"import": 2001,"src": 2614,"name": "handleSegfaultWindows"},{"import": 2001,"src": 2615,"name": "handleSegfaultWindowsExtra"},{"import": 2002,"src": 2616,"name": "TAG","kind": "const","type": 954,"value": 2497},{"import": 2002,"src": 2617,"name": "AT","kind": "const","type": 954,"value": 2498},{"import": 2002,"src": 2618,"name": "OP"},{"import": 2002,"src": 2619,"name": "FORM","kind": "const","type": 954,"value": 2499},{"import": 2002,"src": 2620,"name": "ATE"},{"import": 2002,"src": 2621,"name": "CFA"},{"import": 2002,"src": 2622,"name": "CHILDREN","kind": "const","type": 954,"value": 2500},{"import": 2002,"src": 2623,"name": "LNS","kind": "const","type": 954,"value": 2501},{"import": 2002,"src": 2624,"name": "LNE","kind": "const","type": 954,"value": 2502},{"import": 2002,"src": 2625,"name": "LANG"},{"import": 2002,"src": 2626,"name": "UT"},{"import": 2002,"src": 2627,"name": "LNCT"},{"import": 2002,"src": 2628,"name": "DwarfInfo","kind": "const","type": 954,"value": 1360},{"import": 2002,"src": 79,"name": "openDwarfDebugInfo","kind": "const","type": 76,"value": 84},{"import": 2002,"src": 2629,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 2002,"src": 2630,"name": "debug","kind": "const","type": 954,"value": 2001},{"import": 2002,"src": 2631,"name": "fs","kind": "const","type": 954,"value": 2006},{"import": 2002,"src": 2632,"name": "io","kind": "const","type": 954,"value": 2008},{"import": 2002,"src": 2633,"name": "mem","kind": "const","type": 954,"value": 1971},{"import": 2002,"src": 2634,"name": "math","kind": "const","type": 954,"value": 2009},{"import": 2002,"src": 2635,"name": "leb","kind": "const","type": 954,"value": 2503},{"import": 2002,"src": 2636,"name": "ArrayList","kind": "const","type": 1000,"value": 1150},{"import": 2002,"src": 2637,"name": "PcRange","kind": "const","type": 954,"value": 2381},{"import": 2002,"src": 2638,"name": "Func","kind": "const","type": 954,"value": 1010},{"import": 2002,"src": 2639,"name": "CompileUnit","kind": "const","type": 954,"value": 1006},{"import": 2002,"src": 2640,"name": "AbbrevTable","kind": "const","type": 954,"value": 1001},{"import": 2002,"src": 2641,"name": "AbbrevTableHeader","kind": "const","type": 954,"value": 998},{"import": 2002,"src": 2642,"name": "AbbrevTableEntry","kind": "const","type": 954,"value": 1002},{"import": 2002,"src": 2643,"name": "AbbrevAttr","kind": "const","type": 954,"value": 1004},{"import": 2002,"src": 2644,"name": "FormValue","kind": "const","type": 954,"value": 1903},{"import": 2002,"src": 2645,"name": "Constant","kind": "const","type": 954,"value": 2113},{"import": 2002,"src": 2646,"name": "Die","kind": "const","type": 954,"value": 2107},{"import": 2002,"src": 2647,"name": "FileEntry","kind": "const","type": 954,"value": 1040},{"import": 2002,"src": 2648,"name": "LineNumberProgram","kind": "const","type": 954,"value": 1450},{"import": 2002,"src": 92,"name": "readUnitLength","kind": "const","type": 2504,"value": 1311},{"import": 2002,"src": 236,"name": "readAllocBytes","kind": "const","type": 2505,"value": 1312},{"import": 2002,"src": 232,"name": "readAddress","kind": "const","type": 2506,"value": 1313},{"import": 2002,"src": 234,"name": "parseFormValueBlockLen","kind": "const","type": 2507,"value": 1314},{"import": 2002,"src": 233,"name": "parseFormValueBlock","kind": "const","type": 2508,"value": 1315},{"import": 2002,"src": 235,"name": "parseFormValueConstant","kind": "const","type": 2509,"value": 1316},{"import": 2002,"src": 237,"name": "parseFormValueRef","kind": "const","type": 2510,"value": 1317},{"import": 2002,"src": 116,"name": "parseFormValue","kind": "const","type": 2511,"value": 1318},{"import": 2002,"src": 114,"name": "getAbbrevTableEntry","kind": "const","type": 132,"value": 143},{"import": 2003,"src": 2649,"name": "AT_NULL","kind": "const","type": 1034,"value": null},{"import": 2003,"src": 2650,"name": "AT_IGNORE"},{"import": 2003,"src": 2651,"name": "AT_EXECFD"},{"import": 2003,"src": 2652,"name": "AT_PHDR","kind": "const","type": 1034,"value": null},{"import": 2003,"src": 2653,"name": "AT_PHENT"},{"import": 2003,"src": 2654,"name": "AT_PHNUM","kind": "const","type": 1034,"value": null},{"import": 2003,"src": 2655,"name": "AT_PAGESZ"},{"import": 2003,"src": 2656,"name": "AT_BASE","kind": "const","type": 1034,"value": null},{"import": 2003,"src": 2657,"name": "AT_FLAGS"},{"import": 2003,"src": 2658,"name": "AT_ENTRY"},{"import": 2003,"src": 2659,"name": "AT_NOTELF"},{"import": 2003,"src": 2660,"name": "AT_UID"},{"import": 2003,"src": 2661,"name": "AT_EUID"},{"import": 2003,"src": 2662,"name": "AT_GID"},{"import": 2003,"src": 2663,"name": "AT_EGID"},{"import": 2003,"src": 2664,"name": "AT_CLKTCK"},{"import": 2003,"src": 2665,"name": "AT_PLATFORM"},{"import": 2003,"src": 2666,"name": "AT_HWCAP","kind": "const","type": 1034,"value": null},{"import": 2003,"src": 2667,"name": "AT_FPUCW"},{"import": 2003,"src": 2668,"name": "AT_DCACHEBSIZE"},{"import": 2003,"src": 2669,"name": "AT_ICACHEBSIZE"},{"import": 2003,"src": 2670,"name": "AT_UCACHEBSIZE"},{"import": 2003,"src": 2671,"name": "AT_IGNOREPPC"},{"import": 2003,"src": 2672,"name": "AT_SECURE"},{"import": 2003,"src": 2673,"name": "AT_BASE_PLATFORM"},{"import": 2003,"src": 2674,"name": "AT_RANDOM"},{"import": 2003,"src": 2675,"name": "AT_HWCAP2"},{"import": 2003,"src": 2676,"name": "AT_EXECFN"},{"import": 2003,"src": 2677,"name": "AT_SYSINFO"},{"import": 2003,"src": 2678,"name": "AT_SYSINFO_EHDR","kind": "const","type": 1034,"value": null},{"import": 2003,"src": 2679,"name": "AT_L1I_CACHESHAPE"},{"import": 2003,"src": 2680,"name": "AT_L1D_CACHESHAPE"},{"import": 2003,"src": 2681,"name": "AT_L2_CACHESHAPE"},{"import": 2003,"src": 2682,"name": "AT_L3_CACHESHAPE"},{"import": 2003,"src": 2683,"name": "AT_L1I_CACHESIZE"},{"import": 2003,"src": 2684,"name": "AT_L1I_CACHEGEOMETRY"},{"import": 2003,"src": 2685,"name": "AT_L1D_CACHESIZE"},{"import": 2003,"src": 2686,"name": "AT_L1D_CACHEGEOMETRY"},{"import": 2003,"src": 2687,"name": "AT_L2_CACHESIZE"},{"import": 2003,"src": 2688,"name": "AT_L2_CACHEGEOMETRY"},{"import": 2003,"src": 2689,"name": "AT_L3_CACHESIZE"},{"import": 2003,"src": 2690,"name": "AT_L3_CACHEGEOMETRY"},{"import": 2003,"src": 2691,"name": "DT_NULL","kind": "const","type": 1034,"value": null},{"import": 2003,"src": 2692,"name": "DT_NEEDED"},{"import": 2003,"src": 2693,"name": "DT_PLTRELSZ"},{"import": 2003,"src": 2694,"name": "DT_PLTGOT","kind": "const","type": 1034,"value": null},{"import": 2003,"src": 2695,"name": "DT_HASH","kind": "const","type": 1034,"value": null},{"import": 2003,"src": 2696,"name": "DT_STRTAB","kind": "const","type": 1034,"value": null},{"import": 2003,"src": 2697,"name": "DT_SYMTAB","kind": "const","type": 1034,"value": null},{"import": 2003,"src": 2698,"name": "DT_RELA"},{"import": 2003,"src": 2699,"name": "DT_RELASZ"},{"import": 2003,"src": 2700,"name": "DT_RELAENT"},{"import": 2003,"src": 2701,"name": "DT_STRSZ"},{"import": 2003,"src": 2702,"name": "DT_SYMENT"},{"import": 2003,"src": 2703,"name": "DT_INIT"},{"import": 2003,"src": 2704,"name": "DT_FINI"},{"import": 2003,"src": 2705,"name": "DT_SONAME"},{"import": 2003,"src": 2706,"name": "DT_RPATH"},{"import": 2003,"src": 2707,"name": "DT_SYMBOLIC"},{"import": 2003,"src": 2708,"name": "DT_REL"},{"import": 2003,"src": 2709,"name": "DT_RELSZ"},{"import": 2003,"src": 2710,"name": "DT_RELENT"},{"import": 2003,"src": 2711,"name": "DT_PLTREL"},{"import": 2003,"src": 2712,"name": "DT_DEBUG","kind": "const","type": 1034,"value": null},{"import": 2003,"src": 2713,"name": "DT_TEXTREL"},{"import": 2003,"src": 2714,"name": "DT_JMPREL"},{"import": 2003,"src": 2715,"name": "DT_BIND_NOW"},{"import": 2003,"src": 2716,"name": "DT_INIT_ARRAY"},{"import": 2003,"src": 2717,"name": "DT_FINI_ARRAY"},{"import": 2003,"src": 2718,"name": "DT_INIT_ARRAYSZ"},{"import": 2003,"src": 2719,"name": "DT_FINI_ARRAYSZ"},{"import": 2003,"src": 2720,"name": "DT_RUNPATH"},{"import": 2003,"src": 2721,"name": "DT_FLAGS"},{"import": 2003,"src": 2722,"name": "DT_ENCODING"},{"import": 2003,"src": 2723,"name": "DT_PREINIT_ARRAY"},{"import": 2003,"src": 2724,"name": "DT_PREINIT_ARRAYSZ"},{"import": 2003,"src": 2725,"name": "DT_SYMTAB_SHNDX"},{"import": 2003,"src": 2726,"name": "DT_NUM"},{"import": 2003,"src": 2727,"name": "DT_LOOS"},{"import": 2003,"src": 2728,"name": "DT_HIOS"},{"import": 2003,"src": 2729,"name": "DT_LOPROC"},{"import": 2003,"src": 2730,"name": "DT_HIPROC"},{"import": 2003,"src": 2731,"name": "DT_PROCNUM"},{"import": 2003,"src": 2732,"name": "DT_VALRNGLO"},{"import": 2003,"src": 2733,"name": "DT_GNU_PRELINKED"},{"import": 2003,"src": 2734,"name": "DT_GNU_CONFLICTSZ"},{"import": 2003,"src": 2735,"name": "DT_GNU_LIBLISTSZ"},{"import": 2003,"src": 2736,"name": "DT_CHECKSUM"},{"import": 2003,"src": 2737,"name": "DT_PLTPADSZ"},{"import": 2003,"src": 2738,"name": "DT_MOVEENT"},{"import": 2003,"src": 2739,"name": "DT_MOVESZ"},{"import": 2003,"src": 2740,"name": "DT_FEATURE_1"},{"import": 2003,"src": 2741,"name": "DT_POSFLAG_1"},{"import": 2003,"src": 2742,"name": "DT_SYMINSZ"},{"import": 2003,"src": 2743,"name": "DT_SYMINENT"},{"import": 2003,"src": 2744,"name": "DT_VALRNGHI"},{"import": 2003,"src": 2745,"name": "DT_VALNUM"},{"import": 2003,"src": 2746,"name": "DT_ADDRRNGLO"},{"import": 2003,"src": 2747,"name": "DT_GNU_HASH"},{"import": 2003,"src": 2748,"name": "DT_TLSDESC_PLT"},{"import": 2003,"src": 2749,"name": "DT_TLSDESC_GOT"},{"import": 2003,"src": 2750,"name": "DT_GNU_CONFLICT"},{"import": 2003,"src": 2751,"name": "DT_GNU_LIBLIST"},{"import": 2003,"src": 2752,"name": "DT_CONFIG"},{"import": 2003,"src": 2753,"name": "DT_DEPAUDIT"},{"import": 2003,"src": 2754,"name": "DT_AUDIT"},{"import": 2003,"src": 2755,"name": "DT_PLTPAD"},{"import": 2003,"src": 2756,"name": "DT_MOVETAB"},{"import": 2003,"src": 2757,"name": "DT_SYMINFO"},{"import": 2003,"src": 2758,"name": "DT_ADDRRNGHI"},{"import": 2003,"src": 2759,"name": "DT_ADDRNUM"},{"import": 2003,"src": 2760,"name": "DT_VERSYM","kind": "const","type": 1034,"value": null},{"import": 2003,"src": 2761,"name": "DT_RELACOUNT"},{"import": 2003,"src": 2762,"name": "DT_RELCOUNT"},{"import": 2003,"src": 2763,"name": "DT_FLAGS_1"},{"import": 2003,"src": 2764,"name": "DT_VERDEF","kind": "const","type": 1034,"value": null},{"import": 2003,"src": 2765,"name": "DT_VERDEFNUM"},{"import": 2003,"src": 2766,"name": "DT_VERNEED"},{"import": 2003,"src": 2767,"name": "DT_VERNEEDNUM"},{"import": 2003,"src": 2768,"name": "DT_VERSIONTAGNUM"},{"import": 2003,"src": 2769,"name": "DT_AUXILIARY"},{"import": 2003,"src": 2770,"name": "DT_FILTER"},{"import": 2003,"src": 2771,"name": "DT_EXTRANUM"},{"import": 2003,"src": 2772,"name": "DT_SPARC_REGISTER"},{"import": 2003,"src": 2773,"name": "DT_SPARC_NUM"},{"import": 2003,"src": 2774,"name": "DT_MIPS_RLD_VERSION"},{"import": 2003,"src": 2775,"name": "DT_MIPS_TIME_STAMP"},{"import": 2003,"src": 2776,"name": "DT_MIPS_ICHECKSUM"},{"import": 2003,"src": 2777,"name": "DT_MIPS_IVERSION"},{"import": 2003,"src": 2778,"name": "DT_MIPS_FLAGS"},{"import": 2003,"src": 2779,"name": "DT_MIPS_BASE_ADDRESS"},{"import": 2003,"src": 2780,"name": "DT_MIPS_MSYM"},{"import": 2003,"src": 2781,"name": "DT_MIPS_CONFLICT"},{"import": 2003,"src": 2782,"name": "DT_MIPS_LIBLIST"},{"import": 2003,"src": 2783,"name": "DT_MIPS_LOCAL_GOTNO"},{"import": 2003,"src": 2784,"name": "DT_MIPS_CONFLICTNO"},{"import": 2003,"src": 2785,"name": "DT_MIPS_LIBLISTNO"},{"import": 2003,"src": 2786,"name": "DT_MIPS_SYMTABNO"},{"import": 2003,"src": 2787,"name": "DT_MIPS_UNREFEXTNO"},{"import": 2003,"src": 2788,"name": "DT_MIPS_GOTSYM"},{"import": 2003,"src": 2789,"name": "DT_MIPS_HIPAGENO"},{"import": 2003,"src": 2790,"name": "DT_MIPS_RLD_MAP"},{"import": 2003,"src": 2791,"name": "DT_MIPS_DELTA_CLASS"},{"import": 2003,"src": 2792,"name": "DT_MIPS_DELTA_CLASS_NO"},{"import": 2003,"src": 2793,"name": "DT_MIPS_DELTA_INSTANCE"},{"import": 2003,"src": 2794,"name": "DT_MIPS_DELTA_INSTANCE_NO"},{"import": 2003,"src": 2795,"name": "DT_MIPS_DELTA_RELOC"},{"import": 2003,"src": 2796,"name": "DT_MIPS_DELTA_RELOC_NO"},{"import": 2003,"src": 2797,"name": "DT_MIPS_DELTA_SYM"},{"import": 2003,"src": 2798,"name": "DT_MIPS_DELTA_SYM_NO"},{"import": 2003,"src": 2799,"name": "DT_MIPS_DELTA_CLASSSYM"},{"import": 2003,"src": 2800,"name": "DT_MIPS_DELTA_CLASSSYM_NO"},{"import": 2003,"src": 2801,"name": "DT_MIPS_CXX_FLAGS"},{"import": 2003,"src": 2802,"name": "DT_MIPS_PIXIE_INIT"},{"import": 2003,"src": 2803,"name": "DT_MIPS_SYMBOL_LIB"},{"import": 2003,"src": 2804,"name": "DT_MIPS_LOCALPAGE_GOTIDX"},{"import": 2003,"src": 2805,"name": "DT_MIPS_LOCAL_GOTIDX"},{"import": 2003,"src": 2806,"name": "DT_MIPS_HIDDEN_GOTIDX"},{"import": 2003,"src": 2807,"name": "DT_MIPS_PROTECTED_GOTIDX"},{"import": 2003,"src": 2808,"name": "DT_MIPS_OPTIONS"},{"import": 2003,"src": 2809,"name": "DT_MIPS_INTERFACE"},{"import": 2003,"src": 2810,"name": "DT_MIPS_DYNSTR_ALIGN"},{"import": 2003,"src": 2811,"name": "DT_MIPS_INTERFACE_SIZE"},{"import": 2003,"src": 2812,"name": "DT_MIPS_RLD_TEXT_RESOLVE_ADDR"},{"import": 2003,"src": 2813,"name": "DT_MIPS_PERF_SUFFIX"},{"import": 2003,"src": 2814,"name": "DT_MIPS_COMPACT_SIZE"},{"import": 2003,"src": 2815,"name": "DT_MIPS_GP_VALUE"},{"import": 2003,"src": 2816,"name": "DT_MIPS_AUX_DYNAMIC"},{"import": 2003,"src": 2817,"name": "DT_MIPS_PLTGOT"},{"import": 2003,"src": 2818,"name": "DT_MIPS_RWPLT"},{"import": 2003,"src": 2819,"name": "DT_MIPS_RLD_MAP_REL"},{"import": 2003,"src": 2820,"name": "DT_MIPS_NUM"},{"import": 2003,"src": 2821,"name": "DT_ALPHA_PLTRO"},{"import": 2003,"src": 2822,"name": "DT_ALPHA_NUM"},{"import": 2003,"src": 2823,"name": "DT_PPC_GOT"},{"import": 2003,"src": 2824,"name": "DT_PPC_OPT"},{"import": 2003,"src": 2825,"name": "DT_PPC_NUM"},{"import": 2003,"src": 2826,"name": "DT_PPC64_GLINK"},{"import": 2003,"src": 2827,"name": "DT_PPC64_OPD"},{"import": 2003,"src": 2828,"name": "DT_PPC64_OPDSZ"},{"import": 2003,"src": 2829,"name": "DT_PPC64_OPT"},{"import": 2003,"src": 2830,"name": "DT_PPC64_NUM"},{"import": 2003,"src": 2831,"name": "DT_IA_64_PLT_RESERVE"},{"import": 2003,"src": 2832,"name": "DT_IA_64_NUM"},{"import": 2003,"src": 2833,"name": "DT_NIOS2_GP"},{"import": 2003,"src": 2834,"name": "PT_NULL"},{"import": 2003,"src": 2835,"name": "PT_LOAD","kind": "const","type": 1034,"value": null},{"import": 2003,"src": 2836,"name": "PT_DYNAMIC","kind": "const","type": 1034,"value": null},{"import": 2003,"src": 2837,"name": "PT_INTERP"},{"import": 2003,"src": 2838,"name": "PT_NOTE"},{"import": 2003,"src": 2839,"name": "PT_SHLIB"},{"import": 2003,"src": 2840,"name": "PT_PHDR","kind": "const","type": 1034,"value": null},{"import": 2003,"src": 2841,"name": "PT_TLS","kind": "const","type": 1034,"value": null},{"import": 2003,"src": 2842,"name": "PT_NUM"},{"import": 2003,"src": 2843,"name": "PT_LOOS"},{"import": 2003,"src": 2844,"name": "PT_GNU_EH_FRAME"},{"import": 2003,"src": 2845,"name": "PT_GNU_STACK","kind": "const","type": 1034,"value": null},{"import": 2003,"src": 2846,"name": "PT_GNU_RELRO"},{"import": 2003,"src": 2847,"name": "PT_LOSUNW"},{"import": 2003,"src": 2848,"name": "PT_SUNWBSS"},{"import": 2003,"src": 2849,"name": "PT_SUNWSTACK"},{"import": 2003,"src": 2850,"name": "PT_HISUNW"},{"import": 2003,"src": 2851,"name": "PT_HIOS"},{"import": 2003,"src": 2852,"name": "PT_LOPROC"},{"import": 2003,"src": 2853,"name": "PT_HIPROC"},{"import": 2003,"src": 2854,"name": "SHT_NULL","kind": "const","type": 1034,"value": null},{"import": 2003,"src": 2855,"name": "SHT_PROGBITS"},{"import": 2003,"src": 2856,"name": "SHT_SYMTAB"},{"import": 2003,"src": 2857,"name": "SHT_STRTAB"},{"import": 2003,"src": 2858,"name": "SHT_RELA"},{"import": 2003,"src": 2859,"name": "SHT_HASH"},{"import": 2003,"src": 2860,"name": "SHT_DYNAMIC"},{"import": 2003,"src": 2861,"name": "SHT_NOTE"},{"import": 2003,"src": 2862,"name": "SHT_NOBITS"},{"import": 2003,"src": 2863,"name": "SHT_REL"},{"import": 2003,"src": 2864,"name": "SHT_SHLIB"},{"import": 2003,"src": 2865,"name": "SHT_DYNSYM"},{"import": 2003,"src": 2866,"name": "SHT_INIT_ARRAY"},{"import": 2003,"src": 2867,"name": "SHT_FINI_ARRAY"},{"import": 2003,"src": 2868,"name": "SHT_PREINIT_ARRAY"},{"import": 2003,"src": 2869,"name": "SHT_GROUP"},{"import": 2003,"src": 2870,"name": "SHT_SYMTAB_SHNDX"},{"import": 2003,"src": 2871,"name": "SHT_LOOS"},{"import": 2003,"src": 2872,"name": "SHT_HIOS"},{"import": 2003,"src": 2873,"name": "SHT_LOPROC"},{"import": 2003,"src": 2874,"name": "SHT_HIPROC"},{"import": 2003,"src": 2875,"name": "SHT_LOUSER"},{"import": 2003,"src": 2876,"name": "SHT_HIUSER"},{"import": 2003,"src": 2877,"name": "STB_LOCAL"},{"import": 2003,"src": 2878,"name": "STB_GLOBAL","kind": "const","type": 1034,"value": null},{"import": 2003,"src": 2879,"name": "STB_WEAK","kind": "const","type": 1034,"value": null},{"import": 2003,"src": 2880,"name": "STB_NUM"},{"import": 2003,"src": 2881,"name": "STB_LOOS"},{"import": 2003,"src": 2882,"name": "STB_GNU_UNIQUE","kind": "const","type": 1034,"value": null},{"import": 2003,"src": 2883,"name": "STB_HIOS"},{"import": 2003,"src": 2884,"name": "STB_LOPROC"},{"import": 2003,"src": 2885,"name": "STB_HIPROC"},{"import": 2003,"src": 2886,"name": "STB_MIPS_SPLIT_COMMON"},{"import": 2003,"src": 2887,"name": "STT_NOTYPE","kind": "const","type": 1034,"value": null},{"import": 2003,"src": 2888,"name": "STT_OBJECT","kind": "const","type": 1034,"value": null},{"import": 2003,"src": 2889,"name": "STT_FUNC","kind": "const","type": 1034,"value": null},{"import": 2003,"src": 2890,"name": "STT_SECTION"},{"import": 2003,"src": 2891,"name": "STT_FILE"},{"import": 2003,"src": 2892,"name": "STT_COMMON","kind": "const","type": 1034,"value": null},{"import": 2003,"src": 2893,"name": "STT_TLS"},{"import": 2003,"src": 2894,"name": "STT_NUM"},{"import": 2003,"src": 2895,"name": "STT_LOOS"},{"import": 2003,"src": 2896,"name": "STT_GNU_IFUNC"},{"import": 2003,"src": 2897,"name": "STT_HIOS"},{"import": 2003,"src": 2898,"name": "STT_LOPROC"},{"import": 2003,"src": 2899,"name": "STT_HIPROC"},{"import": 2003,"src": 2900,"name": "STT_SPARC_REGISTER"},{"import": 2003,"src": 2901,"name": "STT_PARISC_MILLICODE"},{"import": 2003,"src": 2902,"name": "STT_HP_OPAQUE"},{"import": 2003,"src": 2903,"name": "STT_HP_STUB"},{"import": 2003,"src": 2904,"name": "STT_ARM_TFUNC"},{"import": 2003,"src": 2905,"name": "STT_ARM_16BIT"},{"import": 2003,"src": 2906,"name": "VER_FLG_BASE","kind": "const","type": 1034,"value": null},{"import": 2003,"src": 2907,"name": "VER_FLG_WEAK"},{"import": 2003,"src": 2908,"name": "ET","kind": "const","type": 954,"value": 2512},{"import": 2003,"src": 2909,"name": "Header"},{"import": 2003,"src": 2910,"name": "ProgramHeaderIterator"},{"import": 2003,"src": 2911,"name": "SectionHeaderIterator"},{"import": 2003,"src": 2912,"name": "int"},{"import": 2003,"src": 2913,"name": "int32"},{"import": 2003,"src": 2914,"name": "EI_NIDENT","kind": "const","type": 1034,"value": null},{"import": 2003,"src": 2915,"name": "EI_CLASS"},{"import": 2003,"src": 2916,"name": "ELFCLASSNONE"},{"import": 2003,"src": 2917,"name": "ELFCLASS32"},{"import": 2003,"src": 2918,"name": "ELFCLASS64"},{"import": 2003,"src": 2919,"name": "ELFCLASSNUM"},{"import": 2003,"src": 2920,"name": "EI_DATA","kind": "const","type": 1034,"value": null},{"import": 2003,"src": 2921,"name": "ELFDATANONE"},{"import": 2003,"src": 2922,"name": "ELFDATA2LSB","kind": "const","type": 1034,"value": null},{"import": 2003,"src": 2923,"name": "ELFDATA2MSB","kind": "const","type": 1034,"value": null},{"import": 2003,"src": 2924,"name": "ELFDATANUM"},{"import": 2003,"src": 2925,"name": "EI_VERSION","kind": "const","type": 1034,"value": null},{"import": 2003,"src": 2926,"name": "Elf32_Half","kind": "const","type": 954,"value": 961},{"import": 2003,"src": 2927,"name": "Elf64_Half","kind": "const","type": 954,"value": 961},{"import": 2003,"src": 2928,"name": "Elf32_Word","kind": "const","type": 954,"value": 1134},{"import": 2003,"src": 2929,"name": "Elf32_Sword","kind": "const","type": 954,"value": 1084},{"import": 2003,"src": 2930,"name": "Elf64_Word","kind": "const","type": 954,"value": 1134},{"import": 2003,"src": 2931,"name": "Elf64_Sword"},{"import": 2003,"src": 2932,"name": "Elf32_Xword"},{"import": 2003,"src": 2933,"name": "Elf32_Sxword"},{"import": 2003,"src": 2934,"name": "Elf64_Xword","kind": "const","type": 954,"value": 988},{"import": 2003,"src": 2935,"name": "Elf64_Sxword"},{"import": 2003,"src": 2936,"name": "Elf32_Addr","kind": "const","type": 954,"value": 1134},{"import": 2003,"src": 2937,"name": "Elf64_Addr","kind": "const","type": 954,"value": 988},{"import": 2003,"src": 2938,"name": "Elf32_Off","kind": "const","type": 954,"value": 1134},{"import": 2003,"src": 2939,"name": "Elf64_Off","kind": "const","type": 954,"value": 988},{"import": 2003,"src": 2940,"name": "Elf32_Section","kind": "const","type": 954,"value": 961},{"import": 2003,"src": 2941,"name": "Elf64_Section"},{"import": 2003,"src": 2942,"name": "Elf32_Versym"},{"import": 2003,"src": 2943,"name": "Elf64_Versym"},{"import": 2003,"src": 2944,"name": "Elf32_Ehdr","kind": "const","type": 954,"value": 2513},{"import": 2003,"src": 2945,"name": "Elf64_Ehdr","kind": "const","type": 954,"value": 2514},{"import": 2003,"src": 2946,"name": "Elf32_Phdr","kind": "const","type": 954,"value": 2029},{"import": 2003,"src": 2947,"name": "Elf64_Phdr","kind": "const","type": 954,"value": 2515},{"import": 2003,"src": 2948,"name": "Elf32_Shdr","kind": "const","type": 954,"value": 2516},{"import": 2003,"src": 2949,"name": "Elf64_Shdr","kind": "const","type": 954,"value": 2517},{"import": 2003,"src": 2950,"name": "Elf32_Chdr"},{"import": 2003,"src": 2951,"name": "Elf64_Chdr"},{"import": 2003,"src": 2952,"name": "Elf32_Sym","kind": "const","type": 954,"value": 2518},{"import": 2003,"src": 2953,"name": "Elf64_Sym"},{"import": 2003,"src": 2954,"name": "Elf32_Syminfo"},{"import": 2003,"src": 2955,"name": "Elf64_Syminfo"},{"import": 2003,"src": 2956,"name": "Elf32_Rel"},{"import": 2003,"src": 2957,"name": "Elf64_Rel"},{"import": 2003,"src": 2958,"name": "Elf32_Rela"},{"import": 2003,"src": 2959,"name": "Elf64_Rela"},{"import": 2003,"src": 2960,"name": "Elf32_Dyn","kind": "const","type": 954,"value": 2519},{"import": 2003,"src": 2961,"name": "Elf64_Dyn"},{"import": 2003,"src": 2962,"name": "Elf32_Verdef","kind": "const","type": 954,"value": 2284},{"import": 2003,"src": 2963,"name": "Elf64_Verdef"},{"import": 2003,"src": 2964,"name": "Elf32_Verdaux","kind": "const","type": 954,"value": 2520},{"import": 2003,"src": 2965,"name": "Elf64_Verdaux"},{"import": 2003,"src": 2966,"name": "Elf32_Verneed"},{"import": 2003,"src": 2967,"name": "Elf64_Verneed"},{"import": 2003,"src": 2968,"name": "Elf32_Vernaux"},{"import": 2003,"src": 2969,"name": "Elf64_Vernaux"},{"import": 2003,"src": 2970,"name": "Elf32_auxv_t","kind": "const","type": 954,"value": 2521},{"import": 2003,"src": 2971,"name": "Elf64_auxv_t"},{"import": 2003,"src": 2972,"name": "Elf32_Nhdr"},{"import": 2003,"src": 2973,"name": "Elf64_Nhdr"},{"import": 2003,"src": 2974,"name": "Elf32_Move"},{"import": 2003,"src": 2975,"name": "Elf64_Move"},{"import": 2003,"src": 2976,"name": "Elf32_gptab"},{"import": 2003,"src": 2977,"name": "Elf32_RegInfo"},{"import": 2003,"src": 2978,"name": "Elf_Options"},{"import": 2003,"src": 2979,"name": "Elf_Options_Hw"},{"import": 2003,"src": 2980,"name": "Elf32_Lib"},{"import": 2003,"src": 2981,"name": "Elf64_Lib"},{"import": 2003,"src": 2982,"name": "Elf32_Conflict"},{"import": 2003,"src": 2983,"name": "Elf_MIPS_ABIFlags_v0"},{"import": 2003,"src": 2984,"name": "Auxv","kind": "const","type": 954,"value": 2521},{"import": 2003,"src": 2985,"name": "Ehdr","kind": "const","type": 954,"value": 2513},{"import": 2003,"src": 2986,"name": "Phdr","kind": "const","type": 954,"value": 2029},{"import": 2003,"src": 2987,"name": "Dyn","kind": "const","type": 954,"value": 2519},{"import": 2003,"src": 2988,"name": "Rel"},{"import": 2003,"src": 2989,"name": "Rela"},{"import": 2003,"src": 2990,"name": "Shdr","kind": "const","type": 954,"value": 2516},{"import": 2003,"src": 2991,"name": "Sym","kind": "const","type": 954,"value": 2518},{"import": 2003,"src": 2992,"name": "Verdef","kind": "const","type": 954,"value": 2284},{"import": 2003,"src": 2993,"name": "Verdaux","kind": "const","type": 954,"value": 2520},{"import": 2003,"src": 2994,"name": "Addr"},{"import": 2003,"src": 2995,"name": "Half"},{"import": 2003,"src": 2996,"name": "EM","kind": "const","type": 954,"value": 2522},{"import": 2003,"src": 2997,"name": "SHF_WRITE"},{"import": 2003,"src": 2998,"name": "SHF_ALLOC"},{"import": 2003,"src": 2999,"name": "SHF_EXECINSTR"},{"import": 2003,"src": 3000,"name": "SHF_MERGE"},{"import": 2003,"src": 3001,"name": "SHF_STRINGS"},{"import": 2003,"src": 3002,"name": "SHF_INFO_LINK"},{"import": 2003,"src": 3003,"name": "SHF_LINK_ORDER"},{"import": 2003,"src": 3004,"name": "SHF_OS_NONCONFORMING"},{"import": 2003,"src": 3005,"name": "SHF_GROUP"},{"import": 2003,"src": 3006,"name": "SHF_TLS"},{"import": 2003,"src": 3007,"name": "SHF_COMPRESSED"},{"import": 2003,"src": 3008,"name": "SHF_EXCLUDE"},{"import": 2003,"src": 3009,"name": "SHF_MASKOS"},{"import": 2003,"src": 3010,"name": "SHF_MASKPROC"},{"import": 2003,"src": 3011,"name": "XCORE_SHF_DP_SECTION"},{"import": 2003,"src": 3012,"name": "XCORE_SHF_CP_SECTION"},{"import": 2003,"src": 3013,"name": "SHF_X86_64_LARGE"},{"import": 2003,"src": 3014,"name": "SHF_HEX_GPREL"},{"import": 2003,"src": 3015,"name": "SHF_MIPS_NODUPES"},{"import": 2003,"src": 3016,"name": "SHF_MIPS_NAMES"},{"import": 2003,"src": 3017,"name": "SHF_MIPS_LOCAL"},{"import": 2003,"src": 3018,"name": "SHF_MIPS_NOSTRIP"},{"import": 2003,"src": 3019,"name": "SHF_MIPS_GPREL"},{"import": 2003,"src": 3020,"name": "SHF_MIPS_MERGE"},{"import": 2003,"src": 3021,"name": "SHF_MIPS_ADDR"},{"import": 2003,"src": 3022,"name": "SHF_MIPS_STRING"},{"import": 2003,"src": 3023,"name": "SHF_ARM_PURECODE"},{"import": 2003,"src": 3024,"name": "PF_X"},{"import": 2003,"src": 3025,"name": "PF_W"},{"import": 2003,"src": 3026,"name": "PF_R"},{"import": 2003,"src": 3027,"name": "PF_MASKOS"},{"import": 2003,"src": 3028,"name": "PF_MASKPROC"},{"import": 2003,"src": 3029,"name": "SHN_UNDEF"},{"import": 2003,"src": 3030,"name": "SHN_LORESERVE"},{"import": 2003,"src": 3031,"name": "SHN_LOPROC"},{"import": 2003,"src": 3032,"name": "SHN_HIPROC"},{"import": 2003,"src": 3033,"name": "SHN_LIVEPATCH"},{"import": 2003,"src": 3034,"name": "SHN_ABS"},{"import": 2003,"src": 3035,"name": "SHN_COMMON"},{"import": 2003,"src": 3036,"name": "SHN_HIRESERVE"},{"import": 2003,"src": 3037,"name": "R_X86_64_NONE"},{"import": 2003,"src": 3038,"name": "R_X86_64_64"},{"import": 2003,"src": 3039,"name": "R_X86_64_PC32"},{"import": 2003,"src": 3040,"name": "R_X86_64_GOT32"},{"import": 2003,"src": 3041,"name": "R_X86_64_PLT32"},{"import": 2003,"src": 3042,"name": "R_X86_64_COPY"},{"import": 2003,"src": 3043,"name": "R_X86_64_GLOB_DAT"},{"import": 2003,"src": 3044,"name": "R_X86_64_JUMP_SLOT"},{"import": 2003,"src": 3045,"name": "R_X86_64_RELATIVE"},{"import": 2003,"src": 3046,"name": "R_X86_64_GOTPCREL"},{"import": 2003,"src": 3047,"name": "R_X86_64_32"},{"import": 2003,"src": 3048,"name": "R_X86_64_32S"},{"import": 2003,"src": 3049,"name": "R_X86_64_16"},{"import": 2003,"src": 3050,"name": "R_X86_64_PC16"},{"import": 2003,"src": 3051,"name": "R_X86_64_8"},{"import": 2003,"src": 3052,"name": "R_X86_64_PC8"},{"import": 2003,"src": 3053,"name": "R_X86_64_DTPMOD64"},{"import": 2003,"src": 3054,"name": "R_X86_64_DTPOFF64"},{"import": 2003,"src": 3055,"name": "R_X86_64_TPOFF64"},{"import": 2003,"src": 3056,"name": "R_X86_64_TLSGD"},{"import": 2003,"src": 3057,"name": "R_X86_64_TLSLD"},{"import": 2003,"src": 3058,"name": "R_X86_64_DTPOFF32"},{"import": 2003,"src": 3059,"name": "R_X86_64_GOTTPOFF"},{"import": 2003,"src": 3060,"name": "R_X86_64_TPOFF32"},{"import": 2003,"src": 3061,"name": "R_X86_64_PC64"},{"import": 2003,"src": 3062,"name": "R_X86_64_GOTOFF64"},{"import": 2003,"src": 3063,"name": "R_X86_64_GOTPC32"},{"import": 2003,"src": 3064,"name": "R_X86_64_GOT64"},{"import": 2003,"src": 3065,"name": "R_X86_64_GOTPCREL64"},{"import": 2003,"src": 3066,"name": "R_X86_64_GOTPC64"},{"import": 2003,"src": 3067,"name": "R_X86_64_GOTPLT64"},{"import": 2003,"src": 3068,"name": "R_X86_64_PLTOFF64"},{"import": 2003,"src": 3069,"name": "R_X86_64_SIZE32"},{"import": 2003,"src": 3070,"name": "R_X86_64_SIZE64"},{"import": 2003,"src": 3071,"name": "R_X86_64_GOTPC32_TLSDESC"},{"import": 2003,"src": 3072,"name": "R_X86_64_TLSDESC_CALL"},{"import": 2003,"src": 3073,"name": "R_X86_64_TLSDESC"},{"import": 2003,"src": 3074,"name": "R_X86_64_IRELATIVE"},{"import": 2003,"src": 3075,"name": "R_X86_64_RELATIVE64"},{"import": 2003,"src": 3076,"name": "R_X86_64_GOTPCRELX"},{"import": 2003,"src": 3077,"name": "R_X86_64_REX_GOTPCRELX"},{"import": 2003,"src": 3078,"name": "R_X86_64_NUM"},{"import": 2003,"src": 3079,"name": "STV"},{"import": 2003,"src": 3080,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 2003,"src": 3081,"name": "io"},{"import": 2003,"src": 3082,"name": "os"},{"import": 2003,"src": 3083,"name": "math"},{"import": 2003,"src": 3084,"name": "mem"},{"import": 2003,"src": 3085,"name": "debug","kind": "const","type": 954,"value": 2001},{"import": 2003,"src": 3086,"name": "File"},{"import": 2003,"src": 3087,"name": "native_endian"},{"import": 2004,"src": 3088,"name": "Channel"},{"import": 2004,"src": 3089,"name": "Future"},{"import": 2004,"src": 3090,"name": "Group"},{"import": 2004,"src": 3091,"name": "Batch"},{"import": 2004,"src": 3092,"name": "Lock"},{"import": 2004,"src": 3093,"name": "Locked"},{"import": 2004,"src": 3094,"name": "RwLock"},{"import": 2004,"src": 3095,"name": "RwLocked"},{"import": 2004,"src": 3096,"name": "Loop","kind": "const","type": 954,"value": 2407},{"import": 2004,"src": 3097,"name": "WaitGroup"},{"import": 2005,"src": 3098,"name": "default_max_depth","kind": "const","type": 1034,"value": null},{"import": 2005,"src": 3099,"name": "Alignment","kind": "const","type": 954,"value": 1891},{"import": 2005,"src": 3100,"name": "FormatOptions","kind": "const","type": 954,"value": 1307},{"import": 2005,"src": 34,"name": "format","kind": "const","type": 2523,"value": 1319},{"import": 2005,"src": 3101,"name": "formatAddress"},{"import": 2005,"src": 44,"name": "formatType","kind": "const","type": 2524,"value": 1320},{"import": 2005,"src": 189,"name": "formatIntValue","kind": "const","type": 2525,"value": 1321},{"import": 2005,"src": 3102,"name": "Case","kind": "const","type": 954,"value": 1256},{"import": 2005,"src": 3103,"name": "fmtSliceHexLower"},{"import": 2005,"src": 3104,"name": "fmtSliceHexUpper"},{"import": 2005,"src": 3105,"name": "fmtSliceEscapeLower"},{"import": 2005,"src": 3106,"name": "fmtSliceEscapeUpper"},{"import": 2005,"src": 3107,"name": "fmtIntSizeDec"},{"import": 2005,"src": 3108,"name": "fmtIntSizeBin"},{"import": 2005,"src": 3109,"name": "formatText"},{"import": 2005,"src": 575,"name": "formatAsciiChar","kind": "const","type": 2526,"value": 1322},{"import": 2005,"src": 3110,"name": "formatUnicodeCodepoint"},{"import": 2005,"src": 193,"name": "formatBuf","kind": "const","type": 2527,"value": 1323},{"import": 2005,"src": 3111,"name": "formatFloatScientific"},{"import": 2005,"src": 3112,"name": "formatFloatHexadecimal"},{"import": 2005,"src": 3113,"name": "formatFloatDecimal"},{"import": 2005,"src": 190,"name": "formatInt","kind": "const","type": 2528,"value": 1324},{"import": 2005,"src": 3114,"name": "formatIntBuf"},{"import": 2005,"src": 3115,"name": "fmtDuration"},{"import": 2005,"src": 3116,"name": "fmtDurationSigned"},{"import": 2005,"src": 3117,"name": "ParseIntError"},{"import": 2005,"src": 3118,"name": "Formatter"},{"import": 2005,"src": 3119,"name": "parseInt"},{"import": 2005,"src": 3120,"name": "parseUnsigned"},{"import": 2005,"src": 3121,"name": "parseFloat"},{"import": 2005,"src": 3122,"name": "ParseFloatError"},{"import": 2005,"src": 3123,"name": "parseHexFloat"},{"import": 2005,"src": 3124,"name": "charToDigit"},{"import": 2005,"src": 192,"name": "digitToChar","kind": "const","type": 257,"value": 275},{"import": 2005,"src": 3125,"name": "BufPrintError","kind": "const","type": 954,"value": 2254},{"import": 2005,"src": 389,"name": "bufPrint","kind": "const","type": 2529,"value": 1325},{"import": 2005,"src": 3126,"name": "bufPrintZ"},{"import": 2005,"src": 3127,"name": "count"},{"import": 2005,"src": 3128,"name": "AllocPrintError"},{"import": 2005,"src": 3129,"name": "allocPrint"},{"import": 2005,"src": 3130,"name": "allocPrint0"},{"import": 2005,"src": 3131,"name": "allocPrintZ"},{"import": 2005,"src": 3132,"name": "bufPrintIntToSlice"},{"import": 2005,"src": 3133,"name": "comptimePrint"},{"import": 2005,"src": 3134,"name": "hexToBytes"},{"import": 2005,"src": 3135,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 2005,"src": 3136,"name": "math","kind": "const","type": 954,"value": 2009},{"import": 2005,"src": 3137,"name": "assert","kind": "const","type": 30,"value": 38},{"import": 2005,"src": 3138,"name": "mem"},{"import": 2005,"src": 3139,"name": "unicode","kind": "const","type": 954,"value": 2017},{"import": 2005,"src": 3140,"name": "meta","kind": "const","type": 954,"value": 2010},{"import": 2005,"src": 3141,"name": "builtin"},{"import": 2005,"src": 3142,"name": "errol"},{"import": 2005,"src": 3143,"name": "lossyCast"},{"import": 2005,"src": 3144,"name": "expectFmt"},{"import": 2005,"src": 612,"name": "parsePlaceholder","kind": "const","type": 980,"value": 1140},{"import": 2005,"src": 611,"name": "cacheString","kind": "const","type": 977,"value": 1139},{"import": 2005,"src": 3145,"name": "Placeholder","kind": "const","type": 954,"value": 981},{"import": 2005,"src": 3146,"name": "Specifier","kind": "const","type": 954,"value": 1892},{"import": 2005,"src": 3147,"name": "Parser","kind": "const","type": 954,"value": 2035},{"import": 2005,"src": 3148,"name": "ArgSetType","kind": "const","type": 954,"value": 1134},{"import": 2005,"src": 3149,"name": "max_format_args","kind": "const","type": 1034,"value": null},{"import": 2005,"src": 3150,"name": "ArgState","kind": "const","type": 954,"value": 2036},{"import": 2005,"src": 3151,"name": "ANY","kind": "const","type": 2530,"value": null},{"import": 2005,"src": 3152,"name": "defaultSpec"},{"import": 2005,"src": 188,"name": "formatValue","kind": "const","type": 2531,"value": 1326},{"import": 2005,"src": 3153,"name": "formatFloatValue"},{"import": 2005,"src": 3154,"name": "formatSliceHexImpl"},{"import": 2005,"src": 3155,"name": "formatSliceHexLower"},{"import": 2005,"src": 3156,"name": "formatSliceHexUpper"},{"import": 2005,"src": 3157,"name": "formatSliceEscapeImpl"},{"import": 2005,"src": 3158,"name": "formatSliceEscapeLower"},{"import": 2005,"src": 3159,"name": "formatSliceEscapeUpper"},{"import": 2005,"src": 3160,"name": "formatSizeImpl"},{"import": 2005,"src": 3161,"name": "formatSizeDec"},{"import": 2005,"src": 3162,"name": "formatSizeBin"},{"import": 2005,"src": 635,"name": "checkTextFmt","kind": "const","type": 1046,"value": 1165},{"import": 2005,"src": 3163,"name": "formatDuration"},{"import": 2005,"src": 3164,"name": "formatDurationSigned"},{"import": 2005,"src": 3165,"name": "parseWithSign"},{"import": 2006,"src": 3166,"name": "path","kind": "const","type": 954,"value": 2532},{"import": 2006,"src": 3167,"name": "File","kind": "const","type": 954,"value": 971},{"import": 2006,"src": 3168,"name": "wasi"},{"import": 2006,"src": 3169,"name": "realpath"},{"import": 2006,"src": 3170,"name": "realpathZ"},{"import": 2006,"src": 3171,"name": "realpathW"},{"import": 2006,"src": 3172,"name": "getAppDataDir"},{"import": 2006,"src": 3173,"name": "GetAppDataDirError"},{"import": 2006,"src": 3174,"name": "Watch"},{"import": 2006,"src": 3175,"name": "MAX_PATH_BYTES","kind": "const","type": 1034,"value": null},{"import": 2006,"src": 3176,"name": "base64_alphabet"},{"import": 2006,"src": 3177,"name": "base64_encoder"},{"import": 2006,"src": 3178,"name": "base64_decoder"},{"import": 2006,"src": 3179,"name": "need_async_thread"},{"import": 2006,"src": 3180,"name": "atomicSymLink"},{"import": 2006,"src": 3181,"name": "PrevStatus"},{"import": 2006,"src": 3182,"name": "CopyFileOptions"},{"import": 2006,"src": 3183,"name": "updateFileAbsolute"},{"import": 2006,"src": 3184,"name": "copyFileAbsolute"},{"import": 2006,"src": 3185,"name": "AtomicFile"},{"import": 2006,"src": 3186,"name": "makeDirAbsolute"},{"import": 2006,"src": 3187,"name": "makeDirAbsoluteZ"},{"import": 2006,"src": 3188,"name": "makeDirAbsoluteW"},{"import": 2006,"src": 3189,"name": "deleteDirAbsolute"},{"import": 2006,"src": 3190,"name": "deleteDirAbsoluteZ"},{"import": 2006,"src": 3191,"name": "deleteDirAbsoluteW"},{"import": 2006,"src": 3192,"name": "renameAbsolute"},{"import": 2006,"src": 3193,"name": "renameAbsoluteZ"},{"import": 2006,"src": 3194,"name": "renameAbsoluteW"},{"import": 2006,"src": 3195,"name": "rename"},{"import": 2006,"src": 3196,"name": "renameZ"},{"import": 2006,"src": 3197,"name": "renameW"},{"import": 2006,"src": 3198,"name": "Dir","kind": "const","type": 954,"value": 1325},{"import": 2006,"src": 64,"name": "cwd","kind": "const","type": 61,"value": 69},{"import": 2006,"src": 3199,"name": "openDirAbsolute"},{"import": 2006,"src": 3200,"name": "openDirAbsoluteZ"},{"import": 2006,"src": 3201,"name": "openDirAbsoluteW"},{"import": 2006,"src": 3202,"name": "openFileAbsolute"},{"import": 2006,"src": 223,"name": "openFileAbsoluteZ","kind": "const","type": 289,"value": 309},{"import": 2006,"src": 3203,"name": "openFileAbsoluteW"},{"import": 2006,"src": 3204,"name": "accessAbsolute"},{"import": 2006,"src": 3205,"name": "accessAbsoluteZ"},{"import": 2006,"src": 3206,"name": "accessAbsoluteW"},{"import": 2006,"src": 3207,"name": "createFileAbsolute"},{"import": 2006,"src": 3208,"name": "createFileAbsoluteZ"},{"import": 2006,"src": 3209,"name": "createFileAbsoluteW"},{"import": 2006,"src": 3210,"name": "deleteFileAbsolute"},{"import": 2006,"src": 3211,"name": "deleteFileAbsoluteZ"},{"import": 2006,"src": 3212,"name": "deleteFileAbsoluteW"},{"import": 2006,"src": 3213,"name": "deleteTreeAbsolute"},{"import": 2006,"src": 3214,"name": "readLinkAbsolute"},{"import": 2006,"src": 3215,"name": "readlinkAbsoluteW"},{"import": 2006,"src": 3216,"name": "readLinkAbsoluteZ"},{"import": 2006,"src": 3217,"name": "SymLinkFlags"},{"import": 2006,"src": 3218,"name": "symLinkAbsolute"},{"import": 2006,"src": 3219,"name": "symLinkAbsoluteW"},{"import": 2006,"src": 3220,"name": "symLinkAbsoluteZ"},{"import": 2006,"src": 3221,"name": "OpenSelfExeError","kind": "const","type": 954,"value": 2064},{"import": 2006,"src": 66,"name": "openSelfExe","kind": "const","type": 63,"value": 71},{"import": 2006,"src": 3222,"name": "SelfExePathError","kind": "const","type": 954,"value": 2533},{"import": 2006,"src": 3223,"name": "selfExePathAlloc"},{"import": 2006,"src": 3224,"name": "selfExePath"},{"import": 2006,"src": 3225,"name": "selfExePathW"},{"import": 2006,"src": 3226,"name": "selfExeDirPathAlloc"},{"import": 2006,"src": 3227,"name": "selfExeDirPath"},{"import": 2006,"src": 3228,"name": "realpathAlloc"},{"import": 2006,"src": 3229,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 2006,"src": 3230,"name": "builtin","kind": "const","type": 954,"value": 1283},{"import": 2006,"src": 3231,"name": "root"},{"import": 2006,"src": 3232,"name": "os","kind": "const","type": 954,"value": 2011},{"import": 2006,"src": 3233,"name": "mem"},{"import": 2006,"src": 3234,"name": "base64"},{"import": 2006,"src": 3235,"name": "crypto"},{"import": 2006,"src": 3236,"name": "Allocator"},{"import": 2006,"src": 3237,"name": "assert","kind": "const","type": 30,"value": 38},{"import": 2006,"src": 3238,"name": "math"},{"import": 2006,"src": 3239,"name": "is_darwin"},{"import": 2006,"src": 3240,"name": "default_new_dir_mode"},{"import": 2006,"src": 3241,"name": "CopyFileError"},{"import": 2006,"src": 3242,"name": "copy_file"},{"import": 2007,"src": 3243,"name": "Adler32"},{"import": 2007,"src": 3244,"name": "autoHash"},{"import": 2007,"src": 3245,"name": "autoHashStrat"},{"import": 2007,"src": 3246,"name": "Strategy"},{"import": 2007,"src": 3247,"name": "crc"},{"import": 2007,"src": 3248,"name": "Crc32"},{"import": 2007,"src": 3249,"name": "Fnv1a_32"},{"import": 2007,"src": 3250,"name": "Fnv1a_64"},{"import": 2007,"src": 3251,"name": "Fnv1a_128"},{"import": 2007,"src": 3252,"name": "SipHash64"},{"import": 2007,"src": 3253,"name": "SipHash128"},{"import": 2007,"src": 3254,"name": "murmur"},{"import": 2007,"src": 3255,"name": "Murmur2_32"},{"import": 2007,"src": 3256,"name": "Murmur2_64"},{"import": 2007,"src": 3257,"name": "Murmur3_32"},{"import": 2007,"src": 3258,"name": "cityhash"},{"import": 2007,"src": 3259,"name": "CityHash32"},{"import": 2007,"src": 3260,"name": "CityHash64"},{"import": 2007,"src": 3261,"name": "Wyhash","kind": "const","type": 954,"value": 2379},{"import": 2007,"src": 3262,"name": "adler"},{"import": 2007,"src": 3263,"name": "auto_hash"},{"import": 2007,"src": 3264,"name": "fnv"},{"import": 2007,"src": 3265,"name": "siphash"},{"import": 2007,"src": 3266,"name": "wyhash","kind": "const","type": 954,"value": 2225},{"import": 2008,"src": 3267,"name": "Mode","kind": "const","type": 954,"value": 2022},{"import": 2008,"src": 3268,"name": "mode","kind": "const","type": 2022,"value": null},{"import": 2008,"src": 3269,"name": "is_async","kind": "const","type": 967,"value": "false"},{"import": 2008,"src": 3270,"name": "ModeOverride","kind": "const","type": 954,"value": 1889},{"import": 2008,"src": 3271,"name": "default_mode","kind": "const","type": 1889,"value": "undefined"},{"import": 2008,"src": 522,"name": "getStdOut","kind": "const","type": 11,"value": 898},{"import": 2008,"src": 13,"name": "getStdErr","kind": "const","type": 11,"value": 13},{"import": 2008,"src": 3272,"name": "getStdIn"},{"import": 2008,"src": 3273,"name": "Reader","kind": "const","type": 1024,"value": 1156},{"import": 2008,"src": 3274,"name": "Writer","kind": "const","type": 969,"value": 1137},{"import": 2008,"src": 3275,"name": "SeekableStream","kind": "const","type": 1028,"value": 1157},{"import": 2008,"src": 3276,"name": "BufferedWriter"},{"import": 2008,"src": 3277,"name": "bufferedWriter","kind": "const","type": 2474,"value": 1302},{"import": 2008,"src": 3278,"name": "BufferedReader"},{"import": 2008,"src": 3279,"name": "bufferedReader"},{"import": 2008,"src": 3280,"name": "PeekStream"},{"import": 2008,"src": 3281,"name": "peekStream"},{"import": 2008,"src": 3282,"name": "FixedBufferStream"},{"import": 2008,"src": 3283,"name": "fixedBufferStream","kind": "const","type": 2389,"value": 1270},{"import": 2008,"src": 3284,"name": "CWriter"},{"import": 2008,"src": 3285,"name": "cWriter"},{"import": 2008,"src": 3286,"name": "LimitedReader"},{"import": 2008,"src": 3287,"name": "limitedReader"},{"import": 2008,"src": 3288,"name": "CountingWriter"},{"import": 2008,"src": 3289,"name": "countingWriter"},{"import": 2008,"src": 3290,"name": "CountingReader"},{"import": 2008,"src": 3291,"name": "countingReader"},{"import": 2008,"src": 3292,"name": "MultiWriter"},{"import": 2008,"src": 3293,"name": "multiWriter"},{"import": 2008,"src": 3294,"name": "BitReader"},{"import": 2008,"src": 3295,"name": "bitReader"},{"import": 2008,"src": 3296,"name": "BitWriter"},{"import": 2008,"src": 3297,"name": "bitWriter"},{"import": 2008,"src": 3298,"name": "ChangeDetectionStream"},{"import": 2008,"src": 3299,"name": "changeDetectionStream"},{"import": 2008,"src": 3300,"name": "FindByteWriter"},{"import": 2008,"src": 3301,"name": "findByteWriter"},{"import": 2008,"src": 3302,"name": "FindByteOutStream"},{"import": 2008,"src": 3303,"name": "findByteOutStream"},{"import": 2008,"src": 3304,"name": "BufferedAtomicFile"},{"import": 2008,"src": 3305,"name": "StreamSource"},{"import": 2008,"src": 3306,"name": "null_writer"},{"import": 2008,"src": 3307,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 2008,"src": 3308,"name": "builtin","kind": "const","type": 954,"value": 1283},{"import": 2008,"src": 3309,"name": "root","kind": "const","type": 954,"value": 1284},{"import": 2008,"src": 3310,"name": "c"},{"import": 2008,"src": 3311,"name": "math"},{"import": 2008,"src": 3312,"name": "assert"},{"import": 2008,"src": 3313,"name": "os","kind": "const","type": 954,"value": 2011},{"import": 2008,"src": 3314,"name": "fs"},{"import": 2008,"src": 3315,"name": "mem"},{"import": 2008,"src": 3316,"name": "meta"},{"import": 2008,"src": 3317,"name": "trait"},{"import": 2008,"src": 3318,"name": "File","kind": "const","type": 954,"value": 971},{"import": 2008,"src": 554,"name": "getStdOutHandle","kind": "const","type": 26,"value": 981},{"import": 2008,"src": 31,"name": "getStdErrHandle","kind": "const","type": 26,"value": 33},{"import": 2008,"src": 3319,"name": "getStdInHandle"},{"import": 2008,"src": 3320,"name": "NullWriter"},{"import": 2008,"src": 3321,"name": "dummyWrite"},{"import": 2009,"src": 3322,"name": "e"},{"import": 2009,"src": 3323,"name": "pi"},{"import": 2009,"src": 3324,"name": "phi"},{"import": 2009,"src": 3325,"name": "tau"},{"import": 2009,"src": 3326,"name": "log2e"},{"import": 2009,"src": 3327,"name": "log10e"},{"import": 2009,"src": 3328,"name": "ln2"},{"import": 2009,"src": 3329,"name": "ln10"},{"import": 2009,"src": 3330,"name": "two_sqrtpi"},{"import": 2009,"src": 3331,"name": "sqrt2"},{"import": 2009,"src": 3332,"name": "sqrt1_2"},{"import": 2009,"src": 3333,"name": "f128_true_min"},{"import": 2009,"src": 3334,"name": "f128_min"},{"import": 2009,"src": 3335,"name": "f128_max"},{"import": 2009,"src": 3336,"name": "f128_epsilon"},{"import": 2009,"src": 3337,"name": "f128_toint"},{"import": 2009,"src": 3338,"name": "f64_true_min"},{"import": 2009,"src": 3339,"name": "f64_min"},{"import": 2009,"src": 3340,"name": "f64_max"},{"import": 2009,"src": 3341,"name": "f64_epsilon"},{"import": 2009,"src": 3342,"name": "f64_toint"},{"import": 2009,"src": 3343,"name": "f32_true_min"},{"import": 2009,"src": 3344,"name": "f32_min"},{"import": 2009,"src": 3345,"name": "f32_max"},{"import": 2009,"src": 3346,"name": "f32_epsilon"},{"import": 2009,"src": 3347,"name": "f32_toint"},{"import": 2009,"src": 3348,"name": "f16_true_min"},{"import": 2009,"src": 3349,"name": "f16_min"},{"import": 2009,"src": 3350,"name": "f16_max"},{"import": 2009,"src": 3351,"name": "f16_epsilon"},{"import": 2009,"src": 3352,"name": "f16_toint"},{"import": 2009,"src": 3353,"name": "epsilon"},{"import": 2009,"src": 3354,"name": "nan_u16"},{"import": 2009,"src": 3355,"name": "nan_f16"},{"import": 2009,"src": 3356,"name": "qnan_u16"},{"import": 2009,"src": 3357,"name": "qnan_f16"},{"import": 2009,"src": 3358,"name": "inf_u16"},{"import": 2009,"src": 3359,"name": "inf_f16"},{"import": 2009,"src": 3360,"name": "nan_u32"},{"import": 2009,"src": 3361,"name": "nan_f32"},{"import": 2009,"src": 3362,"name": "qnan_u32"},{"import": 2009,"src": 3363,"name": "qnan_f32"},{"import": 2009,"src": 3364,"name": "inf_u32"},{"import": 2009,"src": 3365,"name": "inf_f32"},{"import": 2009,"src": 3366,"name": "nan_u64"},{"import": 2009,"src": 3367,"name": "nan_f64"},{"import": 2009,"src": 3368,"name": "qnan_u64"},{"import": 2009,"src": 3369,"name": "qnan_f64"},{"import": 2009,"src": 3370,"name": "inf_u64"},{"import": 2009,"src": 3371,"name": "inf_f64"},{"import": 2009,"src": 3372,"name": "nan_u128"},{"import": 2009,"src": 3373,"name": "nan_f128"},{"import": 2009,"src": 3374,"name": "qnan_u128"},{"import": 2009,"src": 3375,"name": "qnan_f128"},{"import": 2009,"src": 3376,"name": "inf_u128"},{"import": 2009,"src": 3377,"name": "inf_f128"},{"import": 2009,"src": 3378,"name": "nan"},{"import": 2009,"src": 3379,"name": "snan"},{"import": 2009,"src": 3380,"name": "inf"},{"import": 2009,"src": 3381,"name": "approxEqAbs"},{"import": 2009,"src": 3382,"name": "approxEqRel"},{"import": 2009,"src": 3383,"name": "approxEq"},{"import": 2009,"src": 3384,"name": "doNotOptimizeAway"},{"import": 2009,"src": 3385,"name": "raiseInvalid"},{"import": 2009,"src": 3386,"name": "raiseUnderflow"},{"import": 2009,"src": 3387,"name": "raiseOverflow"},{"import": 2009,"src": 3388,"name": "raiseInexact"},{"import": 2009,"src": 3389,"name": "raiseDivByZero"},{"import": 2009,"src": 3390,"name": "isNan"},{"import": 2009,"src": 3391,"name": "isSignalNan"},{"import": 2009,"src": 3392,"name": "fabs"},{"import": 2009,"src": 3393,"name": "ceil"},{"import": 2009,"src": 3394,"name": "floor"},{"import": 2009,"src": 3395,"name": "trunc"},{"import": 2009,"src": 3396,"name": "round"},{"import": 2009,"src": 3397,"name": "frexp"},{"import": 2009,"src": 3398,"name": "Frexp"},{"import": 2009,"src": 3399,"name": "modf"},{"import": 2009,"src": 3400,"name": "modf32_result"},{"import": 2009,"src": 3401,"name": "modf64_result"},{"import": 2009,"src": 3402,"name": "copysign"},{"import": 2009,"src": 3403,"name": "isFinite"},{"import": 2009,"src": 3404,"name": "isInf"},{"import": 2009,"src": 3405,"name": "isPositiveInf"},{"import": 2009,"src": 3406,"name": "isNegativeInf"},{"import": 2009,"src": 3407,"name": "isNormal"},{"import": 2009,"src": 3408,"name": "signbit"},{"import": 2009,"src": 3409,"name": "scalbn"},{"import": 2009,"src": 3410,"name": "ldexp"},{"import": 2009,"src": 3411,"name": "pow"},{"import": 2009,"src": 3412,"name": "powi"},{"import": 2009,"src": 3413,"name": "sqrt"},{"import": 2009,"src": 3414,"name": "cbrt"},{"import": 2009,"src": 3415,"name": "acos"},{"import": 2009,"src": 3416,"name": "asin"},{"import": 2009,"src": 3417,"name": "atan"},{"import": 2009,"src": 3418,"name": "atan2"},{"import": 2009,"src": 3419,"name": "hypot"},{"import": 2009,"src": 3420,"name": "exp"},{"import": 2009,"src": 3421,"name": "exp2"},{"import": 2009,"src": 3422,"name": "expm1"},{"import": 2009,"src": 3423,"name": "ilogb"},{"import": 2009,"src": 3424,"name": "ln"},{"import": 2009,"src": 3425,"name": "log"},{"import": 2009,"src": 3426,"name": "log2","kind": "const","type": 1142,"value": 1195},{"import": 2009,"src": 3427,"name": "log10"},{"import": 2009,"src": 3428,"name": "log1p"},{"import": 2009,"src": 3429,"name": "fma"},{"import": 2009,"src": 3430,"name": "asinh"},{"import": 2009,"src": 3431,"name": "acosh"},{"import": 2009,"src": 3432,"name": "atanh"},{"import": 2009,"src": 3433,"name": "sinh"},{"import": 2009,"src": 3434,"name": "cosh"},{"import": 2009,"src": 3435,"name": "tanh"},{"import": 2009,"src": 3436,"name": "cos"},{"import": 2009,"src": 3437,"name": "sin"},{"import": 2009,"src": 3438,"name": "tan"},{"import": 2009,"src": 3439,"name": "complex"},{"import": 2009,"src": 3440,"name": "Complex"},{"import": 2009,"src": 3441,"name": "big"},{"import": 2009,"src": 3442,"name": "floatMantissaBits"},{"import": 2009,"src": 3443,"name": "floatExponentBits"},{"import": 2009,"src": 620,"name": "Min","kind": "const","type": 995,"value": 1148},{"import": 2009,"src": 54,"name": "min","kind": "const","type": 2534,"value": 1327},{"import": 2009,"src": 3444,"name": "min3"},{"import": 2009,"src": 131,"name": "max","kind": "const","type": 1033,"value": 1158},{"import": 2009,"src": 630,"name": "max3","kind": "const","type": 1035,"value": 1159},{"import": 2009,"src": 3445,"name": "clamp"},{"import": 2009,"src": 295,"name": "mul","kind": "const","type": 2535,"value": 1328},{"import": 2009,"src": 229,"name": "add","kind": "const","type": 2536,"value": 1329},{"import": 2009,"src": 317,"name": "sub","kind": "const","type": 2537,"value": 1330},{"import": 2009,"src": 3446,"name": "negate"},{"import": 2009,"src": 3447,"name": "shlExact"},{"import": 2009,"src": 3448,"name": "shl"},{"import": 2009,"src": 3449,"name": "shr"},{"import": 2009,"src": 3450,"name": "rotr"},{"import": 2009,"src": 3451,"name": "rotl"},{"import": 2009,"src": 608,"name": "Log2Int","kind": "const","type": 963,"value": 1136},{"import": 2009,"src": 3452,"name": "Log2IntCeil"},{"import": 2009,"src": 3453,"name": "IntFittingRange"},{"import": 2009,"src": 3454,"name": "absInt"},{"import": 2009,"src": 3455,"name": "absFloat"},{"import": 2009,"src": 3456,"name": "divTrunc"},{"import": 2009,"src": 3457,"name": "divFloor"},{"import": 2009,"src": 3458,"name": "divCeil"},{"import": 2009,"src": 3459,"name": "divExact"},{"import": 2009,"src": 3460,"name": "mod"},{"import": 2009,"src": 3461,"name": "rem"},{"import": 2009,"src": 191,"name": "absCast","kind": "const","type": 1255,"value": 1224},{"import": 2009,"src": 3462,"name": "negateCast"},{"import": 2009,"src": 72,"name": "cast","kind": "const","type": 2538,"value": 1331},{"import": 2009,"src": 3463,"name": "AlignCastError"},{"import": 2009,"src": 3464,"name": "alignCast"},{"import": 2009,"src": 133,"name": "isPowerOfTwo","kind": "const","type": 1047,"value": 1166},{"import": 2009,"src": 3465,"name": "floorPowerOfTwo"},{"import": 2009,"src": 312,"name": "ceilPowerOfTwoPromote","kind": "const","type": 2539,"value": 1332},{"import": 2009,"src": 240,"name": "ceilPowerOfTwo","kind": "const","type": 2540,"value": 1333},{"import": 2009,"src": 3466,"name": "ceilPowerOfTwoAssert"},{"import": 2009,"src": 3467,"name": "log2_int"},{"import": 2009,"src": 3468,"name": "log2_int_ceil"},{"import": 2009,"src": 3469,"name": "lossyCast"},{"import": 2009,"src": 631,"name": "maxInt","kind": "const","type": 1036,"value": 1160},{"import": 2009,"src": 645,"name": "minInt","kind": "const","type": 1071,"value": 1177},{"import": 2009,"src": 378,"name": "mulWide","kind": "const","type": 2541,"value": 1334},{"import": 2009,"src": 3470,"name": "Order"},{"import": 2009,"src": 3471,"name": "order"},{"import": 2009,"src": 3472,"name": "CompareOperator"},{"import": 2009,"src": 3473,"name": "compare"},{"import": 2009,"src": 3474,"name": "boolMask"},{"import": 2009,"src": 3475,"name": "comptimeMod"},{"import": 2009,"src": 3476,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 2009,"src": 3477,"name": "assert","kind": "const","type": 30,"value": 38},{"import": 2009,"src": 3478,"name": "mem"},{"import": 2009,"src": 3479,"name": "testing"},{"import": 2009,"src": 3480,"name": "testOverflow"},{"import": 2009,"src": 3481,"name": "testAbsInt"},{"import": 2009,"src": 3482,"name": "testAbsFloat"},{"import": 2009,"src": 3483,"name": "testDivTrunc"},{"import": 2009,"src": 3484,"name": "testDivFloor"},{"import": 2009,"src": 3485,"name": "testDivCeil"},{"import": 2009,"src": 3486,"name": "testDivExact"},{"import": 2009,"src": 3487,"name": "testMod"},{"import": 2009,"src": 3488,"name": "testRem"},{"import": 2009,"src": 3489,"name": "testFloorPowerOfTwo"},{"import": 2009,"src": 3490,"name": "testCeilPowerOfTwoPromote"},{"import": 2009,"src": 3491,"name": "testCeilPowerOfTwo"},{"import": 2010,"src": 3492,"name": "trait","kind": "const","type": 954,"value": 2378},{"import": 2010,"src": 3493,"name": "TrailerFlags"},{"import": 2010,"src": 3494,"name": "tagName"},{"import": 2010,"src": 3495,"name": "stringToEnum"},{"import": 2010,"src": 3496,"name": "bitCount"},{"import": 2010,"src": 3497,"name": "alignment"},{"import": 2010,"src": 640,"name": "Child","kind": "const","type": 1057,"value": 1172},{"import": 2010,"src": 623,"name": "Elem","kind": "const","type": 1014,"value": 1151},{"import": 2010,"src": 655,"name": "sentinel","kind": "const","type": 1105,"value": 1187},{"import": 2010,"src": 624,"name": "Sentinel","kind": "const","type": 1017,"value": 1152},{"import": 2010,"src": 76,"name": "assumeSentinel","kind": "const","type": 2542,"value": 1335},{"import": 2010,"src": 662,"name": "containerLayout","kind": "const","type": 1147,"value": 1197},{"import": 2010,"src": 610,"name": "declarations","kind": "const","type": 973,"value": 1138},{"import": 2010,"src": 3498,"name": "declarationInfo"},{"import": 2010,"src": 667,"name": "fields","kind": "const","type": 1181,"value": 1202},{"import": 2010,"src": 3499,"name": "fieldInfo"},{"import": 2010,"src": 3500,"name": "fieldNames"},{"import": 2010,"src": 3501,"name": "FieldEnum"},{"import": 2010,"src": 3502,"name": "TagType"},{"import": 2010,"src": 636,"name": "Tag","kind": "const","type": 1049,"value": 1168},{"import": 2010,"src": 3503,"name": "activeTag"},{"import": 2010,"src": 3504,"name": "TagPayload"},{"import": 2010,"src": 203,"name": "eql","kind": "const","type": 2543,"value": 1336},{"import": 2010,"src": 3505,"name": "IntToEnumError"},{"import": 2010,"src": 3506,"name": "intToEnum"},{"import": 2010,"src": 685,"name": "fieldIndex","kind": "const","type": 1265,"value": 1226},{"import": 2010,"src": 3507,"name": "refAllDecls"},{"import": 2010,"src": 3508,"name": "declList"},{"import": 2010,"src": 3509,"name": "IntType"},{"import": 2010,"src": 607,"name": "Int","kind": "const","type": 958,"value": 1135},{"import": 2010,"src": 3510,"name": "Float"},{"import": 2010,"src": 3511,"name": "Vector"},{"import": 2010,"src": 3512,"name": "ArgsTuple"},{"import": 2010,"src": 684,"name": "Tuple","kind": "const","type": 1257,"value": 1225},{"import": 2010,"src": 3513,"name": "globalOption"},{"import": 2010,"src": 3514,"name": "isError"},{"import": 2010,"src": 3515,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 2010,"src": 3516,"name": "debug"},{"import": 2010,"src": 3517,"name": "mem","kind": "const","type": 954,"value": 1971},{"import": 2010,"src": 3518,"name": "math"},{"import": 2010,"src": 3519,"name": "testing"},{"import": 2010,"src": 3520,"name": "root"},{"import": 2010,"src": 3521,"name": "TypeInfo","kind": "const","type": 954,"value": 1051},{"import": 2010,"src": 3522,"name": "testSentinel"},{"import": 2010,"src": 3523,"name": "expectEqualEnum"},{"import": 2010,"src": 3524,"name": "TagPayloadType"},{"import": 2010,"src": 3525,"name": "TupleTester"},{"import": 2011,"src": 3526,"name": "darwin"},{"import": 2011,"src": 3527,"name": "dragonfly"},{"import": 2011,"src": 3528,"name": "freebsd"},{"import": 2011,"src": 3529,"name": "haiku"},{"import": 2011,"src": 3530,"name": "netbsd"},{"import": 2011,"src": 3531,"name": "openbsd"},{"import": 2011,"src": 3532,"name": "solaris"},{"import": 2011,"src": 3533,"name": "linux","kind": "const","type": 954,"value": 2405},{"import": 2011,"src": 3534,"name": "plan9"},{"import": 2011,"src": 3535,"name": "uefi"},{"import": 2011,"src": 3536,"name": "wasi"},{"import": 2011,"src": 3537,"name": "windows","kind": "const","type": 954,"value": 2408},{"import": 2011,"src": 3538,"name": "system","kind": "const","type": 954,"value": 2405},{"import": 2011,"src": 3539,"name": "AF"},{"import": 2011,"src": 3540,"name": "AF_SUN"},{"import": 2011,"src": 3541,"name": "ARCH"},{"import": 2011,"src": 3542,"name": "AT","kind": "const","type": 954,"value": 2544},{"import": 2011,"src": 3543,"name": "AT_SUN"},{"import": 2011,"src": 3544,"name": "CLOCK","kind": "const","type": 954,"value": 2545},{"import": 2011,"src": 3545,"name": "CPU_COUNT"},{"import": 2011,"src": 3546,"name": "CTL"},{"import": 2011,"src": 3547,"name": "DT"},{"import": 2011,"src": 3548,"name": "E","kind": "const","type": 954,"value": 1478},{"import": 2011,"src": 3549,"name": "Elf_Symndx"},{"import": 2011,"src": 3550,"name": "F"},{"import": 2011,"src": 3551,"name": "FD_CLOEXEC"},{"import": 2011,"src": 3552,"name": "Flock"},{"import": 2011,"src": 3553,"name": "HOST_NAME_MAX"},{"import": 2011,"src": 3554,"name": "IFNAMESIZE"},{"import": 2011,"src": 3555,"name": "IOV_MAX"},{"import": 2011,"src": 3556,"name": "IPPROTO"},{"import": 2011,"src": 3557,"name": "KERN"},{"import": 2011,"src": 3558,"name": "Kevent"},{"import": 2011,"src": 3559,"name": "LOCK","kind": "const","type": 954,"value": 2426},{"import": 2011,"src": 3560,"name": "MADV"},{"import": 2011,"src": 3561,"name": "MAP","kind": "const","type": 954,"value": 2546},{"import": 2011,"src": 3562,"name": "MAX_ADDR_LEN"},{"import": 2011,"src": 3563,"name": "MMAP2_UNIT"},{"import": 2011,"src": 3564,"name": "MSG"},{"import": 2011,"src": 3565,"name": "NAME_MAX"},{"import": 2011,"src": 3566,"name": "O","kind": "const","type": 954,"value": 2547},{"import": 2011,"src": 3567,"name": "PATH_MAX","kind": "const","type": 1034,"value": null},{"import": 2011,"src": 3568,"name": "POLL"},{"import": 2011,"src": 3569,"name": "POSIX_FADV"},{"import": 2011,"src": 3570,"name": "PR"},{"import": 2011,"src": 3571,"name": "PROT","kind": "const","type": 954,"value": 2548},{"import": 2011,"src": 3572,"name": "REG"},{"import": 2011,"src": 3573,"name": "RIGHT"},{"import": 2011,"src": 3574,"name": "RLIM"},{"import": 2011,"src": 3575,"name": "RR"},{"import": 2011,"src": 3576,"name": "S","kind": "const","type": 954,"value": 2549},{"import": 2011,"src": 3577,"name": "SA","kind": "const","type": 954,"value": 2550},{"import": 2011,"src": 3578,"name": "SC"},{"import": 2011,"src": 3579,"name": "_SC"},{"import": 2011,"src": 3580,"name": "SEEK"},{"import": 2011,"src": 3581,"name": "SHUT"},{"import": 2011,"src": 3582,"name": "SIG","kind": "const","type": 954,"value": 2551},{"import": 2011,"src": 3583,"name": "SIOCGIFINDEX"},{"import": 2011,"src": 3584,"name": "SO"},{"import": 2011,"src": 3585,"name": "SOCK"},{"import": 2011,"src": 3586,"name": "SOL"},{"import": 2011,"src": 3587,"name": "STDERR_FILENO","kind": "const","type": 1034,"value": null},{"import": 2011,"src": 3588,"name": "STDIN_FILENO"},{"import": 2011,"src": 3589,"name": "STDOUT_FILENO","kind": "const","type": 1034,"value": null},{"import": 2011,"src": 3590,"name": "SYS"},{"import": 2011,"src": 3591,"name": "Sigaction","kind": "const","type": 954,"value": 2552},{"import": 2011,"src": 3592,"name": "Stat","kind": "const","type": 954,"value": 1149},{"import": 2011,"src": 3593,"name": "TCSA"},{"import": 2011,"src": 3594,"name": "TCP"},{"import": 2011,"src": 3595,"name": "VDSO"},{"import": 2011,"src": 3596,"name": "W"},{"import": 2011,"src": 3597,"name": "addrinfo"},{"import": 2011,"src": 3598,"name": "blkcnt_t"},{"import": 2011,"src": 3599,"name": "blksize_t"},{"import": 2011,"src": 3600,"name": "clock_t"},{"import": 2011,"src": 3601,"name": "cpu_set_t"},{"import": 2011,"src": 3602,"name": "dev_t"},{"import": 2011,"src": 3603,"name": "dl_phdr_info","kind": "const","type": 954,"value": 2062},{"import": 2011,"src": 3604,"name": "empty_sigset","kind": "const","type": 2433,"value": null},{"import": 2011,"src": 3605,"name": "fd_t","kind": "const","type": 954,"value": 1084},{"import": 2011,"src": 3606,"name": "fdflags_t"},{"import": 2011,"src": 3607,"name": "fdstat_t"},{"import": 2011,"src": 3608,"name": "gid_t"},{"import": 2011,"src": 3609,"name": "ifreq"},{"import": 2011,"src": 3610,"name": "ino_t","kind": "const","type": 954,"value": 988},{"import": 2011,"src": 3611,"name": "lookupflags_t"},{"import": 2011,"src": 3612,"name": "mcontext_t"},{"import": 2011,"src": 3613,"name": "mode_t","kind": "const","type": 954,"value": 1134},{"import": 2011,"src": 3614,"name": "msghdr"},{"import": 2011,"src": 3615,"name": "msghdr_const"},{"import": 2011,"src": 3616,"name": "nfds_t"},{"import": 2011,"src": 3617,"name": "nlink_t"},{"import": 2011,"src": 3618,"name": "off_t"},{"import": 2011,"src": 3619,"name": "oflags_t"},{"import": 2011,"src": 3620,"name": "pid_t"},{"import": 2011,"src": 3621,"name": "pollfd"},{"import": 2011,"src": 3622,"name": "port_t"},{"import": 2011,"src": 3623,"name": "port_event"},{"import": 2011,"src": 3624,"name": "port_notify"},{"import": 2011,"src": 3625,"name": "file_obj"},{"import": 2011,"src": 3626,"name": "rights_t"},{"import": 2011,"src": 3627,"name": "rlim_t"},{"import": 2011,"src": 3628,"name": "rlimit","kind": "const","type": 954,"value": 1477},{"import": 2011,"src": 3629,"name": "rlimit_resource","kind": "const","type": 954,"value": 1476},{"import": 2011,"src": 3630,"name": "rusage"},{"import": 2011,"src": 3631,"name": "sa_family_t"},{"import": 2011,"src": 3632,"name": "siginfo_t","kind": "const","type": 954,"value": 2223},{"import": 2011,"src": 3633,"name": "sigset_t","kind": "const","type": 954,"value": 2433},{"import": 2011,"src": 3634,"name": "sockaddr"},{"import": 2011,"src": 3635,"name": "socklen_t"},{"import": 2011,"src": 3636,"name": "stack_t"},{"import": 2011,"src": 3637,"name": "tcflag_t"},{"import": 2011,"src": 3638,"name": "termios"},{"import": 2011,"src": 3639,"name": "time_t"},{"import": 2011,"src": 3640,"name": "timespec","kind": "const","type": 954,"value": 1558},{"import": 2011,"src": 3641,"name": "timestamp_t"},{"import": 2011,"src": 3642,"name": "timeval"},{"import": 2011,"src": 3643,"name": "timezone"},{"import": 2011,"src": 3644,"name": "ucontext_t","kind": "const","type": 954,"value": 2431},{"import": 2011,"src": 3645,"name": "uid_t"},{"import": 2011,"src": 3646,"name": "user_desc"},{"import": 2011,"src": 3647,"name": "utsname"},{"import": 2011,"src": 3648,"name": "F_OK"},{"import": 2011,"src": 3649,"name": "R_OK"},{"import": 2011,"src": 3650,"name": "W_OK"},{"import": 2011,"src": 3651,"name": "X_OK"},{"import": 2011,"src": 3652,"name": "iovec","kind": "const","type": 954,"value": 2553},{"import": 2011,"src": 3653,"name": "iovec_const","kind": "const","type": 954,"value": 2554},{"import": 2011,"src": 3654,"name": "LOG"},{"import": 2011,"src": 3655,"name": "socket_t"},{"import": 2011,"src": 3656,"name": "environ","kind": "var","type": 1299,"value": "undefined"},{"import": 2011,"src": 3657,"name": "argv","kind": "var","type": 1299,"value": "undefined"},{"import": 2011,"src": 3658,"name": "errno","kind": "const","type": 247,"value": 264},{"import": 2011,"src": 226,"name": "close","kind": "const","type": 292,"value": 312},{"import": 2011,"src": 3659,"name": "FChmodError"},{"import": 2011,"src": 3660,"name": "fchmod"},{"import": 2011,"src": 3661,"name": "FChownError"},{"import": 2011,"src": 3662,"name": "fchown"},{"import": 2011,"src": 3663,"name": "GetRandomError"},{"import": 2011,"src": 3664,"name": "getrandom"},{"import": 2011,"src": 18,"name": "abort","kind": "const","type": 9,"value": 18},{"import": 2011,"src": 3665,"name": "RaiseError","kind": "const","type": 954,"value": 1480},{"import": 2011,"src": 46,"name": "raise","kind": "const","type": 40,"value": 48},{"import": 2011,"src": 3666,"name": "KillError"},{"import": 2011,"src": 3667,"name": "kill"},{"import": 2011,"src": 26,"name": "exit","kind": "const","type": 22,"value": 28},{"import": 2011,"src": 3668,"name": "ReadError","kind": "const","type": 954,"value": 1888},{"import": 2011,"src": 314,"name": "read","kind": "const","type": 428,"value": 468},{"import": 2011,"src": 3669,"name": "readv"},{"import": 2011,"src": 3670,"name": "PReadError","kind": "const","type": 954,"value": 2555},{"import": 2011,"src": 3671,"name": "pread"},{"import": 2011,"src": 3672,"name": "TruncateError"},{"import": 2011,"src": 3673,"name": "ftruncate"},{"import": 2011,"src": 3674,"name": "preadv"},{"import": 2011,"src": 3675,"name": "WriteError","kind": "const","type": 954,"value": 972},{"import": 2011,"src": 32,"name": "write","kind": "const","type": 27,"value": 34},{"import": 2011,"src": 3676,"name": "writev"},{"import": 2011,"src": 3677,"name": "PWriteError","kind": "const","type": 954,"value": 2556},{"import": 2011,"src": 3678,"name": "pwrite"},{"import": 2011,"src": 3679,"name": "pwritev"},{"import": 2011,"src": 3680,"name": "OpenError","kind": "const","type": 954,"value": 2212},{"import": 2011,"src": 3681,"name": "open"},{"import": 2011,"src": 3682,"name": "openZ"},{"import": 2011,"src": 3683,"name": "openW"},{"import": 2011,"src": 3684,"name": "openat"},{"import": 2011,"src": 3685,"name": "openatWasi"},{"import": 2011,"src": 296,"name": "openatZ","kind": "const","type": 382,"value": 418},{"import": 2011,"src": 3686,"name": "openatW"},{"import": 2011,"src": 3687,"name": "dup"},{"import": 2011,"src": 3688,"name": "dup2"},{"import": 2011,"src": 3689,"name": "ExecveError"},{"import": 2011,"src": 3690,"name": "execveZ"},{"import": 2011,"src": 3691,"name": "Arg0Expand"},{"import": 2011,"src": 3692,"name": "execvpeZ_expandArg0"},{"import": 2011,"src": 3693,"name": "execvpeZ"},{"import": 2011,"src": 289,"name": "getenv","kind": "const","type": 376,"value": 410},{"import": 2011,"src": 291,"name": "getenvZ","kind": "const","type": 377,"value": 412},{"import": 2011,"src": 3694,"name": "getenvW"},{"import": 2011,"src": 3695,"name": "GetCwdError"},{"import": 2011,"src": 3696,"name": "getcwd"},{"import": 2011,"src": 3697,"name": "SymLinkError"},{"import": 2011,"src": 3698,"name": "symlink"},{"import": 2011,"src": 3699,"name": "symlinkZ"},{"import": 2011,"src": 3700,"name": "symlinkat"},{"import": 2011,"src": 3701,"name": "symlinkatWasi"},{"import": 2011,"src": 3702,"name": "symlinkatZ"},{"import": 2011,"src": 3703,"name": "LinkError"},{"import": 2011,"src": 3704,"name": "linkZ"},{"import": 2011,"src": 3705,"name": "link"},{"import": 2011,"src": 3706,"name": "LinkatError"},{"import": 2011,"src": 3707,"name": "linkatZ"},{"import": 2011,"src": 3708,"name": "linkat"},{"import": 2011,"src": 3709,"name": "UnlinkError"},{"import": 2011,"src": 3710,"name": "unlink"},{"import": 2011,"src": 3711,"name": "unlinkZ"},{"import": 2011,"src": 3712,"name": "unlinkW"},{"import": 2011,"src": 3713,"name": "UnlinkatError"},{"import": 2011,"src": 3714,"name": "unlinkat"},{"import": 2011,"src": 3715,"name": "unlinkatWasi"},{"import": 2011,"src": 3716,"name": "unlinkatZ"},{"import": 2011,"src": 3717,"name": "unlinkatW"},{"import": 2011,"src": 3718,"name": "RenameError"},{"import": 2011,"src": 3719,"name": "rename"},{"import": 2011,"src": 3720,"name": "renameZ"},{"import": 2011,"src": 3721,"name": "renameW"},{"import": 2011,"src": 3722,"name": "renameat"},{"import": 2011,"src": 3723,"name": "renameatWasi"},{"import": 2011,"src": 3724,"name": "renameatZ"},{"import": 2011,"src": 3725,"name": "renameatW"},{"import": 2011,"src": 3726,"name": "mkdirat"},{"import": 2011,"src": 3727,"name": "mkdiratWasi"},{"import": 2011,"src": 3728,"name": "mkdiratZ"},{"import": 2011,"src": 3729,"name": "mkdiratW"},{"import": 2011,"src": 3730,"name": "MakeDirError"},{"import": 2011,"src": 3731,"name": "mkdir"},{"import": 2011,"src": 3732,"name": "mkdirZ"},{"import": 2011,"src": 3733,"name": "mkdirW"},{"import": 2011,"src": 3734,"name": "DeleteDirError"},{"import": 2011,"src": 3735,"name": "rmdir"},{"import": 2011,"src": 3736,"name": "rmdirZ"},{"import": 2011,"src": 3737,"name": "rmdirW"},{"import": 2011,"src": 3738,"name": "ChangeCurDirError"},{"import": 2011,"src": 3739,"name": "chdir"},{"import": 2011,"src": 3740,"name": "chdirZ"},{"import": 2011,"src": 3741,"name": "chdirW"},{"import": 2011,"src": 3742,"name": "FchdirError"},{"import": 2011,"src": 3743,"name": "fchdir"},{"import": 2011,"src": 3744,"name": "ReadLinkError","kind": "const","type": 954,"value": 2557},{"import": 2011,"src": 3745,"name": "readlink"},{"import": 2011,"src": 3746,"name": "readlinkW"},{"import": 2011,"src": 3747,"name": "readlinkZ"},{"import": 2011,"src": 3748,"name": "readlinkat"},{"import": 2011,"src": 3749,"name": "readlinkatWasi"},{"import": 2011,"src": 3750,"name": "readlinkatW"},{"import": 2011,"src": 3751,"name": "readlinkatZ"},{"import": 2011,"src": 3752,"name": "SetEidError"},{"import": 2011,"src": 3753,"name": "SetIdError"},{"import": 2011,"src": 3754,"name": "setuid"},{"import": 2011,"src": 3755,"name": "seteuid"},{"import": 2011,"src": 3756,"name": "setreuid"},{"import": 2011,"src": 3757,"name": "setgid"},{"import": 2011,"src": 3758,"name": "setegid"},{"import": 2011,"src": 3759,"name": "setregid"},{"import": 2011,"src": 334,"name": "isatty","kind": "const","type": 453,"value": 500},{"import": 2011,"src": 3760,"name": "isCygwinPty"},{"import": 2011,"src": 3761,"name": "SocketError"},{"import": 2011,"src": 3762,"name": "socket"},{"import": 2011,"src": 3763,"name": "ShutdownError"},{"import": 2011,"src": 3764,"name": "ShutdownHow"},{"import": 2011,"src": 3765,"name": "shutdown"},{"import": 2011,"src": 3766,"name": "closeSocket"},{"import": 2011,"src": 3767,"name": "BindError"},{"import": 2011,"src": 3768,"name": "bind"},{"import": 2011,"src": 3769,"name": "ListenError"},{"import": 2011,"src": 3770,"name": "listen"},{"import": 2011,"src": 3771,"name": "AcceptError"},{"import": 2011,"src": 3772,"name": "accept"},{"import": 2011,"src": 3773,"name": "EpollCreateError"},{"import": 2011,"src": 3774,"name": "epoll_create1"},{"import": 2011,"src": 3775,"name": "EpollCtlError"},{"import": 2011,"src": 3776,"name": "epoll_ctl"},{"import": 2011,"src": 3777,"name": "epoll_wait"},{"import": 2011,"src": 3778,"name": "EventFdError"},{"import": 2011,"src": 3779,"name": "eventfd"},{"import": 2011,"src": 3780,"name": "GetSockNameError"},{"import": 2011,"src": 3781,"name": "getsockname"},{"import": 2011,"src": 3782,"name": "getpeername"},{"import": 2011,"src": 3783,"name": "ConnectError"},{"import": 2011,"src": 3784,"name": "connect"},{"import": 2011,"src": 3785,"name": "getsockoptError"},{"import": 2011,"src": 3786,"name": "WaitPidResult"},{"import": 2011,"src": 3787,"name": "waitpid"},{"import": 2011,"src": 3788,"name": "FStatError","kind": "const","type": 954,"value": 1887},{"import": 2011,"src": 299,"name": "fstat","kind": "const","type": 385,"value": 421},{"import": 2011,"src": 3789,"name": "FStatAtError"},{"import": 2011,"src": 3790,"name": "fstatat"},{"import": 2011,"src": 3791,"name": "fstatatWasi"},{"import": 2011,"src": 3792,"name": "fstatatZ"},{"import": 2011,"src": 3793,"name": "KQueueError"},{"import": 2011,"src": 3794,"name": "kqueue"},{"import": 2011,"src": 3795,"name": "KEventError"},{"import": 2011,"src": 3796,"name": "kevent"},{"import": 2011,"src": 3797,"name": "INotifyInitError"},{"import": 2011,"src": 3798,"name": "inotify_init1"},{"import": 2011,"src": 3799,"name": "INotifyAddWatchError"},{"import": 2011,"src": 3800,"name": "inotify_add_watch"},{"import": 2011,"src": 3801,"name": "inotify_add_watchZ"},{"import": 2011,"src": 3802,"name": "inotify_rm_watch"},{"import": 2011,"src": 3803,"name": "MProtectError"},{"import": 2011,"src": 3804,"name": "mprotect"},{"import": 2011,"src": 3805,"name": "ForkError"},{"import": 2011,"src": 3806,"name": "fork"},{"import": 2011,"src": 3807,"name": "MMapError","kind": "const","type": 954,"value": 2068},{"import": 2011,"src": 73,"name": "mmap","kind": "const","type": 70,"value": 78},{"import": 2011,"src": 279,"name": "munmap","kind": "const","type": 367,"value": 400},{"import": 2011,"src": 3808,"name": "AccessError","kind": "const","type": 954,"value": 2558},{"import": 2011,"src": 3809,"name": "access"},{"import": 2011,"src": 3810,"name": "accessZ"},{"import": 2011,"src": 3811,"name": "accessW"},{"import": 2011,"src": 3812,"name": "faccessat"},{"import": 2011,"src": 3813,"name": "faccessatZ"},{"import": 2011,"src": 3814,"name": "faccessatW"},{"import": 2011,"src": 3815,"name": "PipeError"},{"import": 2011,"src": 3816,"name": "pipe"},{"import": 2011,"src": 3817,"name": "pipe2"},{"import": 2011,"src": 3818,"name": "SysCtlError","kind": "const","type": 954,"value": 2559},{"import": 2011,"src": 3819,"name": "sysctl"},{"import": 2011,"src": 3820,"name": "sysctlbynameZ"},{"import": 2011,"src": 3821,"name": "gettimeofday"},{"import": 2011,"src": 3822,"name": "SeekError","kind": "const","type": 954,"value": 2560},{"import": 2011,"src": 3823,"name": "lseek_SET"},{"import": 2011,"src": 3824,"name": "lseek_CUR"},{"import": 2011,"src": 3825,"name": "lseek_END"},{"import": 2011,"src": 3826,"name": "lseek_CUR_get"},{"import": 2011,"src": 3827,"name": "FcntlError"},{"import": 2011,"src": 3828,"name": "fcntl"},{"import": 2011,"src": 3829,"name": "FlockError","kind": "const","type": 954,"value": 2213},{"import": 2011,"src": 297,"name": "flock","kind": "const","type": 383,"value": 419},{"import": 2011,"src": 3830,"name": "RealPathError","kind": "const","type": 954,"value": 2561},{"import": 2011,"src": 3831,"name": "realpath"},{"import": 2011,"src": 3832,"name": "realpathZ"},{"import": 2011,"src": 3833,"name": "realpathW"},{"import": 2011,"src": 3834,"name": "getFdPath"},{"import": 2011,"src": 3835,"name": "nanosleep"},{"import": 2011,"src": 61,"name": "dl_iterate_phdr","kind": "const","type": 2562,"value": 1337},{"import": 2011,"src": 3836,"name": "ClockGetTimeError","kind": "const","type": 954,"value": 2247},{"import": 2011,"src": 372,"name": "clock_gettime","kind": "const","type": 519,"value": 592},{"import": 2011,"src": 371,"name": "clock_getres","kind": "const","type": 519,"value": 591},{"import": 2011,"src": 3837,"name": "SchedGetAffinityError"},{"import": 2011,"src": 3838,"name": "sched_getaffinity"},{"import": 2011,"src": 220,"name": "toPosixPath","kind": "const","type": 286,"value": 306},{"import": 2011,"src": 3839,"name": "unexpected_error_tracing","kind": "const","type": 967,"value": "true"},{"import": 2011,"src": 3840,"name": "UnexpectedError","kind": "const","type": 954,"value": 1480},{"import": 2011,"src": 185,"name": "unexpectedErrno","kind": "const","type": 251,"value": 268},{"import": 2011,"src": 3841,"name": "SigaltstackError"},{"import": 2011,"src": 3842,"name": "sigaltstack"},{"import": 2011,"src": 29,"name": "sigaction","kind": "const","type": 24,"value": 31},{"import": 2011,"src": 3843,"name": "FutimensError"},{"import": 2011,"src": 3844,"name": "futimens"},{"import": 2011,"src": 3845,"name": "GetHostNameError"},{"import": 2011,"src": 3846,"name": "gethostname"},{"import": 2011,"src": 3847,"name": "uname"},{"import": 2011,"src": 3848,"name": "res_mkquery"},{"import": 2011,"src": 3849,"name": "SendError"},{"import": 2011,"src": 3850,"name": "SendMsgError"},{"import": 2011,"src": 3851,"name": "sendmsg"},{"import": 2011,"src": 3852,"name": "SendToError"},{"import": 2011,"src": 3853,"name": "sendto"},{"import": 2011,"src": 3854,"name": "send"},{"import": 2011,"src": 3855,"name": "SendFileError"},{"import": 2011,"src": 3856,"name": "sendfile"},{"import": 2011,"src": 3857,"name": "CopyFileRangeError"},{"import": 2011,"src": 3858,"name": "copy_file_range"},{"import": 2011,"src": 3859,"name": "PollError"},{"import": 2011,"src": 3860,"name": "poll"},{"import": 2011,"src": 3861,"name": "PPollError"},{"import": 2011,"src": 3862,"name": "ppoll"},{"import": 2011,"src": 3863,"name": "RecvFromError"},{"import": 2011,"src": 3864,"name": "recv"},{"import": 2011,"src": 3865,"name": "recvfrom"},{"import": 2011,"src": 3866,"name": "DnExpandError"},{"import": 2011,"src": 3867,"name": "dn_expand"},{"import": 2011,"src": 3868,"name": "SchedYieldError"},{"import": 2011,"src": 3869,"name": "sched_yield"},{"import": 2011,"src": 3870,"name": "SetSockOptError"},{"import": 2011,"src": 3871,"name": "setsockopt"},{"import": 2011,"src": 3872,"name": "MemFdCreateError"},{"import": 2011,"src": 3873,"name": "memfd_createZ"},{"import": 2011,"src": 3874,"name": "MFD_NAME_PREFIX"},{"import": 2011,"src": 3875,"name": "MFD_MAX_NAME_LEN"},{"import": 2011,"src": 3876,"name": "memfd_create"},{"import": 2011,"src": 3877,"name": "getrusage"},{"import": 2011,"src": 3878,"name": "TermiosGetError"},{"import": 2011,"src": 3879,"name": "tcgetattr"},{"import": 2011,"src": 3880,"name": "TermiosSetError"},{"import": 2011,"src": 3881,"name": "tcsetattr"},{"import": 2011,"src": 3882,"name": "IoCtl_SIOCGIFINDEX_Error"},{"import": 2011,"src": 3883,"name": "ioctl_SIOCGIFINDEX"},{"import": 2011,"src": 3884,"name": "signalfd"},{"import": 2011,"src": 3885,"name": "SyncError"},{"import": 2011,"src": 3886,"name": "sync"},{"import": 2011,"src": 3887,"name": "syncfs"},{"import": 2011,"src": 3888,"name": "fsync"},{"import": 2011,"src": 3889,"name": "fdatasync"},{"import": 2011,"src": 3890,"name": "PrctlError"},{"import": 2011,"src": 3891,"name": "prctl"},{"import": 2011,"src": 3892,"name": "GetrlimitError"},{"import": 2011,"src": 3893,"name": "getrlimit"},{"import": 2011,"src": 3894,"name": "SetrlimitError","kind": "const","type": 954,"value": 2162},{"import": 2011,"src": 177,"name": "setrlimit","kind": "const","type": 244,"value": 260},{"import": 2011,"src": 3895,"name": "MadviseError"},{"import": 2011,"src": 3896,"name": "madvise"},{"import": 2011,"src": 3897,"name": "PerfEventOpenError"},{"import": 2011,"src": 3898,"name": "perf_event_open"},{"import": 2011,"src": 3899,"name": "root","kind": "const","type": 954,"value": 1284},{"import": 2011,"src": 3900,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 2011,"src": 3901,"name": "builtin","kind": "const","type": 954,"value": 1283},{"import": 2011,"src": 3902,"name": "assert","kind": "const","type": 30,"value": 38},{"import": 2011,"src": 3903,"name": "math"},{"import": 2011,"src": 3904,"name": "mem","kind": "const","type": 954,"value": 1971},{"import": 2011,"src": 3905,"name": "elf","kind": "const","type": 954,"value": 2003},{"import": 2011,"src": 3906,"name": "dl","kind": "const","type": 954,"value": 2563},{"import": 2011,"src": 3907,"name": "MAX_PATH_BYTES","kind": "const","type": 1034,"value": null},{"import": 2011,"src": 3908,"name": "is_windows","kind": "const","type": 967,"value": "false"},{"import": 2011,"src": 3909,"name": "getRandomBytesDevURandom"},{"import": 2011,"src": 3910,"name": "openOptionsFromFlags"},{"import": 2011,"src": 3911,"name": "setSockFlags"},{"import": 2011,"src": 3912,"name": "count_iovec_bytes"},{"import": 2011,"src": 3913,"name": "has_copy_file_range_syscall"},{"import": 2011,"src": 3914,"name": "toMemFdPath"},{"import": 2012,"src": 3915,"name": "DbiStreamHeader"},{"import": 2012,"src": 3916,"name": "SectionContribEntry","kind": "const","type": 954,"value": 2564},{"import": 2012,"src": 3917,"name": "ModInfo","kind": "const","type": 954,"value": 2565},{"import": 2012,"src": 3918,"name": "SectionMapHeader"},{"import": 2012,"src": 3919,"name": "SectionMapEntry"},{"import": 2012,"src": 3920,"name": "StreamType"},{"import": 2012,"src": 3921,"name": "SymbolKind"},{"import": 2012,"src": 3922,"name": "TypeIndex"},{"import": 2012,"src": 3923,"name": "ProcSym"},{"import": 2012,"src": 3924,"name": "ProcSymFlags"},{"import": 2012,"src": 3925,"name": "SectionContrSubstreamVersion"},{"import": 2012,"src": 3926,"name": "RecordPrefix"},{"import": 2012,"src": 3927,"name": "LineFragmentHeader"},{"import": 2012,"src": 3928,"name": "LineFlags"},{"import": 2012,"src": 3929,"name": "LineBlockFragmentHeader"},{"import": 2012,"src": 3930,"name": "LineNumberEntry"},{"import": 2012,"src": 3931,"name": "ColumnNumberEntry"},{"import": 2012,"src": 3932,"name": "FileChecksumEntryHeader"},{"import": 2012,"src": 3933,"name": "DebugSubsectionKind"},{"import": 2012,"src": 3934,"name": "DebugSubsectionHeader"},{"import": 2012,"src": 3935,"name": "PDBStringTableHeader"},{"import": 2012,"src": 3936,"name": "Pdb","kind": "const","type": 954,"value": 2566},{"import": 2012,"src": 3937,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 2012,"src": 3938,"name": "io"},{"import": 2012,"src": 3939,"name": "math"},{"import": 2012,"src": 3940,"name": "mem","kind": "const","type": 954,"value": 1971},{"import": 2012,"src": 3941,"name": "os"},{"import": 2012,"src": 3942,"name": "coff"},{"import": 2012,"src": 3943,"name": "fs"},{"import": 2012,"src": 3944,"name": "File","kind": "const","type": 954,"value": 971},{"import": 2012,"src": 3945,"name": "debug"},{"import": 2012,"src": 3946,"name": "ArrayList"},{"import": 2012,"src": 3947,"name": "readSparseBitVector"},{"import": 2012,"src": 3948,"name": "Msf","kind": "const","type": 954,"value": 2567},{"import": 2012,"src": 3949,"name": "blockCountFromSize"},{"import": 2012,"src": 3950,"name": "SuperBlock"},{"import": 2012,"src": 3951,"name": "MsfStream","kind": "const","type": 954,"value": 2568},{"import": 2013,"src": 3952,"name": "abort"},{"import": 2013,"src": 3953,"name": "exit","kind": "const","type": 22,"value": 28},{"import": 2013,"src": 3954,"name": "changeCurDir"},{"import": 2013,"src": 3955,"name": "changeCurDirC"},{"import": 2013,"src": 3956,"name": "getCwd"},{"import": 2013,"src": 3957,"name": "getCwdAlloc"},{"import": 2013,"src": 3958,"name": "getEnvMap"},{"import": 2013,"src": 3959,"name": "GetEnvVarOwnedError"},{"import": 2013,"src": 3960,"name": "getEnvVarOwned"},{"import": 2013,"src": 211,"name": "hasEnvVarConstant","kind": "const","type": 2569,"value": 1338},{"import": 2013,"src": 3961,"name": "hasEnvVar"},{"import": 2013,"src": 3962,"name": "ArgIteratorPosix","kind": "const","type": 954,"value": 1661},{"import": 2013,"src": 3963,"name": "ArgIteratorWasi"},{"import": 2013,"src": 3964,"name": "ArgIteratorWindows","kind": "const","type": 954,"value": 2570},{"import": 2013,"src": 3965,"name": "ArgIterator","kind": "const","type": 954,"value": 1608},{"import": 2013,"src": 365,"name": "args","kind": "const","type": 501,"value": 573},{"import": 2013,"src": 3966,"name": "argsWithAllocator"},{"import": 2013,"src": 362,"name": "argsAlloc","kind": "const","type": 498,"value": 570},{"import": 2013,"src": 517,"name": "argsFree","kind": "const","type": 766,"value": 893},{"import": 2013,"src": 3967,"name": "UserInfo"},{"import": 2013,"src": 3968,"name": "getUserInfo"},{"import": 2013,"src": 3969,"name": "posixGetUserInfo"},{"import": 2013,"src": 214,"name": "getBaseAddress","kind": "const","type": 280,"value": 300},{"import": 2013,"src": 3970,"name": "getSelfExeSharedLibPaths"},{"import": 2013,"src": 3971,"name": "can_execv"},{"import": 2013,"src": 3972,"name": "ExecvError"},{"import": 2013,"src": 3973,"name": "execv"},{"import": 2013,"src": 3974,"name": "execve"},{"import": 2013,"src": 3975,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 2013,"src": 3976,"name": "builtin","kind": "const","type": 954,"value": 1283},{"import": 2013,"src": 3977,"name": "os","kind": "const","type": 954,"value": 2011},{"import": 2013,"src": 3978,"name": "fs"},{"import": 2013,"src": 3979,"name": "BufMap"},{"import": 2013,"src": 3980,"name": "mem","kind": "const","type": 954,"value": 1971},{"import": 2013,"src": 3981,"name": "math","kind": "const","type": 954,"value": 2009},{"import": 2013,"src": 3982,"name": "Allocator","kind": "const","type": 954,"value": 1312},{"import": 2013,"src": 3983,"name": "assert"},{"import": 2013,"src": 3984,"name": "testing"},{"import": 2013,"src": 3985,"name": "child_process"},{"import": 2013,"src": 3986,"name": "testWindowsCmdLine"},{"import": 2014,"src": 3987,"name": "binarySearch"},{"import": 2014,"src": 3988,"name": "insertionSort"},{"import": 2014,"src": 3989,"name": "sort","kind": "const","type": 2571,"value": 1339},{"import": 2014,"src": 3990,"name": "asc"},{"import": 2014,"src": 3991,"name": "desc"},{"import": 2014,"src": 3992,"name": "argMin"},{"import": 2014,"src": 3993,"name": "min"},{"import": 2014,"src": 3994,"name": "argMax"},{"import": 2014,"src": 3995,"name": "max"},{"import": 2014,"src": 3996,"name": "isSorted"},{"import": 2014,"src": 3997,"name": "std"},{"import": 2014,"src": 3998,"name": "assert"},{"import": 2014,"src": 3999,"name": "testing"},{"import": 2014,"src": 4000,"name": "mem"},{"import": 2014,"src": 4001,"name": "math"},{"import": 2014,"src": 4002,"name": "Range"},{"import": 2014,"src": 4003,"name": "Iterator"},{"import": 2014,"src": 4004,"name": "Pull"},{"import": 2014,"src": 4005,"name": "mergeInPlace"},{"import": 2014,"src": 4006,"name": "mergeInternal"},{"import": 2014,"src": 4007,"name": "blockSwap"},{"import": 2014,"src": 4008,"name": "findFirstForward"},{"import": 2014,"src": 4009,"name": "findFirstBackward"},{"import": 2014,"src": 4010,"name": "findLastForward"},{"import": 2014,"src": 4011,"name": "findLastBackward"},{"import": 2014,"src": 4012,"name": "binaryFirst"},{"import": 2014,"src": 4013,"name": "binaryLast"},{"import": 2014,"src": 4014,"name": "mergeInto"},{"import": 2014,"src": 4015,"name": "mergeExternal"},{"import": 2014,"src": 4016,"name": "swap"},{"import": 2014,"src": 4017,"name": "testStableSort"},{"import": 2014,"src": 4018,"name": "IdAndValue"},{"import": 2014,"src": 4019,"name": "cmpByValue"},{"import": 2014,"src": 4020,"name": "asc_u8"},{"import": 2014,"src": 4021,"name": "asc_i32"},{"import": 2014,"src": 4022,"name": "desc_u8"},{"import": 2014,"src": 4023,"name": "desc_i32"},{"import": 2014,"src": 4024,"name": "fixed_buffer_mem"},{"import": 2014,"src": 4025,"name": "fuzzTest"},{"import": 2015,"src": 4026,"name": "FailingAllocator"},{"import": 2015,"src": 4027,"name": "allocator"},{"import": 2015,"src": 4028,"name": "allocator_instance","kind": "var","type": 1140,"value": null},{"import": 2015,"src": 4029,"name": "failing_allocator"},{"import": 2015,"src": 4030,"name": "failing_allocator_instance"},{"import": 2015,"src": 4031,"name": "base_allocator_instance"},{"import": 2015,"src": 4032,"name": "log_level","kind": "var","type": 2435,"value": null},{"import": 2015,"src": 4033,"name": "zig_exe_path","kind": "var","type": 978,"value": "undefined"},{"import": 2015,"src": 4034,"name": "expectError"},{"import": 2015,"src": 432,"name": "expectEqual","kind": "const","type": 2572,"value": 1340},{"import": 2015,"src": 4035,"name": "expectFmt"},{"import": 2015,"src": 4036,"name": "expectApproxEqAbs"},{"import": 2015,"src": 4037,"name": "expectApproxEqRel"},{"import": 2015,"src": 4038,"name": "expectEqualSlices"},{"import": 2015,"src": 605,"name": "expect","kind": "const","type": 949,"value": 1130},{"import": 2015,"src": 4039,"name": "TmpDir"},{"import": 2015,"src": 4040,"name": "tmpDir"},{"import": 2015,"src": 4041,"name": "expectEqualStrings"},{"import": 2015,"src": 4042,"name": "expectStringEndsWith"},{"import": 2015,"src": 9,"name": "refAllDecls","kind": "const","type": 2573,"value": 1341},{"import": 2015,"src": 4043,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 2015,"src": 4044,"name": "builtin","kind": "const","type": 954,"value": 1283},{"import": 2015,"src": 4045,"name": "math"},{"import": 2015,"src": 4046,"name": "print"},{"import": 2015,"src": 4047,"name": "getCwdOrWasiPreopen"},{"import": 2015,"src": 4048,"name": "printIndicatorLine"},{"import": 2015,"src": 4049,"name": "printWithVisibleNewlines"},{"import": 2015,"src": 4050,"name": "printLine"},{"import": 2016,"src": 4051,"name": "epoch"},{"import": 2016,"src": 4052,"name": "sleep"},{"import": 2016,"src": 4053,"name": "timestamp"},{"import": 2016,"src": 4054,"name": "milliTimestamp"},{"import": 2016,"src": 4055,"name": "nanoTimestamp"},{"import": 2016,"src": 4056,"name": "ns_per_us","kind": "const","type": 1034,"value": null},{"import": 2016,"src": 4057,"name": "ns_per_ms","kind": "const","type": 1034,"value": null},{"import": 2016,"src": 4058,"name": "ns_per_s","kind": "const","type": 1034,"value": null},{"import": 2016,"src": 4059,"name": "ns_per_min"},{"import": 2016,"src": 4060,"name": "ns_per_hour"},{"import": 2016,"src": 4061,"name": "ns_per_day"},{"import": 2016,"src": 4062,"name": "ns_per_week"},{"import": 2016,"src": 4063,"name": "us_per_ms"},{"import": 2016,"src": 4064,"name": "us_per_s"},{"import": 2016,"src": 4065,"name": "us_per_min"},{"import": 2016,"src": 4066,"name": "us_per_hour"},{"import": 2016,"src": 4067,"name": "us_per_day"},{"import": 2016,"src": 4068,"name": "us_per_week"},{"import": 2016,"src": 4069,"name": "ms_per_s"},{"import": 2016,"src": 4070,"name": "ms_per_min"},{"import": 2016,"src": 4071,"name": "ms_per_hour"},{"import": 2016,"src": 4072,"name": "ms_per_day"},{"import": 2016,"src": 4073,"name": "ms_per_week"},{"import": 2016,"src": 4074,"name": "s_per_min"},{"import": 2016,"src": 4075,"name": "s_per_hour"},{"import": 2016,"src": 4076,"name": "s_per_day"},{"import": 2016,"src": 4077,"name": "s_per_week"},{"import": 2016,"src": 4078,"name": "Timer","kind": "const","type": 954,"value": 1641},{"import": 2016,"src": 4079,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 2016,"src": 4080,"name": "builtin","kind": "const","type": 954,"value": 1283},{"import": 2016,"src": 4081,"name": "assert"},{"import": 2016,"src": 4082,"name": "testing"},{"import": 2016,"src": 4083,"name": "os","kind": "const","type": 954,"value": 2011},{"import": 2016,"src": 4084,"name": "math"},{"import": 2016,"src": 4085,"name": "is_windows","kind": "const","type": 967,"value": "false"},{"import": 2016,"src": 4086,"name": "safeMulDiv"},{"import": 2017,"src": 4087,"name": "utf8CodepointSequenceLength"},{"import": 2017,"src": 196,"name": "utf8ByteSequenceLength","kind": "const","type": 261,"value": 279},{"import": 2017,"src": 4088,"name": "utf8Encode"},{"import": 2017,"src": 197,"name": "utf8Decode","kind": "const","type": 262,"value": 280},{"import": 2017,"src": 270,"name": "utf8Decode2","kind": "const","type": 360,"value": 391},{"import": 2017,"src": 271,"name": "utf8Decode3","kind": "const","type": 361,"value": 392},{"import": 2017,"src": 272,"name": "utf8Decode4","kind": "const","type": 362,"value": 393},{"import": 2017,"src": 4089,"name": "utf8ValidCodepoint"},{"import": 2017,"src": 194,"name": "utf8CountCodepoints","kind": "const","type": 259,"value": 277},{"import": 2017,"src": 4090,"name": "utf8ValidateSlice"},{"import": 2017,"src": 4091,"name": "Utf8View"},{"import": 2017,"src": 4092,"name": "Utf8Iterator"},{"import": 2017,"src": 4093,"name": "Utf16LeIterator"},{"import": 2017,"src": 4094,"name": "utf16leToUtf8Alloc"},{"import": 2017,"src": 4095,"name": "utf16leToUtf8AllocZ"},{"import": 2017,"src": 4096,"name": "utf16leToUtf8"},{"import": 2017,"src": 4097,"name": "utf8ToUtf16LeWithNull"},{"import": 2017,"src": 4098,"name": "utf8ToUtf16Le"},{"import": 2017,"src": 4099,"name": "utf8ToUtf16LeStringLiteral"},{"import": 2017,"src": 4100,"name": "fmtUtf16le"},{"import": 2017,"src": 4101,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 2017,"src": 4102,"name": "assert","kind": "const","type": 30,"value": 38},{"import": 2017,"src": 4103,"name": "testing"},{"import": 2017,"src": 4104,"name": "mem","kind": "const","type": 954,"value": 1971},{"import": 2017,"src": 4105,"name": "Utf8DecodeError","kind": "const","type": 954,"value": 2169},{"import": 2017,"src": 4106,"name": "Utf8Decode2Error","kind": "const","type": 954,"value": 2205},{"import": 2017,"src": 4107,"name": "Utf8Decode3Error","kind": "const","type": 954,"value": 2206},{"import": 2017,"src": 4108,"name": "Utf8Decode4Error","kind": "const","type": 954,"value": 2207},{"import": 2017,"src": 4109,"name": "testUtf8Encode"},{"import": 2017,"src": 4110,"name": "testUtf8EncodeError"},{"import": 2017,"src": 4111,"name": "testErrorEncode"},{"import": 2017,"src": 4112,"name": "testUtf8IteratorOnAscii"},{"import": 2017,"src": 4113,"name": "testUtf8ViewBad"},{"import": 2017,"src": 4114,"name": "testUtf8ViewOk"},{"import": 2017,"src": 4115,"name": "testBadUtf8Slice"},{"import": 2017,"src": 4116,"name": "testValidUtf8"},{"import": 2017,"src": 4117,"name": "testInvalidUtf8ContinuationBytes"},{"import": 2017,"src": 4118,"name": "testOverlongUtf8Codepoint"},{"import": 2017,"src": 4119,"name": "testMiscInvalidUtf8"},{"import": 2017,"src": 4120,"name": "testUtf8Peeking"},{"import": 2017,"src": 4121,"name": "testError"},{"import": 2017,"src": 4122,"name": "testValid"},{"import": 2017,"src": 4123,"name": "testDecode"},{"import": 2017,"src": 4124,"name": "calcUtf16LeLen"},{"import": 2017,"src": 4125,"name": "formatUtf16le"},{"import": 2017,"src": 4126,"name": "testUtf8CountCodepoints"},{"import": 2017,"src": 4127,"name": "testUtf8ValidCodepoint"},{"import": 2018,"src": 261,"name": "callMain","kind": "const","type": 351,"value": 381},{"import": 2018,"src": 4128,"name": "call_wWinMain"},{"import": 2018,"src": 4129,"name": "root","kind": "const","type": 954,"value": 1284},{"import": 2018,"src": 4130,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 2018,"src": 4131,"name": "builtin","kind": "const","type": 954,"value": 1283},{"import": 2018,"src": 4132,"name": "assert","kind": "const","type": 30,"value": 38},{"import": 2018,"src": 4133,"name": "uefi"},{"import": 2018,"src": 4134,"name": "elf","kind": "const","type": 954,"value": 2003},{"import": 2018,"src": 4135,"name": "tlcsprng"},{"import": 2018,"src": 4136,"name": "native_arch","kind": "const","type": 968,"value": null},{"import": 2018,"src": 4137,"name": "native_os","kind": "const","type": 1011,"value": null},{"import": 2018,"src": 4138,"name": "argc_argv_ptr","kind": "var","type": 1173,"value": "undefined"},{"import": 2018,"src": 4139,"name": "start_sym_name","kind": "const","type": 2574,"value": null},{"import": 2018,"src": 4140,"name": "main2"},{"import": 2018,"src": 4141,"name": "_start2"},{"import": 2018,"src": 4142,"name": "callMain2"},{"import": 2018,"src": 4143,"name": "wasmMain2"},{"import": 2018,"src": 4144,"name": "wWinMainCRTStartup2"},{"import": 2018,"src": 4145,"name": "exit2"},{"import": 2018,"src": 4146,"name": "ExitProcess"},{"import": 2018,"src": 4147,"name": "_DllMainCRTStartup"},{"import": 2018,"src": 4148,"name": "wasm_freestanding_start"},{"import": 2018,"src": 4149,"name": "wasi_start"},{"import": 2018,"src": 4150,"name": "EfiMain"},{"import": 2018,"src": 7,"name": "_start","kind": "const","type": 6,"value": 7},{"import": 2018,"src": 4151,"name": "WinStartup"},{"import": 2018,"src": 4152,"name": "wWinMainCRTStartup"},{"import": 2018,"src": 10,"name": "posixCallMainAndExit","kind": "const","type": 9,"value": 10},{"import": 2018,"src": 25,"name": "expandStackSize","kind": "const","type": 21,"value": 27},{"import": 2018,"src": 27,"name": "callMainWithArgs","kind": "const","type": 23,"value": 29},{"import": 2018,"src": 4153,"name": "main"},{"import": 2018,"src": 4154,"name": "mainWithoutEnv"},{"import": 2018,"src": 4155,"name": "bad_main_ret"},{"import": 2018,"src": 180,"name": "initEventLoopAndCallMain","kind": "const","type": 246,"value": 263},{"import": 2018,"src": 4156,"name": "initEventLoopAndCallWinMain"},{"import": 2018,"src": 4157,"name": "callMainAsync"},{"import": 2018,"src": 4158,"name": "callWinMainAsync"},{"import": 2028,"src": 4159,"name": "Impl","kind": "const","type": 954,"value": 2160},{"import": 2028,"src": 4160,"name": "set"},{"import": 2028,"src": 22,"name": "wait","kind": "const","type": 19,"value": 23},{"import": 2028,"src": 4161,"name": "reset"},{"import": 2028,"src": 4162,"name": "TimedWaitResult","kind": "const","type": 954,"value": 1533},{"import": 2028,"src": 4163,"name": "timedWait"},{"import": 2028,"src": 4164,"name": "DebugEvent"},{"import": 2028,"src": 4165,"name": "AtomicEvent","kind": "const","type": 954,"value": 2160},{"import": 2028,"src": 4166,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 2028,"src": 4167,"name": "builtin","kind": "const","type": 954,"value": 1283},{"import": 2028,"src": 4168,"name": "StaticResetEvent","kind": "const","type": 954,"value": 2028},{"import": 2028,"src": 4169,"name": "assert"},{"import": 2028,"src": 4170,"name": "os"},{"import": 2028,"src": 4171,"name": "time","kind": "const","type": 954,"value": 2016},{"import": 2028,"src": 4172,"name": "linux","kind": "const","type": 954,"value": 2405},{"import": 2028,"src": 4173,"name": "windows"},{"import": 2028,"src": 4174,"name": "testing"},{"import": 1941,"src": 388,"name": "tryLock","kind": "const","type": 551,"value": 633},{"import": 1941,"src": 30,"name": "lock","kind": "const","type": 25,"value": 32},{"import": 1941,"src": 172,"name": "unlock","kind": "const","type": 25,"value": 254},{"import": 1941,"src": 4175,"name": "State","kind": "const","type": 954,"value": 1479},{"import": 1941,"src": 183,"name": "lockSlow","kind": "const","type": 249,"value": 266},{"import": 1941,"src": 254,"name": "unlockSlow","kind": "const","type": 25,"value": 373},{"import": 2005,"src": 39,"name": "number","kind": "const","type": 33,"value": 41},{"import": 2005,"src": 40,"name": "until","kind": "const","type": 34,"value": 42},{"import": 2005,"src": 41,"name": "char","kind": "const","type": 35,"value": 43},{"import": 2005,"src": 38,"name": "maybe","kind": "const","type": 32,"value": 40},{"import": 2005,"src": 37,"name": "specifier","kind": "const","type": 31,"value": 39},{"import": 2005,"src": 42,"name": "peek","kind": "const","type": 36,"value": 44},{"import": 2005,"src": 45,"name": "hasUnusedArgs","kind": "const","type": 39,"value": 47},{"import": 2005,"src": 43,"name": "nextArg","kind": "const","type": 37,"value": 45},{"import": 2002,"src": 118,"name": "getAttrString","kind": "const","type": 141,"value": 152},{"import": 2002,"src": 4176,"name": "Attr","kind": "const","type": 954,"value": 1008},{"import": 2002,"src": 117,"name": "getAttr","kind": "const","type": 140,"value": 151},{"import": 2002,"src": 121,"name": "getAttrAddr","kind": "const","type": 145,"value": 156},{"import": 2002,"src": 148,"name": "getAttrSecOffset","kind": "const","type": 184,"value": 198},{"import": 2002,"src": 4177,"name": "getAttrUnsignedLe"},{"import": 2002,"src": 120,"name": "getAttrRef","kind": "const","type": 144,"value": 155},{"import": 2002,"src": 122,"name": "asUnsignedLe","kind": "const","type": 146,"value": 157},{"import": 2028,"src": 4178,"name": "init"},{"import": 2028,"src": 4179,"name": "deinit"},{"import": 2028,"src": 4180,"name": "set"},{"import": 2028,"src": 173,"name": "wait","kind": "const","type": 240,"value": 255},{"import": 2028,"src": 255,"name": "timedWait","kind": "const","type": 345,"value": 374},{"import": 2028,"src": 4181,"name": "reset"},{"import": 2028,"src": 4182,"name": "Futex","kind": "const","type": 954,"value": 2576},{"import": 2028,"src": 4183,"name": "SpinFutex"},{"import": 2028,"src": 4184,"name": "LinuxFutex","kind": "const","type": 954,"value": 2576},{"import": 2028,"src": 4185,"name": "WindowsFutex"},{"import": 2028,"src": 4186,"name": "WAKE","kind": "const","type": 1034,"value": null},{"import": 2028,"src": 4187,"name": "WAIT","kind": "const","type": 1034,"value": null},{"import": 2173,"src": 4188,"name": "ArenaAllocator","kind": "const","type": 954,"value": 1491},{"import": 2173,"src": 4189,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 2173,"src": 4190,"name": "assert"},{"import": 2173,"src": 4191,"name": "mem","kind": "const","type": 954,"value": 1971},{"import": 2173,"src": 4192,"name": "Allocator","kind": "const","type": 954,"value": 1312},{"import": 2563,"src": 216,"name": "end","kind": "const","type": 282,"value": 302},{"import": 2563,"src": 217,"name": "next","kind": "const","type": 283,"value": 303},{"import": 2225,"src": 4193,"name": "Wyhash","kind": "const","type": 954,"value": 2379},{"import": 2225,"src": 4194,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 2225,"src": 4195,"name": "mem","kind": "const","type": 954,"value": 1971},{"import": 2225,"src": 4196,"name": "primes","kind": "const","type": 2580,"value": null},{"import": 2225,"src": 355,"name": "read_bytes","kind": "const","type": 2581,"value": 1342},{"import": 2225,"src": 356,"name": "read_8bytes_swapped","kind": "const","type": 490,"value": 558},{"import": 2225,"src": 358,"name": "mum","kind": "const","type": 491,"value": 560},{"import": 2225,"src": 354,"name": "mix0","kind": "const","type": 489,"value": 554},{"import": 2225,"src": 357,"name": "mix1","kind": "const","type": 489,"value": 559},{"import": 2225,"src": 4197,"name": "WyhashStateless","kind": "const","type": 954,"value": 1573},{"import": 2225,"src": 4198,"name": "expectEqual"},{"import": 2329,"src": 4199,"name": "Token","kind": "const","type": 954,"value": 1835},{"import": 2329,"src": 4200,"name": "Tokenizer","kind": "const","type": 954,"value": 1767},{"import": 2329,"src": 4201,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 2329,"src": 4202,"name": "mem","kind": "const","type": 954,"value": 1971},{"import": 2329,"src": 604,"name": "expectToken","kind": "const","type": 948,"value": 1129},{"import": 1915,"src": 4203,"name": "Range","kind": "const","type": 954,"value": 2582},{"import": 1915,"src": 4204,"name": "order"},{"import": 1915,"src": 4205,"name": "parse"},{"import": 1915,"src": 4206,"name": "format"},{"import": 1915,"src": 4207,"name": "FnDecl","kind": "const","type": 954,"value": 2583},{"import": 2378,"src": 4208,"name": "TraitFn","kind": "const","type": 954,"value": 2584},{"import": 2378,"src": 4209,"name": "multiTrait"},{"import": 2378,"src": 632,"name": "hasFn","kind": "const","type": 1042,"value": 1162},{"import": 2378,"src": 4210,"name": "hasField"},{"import": 2378,"src": 637,"name": "is","kind": "const","type": 1052,"value": 1169},{"import": 2378,"src": 652,"name": "isPtrTo","kind": "const","type": 1094,"value": 1184},{"import": 2378,"src": 4211,"name": "isSliceOf"},{"import": 2378,"src": 4212,"name": "isExtern"},{"import": 2378,"src": 4213,"name": "isPacked"},{"import": 2378,"src": 4214,"name": "isUnsignedInt"},{"import": 2378,"src": 4215,"name": "isSignedInt"},{"import": 2378,"src": 639,"name": "isSingleItemPtr","kind": "const","type": 1056,"value": 1171},{"import": 2378,"src": 4216,"name": "isManyItemPtr"},{"import": 2378,"src": 646,"name": "isSlice","kind": "const","type": 1072,"value": 1178},{"import": 2378,"src": 657,"name": "isIndexable","kind": "const","type": 1118,"value": 1192},{"import": 2378,"src": 681,"name": "isNumber","kind": "const","type": 1224,"value": 1217},{"import": 2378,"src": 679,"name": "isIntegral","kind": "const","type": 1220,"value": 1215},{"import": 2378,"src": 4217,"name": "isFloat"},{"import": 2378,"src": 4218,"name": "isConstPtr"},{"import": 2378,"src": 634,"name": "isContainer","kind": "const","type": 1045,"value": 1164},{"import": 2378,"src": 656,"name": "isTuple","kind": "const","type": 1117,"value": 1191},{"import": 2378,"src": 4219,"name": "isZigString"},{"import": 2378,"src": 4220,"name": "hasDecls"},{"import": 2378,"src": 4221,"name": "hasFields"},{"import": 2378,"src": 4222,"name": "hasFunctions"},{"import": 2378,"src": 599,"name": "hasUniqueRepresentation","kind": "const","type": 1048,"value": 1167},{"import": 2378,"src": 4223,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 2378,"src": 4224,"name": "mem"},{"import": 2378,"src": 4225,"name": "debug"},{"import": 2378,"src": 4226,"name": "testing"},{"import": 2378,"src": 4227,"name": "meta"},{"import": 2225,"src": 4228,"name": "init"},{"import": 2225,"src": 4229,"name": "update"},{"import": 2225,"src": 4230,"name": "final"},{"import": 2225,"src": 201,"name": "hash","kind": "const","type": 266,"value": 284},{"import": 1877,"src": 4231,"name": "latest"},{"import": 1877,"src": 4232,"name": "known_win10_build_numbers"},{"import": 1877,"src": 4233,"name": "isAtLeast"},{"import": 1877,"src": 4234,"name": "Range","kind": "const","type": 954,"value": 2585},{"import": 1877,"src": 4235,"name": "format"},{"import": 1877,"src": 4236,"name": "includesVersion"},{"import": 1877,"src": 4237,"name": "isAtLeast"},{"import": 1877,"src": 4238,"name": "default"},{"import": 1905,"src": 4239,"name": "arm1020e"},{"import": 1905,"src": 4240,"name": "arm1020t"},{"import": 1905,"src": 4241,"name": "arm1022e"},{"import": 1905,"src": 4242,"name": "arm10e"},{"import": 1905,"src": 4243,"name": "arm10tdmi"},{"import": 1905,"src": 4244,"name": "arm1136j_s"},{"import": 1905,"src": 4245,"name": "arm1136jf_s"},{"import": 1905,"src": 4246,"name": "arm1156t2_s"},{"import": 1905,"src": 4247,"name": "arm1156t2f_s"},{"import": 1905,"src": 4248,"name": "arm1176jz_s"},{"import": 1905,"src": 4249,"name": "arm1176jzf_s"},{"import": 1905,"src": 4250,"name": "arm710t"},{"import": 1905,"src": 4251,"name": "arm720t"},{"import": 1905,"src": 4252,"name": "arm7tdmi"},{"import": 1905,"src": 4253,"name": "arm7tdmi_s"},{"import": 1905,"src": 4254,"name": "arm8"},{"import": 1905,"src": 4255,"name": "arm810"},{"import": 1905,"src": 4256,"name": "arm9"},{"import": 1905,"src": 4257,"name": "arm920"},{"import": 1905,"src": 4258,"name": "arm920t"},{"import": 1905,"src": 4259,"name": "arm922t"},{"import": 1905,"src": 4260,"name": "arm926ej_s"},{"import": 1905,"src": 4261,"name": "arm940t"},{"import": 1905,"src": 4262,"name": "arm946e_s"},{"import": 1905,"src": 4263,"name": "arm966e_s"},{"import": 1905,"src": 4264,"name": "arm968e_s"},{"import": 1905,"src": 4265,"name": "arm9e"},{"import": 1905,"src": 4266,"name": "arm9tdmi"},{"import": 1905,"src": 4267,"name": "baseline"},{"import": 1905,"src": 4268,"name": "cortex_a12"},{"import": 1905,"src": 4269,"name": "cortex_a15"},{"import": 1905,"src": 4270,"name": "cortex_a17"},{"import": 1905,"src": 4271,"name": "cortex_a32"},{"import": 1905,"src": 4272,"name": "cortex_a35"},{"import": 1905,"src": 4273,"name": "cortex_a5"},{"import": 1905,"src": 4274,"name": "cortex_a53","kind": "const","type": 2387,"value": null},{"import": 1905,"src": 4275,"name": "cortex_a55"},{"import": 1905,"src": 4276,"name": "cortex_a57"},{"import": 1905,"src": 4277,"name": "cortex_a7"},{"import": 1905,"src": 4278,"name": "cortex_a72"},{"import": 1905,"src": 4279,"name": "cortex_a73"},{"import": 1905,"src": 4280,"name": "cortex_a75"},{"import": 1905,"src": 4281,"name": "cortex_a76"},{"import": 1905,"src": 4282,"name": "cortex_a76ae"},{"import": 1905,"src": 4283,"name": "cortex_a77"},{"import": 1905,"src": 4284,"name": "cortex_a78"},{"import": 1905,"src": 4285,"name": "cortex_a78c"},{"import": 1905,"src": 4286,"name": "cortex_a8"},{"import": 1905,"src": 4287,"name": "cortex_a9"},{"import": 1905,"src": 4288,"name": "cortex_m0"},{"import": 1905,"src": 4289,"name": "cortex_m0plus"},{"import": 1905,"src": 4290,"name": "cortex_m1"},{"import": 1905,"src": 4291,"name": "cortex_m23"},{"import": 1905,"src": 4292,"name": "cortex_m3"},{"import": 1905,"src": 4293,"name": "cortex_m33"},{"import": 1905,"src": 4294,"name": "cortex_m35p"},{"import": 1905,"src": 4295,"name": "cortex_m4"},{"import": 1905,"src": 4296,"name": "cortex_m55"},{"import": 1905,"src": 4297,"name": "cortex_m7"},{"import": 1905,"src": 4298,"name": "cortex_r4"},{"import": 1905,"src": 4299,"name": "cortex_r4f"},{"import": 1905,"src": 4300,"name": "cortex_r5"},{"import": 1905,"src": 4301,"name": "cortex_r52"},{"import": 1905,"src": 4302,"name": "cortex_r7"},{"import": 1905,"src": 4303,"name": "cortex_r8"},{"import": 1905,"src": 4304,"name": "cortex_x1"},{"import": 1905,"src": 4305,"name": "cyclone"},{"import": 1905,"src": 4306,"name": "ep9312"},{"import": 1905,"src": 4307,"name": "exynos_m1"},{"import": 1905,"src": 4308,"name": "exynos_m2"},{"import": 1905,"src": 4309,"name": "exynos_m3"},{"import": 1905,"src": 4310,"name": "exynos_m4"},{"import": 1905,"src": 4311,"name": "exynos_m5"},{"import": 1905,"src": 4312,"name": "generic"},{"import": 1905,"src": 4313,"name": "iwmmxt"},{"import": 1905,"src": 4314,"name": "krait"},{"import": 1905,"src": 4315,"name": "kryo"},{"import": 1905,"src": 4316,"name": "mpcore"},{"import": 1905,"src": 4317,"name": "mpcorenovfp"},{"import": 1905,"src": 4318,"name": "neoverse_n1"},{"import": 1905,"src": 4319,"name": "neoverse_n2"},{"import": 1905,"src": 4320,"name": "neoverse_v1"},{"import": 1905,"src": 4321,"name": "sc000"},{"import": 1905,"src": 4322,"name": "sc300"},{"import": 1905,"src": 4323,"name": "strongarm"},{"import": 1905,"src": 4324,"name": "strongarm110"},{"import": 1905,"src": 4325,"name": "strongarm1100"},{"import": 1905,"src": 4326,"name": "strongarm1110"},{"import": 1905,"src": 4327,"name": "swift"},{"import": 1905,"src": 4328,"name": "xscale"},{"import": 1877,"src": 4329,"name": "Set","kind": "const","type": 954,"value": 957},{"import": 1877,"src": 606,"name": "feature_set_fns","kind": "const","type": 953,"value": 1134},{"import": 1877,"src": 4330,"name": "toCpu"},{"import": 1877,"src": 4331,"name": "generic"},{"import": 1877,"src": 4332,"name": "baseline"},{"import": 1915,"src": 4333,"name": "Modifier","kind": "const","type": 954,"value": 2586},{"import": 2405,"src": 4334,"name": "syscall0","kind": "const","type": 359,"value": 390},{"import": 2405,"src": 4335,"name": "syscall1","kind": "const","type": 349,"value": 378},{"import": 2405,"src": 4336,"name": "syscall2","kind": "const","type": 363,"value": 394},{"import": 2405,"src": 4337,"name": "syscall3","kind": "const","type": 357,"value": 388},{"import": 2405,"src": 4338,"name": "syscall4","kind": "const","type": 353,"value": 384},{"import": 2405,"src": 4339,"name": "syscall5"},{"import": 2405,"src": 4340,"name": "syscall6","kind": "const","type": 388,"value": 426},{"import": 2405,"src": 4341,"name": "syscall7"},{"import": 2405,"src": 4342,"name": "restore","kind": "const","type": 352,"value": 383},{"import": 2405,"src": 4343,"name": "restore_rt","kind": "const","type": 352,"value": 382},{"import": 2405,"src": 4344,"name": "socketcall"},{"import": 2405,"src": 4345,"name": "syscall_pipe"},{"import": 2405,"src": 4346,"name": "syscall_fork"},{"import": 2405,"src": 4347,"name": "ARCH"},{"import": 2405,"src": 4348,"name": "Elf_Symndx","kind": "const","type": 954,"value": 1134},{"import": 2405,"src": 4349,"name": "F"},{"import": 2405,"src": 4350,"name": "Flock"},{"import": 2405,"src": 4351,"name": "HWCAP","kind": "const","type": 954,"value": 2429},{"import": 2405,"src": 4352,"name": "LOCK","kind": "const","type": 954,"value": 2426},{"import": 2405,"src": 4353,"name": "MMAP2_UNIT","kind": "const","type": 1034,"value": null},{"import": 2405,"src": 4354,"name": "REG"},{"import": 2405,"src": 4355,"name": "SC"},{"import": 2405,"src": 4356,"name": "SYS","kind": "const","type": 954,"value": 1537},{"import": 2405,"src": 4357,"name": "Stat","kind": "const","type": 954,"value": 1149},{"import": 2405,"src": 4358,"name": "VDSO","kind": "const","type": 954,"value": 2428},{"import": 2405,"src": 4359,"name": "blkcnt_t"},{"import": 2405,"src": 4360,"name": "blksize_t"},{"import": 2405,"src": 4361,"name": "clone"},{"import": 2405,"src": 4362,"name": "dev_t"},{"import": 2405,"src": 4363,"name": "ino_t","kind": "const","type": 954,"value": 988},{"import": 2405,"src": 4364,"name": "mcontext_t"},{"import": 2405,"src": 4365,"name": "mode_t","kind": "const","type": 954,"value": 1134},{"import": 2405,"src": 4366,"name": "msghdr"},{"import": 2405,"src": 4367,"name": "msghdr_const"},{"import": 2405,"src": 4368,"name": "nlink_t"},{"import": 2405,"src": 4369,"name": "off_t"},{"import": 2405,"src": 4370,"name": "time_t"},{"import": 2405,"src": 4371,"name": "timeval"},{"import": 2405,"src": 4372,"name": "timezone"},{"import": 2405,"src": 4373,"name": "ucontext_t","kind": "const","type": 954,"value": 2431},{"import": 2405,"src": 4374,"name": "user_desc"},{"import": 2405,"src": 4375,"name": "tls","kind": "const","type": 954,"value": 2588},{"import": 2405,"src": 4376,"name": "pie"},{"import": 2405,"src": 4377,"name": "BPF"},{"import": 2405,"src": 4378,"name": "IOCTL"},{"import": 2405,"src": 4379,"name": "MAP","kind": "const","type": 954,"value": 2546},{"import": 2405,"src": 4380,"name": "O","kind": "const","type": 954,"value": 2547},{"import": 2405,"src": 4381,"name": "elf_aux_maybe","kind": "var","type": 2589,"value": "null"},{"import": 2405,"src": 292,"name": "getauxval","kind": "const","type": 379,"value": 414},{"import": 2405,"src": 181,"name": "getErrno","kind": "const","type": 247,"value": 264},{"import": 2405,"src": 4382,"name": "dup"},{"import": 2405,"src": 4383,"name": "dup2"},{"import": 2405,"src": 4384,"name": "dup3"},{"import": 2405,"src": 4385,"name": "chdir"},{"import": 2405,"src": 4386,"name": "fchdir"},{"import": 2405,"src": 4387,"name": "chroot"},{"import": 2405,"src": 4388,"name": "execve"},{"import": 2405,"src": 4389,"name": "fork"},{"import": 2405,"src": 4390,"name": "vfork"},{"import": 2405,"src": 4391,"name": "futimens"},{"import": 2405,"src": 4392,"name": "utimensat"},{"import": 2405,"src": 4393,"name": "fallocate"},{"import": 2405,"src": 266,"name": "futex_wait","kind": "const","type": 356,"value": 387},{"import": 2405,"src": 318,"name": "futex_wake","kind": "const","type": 440,"value": 483},{"import": 2405,"src": 4394,"name": "getcwd"},{"import": 2405,"src": 4395,"name": "getdents"},{"import": 2405,"src": 4396,"name": "getdents64"},{"import": 2405,"src": 4397,"name": "inotify_init1"},{"import": 2405,"src": 4398,"name": "inotify_add_watch"},{"import": 2405,"src": 4399,"name": "inotify_rm_watch"},{"import": 2405,"src": 4400,"name": "readlink"},{"import": 2405,"src": 4401,"name": "readlinkat"},{"import": 2405,"src": 4402,"name": "mkdir"},{"import": 2405,"src": 4403,"name": "mkdirat"},{"import": 2405,"src": 4404,"name": "mknod"},{"import": 2405,"src": 4405,"name": "mknodat"},{"import": 2405,"src": 4406,"name": "mount"},{"import": 2405,"src": 4407,"name": "umount"},{"import": 2405,"src": 4408,"name": "umount2"},{"import": 2405,"src": 227,"name": "mmap","kind": "const","type": 293,"value": 313},{"import": 2405,"src": 4409,"name": "mprotect"},{"import": 2405,"src": 329,"name": "munmap","kind": "const","type": 451,"value": 495},{"import": 2405,"src": 4410,"name": "poll"},{"import": 2405,"src": 4411,"name": "ppoll"},{"import": 2405,"src": 342,"name": "read","kind": "const","type": 464,"value": 523},{"import": 2405,"src": 4412,"name": "preadv"},{"import": 2405,"src": 4413,"name": "preadv2"},{"import": 2405,"src": 4414,"name": "readv"},{"import": 2405,"src": 4415,"name": "writev"},{"import": 2405,"src": 4416,"name": "pwritev"},{"import": 2405,"src": 4417,"name": "pwritev2"},{"import": 2405,"src": 4418,"name": "rmdir"},{"import": 2405,"src": 4419,"name": "symlink"},{"import": 2405,"src": 4420,"name": "symlinkat"},{"import": 2405,"src": 4421,"name": "pread"},{"import": 2405,"src": 4422,"name": "access"},{"import": 2405,"src": 4423,"name": "faccessat"},{"import": 2405,"src": 4424,"name": "pipe"},{"import": 2405,"src": 4425,"name": "pipe2"},{"import": 2405,"src": 184,"name": "write","kind": "const","type": 250,"value": 267},{"import": 2405,"src": 4426,"name": "ftruncate"},{"import": 2405,"src": 4427,"name": "pwrite"},{"import": 2405,"src": 4428,"name": "rename"},{"import": 2405,"src": 4429,"name": "renameat"},{"import": 2405,"src": 4430,"name": "renameat2"},{"import": 2405,"src": 4431,"name": "open"},{"import": 2405,"src": 4432,"name": "create"},{"import": 2405,"src": 336,"name": "openat","kind": "const","type": 454,"value": 502},{"import": 2405,"src": 4433,"name": "clone5"},{"import": 2405,"src": 4434,"name": "clone2"},{"import": 2405,"src": 303,"name": "close","kind": "const","type": 387,"value": 425},{"import": 2405,"src": 4435,"name": "fchmod"},{"import": 2405,"src": 4436,"name": "fchown"},{"import": 2405,"src": 4437,"name": "llseek"},{"import": 2405,"src": 4438,"name": "lseek"},{"import": 2405,"src": 4439,"name": "exit"},{"import": 2405,"src": 178,"name": "exit_group","kind": "const","type": 245,"value": 261},{"import": 2405,"src": 4440,"name": "getrandom"},{"import": 2405,"src": 4441,"name": "kill"},{"import": 2405,"src": 200,"name": "tkill","kind": "const","type": 265,"value": 283},{"import": 2405,"src": 4442,"name": "tgkill"},{"import": 2405,"src": 4443,"name": "link"},{"import": 2405,"src": 4444,"name": "linkat"},{"import": 2405,"src": 4445,"name": "unlink"},{"import": 2405,"src": 4446,"name": "unlinkat"},{"import": 2405,"src": 4447,"name": "waitpid"},{"import": 2405,"src": 4448,"name": "waitid"},{"import": 2405,"src": 4449,"name": "fcntl"},{"import": 2405,"src": 337,"name": "flock","kind": "const","type": 265,"value": 503},{"import": 2405,"src": 387,"name": "clock_gettime","kind": "const","type": 550,"value": 632},{"import": 2405,"src": 386,"name": "clock_getres","kind": "const","type": 550,"value": 631},{"import": 2405,"src": 4450,"name": "clock_settime"},{"import": 2405,"src": 4451,"name": "gettimeofday"},{"import": 2405,"src": 4452,"name": "settimeofday"},{"import": 2405,"src": 4453,"name": "nanosleep"},{"import": 2405,"src": 4454,"name": "setuid"},{"import": 2405,"src": 4455,"name": "setgid"},{"import": 2405,"src": 4456,"name": "setreuid"},{"import": 2405,"src": 4457,"name": "setregid"},{"import": 2405,"src": 4458,"name": "getuid"},{"import": 2405,"src": 4459,"name": "getgid"},{"import": 2405,"src": 4460,"name": "geteuid"},{"import": 2405,"src": 4461,"name": "getegid"},{"import": 2405,"src": 4462,"name": "seteuid"},{"import": 2405,"src": 4463,"name": "setegid"},{"import": 2405,"src": 4464,"name": "getresuid"},{"import": 2405,"src": 4465,"name": "getresgid"},{"import": 2405,"src": 4466,"name": "setresuid"},{"import": 2405,"src": 4467,"name": "setresgid"},{"import": 2405,"src": 4468,"name": "getgroups"},{"import": 2405,"src": 4469,"name": "setgroups"},{"import": 2405,"src": 4470,"name": "getpid"},{"import": 2405,"src": 186,"name": "gettid","kind": "const","type": 26,"value": 269},{"import": 2405,"src": 199,"name": "sigprocmask","kind": "const","type": 264,"value": 282},{"import": 2405,"src": 182,"name": "sigaction","kind": "const","type": 248,"value": 265},{"import": 2405,"src": 4471,"name": "sigaddset"},{"import": 2405,"src": 4472,"name": "sigismember"},{"import": 2405,"src": 4473,"name": "getsockname"},{"import": 2405,"src": 4474,"name": "getpeername"},{"import": 2405,"src": 4475,"name": "socket"},{"import": 2405,"src": 4476,"name": "setsockopt"},{"import": 2405,"src": 4477,"name": "getsockopt"},{"import": 2405,"src": 4478,"name": "sendmsg"},{"import": 2405,"src": 4479,"name": "sendmmsg"},{"import": 2405,"src": 4480,"name": "connect"},{"import": 2405,"src": 4481,"name": "recvmsg"},{"import": 2405,"src": 4482,"name": "recvfrom"},{"import": 2405,"src": 4483,"name": "shutdown"},{"import": 2405,"src": 4484,"name": "bind"},{"import": 2405,"src": 4485,"name": "listen"},{"import": 2405,"src": 4486,"name": "sendto"},{"import": 2405,"src": 4487,"name": "sendfile"},{"import": 2405,"src": 4488,"name": "socketpair"},{"import": 2405,"src": 4489,"name": "accept"},{"import": 2405,"src": 4490,"name": "accept4"},{"import": 2405,"src": 339,"name": "fstat","kind": "const","type": 455,"value": 505},{"import": 2405,"src": 4491,"name": "stat"},{"import": 2405,"src": 4492,"name": "lstat"},{"import": 2405,"src": 4493,"name": "fstatat"},{"import": 2405,"src": 4494,"name": "statx"},{"import": 2405,"src": 4495,"name": "listxattr"},{"import": 2405,"src": 4496,"name": "llistxattr"},{"import": 2405,"src": 4497,"name": "flistxattr"},{"import": 2405,"src": 4498,"name": "getxattr"},{"import": 2405,"src": 4499,"name": "lgetxattr"},{"import": 2405,"src": 4500,"name": "fgetxattr"},{"import": 2405,"src": 4501,"name": "setxattr"},{"import": 2405,"src": 4502,"name": "lsetxattr"},{"import": 2405,"src": 4503,"name": "fsetxattr"},{"import": 2405,"src": 4504,"name": "removexattr"},{"import": 2405,"src": 4505,"name": "lremovexattr"},{"import": 2405,"src": 4506,"name": "fremovexattr"},{"import": 2405,"src": 4507,"name": "sched_yield"},{"import": 2405,"src": 4508,"name": "sched_getaffinity"},{"import": 2405,"src": 4509,"name": "epoll_create"},{"import": 2405,"src": 4510,"name": "epoll_create1"},{"import": 2405,"src": 4511,"name": "epoll_ctl"},{"import": 2405,"src": 4512,"name": "epoll_wait"},{"import": 2405,"src": 4513,"name": "epoll_pwait"},{"import": 2405,"src": 4514,"name": "eventfd"},{"import": 2405,"src": 4515,"name": "timerfd_create"},{"import": 2405,"src": 4516,"name": "itimerspec"},{"import": 2405,"src": 4517,"name": "timerfd_gettime"},{"import": 2405,"src": 4518,"name": "timerfd_settime"},{"import": 2405,"src": 4519,"name": "unshare"},{"import": 2405,"src": 4520,"name": "capget"},{"import": 2405,"src": 4521,"name": "capset"},{"import": 2405,"src": 4522,"name": "sigaltstack"},{"import": 2405,"src": 4523,"name": "uname"},{"import": 2405,"src": 4524,"name": "io_uring_setup"},{"import": 2405,"src": 4525,"name": "io_uring_enter"},{"import": 2405,"src": 4526,"name": "io_uring_register"},{"import": 2405,"src": 4527,"name": "memfd_create"},{"import": 2405,"src": 4528,"name": "getrusage"},{"import": 2405,"src": 4529,"name": "tcgetattr"},{"import": 2405,"src": 4530,"name": "tcsetattr"},{"import": 2405,"src": 4531,"name": "ioctl"},{"import": 2405,"src": 4532,"name": "signalfd"},{"import": 2405,"src": 4533,"name": "copy_file_range"},{"import": 2405,"src": 4534,"name": "bpf"},{"import": 2405,"src": 4535,"name": "sync"},{"import": 2405,"src": 4536,"name": "syncfs"},{"import": 2405,"src": 4537,"name": "fsync"},{"import": 2405,"src": 4538,"name": "fdatasync"},{"import": 2405,"src": 4539,"name": "prctl"},{"import": 2405,"src": 4540,"name": "getrlimit"},{"import": 2405,"src": 259,"name": "setrlimit","kind": "const","type": 350,"value": 379},{"import": 2405,"src": 320,"name": "prlimit","kind": "const","type": 442,"value": 485},{"import": 2405,"src": 4541,"name": "madvise"},{"import": 2405,"src": 4542,"name": "pidfd_open"},{"import": 2405,"src": 4543,"name": "pidfd_getfd"},{"import": 2405,"src": 4544,"name": "pidfd_send_signal"},{"import": 2405,"src": 4545,"name": "process_vm_readv"},{"import": 2405,"src": 4546,"name": "process_vm_writev"},{"import": 2405,"src": 4547,"name": "fadvise"},{"import": 2405,"src": 4548,"name": "perf_event_open"},{"import": 2405,"src": 4549,"name": "E","kind": "const","type": 954,"value": 1478},{"import": 2405,"src": 4550,"name": "pid_t","kind": "const","type": 954,"value": 1084},{"import": 2405,"src": 4551,"name": "fd_t","kind": "const","type": 954,"value": 1084},{"import": 2405,"src": 4552,"name": "uid_t","kind": "const","type": 954,"value": 1134},{"import": 2405,"src": 4553,"name": "gid_t","kind": "const","type": 954,"value": 1134},{"import": 2405,"src": 4554,"name": "clock_t","kind": "const","type": 954,"value": 1074},{"import": 2405,"src": 4555,"name": "NAME_MAX"},{"import": 2405,"src": 4556,"name": "PATH_MAX","kind": "const","type": 1034,"value": null},{"import": 2405,"src": 4557,"name": "IOV_MAX"},{"import": 2405,"src": 4558,"name": "MAX_ADDR_LEN"},{"import": 2405,"src": 4559,"name": "STDIN_FILENO"},{"import": 2405,"src": 4560,"name": "STDOUT_FILENO","kind": "const","type": 1034,"value": null},{"import": 2405,"src": 4561,"name": "STDERR_FILENO","kind": "const","type": 1034,"value": null},{"import": 2405,"src": 4562,"name": "AT","kind": "const","type": 954,"value": 2544},{"import": 2405,"src": 4563,"name": "FALLOC"},{"import": 2405,"src": 4564,"name": "FUTEX","kind": "const","type": 954,"value": 2590},{"import": 2405,"src": 4565,"name": "PROT","kind": "const","type": 954,"value": 2548},{"import": 2405,"src": 4566,"name": "FD_CLOEXEC"},{"import": 2405,"src": 4567,"name": "F_OK"},{"import": 2405,"src": 4568,"name": "X_OK"},{"import": 2405,"src": 4569,"name": "W_OK"},{"import": 2405,"src": 4570,"name": "R_OK"},{"import": 2405,"src": 4571,"name": "W"},{"import": 2405,"src": 4572,"name": "P"},{"import": 2405,"src": 4573,"name": "SA","kind": "const","type": 954,"value": 2550},{"import": 2405,"src": 4574,"name": "SIG","kind": "const","type": 954,"value": 2551},{"import": 2405,"src": 4575,"name": "kernel_rwf"},{"import": 2405,"src": 4576,"name": "RWF"},{"import": 2405,"src": 4577,"name": "SEEK"},{"import": 2405,"src": 4578,"name": "SHUT"},{"import": 2405,"src": 4579,"name": "SOCK"},{"import": 2405,"src": 4580,"name": "TCP"},{"import": 2405,"src": 4581,"name": "PF"},{"import": 2405,"src": 4582,"name": "AF"},{"import": 2405,"src": 4583,"name": "SO"},{"import": 2405,"src": 4584,"name": "SCM"},{"import": 2405,"src": 4585,"name": "SOL"},{"import": 2405,"src": 4586,"name": "SOMAXCONN"},{"import": 2405,"src": 4587,"name": "IP"},{"import": 2405,"src": 4588,"name": "IPV6"},{"import": 2405,"src": 4589,"name": "MSG"},{"import": 2405,"src": 4590,"name": "DT"},{"import": 2405,"src": 4591,"name": "T","kind": "const","type": 954,"value": 2591},{"import": 2405,"src": 4592,"name": "EPOLL"},{"import": 2405,"src": 4593,"name": "CLOCK","kind": "const","type": 954,"value": 2545},{"import": 2405,"src": 4594,"name": "CSIGNAL"},{"import": 2405,"src": 4595,"name": "CLONE"},{"import": 2405,"src": 4596,"name": "EFD"},{"import": 2405,"src": 4597,"name": "MS"},{"import": 2405,"src": 4598,"name": "MNT"},{"import": 2405,"src": 4599,"name": "UMOUNT_NOFOLLOW"},{"import": 2405,"src": 4600,"name": "IN"},{"import": 2405,"src": 4601,"name": "S","kind": "const","type": 954,"value": 2549},{"import": 2405,"src": 4602,"name": "UTIME"},{"import": 2405,"src": 4603,"name": "TFD"},{"import": 2405,"src": 4604,"name": "winsize","kind": "const","type": 954,"value": 2592},{"import": 2405,"src": 4605,"name": "NSIG","kind": "const","type": 1034,"value": null},{"import": 2405,"src": 4606,"name": "sigset_t","kind": "const","type": 954,"value": 2433},{"import": 2405,"src": 4607,"name": "all_mask"},{"import": 2405,"src": 4608,"name": "app_mask","kind": "const","type": 2433,"value": null},{"import": 2405,"src": 4609,"name": "k_sigaction","kind": "const","type": 954,"value": 2593},{"import": 2405,"src": 4610,"name": "Sigaction","kind": "const","type": 954,"value": 2552},{"import": 2405,"src": 4611,"name": "empty_sigset","kind": "const","type": 2433,"value": null},{"import": 2405,"src": 4612,"name": "SFD"},{"import": 2405,"src": 4613,"name": "signalfd_siginfo"},{"import": 2405,"src": 4614,"name": "in_port_t"},{"import": 2405,"src": 4615,"name": "sa_family_t"},{"import": 2405,"src": 4616,"name": "socklen_t"},{"import": 2405,"src": 4617,"name": "sockaddr"},{"import": 2405,"src": 4618,"name": "mmsghdr"},{"import": 2405,"src": 4619,"name": "mmsghdr_const"},{"import": 2405,"src": 4620,"name": "epoll_data","kind": "const","type": 954,"value": 2594},{"import": 2405,"src": 4621,"name": "epoll_event","kind": "const","type": 954,"value": 2595},{"import": 2405,"src": 4622,"name": "VFS_CAP_REVISION_MASK"},{"import": 2405,"src": 4623,"name": "VFS_CAP_REVISION_SHIFT"},{"import": 2405,"src": 4624,"name": "VFS_CAP_FLAGS_MASK"},{"import": 2405,"src": 4625,"name": "VFS_CAP_FLAGS_EFFECTIVE"},{"import": 2405,"src": 4626,"name": "VFS_CAP_REVISION_1"},{"import": 2405,"src": 4627,"name": "VFS_CAP_U32_1"},{"import": 2405,"src": 4628,"name": "XATTR_CAPS_SZ_1"},{"import": 2405,"src": 4629,"name": "VFS_CAP_REVISION_2"},{"import": 2405,"src": 4630,"name": "VFS_CAP_U32_2"},{"import": 2405,"src": 4631,"name": "XATTR_CAPS_SZ_2"},{"import": 2405,"src": 4632,"name": "XATTR_CAPS_SZ"},{"import": 2405,"src": 4633,"name": "VFS_CAP_U32"},{"import": 2405,"src": 4634,"name": "VFS_CAP_REVISION"},{"import": 2405,"src": 4635,"name": "vfs_cap_data"},{"import": 2405,"src": 4636,"name": "CAP"},{"import": 2405,"src": 4637,"name": "cap_t"},{"import": 2405,"src": 4638,"name": "cap_user_header_t"},{"import": 2405,"src": 4639,"name": "cap_user_data_t"},{"import": 2405,"src": 4640,"name": "inotify_event"},{"import": 2405,"src": 4641,"name": "dirent64"},{"import": 2405,"src": 4642,"name": "dl_phdr_info","kind": "const","type": 954,"value": 2062},{"import": 2405,"src": 4643,"name": "CPU_SETSIZE"},{"import": 2405,"src": 4644,"name": "cpu_set_t"},{"import": 2405,"src": 4645,"name": "cpu_count_t"},{"import": 2405,"src": 4646,"name": "CPU_COUNT"},{"import": 2405,"src": 4647,"name": "MINSIGSTKSZ"},{"import": 2405,"src": 4648,"name": "SIGSTKSZ"},{"import": 2405,"src": 4649,"name": "SS_ONSTACK"},{"import": 2405,"src": 4650,"name": "SS_DISABLE"},{"import": 2405,"src": 4651,"name": "SS_AUTODISARM"},{"import": 2405,"src": 4652,"name": "stack_t","kind": "const","type": 954,"value": 2432},{"import": 2405,"src": 4653,"name": "sigval","kind": "const","type": 954,"value": 2596},{"import": 2405,"src": 4654,"name": "siginfo_t","kind": "const","type": 954,"value": 2223},{"import": 2405,"src": 4655,"name": "io_uring_params"},{"import": 2405,"src": 4656,"name": "IORING_FEAT_SINGLE_MMAP"},{"import": 2405,"src": 4657,"name": "IORING_FEAT_NODROP"},{"import": 2405,"src": 4658,"name": "IORING_FEAT_SUBMIT_STABLE"},{"import": 2405,"src": 4659,"name": "IORING_FEAT_RW_CUR_POS"},{"import": 2405,"src": 4660,"name": "IORING_FEAT_CUR_PERSONALITY"},{"import": 2405,"src": 4661,"name": "IORING_FEAT_FAST_POLL"},{"import": 2405,"src": 4662,"name": "IORING_FEAT_POLL_32BITS"},{"import": 2405,"src": 4663,"name": "IORING_SETUP_IOPOLL"},{"import": 2405,"src": 4664,"name": "IORING_SETUP_SQPOLL"},{"import": 2405,"src": 4665,"name": "IORING_SETUP_SQ_AFF"},{"import": 2405,"src": 4666,"name": "IORING_SETUP_CQSIZE"},{"import": 2405,"src": 4667,"name": "IORING_SETUP_CLAMP"},{"import": 2405,"src": 4668,"name": "IORING_SETUP_ATTACH_WQ"},{"import": 2405,"src": 4669,"name": "IORING_SETUP_R_DISABLED"},{"import": 2405,"src": 4670,"name": "io_sqring_offsets"},{"import": 2405,"src": 4671,"name": "IORING_SQ_NEED_WAKEUP"},{"import": 2405,"src": 4672,"name": "IORING_SQ_CQ_OVERFLOW"},{"import": 2405,"src": 4673,"name": "io_cqring_offsets"},{"import": 2405,"src": 4674,"name": "io_uring_sqe"},{"import": 2405,"src": 4675,"name": "IOSQE_BIT"},{"import": 2405,"src": 4676,"name": "IOSQE_FIXED_FILE"},{"import": 2405,"src": 4677,"name": "IOSQE_IO_DRAIN"},{"import": 2405,"src": 4678,"name": "IOSQE_IO_LINK"},{"import": 2405,"src": 4679,"name": "IOSQE_IO_HARDLINK"},{"import": 2405,"src": 4680,"name": "IOSQE_ASYNC"},{"import": 2405,"src": 4681,"name": "IOSQE_BUFFER_SELECT"},{"import": 2405,"src": 4682,"name": "IORING_OP"},{"import": 2405,"src": 4683,"name": "IORING_FSYNC_DATASYNC"},{"import": 2405,"src": 4684,"name": "IORING_TIMEOUT_ABS"},{"import": 2405,"src": 4685,"name": "io_uring_cqe"},{"import": 2405,"src": 4686,"name": "IORING_CQE_F_BUFFER"},{"import": 2405,"src": 4687,"name": "IORING_OFF_SQ_RING"},{"import": 2405,"src": 4688,"name": "IORING_OFF_CQ_RING"},{"import": 2405,"src": 4689,"name": "IORING_OFF_SQES"},{"import": 2405,"src": 4690,"name": "IORING_ENTER_GETEVENTS"},{"import": 2405,"src": 4691,"name": "IORING_ENTER_SQ_WAKEUP"},{"import": 2405,"src": 4692,"name": "IORING_REGISTER"},{"import": 2405,"src": 4693,"name": "io_uring_files_update"},{"import": 2405,"src": 4694,"name": "IO_URING_OP_SUPPORTED"},{"import": 2405,"src": 4695,"name": "io_uring_probe_op"},{"import": 2405,"src": 4696,"name": "io_uring_probe"},{"import": 2405,"src": 4697,"name": "io_uring_restriction"},{"import": 2405,"src": 4698,"name": "IORING_RESTRICTION"},{"import": 2405,"src": 4699,"name": "utsname"},{"import": 2405,"src": 4700,"name": "HOST_NAME_MAX"},{"import": 2405,"src": 4701,"name": "STATX_TYPE"},{"import": 2405,"src": 4702,"name": "STATX_MODE"},{"import": 2405,"src": 4703,"name": "STATX_NLINK"},{"import": 2405,"src": 4704,"name": "STATX_UID"},{"import": 2405,"src": 4705,"name": "STATX_GID"},{"import": 2405,"src": 4706,"name": "STATX_ATIME"},{"import": 2405,"src": 4707,"name": "STATX_MTIME"},{"import": 2405,"src": 4708,"name": "STATX_CTIME"},{"import": 2405,"src": 4709,"name": "STATX_INO"},{"import": 2405,"src": 4710,"name": "STATX_SIZE"},{"import": 2405,"src": 4711,"name": "STATX_BLOCKS"},{"import": 2405,"src": 4712,"name": "STATX_BASIC_STATS"},{"import": 2405,"src": 4713,"name": "STATX_BTIME"},{"import": 2405,"src": 4714,"name": "STATX_ATTR_COMPRESSED"},{"import": 2405,"src": 4715,"name": "STATX_ATTR_IMMUTABLE"},{"import": 2405,"src": 4716,"name": "STATX_ATTR_APPEND"},{"import": 2405,"src": 4717,"name": "STATX_ATTR_NODUMP"},{"import": 2405,"src": 4718,"name": "STATX_ATTR_ENCRYPTED"},{"import": 2405,"src": 4719,"name": "STATX_ATTR_AUTOMOUNT"},{"import": 2405,"src": 4720,"name": "statx_timestamp"},{"import": 2405,"src": 4721,"name": "Statx"},{"import": 2405,"src": 4722,"name": "addrinfo"},{"import": 2405,"src": 4723,"name": "IPPORT_RESERVED"},{"import": 2405,"src": 4724,"name": "IPPROTO"},{"import": 2405,"src": 4725,"name": "RR"},{"import": 2405,"src": 4726,"name": "tcp_repair_opt"},{"import": 2405,"src": 4727,"name": "tcp_repair_window"},{"import": 2405,"src": 4728,"name": "TcpRepairOption"},{"import": 2405,"src": 4729,"name": "tcp_fastopen_client_fail"},{"import": 2405,"src": 4730,"name": "TCPI_OPT_TIMESTAMPS"},{"import": 2405,"src": 4731,"name": "TCPI_OPT_SACK"},{"import": 2405,"src": 4732,"name": "TCPI_OPT_WSCALE"},{"import": 2405,"src": 4733,"name": "TCPI_OPT_ECN"},{"import": 2405,"src": 4734,"name": "TCPI_OPT_ECN_SEEN"},{"import": 2405,"src": 4735,"name": "TCPI_OPT_SYN_DATA"},{"import": 2405,"src": 4736,"name": "nfds_t"},{"import": 2405,"src": 4737,"name": "pollfd"},{"import": 2405,"src": 4738,"name": "POLL"},{"import": 2405,"src": 4739,"name": "MFD_CLOEXEC"},{"import": 2405,"src": 4740,"name": "MFD_ALLOW_SEALING"},{"import": 2405,"src": 4741,"name": "MFD_HUGETLB"},{"import": 2405,"src": 4742,"name": "MFD_ALL_FLAGS"},{"import": 2405,"src": 4743,"name": "HUGETLB_FLAG_ENCODE_SHIFT"},{"import": 2405,"src": 4744,"name": "HUGETLB_FLAG_ENCODE_MASK"},{"import": 2405,"src": 4745,"name": "HUGETLB_FLAG_ENCODE_64KB"},{"import": 2405,"src": 4746,"name": "HUGETLB_FLAG_ENCODE_512KB"},{"import": 2405,"src": 4747,"name": "HUGETLB_FLAG_ENCODE_1MB"},{"import": 2405,"src": 4748,"name": "HUGETLB_FLAG_ENCODE_2MB"},{"import": 2405,"src": 4749,"name": "HUGETLB_FLAG_ENCODE_8MB"},{"import": 2405,"src": 4750,"name": "HUGETLB_FLAG_ENCODE_16MB"},{"import": 2405,"src": 4751,"name": "HUGETLB_FLAG_ENCODE_32MB"},{"import": 2405,"src": 4752,"name": "HUGETLB_FLAG_ENCODE_256MB"},{"import": 2405,"src": 4753,"name": "HUGETLB_FLAG_ENCODE_512MB"},{"import": 2405,"src": 4754,"name": "HUGETLB_FLAG_ENCODE_1GB"},{"import": 2405,"src": 4755,"name": "HUGETLB_FLAG_ENCODE_2GB"},{"import": 2405,"src": 4756,"name": "HUGETLB_FLAG_ENCODE_16GB"},{"import": 2405,"src": 4757,"name": "MFD_HUGE_SHIFT"},{"import": 2405,"src": 4758,"name": "MFD_HUGE_MASK"},{"import": 2405,"src": 4759,"name": "MFD_HUGE_64KB"},{"import": 2405,"src": 4760,"name": "MFD_HUGE_512KB"},{"import": 2405,"src": 4761,"name": "MFD_HUGE_1MB"},{"import": 2405,"src": 4762,"name": "MFD_HUGE_2MB"},{"import": 2405,"src": 4763,"name": "MFD_HUGE_8MB"},{"import": 2405,"src": 4764,"name": "MFD_HUGE_16MB"},{"import": 2405,"src": 4765,"name": "MFD_HUGE_32MB"},{"import": 2405,"src": 4766,"name": "MFD_HUGE_256MB"},{"import": 2405,"src": 4767,"name": "MFD_HUGE_512MB"},{"import": 2405,"src": 4768,"name": "MFD_HUGE_1GB"},{"import": 2405,"src": 4769,"name": "MFD_HUGE_2GB"},{"import": 2405,"src": 4770,"name": "MFD_HUGE_16GB"},{"import": 2405,"src": 4771,"name": "rusage"},{"import": 2405,"src": 4772,"name": "cc_t"},{"import": 2405,"src": 4773,"name": "speed_t"},{"import": 2405,"src": 4774,"name": "tcflag_t"},{"import": 2405,"src": 4775,"name": "NCCS"},{"import": 2405,"src": 4776,"name": "B0"},{"import": 2405,"src": 4777,"name": "B50"},{"import": 2405,"src": 4778,"name": "B75"},{"import": 2405,"src": 4779,"name": "B110"},{"import": 2405,"src": 4780,"name": "B134"},{"import": 2405,"src": 4781,"name": "B150"},{"import": 2405,"src": 4782,"name": "B200"},{"import": 2405,"src": 4783,"name": "B300"},{"import": 2405,"src": 4784,"name": "B600"},{"import": 2405,"src": 4785,"name": "B1200"},{"import": 2405,"src": 4786,"name": "B1800"},{"import": 2405,"src": 4787,"name": "B2400"},{"import": 2405,"src": 4788,"name": "B4800"},{"import": 2405,"src": 4789,"name": "B9600"},{"import": 2405,"src": 4790,"name": "B19200"},{"import": 2405,"src": 4791,"name": "B38400"},{"import": 2405,"src": 4792,"name": "BOTHER"},{"import": 2405,"src": 4793,"name": "B57600"},{"import": 2405,"src": 4794,"name": "B115200"},{"import": 2405,"src": 4795,"name": "B230400"},{"import": 2405,"src": 4796,"name": "B460800"},{"import": 2405,"src": 4797,"name": "B500000"},{"import": 2405,"src": 4798,"name": "B576000"},{"import": 2405,"src": 4799,"name": "B921600"},{"import": 2405,"src": 4800,"name": "B1000000"},{"import": 2405,"src": 4801,"name": "B1152000"},{"import": 2405,"src": 4802,"name": "B1500000"},{"import": 2405,"src": 4803,"name": "B2000000"},{"import": 2405,"src": 4804,"name": "B2500000"},{"import": 2405,"src": 4805,"name": "B3000000"},{"import": 2405,"src": 4806,"name": "B3500000"},{"import": 2405,"src": 4807,"name": "B4000000"},{"import": 2405,"src": 4808,"name": "V"},{"import": 2405,"src": 4809,"name": "IGNBRK"},{"import": 2405,"src": 4810,"name": "BRKINT"},{"import": 2405,"src": 4811,"name": "IGNPAR"},{"import": 2405,"src": 4812,"name": "PARMRK"},{"import": 2405,"src": 4813,"name": "INPCK"},{"import": 2405,"src": 4814,"name": "ISTRIP"},{"import": 2405,"src": 4815,"name": "INLCR"},{"import": 2405,"src": 4816,"name": "IGNCR"},{"import": 2405,"src": 4817,"name": "ICRNL"},{"import": 2405,"src": 4818,"name": "IUCLC"},{"import": 2405,"src": 4819,"name": "IXON"},{"import": 2405,"src": 4820,"name": "IXANY"},{"import": 2405,"src": 4821,"name": "IXOFF"},{"import": 2405,"src": 4822,"name": "IMAXBEL"},{"import": 2405,"src": 4823,"name": "IUTF8"},{"import": 2405,"src": 4824,"name": "OPOST"},{"import": 2405,"src": 4825,"name": "OLCUC"},{"import": 2405,"src": 4826,"name": "ONLCR"},{"import": 2405,"src": 4827,"name": "OCRNL"},{"import": 2405,"src": 4828,"name": "ONOCR"},{"import": 2405,"src": 4829,"name": "ONLRET"},{"import": 2405,"src": 4830,"name": "OFILL"},{"import": 2405,"src": 4831,"name": "OFDEL"},{"import": 2405,"src": 4832,"name": "VTDLY"},{"import": 2405,"src": 4833,"name": "VT0"},{"import": 2405,"src": 4834,"name": "VT1"},{"import": 2405,"src": 4835,"name": "CSIZE"},{"import": 2405,"src": 4836,"name": "CS5"},{"import": 2405,"src": 4837,"name": "CS6"},{"import": 2405,"src": 4838,"name": "CS7"},{"import": 2405,"src": 4839,"name": "CS8"},{"import": 2405,"src": 4840,"name": "CSTOPB"},{"import": 2405,"src": 4841,"name": "CREAD"},{"import": 2405,"src": 4842,"name": "PARENB"},{"import": 2405,"src": 4843,"name": "PARODD"},{"import": 2405,"src": 4844,"name": "HUPCL"},{"import": 2405,"src": 4845,"name": "CLOCAL"},{"import": 2405,"src": 4846,"name": "ISIG"},{"import": 2405,"src": 4847,"name": "ICANON"},{"import": 2405,"src": 4848,"name": "ECHO"},{"import": 2405,"src": 4849,"name": "ECHOE"},{"import": 2405,"src": 4850,"name": "ECHOK"},{"import": 2405,"src": 4851,"name": "ECHONL"},{"import": 2405,"src": 4852,"name": "NOFLSH"},{"import": 2405,"src": 4853,"name": "TOSTOP"},{"import": 2405,"src": 4854,"name": "IEXTEN"},{"import": 2405,"src": 4855,"name": "TCSA"},{"import": 2405,"src": 4856,"name": "termios"},{"import": 2405,"src": 4857,"name": "SIOCGIFINDEX"},{"import": 2405,"src": 4858,"name": "IFNAMESIZE"},{"import": 2405,"src": 4859,"name": "ifmap"},{"import": 2405,"src": 4860,"name": "ifreq"},{"import": 2405,"src": 4861,"name": "rlimit_resource","kind": "const","type": 954,"value": 1476},{"import": 2405,"src": 4862,"name": "rlim_t","kind": "const","type": 954,"value": 988},{"import": 2405,"src": 4863,"name": "RLIM"},{"import": 2405,"src": 4864,"name": "rlimit","kind": "const","type": 954,"value": 1477},{"import": 2405,"src": 4865,"name": "MADV"},{"import": 2405,"src": 4866,"name": "POSIX_FADV"},{"import": 2405,"src": 4867,"name": "kernel_timespec"},{"import": 2405,"src": 4868,"name": "timespec","kind": "const","type": 954,"value": 1558},{"import": 2405,"src": 4869,"name": "XDP"},{"import": 2405,"src": 4870,"name": "xdp_ring_offset"},{"import": 2405,"src": 4871,"name": "xdp_mmap_offsets"},{"import": 2405,"src": 4872,"name": "xdp_umem_reg"},{"import": 2405,"src": 4873,"name": "xdp_statistics"},{"import": 2405,"src": 4874,"name": "xdp_options"},{"import": 2405,"src": 4875,"name": "XSK_UNALIGNED_BUF_OFFSET_SHIFT"},{"import": 2405,"src": 4876,"name": "XSK_UNALIGNED_BUF_ADDR_MASK"},{"import": 2405,"src": 4877,"name": "xdp_desc"},{"import": 2405,"src": 4878,"name": "SECUREBITS_DEFAULT"},{"import": 2405,"src": 4879,"name": "SECURE_NOROOT"},{"import": 2405,"src": 4880,"name": "SECURE_NOROOT_LOCKED"},{"import": 2405,"src": 4881,"name": "SECBIT_NOROOT"},{"import": 2405,"src": 4882,"name": "SECBIT_NOROOT_LOCKED"},{"import": 2405,"src": 4883,"name": "SECURE_NO_SETUID_FIXUP"},{"import": 2405,"src": 4884,"name": "SECURE_NO_SETUID_FIXUP_LOCKED"},{"import": 2405,"src": 4885,"name": "SECBIT_NO_SETUID_FIXUP"},{"import": 2405,"src": 4886,"name": "SECBIT_NO_SETUID_FIXUP_LOCKED"},{"import": 2405,"src": 4887,"name": "SECURE_KEEP_CAPS"},{"import": 2405,"src": 4888,"name": "SECURE_KEEP_CAPS_LOCKED"},{"import": 2405,"src": 4889,"name": "SECBIT_KEEP_CAPS"},{"import": 2405,"src": 4890,"name": "SECBIT_KEEP_CAPS_LOCKED"},{"import": 2405,"src": 4891,"name": "SECURE_NO_CAP_AMBIENT_RAISE"},{"import": 2405,"src": 4892,"name": "SECURE_NO_CAP_AMBIENT_RAISE_LOCKED"},{"import": 2405,"src": 4893,"name": "SECBIT_NO_CAP_AMBIENT_RAISE"},{"import": 2405,"src": 4894,"name": "SECBIT_NO_CAP_AMBIENT_RAISE_LOCKED"},{"import": 2405,"src": 4895,"name": "SECURE_ALL_BITS"},{"import": 2405,"src": 4896,"name": "SECURE_ALL_LOCKS"},{"import": 2405,"src": 4897,"name": "PR"},{"import": 2405,"src": 4898,"name": "prctl_mm_map"},{"import": 2405,"src": 4899,"name": "NETLINK"},{"import": 2405,"src": 4900,"name": "NLM_F_REQUEST"},{"import": 2405,"src": 4901,"name": "NLM_F_MULTI"},{"import": 2405,"src": 4902,"name": "NLM_F_ACK"},{"import": 2405,"src": 4903,"name": "NLM_F_ECHO"},{"import": 2405,"src": 4904,"name": "NLM_F_DUMP_INTR"},{"import": 2405,"src": 4905,"name": "NLM_F_DUMP_FILTERED"},{"import": 2405,"src": 4906,"name": "NLM_F_ROOT"},{"import": 2405,"src": 4907,"name": "NLM_F_MATCH"},{"import": 2405,"src": 4908,"name": "NLM_F_ATOMIC"},{"import": 2405,"src": 4909,"name": "NLM_F_DUMP"},{"import": 2405,"src": 4910,"name": "NLM_F_REPLACE"},{"import": 2405,"src": 4911,"name": "NLM_F_EXCL"},{"import": 2405,"src": 4912,"name": "NLM_F_CREATE"},{"import": 2405,"src": 4913,"name": "NLM_F_APPEND"},{"import": 2405,"src": 4914,"name": "NLM_F_NONREC"},{"import": 2405,"src": 4915,"name": "NLM_F_CAPPED"},{"import": 2405,"src": 4916,"name": "NLM_F_ACK_TLVS"},{"import": 2405,"src": 4917,"name": "NetlinkMessageType"},{"import": 2405,"src": 4918,"name": "nlmsghdr"},{"import": 2405,"src": 4919,"name": "ifinfomsg"},{"import": 2405,"src": 4920,"name": "rtattr"},{"import": 2405,"src": 4921,"name": "IFLA"},{"import": 2405,"src": 4922,"name": "rtnl_link_ifmap"},{"import": 2405,"src": 4923,"name": "rtnl_link_stats"},{"import": 2405,"src": 4924,"name": "rtnl_link_stats64"},{"import": 2405,"src": 4925,"name": "perf_event_attr"},{"import": 2405,"src": 4926,"name": "PERF"},{"import": 2597,"src": 4927,"name": "IO_Uring"},{"import": 2597,"src": 4928,"name": "SubmissionQueue"},{"import": 2597,"src": 4929,"name": "CompletionQueue"},{"import": 2597,"src": 4930,"name": "io_uring_prep_nop"},{"import": 2597,"src": 4931,"name": "io_uring_prep_fsync"},{"import": 2597,"src": 4932,"name": "io_uring_prep_rw"},{"import": 2597,"src": 4933,"name": "io_uring_prep_read"},{"import": 2597,"src": 4934,"name": "io_uring_prep_write"},{"import": 2597,"src": 4935,"name": "io_uring_prep_readv"},{"import": 2597,"src": 4936,"name": "io_uring_prep_writev"},{"import": 2597,"src": 4937,"name": "io_uring_prep_read_fixed"},{"import": 2597,"src": 4938,"name": "io_uring_prep_write_fixed"},{"import": 2597,"src": 4939,"name": "__io_uring_prep_poll_mask"},{"import": 2597,"src": 4940,"name": "io_uring_prep_accept"},{"import": 2597,"src": 4941,"name": "io_uring_prep_connect"},{"import": 2597,"src": 4942,"name": "io_uring_prep_epoll_ctl"},{"import": 2597,"src": 4943,"name": "io_uring_prep_recv"},{"import": 2597,"src": 4944,"name": "io_uring_prep_send"},{"import": 2597,"src": 4945,"name": "io_uring_prep_openat"},{"import": 2597,"src": 4946,"name": "io_uring_prep_close"},{"import": 2597,"src": 4947,"name": "io_uring_prep_timeout"},{"import": 2597,"src": 4948,"name": "io_uring_prep_timeout_remove"},{"import": 2597,"src": 4949,"name": "io_uring_prep_link_timeout"},{"import": 2597,"src": 4950,"name": "io_uring_prep_poll_add"},{"import": 2597,"src": 4951,"name": "io_uring_prep_poll_remove"},{"import": 2597,"src": 4952,"name": "io_uring_prep_poll_update"},{"import": 2597,"src": 4953,"name": "io_uring_prep_fallocate"},{"import": 2597,"src": 4954,"name": "io_uring_prep_statx"},{"import": 2597,"src": 4955,"name": "io_uring_prep_cancel"},{"import": 2597,"src": 4956,"name": "io_uring_prep_shutdown"},{"import": 2597,"src": 4957,"name": "io_uring_prep_renameat"},{"import": 2597,"src": 4958,"name": "io_uring_prep_unlinkat"},{"import": 2597,"src": 4959,"name": "io_uring_prep_mkdirat"},{"import": 2597,"src": 4960,"name": "io_uring_prep_symlinkat"},{"import": 2597,"src": 4961,"name": "io_uring_prep_linkat"},{"import": 2405,"src": 4962,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 2405,"src": 4963,"name": "builtin","kind": "const","type": 954,"value": 1283},{"import": 2405,"src": 4964,"name": "assert","kind": "const","type": 30,"value": 38},{"import": 2405,"src": 4965,"name": "maxInt"},{"import": 2405,"src": 4966,"name": "elf"},{"import": 2405,"src": 4967,"name": "vdso","kind": "const","type": 954,"value": 2598},{"import": 2405,"src": 4968,"name": "dl"},{"import": 2405,"src": 4969,"name": "native_arch","kind": "const","type": 968,"value": null},{"import": 2405,"src": 4970,"name": "native_endian"},{"import": 2405,"src": 4971,"name": "is_mips","kind": "const","type": 967,"value": "false"},{"import": 2405,"src": 4972,"name": "is_ppc"},{"import": 2405,"src": 4973,"name": "is_ppc64","kind": "const","type": 967,"value": "false"},{"import": 2405,"src": 4974,"name": "is_sparc","kind": "const","type": 967,"value": "false"},{"import": 2405,"src": 4975,"name": "iovec"},{"import": 2405,"src": 4976,"name": "iovec_const"},{"import": 2405,"src": 4977,"name": "syscall_bits","kind": "const","type": 954,"value": 1959},{"import": 2405,"src": 4978,"name": "arch_bits","kind": "const","type": 954,"value": 1959},{"import": 2405,"src": 4979,"name": "require_aligned_register_pair"},{"import": 2405,"src": 4980,"name": "splitValueLE64"},{"import": 2405,"src": 4981,"name": "splitValueBE64"},{"import": 2405,"src": 4982,"name": "splitValue64"},{"import": 2405,"src": 4983,"name": "vdso_clock_gettime","kind": "var","type": 1572,"value": null},{"import": 2405,"src": 4984,"name": "vdso_clock_gettime_ty","kind": "const","type": 954,"value": 587},{"import": 2405,"src": 401,"name": "init_vdso_clock_gettime","kind": "const","type": 587,"value": 676},{"import": 2405,"src": 4985,"name": "usize_bits"},{"import": 2405,"src": 4986,"name": "siginfo_fields_union","kind": "const","type": 954,"value": 2579},{"import": 2405,"src": 4987,"name": "issecure_mask"},{"import": 1945,"src": 4988,"name": "NextTickNode","kind": "const","type": 954,"value": 1939},{"import": 1945,"src": 4989,"name": "ResumeNode","kind": "const","type": 954,"value": 1951},{"import": 1945,"src": 4990,"name": "instance","kind": "const","type": 2599,"value": "null"},{"import": 1945,"src": 4991,"name": "init"},{"import": 1945,"src": 4992,"name": "initSingleThreaded"},{"import": 1945,"src": 4993,"name": "initMultiThreaded"},{"import": 1945,"src": 4994,"name": "initThreadPool"},{"import": 1945,"src": 4995,"name": "deinit"},{"import": 1945,"src": 4996,"name": "linuxAddFd"},{"import": 1945,"src": 4997,"name": "linuxModFd"},{"import": 1945,"src": 4998,"name": "linuxRemoveFd"},{"import": 1945,"src": 4999,"name": "linuxWaitFd"},{"import": 1945,"src": 5000,"name": "waitUntilFdReadable"},{"import": 1945,"src": 5001,"name": "waitUntilFdWritable"},{"import": 1945,"src": 5002,"name": "waitUntilFdWritableOrReadable"},{"import": 1945,"src": 5003,"name": "bsdWaitKev"},{"import": 1945,"src": 5004,"name": "bsdAddKev"},{"import": 1945,"src": 5005,"name": "bsdRemoveKev"},{"import": 1945,"src": 5006,"name": "onNextTick"},{"import": 1945,"src": 5007,"name": "cancelOnNextTick"},{"import": 1945,"src": 5008,"name": "run"},{"import": 1945,"src": 5009,"name": "runDetached"},{"import": 1945,"src": 5010,"name": "yield"},{"import": 1945,"src": 5011,"name": "startCpuBoundOperation"},{"import": 1945,"src": 5012,"name": "beginOneEvent"},{"import": 1945,"src": 5013,"name": "finishOneEvent"},{"import": 1945,"src": 5014,"name": "sleep"},{"import": 1945,"src": 5015,"name": "accept"},{"import": 1945,"src": 5016,"name": "connect"},{"import": 1945,"src": 5017,"name": "openZ"},{"import": 1945,"src": 5018,"name": "openatZ"},{"import": 1945,"src": 5019,"name": "close"},{"import": 1945,"src": 5020,"name": "read"},{"import": 1945,"src": 5021,"name": "readv"},{"import": 1945,"src": 5022,"name": "pread"},{"import": 1945,"src": 5023,"name": "preadv"},{"import": 1945,"src": 5024,"name": "write"},{"import": 1945,"src": 5025,"name": "writev"},{"import": 1945,"src": 5026,"name": "pwrite"},{"import": 1945,"src": 5027,"name": "pwritev"},{"import": 1945,"src": 5028,"name": "sendto"},{"import": 1945,"src": 5029,"name": "recvfrom"},{"import": 1945,"src": 5030,"name": "faccessatZ"},{"import": 1945,"src": 5031,"name": "Request","kind": "const","type": 954,"value": 1086},{"import": 1945,"src": 5032,"name": "global_instance_state"},{"import": 1945,"src": 5033,"name": "default_instance","kind": "const","type": 2599,"value": "null"},{"import": 1945,"src": 5034,"name": "InitOsDataError"},{"import": 1945,"src": 5035,"name": "wakeup_bytes"},{"import": 1945,"src": 5036,"name": "initOsData"},{"import": 1945,"src": 5037,"name": "deinitOsData"},{"import": 1945,"src": 5038,"name": "dispatch"},{"import": 1945,"src": 5039,"name": "DelayQueue","kind": "const","type": 954,"value": 2600},{"import": 1945,"src": 5040,"name": "workerRun"},{"import": 1945,"src": 5041,"name": "posixFsRequest"},{"import": 1945,"src": 5042,"name": "posixFsCancel"},{"import": 1945,"src": 5043,"name": "posixFsRun"},{"import": 1945,"src": 5044,"name": "OsData","kind": "const","type": 954,"value": 2601},{"import": 1945,"src": 5045,"name": "KEventData"},{"import": 1945,"src": 5046,"name": "LinuxOsData","kind": "const","type": 954,"value": 2601},{"import": 2408,"src": 5047,"name": "advapi32"},{"import": 2408,"src": 5048,"name": "kernel32"},{"import": 2408,"src": 5049,"name": "ntdll"},{"import": 2408,"src": 5050,"name": "ole32"},{"import": 2408,"src": 5051,"name": "psapi"},{"import": 2408,"src": 5052,"name": "shell32"},{"import": 2408,"src": 5053,"name": "user32"},{"import": 2408,"src": 5054,"name": "ws2_32"},{"import": 2408,"src": 5055,"name": "gdi32"},{"import": 2408,"src": 5056,"name": "winmm"},{"import": 2408,"src": 5057,"name": "self_process_handle"},{"import": 2408,"src": 5058,"name": "OpenError"},{"import": 2408,"src": 5059,"name": "OpenFileOptions"},{"import": 2408,"src": 5060,"name": "OpenFile"},{"import": 2408,"src": 5061,"name": "CreatePipeError"},{"import": 2408,"src": 5062,"name": "CreatePipe"},{"import": 2408,"src": 5063,"name": "CreateEventEx"},{"import": 2408,"src": 5064,"name": "CreateEventExW"},{"import": 2408,"src": 5065,"name": "DeviceIoControlError"},{"import": 2408,"src": 5066,"name": "DeviceIoControl"},{"import": 2408,"src": 5067,"name": "GetOverlappedResult"},{"import": 2408,"src": 5068,"name": "SetHandleInformationError"},{"import": 2408,"src": 5069,"name": "SetHandleInformation"},{"import": 2408,"src": 5070,"name": "RtlGenRandomError"},{"import": 2408,"src": 5071,"name": "RtlGenRandom"},{"import": 2408,"src": 5072,"name": "WaitForSingleObjectError"},{"import": 2408,"src": 5073,"name": "WaitForSingleObject"},{"import": 2408,"src": 5074,"name": "WaitForSingleObjectEx"},{"import": 2408,"src": 5075,"name": "WaitForMultipleObjectsEx"},{"import": 2408,"src": 5076,"name": "CreateIoCompletionPortError"},{"import": 2408,"src": 5077,"name": "CreateIoCompletionPort"},{"import": 2408,"src": 5078,"name": "PostQueuedCompletionStatusError"},{"import": 2408,"src": 5079,"name": "PostQueuedCompletionStatus"},{"import": 2408,"src": 5080,"name": "GetQueuedCompletionStatusResult"},{"import": 2408,"src": 5081,"name": "GetQueuedCompletionStatus"},{"import": 2408,"src": 5082,"name": "GetQueuedCompletionStatusError"},{"import": 2408,"src": 5083,"name": "GetQueuedCompletionStatusEx"},{"import": 2408,"src": 5084,"name": "CloseHandle"},{"import": 2408,"src": 5085,"name": "FindClose"},{"import": 2408,"src": 5086,"name": "ReadFileError"},{"import": 2408,"src": 5087,"name": "ReadFile"},{"import": 2408,"src": 5088,"name": "WriteFileError"},{"import": 2408,"src": 5089,"name": "WriteFile"},{"import": 2408,"src": 5090,"name": "SetCurrentDirectoryError"},{"import": 2408,"src": 5091,"name": "SetCurrentDirectory"},{"import": 2408,"src": 5092,"name": "GetCurrentDirectoryError"},{"import": 2408,"src": 5093,"name": "GetCurrentDirectory"},{"import": 2408,"src": 5094,"name": "CreateSymbolicLinkError"},{"import": 2408,"src": 5095,"name": "CreateSymbolicLink"},{"import": 2408,"src": 5096,"name": "ReadLinkError"},{"import": 2408,"src": 5097,"name": "ReadLink"},{"import": 2408,"src": 5098,"name": "DeleteFileError"},{"import": 2408,"src": 5099,"name": "DeleteFileOptions"},{"import": 2408,"src": 5100,"name": "DeleteFile"},{"import": 2408,"src": 5101,"name": "MoveFileError"},{"import": 2408,"src": 5102,"name": "MoveFileEx"},{"import": 2408,"src": 5103,"name": "MoveFileExW"},{"import": 2408,"src": 5104,"name": "GetStdHandleError"},{"import": 2408,"src": 5105,"name": "GetStdHandle"},{"import": 2408,"src": 5106,"name": "SetFilePointerError"},{"import": 2408,"src": 5107,"name": "SetFilePointerEx_BEGIN"},{"import": 2408,"src": 5108,"name": "SetFilePointerEx_CURRENT"},{"import": 2408,"src": 5109,"name": "SetFilePointerEx_END"},{"import": 2408,"src": 5110,"name": "SetFilePointerEx_CURRENT_get"},{"import": 2408,"src": 5111,"name": "QueryObjectName"},{"import": 2408,"src": 5112,"name": "GetFinalPathNameByHandleError"},{"import": 2408,"src": 5113,"name": "GetFinalPathNameByHandleFormat"},{"import": 2408,"src": 5114,"name": "GetFinalPathNameByHandle"},{"import": 2408,"src": 5115,"name": "QueryInformationFileError"},{"import": 2408,"src": 5116,"name": "QueryInformationFile"},{"import": 2408,"src": 5117,"name": "GetFileSizeError"},{"import": 2408,"src": 5118,"name": "GetFileSizeEx"},{"import": 2408,"src": 5119,"name": "GetFileAttributesError"},{"import": 2408,"src": 5120,"name": "GetFileAttributes"},{"import": 2408,"src": 5121,"name": "GetFileAttributesW"},{"import": 2408,"src": 5122,"name": "WSAStartup"},{"import": 2408,"src": 5123,"name": "WSACleanup"},{"import": 2408,"src": 5124,"name": "WSASocketW"},{"import": 2408,"src": 5125,"name": "bind"},{"import": 2408,"src": 5126,"name": "listen"},{"import": 2408,"src": 5127,"name": "closesocket"},{"import": 2408,"src": 5128,"name": "accept"},{"import": 2408,"src": 5129,"name": "getsockname"},{"import": 2408,"src": 5130,"name": "getpeername"},{"import": 2408,"src": 5131,"name": "sendmsg"},{"import": 2408,"src": 5132,"name": "sendto"},{"import": 2408,"src": 5133,"name": "recvfrom"},{"import": 2408,"src": 5134,"name": "poll"},{"import": 2408,"src": 5135,"name": "WSAIoctl"},{"import": 2408,"src": 5136,"name": "GetModuleFileNameW"},{"import": 2408,"src": 5137,"name": "TerminateProcessError"},{"import": 2408,"src": 5138,"name": "TerminateProcess"},{"import": 2408,"src": 5139,"name": "VirtualAllocError"},{"import": 2408,"src": 5140,"name": "VirtualAlloc"},{"import": 2408,"src": 5141,"name": "VirtualFree"},{"import": 2408,"src": 5142,"name": "SetConsoleTextAttributeError"},{"import": 2408,"src": 5143,"name": "SetConsoleTextAttribute"},{"import": 2408,"src": 5144,"name": "SetConsoleCtrlHandler"},{"import": 2408,"src": 5145,"name": "SetFileCompletionNotificationModes"},{"import": 2408,"src": 5146,"name": "GetEnvironmentStringsError"},{"import": 2408,"src": 5147,"name": "GetEnvironmentStringsW"},{"import": 2408,"src": 5148,"name": "FreeEnvironmentStringsW"},{"import": 2408,"src": 5149,"name": "GetEnvironmentVariableError"},{"import": 2408,"src": 5150,"name": "GetEnvironmentVariableW"},{"import": 2408,"src": 5151,"name": "CreateProcessError"},{"import": 2408,"src": 5152,"name": "CreateProcessW"},{"import": 2408,"src": 5153,"name": "LoadLibraryError"},{"import": 2408,"src": 5154,"name": "LoadLibraryW"},{"import": 2408,"src": 5155,"name": "FreeLibrary"},{"import": 2408,"src": 5156,"name": "QueryPerformanceFrequency"},{"import": 2408,"src": 5157,"name": "QueryPerformanceCounter"},{"import": 2408,"src": 5158,"name": "InitOnceExecuteOnce"},{"import": 2408,"src": 5159,"name": "HeapFree"},{"import": 2408,"src": 5160,"name": "HeapDestroy"},{"import": 2408,"src": 5161,"name": "LocalFree"},{"import": 2408,"src": 5162,"name": "GetFileInformationByHandleError"},{"import": 2408,"src": 5163,"name": "GetFileInformationByHandle"},{"import": 2408,"src": 5164,"name": "SetFileTimeError"},{"import": 2408,"src": 5165,"name": "SetFileTime"},{"import": 2408,"src": 5166,"name": "LockFileError"},{"import": 2408,"src": 5167,"name": "LockFile"},{"import": 2408,"src": 5168,"name": "UnlockFileError"},{"import": 2408,"src": 5169,"name": "UnlockFile"},{"import": 2408,"src": 5170,"name": "teb"},{"import": 2408,"src": 5171,"name": "peb"},{"import": 2408,"src": 5172,"name": "fromSysTime"},{"import": 2408,"src": 5173,"name": "toSysTime"},{"import": 2408,"src": 5174,"name": "fileTimeToNanoSeconds"},{"import": 2408,"src": 5175,"name": "nanoSecondsToFileTime"},{"import": 2408,"src": 5176,"name": "PathSpace"},{"import": 2408,"src": 5177,"name": "RemoveDotDirsError"},{"import": 2408,"src": 5178,"name": "removeDotDirsSanitized"},{"import": 2408,"src": 5179,"name": "normalizePath"},{"import": 2408,"src": 5180,"name": "cStrToPrefixedFileW"},{"import": 2408,"src": 5181,"name": "sliceToPrefixedFileW"},{"import": 2408,"src": 5182,"name": "wToPrefixedFileW"},{"import": 2408,"src": 5183,"name": "loadWinsockExtensionFunction"},{"import": 2408,"src": 5184,"name": "unexpectedError"},{"import": 2408,"src": 5185,"name": "unexpectedWSAError"},{"import": 2408,"src": 5186,"name": "unexpectedStatus"},{"import": 2408,"src": 5187,"name": "SetThreadDescription"},{"import": 2408,"src": 5188,"name": "GetThreadDescription"},{"import": 2408,"src": 5189,"name": "Win32Error"},{"import": 2408,"src": 5190,"name": "NTSTATUS"},{"import": 2408,"src": 5191,"name": "LANG"},{"import": 2408,"src": 5192,"name": "SUBLANG"},{"import": 2408,"src": 5193,"name": "STD_INPUT_HANDLE"},{"import": 2408,"src": 5194,"name": "STD_OUTPUT_HANDLE"},{"import": 2408,"src": 5195,"name": "STD_ERROR_HANDLE"},{"import": 2408,"src": 5196,"name": "WINAPI"},{"import": 2408,"src": 5197,"name": "BOOL"},{"import": 2408,"src": 5198,"name": "BOOLEAN"},{"import": 2408,"src": 5199,"name": "BYTE"},{"import": 2408,"src": 5200,"name": "CHAR"},{"import": 2408,"src": 5201,"name": "UCHAR"},{"import": 2408,"src": 5202,"name": "FLOAT"},{"import": 2408,"src": 5203,"name": "HANDLE","kind": "const","type": 954,"value": 1493},{"import": 2408,"src": 5204,"name": "HCRYPTPROV"},{"import": 2408,"src": 5205,"name": "ATOM"},{"import": 2408,"src": 5206,"name": "HBRUSH"},{"import": 2408,"src": 5207,"name": "HCURSOR"},{"import": 2408,"src": 5208,"name": "HICON"},{"import": 2408,"src": 5209,"name": "HINSTANCE"},{"import": 2408,"src": 5210,"name": "HMENU"},{"import": 2408,"src": 5211,"name": "HMODULE"},{"import": 2408,"src": 5212,"name": "HWND"},{"import": 2408,"src": 5213,"name": "HDC"},{"import": 2408,"src": 5214,"name": "HGLRC"},{"import": 2408,"src": 5215,"name": "FARPROC"},{"import": 2408,"src": 5216,"name": "INT"},{"import": 2408,"src": 5217,"name": "LPCSTR"},{"import": 2408,"src": 5218,"name": "LPCVOID"},{"import": 2408,"src": 5219,"name": "LPSTR"},{"import": 2408,"src": 5220,"name": "LPVOID"},{"import": 2408,"src": 5221,"name": "LPWSTR"},{"import": 2408,"src": 5222,"name": "LPCWSTR"},{"import": 2408,"src": 5223,"name": "PVOID"},{"import": 2408,"src": 5224,"name": "PWSTR"},{"import": 2408,"src": 5225,"name": "SIZE_T"},{"import": 2408,"src": 5226,"name": "UINT"},{"import": 2408,"src": 5227,"name": "ULONG_PTR"},{"import": 2408,"src": 5228,"name": "LONG_PTR"},{"import": 2408,"src": 5229,"name": "DWORD_PTR"},{"import": 2408,"src": 5230,"name": "WCHAR"},{"import": 2408,"src": 5231,"name": "WORD"},{"import": 2408,"src": 5232,"name": "DWORD"},{"import": 2408,"src": 5233,"name": "DWORD64"},{"import": 2408,"src": 5234,"name": "LARGE_INTEGER"},{"import": 2408,"src": 5235,"name": "ULARGE_INTEGER"},{"import": 2408,"src": 5236,"name": "USHORT"},{"import": 2408,"src": 5237,"name": "SHORT"},{"import": 2408,"src": 5238,"name": "ULONG"},{"import": 2408,"src": 5239,"name": "LONG"},{"import": 2408,"src": 5240,"name": "ULONGLONG"},{"import": 2408,"src": 5241,"name": "LONGLONG"},{"import": 2408,"src": 5242,"name": "HLOCAL"},{"import": 2408,"src": 5243,"name": "LANGID"},{"import": 2408,"src": 5244,"name": "WPARAM"},{"import": 2408,"src": 5245,"name": "LPARAM"},{"import": 2408,"src": 5246,"name": "LRESULT"},{"import": 2408,"src": 5247,"name": "va_list"},{"import": 2408,"src": 5248,"name": "TRUE"},{"import": 2408,"src": 5249,"name": "FALSE"},{"import": 2408,"src": 5250,"name": "DEVICE_TYPE"},{"import": 2408,"src": 5251,"name": "FILE_DEVICE_BEEP"},{"import": 2408,"src": 5252,"name": "FILE_DEVICE_CD_ROM"},{"import": 2408,"src": 5253,"name": "FILE_DEVICE_CD_ROM_FILE_SYSTEM"},{"import": 2408,"src": 5254,"name": "FILE_DEVICE_CONTROLLER"},{"import": 2408,"src": 5255,"name": "FILE_DEVICE_DATALINK"},{"import": 2408,"src": 5256,"name": "FILE_DEVICE_DFS"},{"import": 2408,"src": 5257,"name": "FILE_DEVICE_DISK"},{"import": 2408,"src": 5258,"name": "FILE_DEVICE_DISK_FILE_SYSTEM"},{"import": 2408,"src": 5259,"name": "FILE_DEVICE_FILE_SYSTEM"},{"import": 2408,"src": 5260,"name": "FILE_DEVICE_INPORT_PORT"},{"import": 2408,"src": 5261,"name": "FILE_DEVICE_KEYBOARD"},{"import": 2408,"src": 5262,"name": "FILE_DEVICE_MAILSLOT"},{"import": 2408,"src": 5263,"name": "FILE_DEVICE_MIDI_IN"},{"import": 2408,"src": 5264,"name": "FILE_DEVICE_MIDI_OUT"},{"import": 2408,"src": 5265,"name": "FILE_DEVICE_MOUSE"},{"import": 2408,"src": 5266,"name": "FILE_DEVICE_MULTI_UNC_PROVIDER"},{"import": 2408,"src": 5267,"name": "FILE_DEVICE_NAMED_PIPE"},{"import": 2408,"src": 5268,"name": "FILE_DEVICE_NETWORK"},{"import": 2408,"src": 5269,"name": "FILE_DEVICE_NETWORK_BROWSER"},{"import": 2408,"src": 5270,"name": "FILE_DEVICE_NETWORK_FILE_SYSTEM"},{"import": 2408,"src": 5271,"name": "FILE_DEVICE_NULL"},{"import": 2408,"src": 5272,"name": "FILE_DEVICE_PARALLEL_PORT"},{"import": 2408,"src": 5273,"name": "FILE_DEVICE_PHYSICAL_NETCARD"},{"import": 2408,"src": 5274,"name": "FILE_DEVICE_PRINTER"},{"import": 2408,"src": 5275,"name": "FILE_DEVICE_SCANNER"},{"import": 2408,"src": 5276,"name": "FILE_DEVICE_SERIAL_MOUSE_PORT"},{"import": 2408,"src": 5277,"name": "FILE_DEVICE_SERIAL_PORT"},{"import": 2408,"src": 5278,"name": "FILE_DEVICE_SCREEN"},{"import": 2408,"src": 5279,"name": "FILE_DEVICE_SOUND"},{"import": 2408,"src": 5280,"name": "FILE_DEVICE_STREAMS"},{"import": 2408,"src": 5281,"name": "FILE_DEVICE_TAPE"},{"import": 2408,"src": 5282,"name": "FILE_DEVICE_TAPE_FILE_SYSTEM"},{"import": 2408,"src": 5283,"name": "FILE_DEVICE_TRANSPORT"},{"import": 2408,"src": 5284,"name": "FILE_DEVICE_UNKNOWN"},{"import": 2408,"src": 5285,"name": "FILE_DEVICE_VIDEO"},{"import": 2408,"src": 5286,"name": "FILE_DEVICE_VIRTUAL_DISK"},{"import": 2408,"src": 5287,"name": "FILE_DEVICE_WAVE_IN"},{"import": 2408,"src": 5288,"name": "FILE_DEVICE_WAVE_OUT"},{"import": 2408,"src": 5289,"name": "FILE_DEVICE_8042_PORT"},{"import": 2408,"src": 5290,"name": "FILE_DEVICE_NETWORK_REDIRECTOR"},{"import": 2408,"src": 5291,"name": "FILE_DEVICE_BATTERY"},{"import": 2408,"src": 5292,"name": "FILE_DEVICE_BUS_EXTENDER"},{"import": 2408,"src": 5293,"name": "FILE_DEVICE_MODEM"},{"import": 2408,"src": 5294,"name": "FILE_DEVICE_VDM"},{"import": 2408,"src": 5295,"name": "FILE_DEVICE_MASS_STORAGE"},{"import": 2408,"src": 5296,"name": "FILE_DEVICE_SMB"},{"import": 2408,"src": 5297,"name": "FILE_DEVICE_KS"},{"import": 2408,"src": 5298,"name": "FILE_DEVICE_CHANGER"},{"import": 2408,"src": 5299,"name": "FILE_DEVICE_SMARTCARD"},{"import": 2408,"src": 5300,"name": "FILE_DEVICE_ACPI"},{"import": 2408,"src": 5301,"name": "FILE_DEVICE_DVD"},{"import": 2408,"src": 5302,"name": "FILE_DEVICE_FULLSCREEN_VIDEO"},{"import": 2408,"src": 5303,"name": "FILE_DEVICE_DFS_FILE_SYSTEM"},{"import": 2408,"src": 5304,"name": "FILE_DEVICE_DFS_VOLUME"},{"import": 2408,"src": 5305,"name": "FILE_DEVICE_SERENUM"},{"import": 2408,"src": 5306,"name": "FILE_DEVICE_TERMSRV"},{"import": 2408,"src": 5307,"name": "FILE_DEVICE_KSEC"},{"import": 2408,"src": 5308,"name": "FILE_DEVICE_FIPS"},{"import": 2408,"src": 5309,"name": "FILE_DEVICE_INFINIBAND"},{"import": 2408,"src": 5310,"name": "FILE_DEVICE_VMBUS"},{"import": 2408,"src": 5311,"name": "FILE_DEVICE_CRYPT_PROVIDER"},{"import": 2408,"src": 5312,"name": "FILE_DEVICE_WPD"},{"import": 2408,"src": 5313,"name": "FILE_DEVICE_BLUETOOTH"},{"import": 2408,"src": 5314,"name": "FILE_DEVICE_MT_COMPOSITE"},{"import": 2408,"src": 5315,"name": "FILE_DEVICE_MT_TRANSPORT"},{"import": 2408,"src": 5316,"name": "FILE_DEVICE_BIOMETRIC"},{"import": 2408,"src": 5317,"name": "FILE_DEVICE_PMI"},{"import": 2408,"src": 5318,"name": "FILE_DEVICE_EHSTOR"},{"import": 2408,"src": 5319,"name": "FILE_DEVICE_DEVAPI"},{"import": 2408,"src": 5320,"name": "FILE_DEVICE_GPIO"},{"import": 2408,"src": 5321,"name": "FILE_DEVICE_USBEX"},{"import": 2408,"src": 5322,"name": "FILE_DEVICE_CONSOLE"},{"import": 2408,"src": 5323,"name": "FILE_DEVICE_NFP"},{"import": 2408,"src": 5324,"name": "FILE_DEVICE_SYSENV"},{"import": 2408,"src": 5325,"name": "FILE_DEVICE_VIRTUAL_BLOCK"},{"import": 2408,"src": 5326,"name": "FILE_DEVICE_POINT_OF_SERVICE"},{"import": 2408,"src": 5327,"name": "FILE_DEVICE_STORAGE_REPLICATION"},{"import": 2408,"src": 5328,"name": "FILE_DEVICE_TRUST_ENV"},{"import": 2408,"src": 5329,"name": "FILE_DEVICE_UCM"},{"import": 2408,"src": 5330,"name": "FILE_DEVICE_UCMTCPCI"},{"import": 2408,"src": 5331,"name": "FILE_DEVICE_PERSISTENT_MEMORY"},{"import": 2408,"src": 5332,"name": "FILE_DEVICE_NVDIMM"},{"import": 2408,"src": 5333,"name": "FILE_DEVICE_HOLOGRAPHIC"},{"import": 2408,"src": 5334,"name": "FILE_DEVICE_SDFXHCI"},{"import": 2408,"src": 5335,"name": "TransferType"},{"import": 2408,"src": 5336,"name": "FILE_ANY_ACCESS"},{"import": 2408,"src": 5337,"name": "FILE_READ_ACCESS"},{"import": 2408,"src": 5338,"name": "FILE_WRITE_ACCESS"},{"import": 2408,"src": 5339,"name": "CTL_CODE"},{"import": 2408,"src": 5340,"name": "INVALID_HANDLE_VALUE"},{"import": 2408,"src": 5341,"name": "INVALID_FILE_ATTRIBUTES"},{"import": 2408,"src": 5342,"name": "FILE_ALL_INFORMATION"},{"import": 2408,"src": 5343,"name": "FILE_BASIC_INFORMATION"},{"import": 2408,"src": 5344,"name": "FILE_STANDARD_INFORMATION"},{"import": 2408,"src": 5345,"name": "FILE_INTERNAL_INFORMATION"},{"import": 2408,"src": 5346,"name": "FILE_EA_INFORMATION"},{"import": 2408,"src": 5347,"name": "FILE_ACCESS_INFORMATION"},{"import": 2408,"src": 5348,"name": "FILE_POSITION_INFORMATION"},{"import": 2408,"src": 5349,"name": "FILE_END_OF_FILE_INFORMATION"},{"import": 2408,"src": 5350,"name": "FILE_MODE_INFORMATION"},{"import": 2408,"src": 5351,"name": "FILE_ALIGNMENT_INFORMATION"},{"import": 2408,"src": 5352,"name": "FILE_NAME_INFORMATION"},{"import": 2408,"src": 5353,"name": "FILE_RENAME_INFORMATION"},{"import": 2408,"src": 5354,"name": "IO_STATUS_BLOCK"},{"import": 2408,"src": 5355,"name": "FILE_INFORMATION_CLASS"},{"import": 2408,"src": 5356,"name": "OVERLAPPED"},{"import": 2408,"src": 5357,"name": "OVERLAPPED_ENTRY"},{"import": 2408,"src": 5358,"name": "MAX_PATH"},{"import": 2408,"src": 5359,"name": "FILE_INFO_BY_HANDLE_CLASS"},{"import": 2408,"src": 5360,"name": "FileBasicInfo"},{"import": 2408,"src": 5361,"name": "FileStandardInfo"},{"import": 2408,"src": 5362,"name": "FileNameInfo"},{"import": 2408,"src": 5363,"name": "FileRenameInfo"},{"import": 2408,"src": 5364,"name": "FileDispositionInfo"},{"import": 2408,"src": 5365,"name": "FileAllocationInfo"},{"import": 2408,"src": 5366,"name": "FileEndOfFileInfo"},{"import": 2408,"src": 5367,"name": "FileStreamInfo"},{"import": 2408,"src": 5368,"name": "FileCompressionInfo"},{"import": 2408,"src": 5369,"name": "FileAttributeTagInfo"},{"import": 2408,"src": 5370,"name": "FileIdBothDirectoryInfo"},{"import": 2408,"src": 5371,"name": "FileIdBothDirectoryRestartInfo"},{"import": 2408,"src": 5372,"name": "FileIoPriorityHintInfo"},{"import": 2408,"src": 5373,"name": "FileRemoteProtocolInfo"},{"import": 2408,"src": 5374,"name": "FileFullDirectoryInfo"},{"import": 2408,"src": 5375,"name": "FileFullDirectoryRestartInfo"},{"import": 2408,"src": 5376,"name": "FileStorageInfo"},{"import": 2408,"src": 5377,"name": "FileAlignmentInfo"},{"import": 2408,"src": 5378,"name": "FileIdInfo"},{"import": 2408,"src": 5379,"name": "FileIdExtdDirectoryInfo"},{"import": 2408,"src": 5380,"name": "FileIdExtdDirectoryRestartInfo"},{"import": 2408,"src": 5381,"name": "BY_HANDLE_FILE_INFORMATION"},{"import": 2408,"src": 5382,"name": "FILE_NAME_INFO"},{"import": 2408,"src": 5383,"name": "FILE_NAME_NORMALIZED"},{"import": 2408,"src": 5384,"name": "FILE_NAME_OPENED"},{"import": 2408,"src": 5385,"name": "VOLUME_NAME_DOS"},{"import": 2408,"src": 5386,"name": "VOLUME_NAME_GUID"},{"import": 2408,"src": 5387,"name": "VOLUME_NAME_NONE"},{"import": 2408,"src": 5388,"name": "VOLUME_NAME_NT"},{"import": 2408,"src": 5389,"name": "SECURITY_ATTRIBUTES"},{"import": 2408,"src": 5390,"name": "PIPE_ACCESS_INBOUND"},{"import": 2408,"src": 5391,"name": "PIPE_ACCESS_OUTBOUND"},{"import": 2408,"src": 5392,"name": "PIPE_ACCESS_DUPLEX"},{"import": 2408,"src": 5393,"name": "PIPE_TYPE_BYTE"},{"import": 2408,"src": 5394,"name": "PIPE_TYPE_MESSAGE"},{"import": 2408,"src": 5395,"name": "PIPE_READMODE_BYTE"},{"import": 2408,"src": 5396,"name": "PIPE_READMODE_MESSAGE"},{"import": 2408,"src": 5397,"name": "PIPE_WAIT"},{"import": 2408,"src": 5398,"name": "PIPE_NOWAIT"},{"import": 2408,"src": 5399,"name": "GENERIC_READ"},{"import": 2408,"src": 5400,"name": "GENERIC_WRITE"},{"import": 2408,"src": 5401,"name": "GENERIC_EXECUTE"},{"import": 2408,"src": 5402,"name": "GENERIC_ALL"},{"import": 2408,"src": 5403,"name": "FILE_SHARE_DELETE"},{"import": 2408,"src": 5404,"name": "FILE_SHARE_READ"},{"import": 2408,"src": 5405,"name": "FILE_SHARE_WRITE"},{"import": 2408,"src": 5406,"name": "DELETE"},{"import": 2408,"src": 5407,"name": "READ_CONTROL"},{"import": 2408,"src": 5408,"name": "WRITE_DAC"},{"import": 2408,"src": 5409,"name": "WRITE_OWNER"},{"import": 2408,"src": 5410,"name": "SYNCHRONIZE"},{"import": 2408,"src": 5411,"name": "STANDARD_RIGHTS_READ"},{"import": 2408,"src": 5412,"name": "STANDARD_RIGHTS_WRITE"},{"import": 2408,"src": 5413,"name": "STANDARD_RIGHTS_EXECUTE"},{"import": 2408,"src": 5414,"name": "STANDARD_RIGHTS_REQUIRED"},{"import": 2408,"src": 5415,"name": "FILE_SUPERSEDE"},{"import": 2408,"src": 5416,"name": "FILE_OPEN"},{"import": 2408,"src": 5417,"name": "FILE_CREATE"},{"import": 2408,"src": 5418,"name": "FILE_OPEN_IF"},{"import": 2408,"src": 5419,"name": "FILE_OVERWRITE"},{"import": 2408,"src": 5420,"name": "FILE_OVERWRITE_IF"},{"import": 2408,"src": 5421,"name": "FILE_MAXIMUM_DISPOSITION"},{"import": 2408,"src": 5422,"name": "FILE_READ_DATA"},{"import": 2408,"src": 5423,"name": "FILE_LIST_DIRECTORY"},{"import": 2408,"src": 5424,"name": "FILE_WRITE_DATA"},{"import": 2408,"src": 5425,"name": "FILE_ADD_FILE"},{"import": 2408,"src": 5426,"name": "FILE_APPEND_DATA"},{"import": 2408,"src": 5427,"name": "FILE_ADD_SUBDIRECTORY"},{"import": 2408,"src": 5428,"name": "FILE_CREATE_PIPE_INSTANCE"},{"import": 2408,"src": 5429,"name": "FILE_READ_EA"},{"import": 2408,"src": 5430,"name": "FILE_WRITE_EA"},{"import": 2408,"src": 5431,"name": "FILE_EXECUTE"},{"import": 2408,"src": 5432,"name": "FILE_TRAVERSE"},{"import": 2408,"src": 5433,"name": "FILE_DELETE_CHILD"},{"import": 2408,"src": 5434,"name": "FILE_READ_ATTRIBUTES"},{"import": 2408,"src": 5435,"name": "FILE_WRITE_ATTRIBUTES"},{"import": 2408,"src": 5436,"name": "FILE_DIRECTORY_FILE"},{"import": 2408,"src": 5437,"name": "FILE_WRITE_THROUGH"},{"import": 2408,"src": 5438,"name": "FILE_SEQUENTIAL_ONLY"},{"import": 2408,"src": 5439,"name": "FILE_NO_INTERMEDIATE_BUFFERING"},{"import": 2408,"src": 5440,"name": "FILE_SYNCHRONOUS_IO_ALERT"},{"import": 2408,"src": 5441,"name": "FILE_SYNCHRONOUS_IO_NONALERT"},{"import": 2408,"src": 5442,"name": "FILE_NON_DIRECTORY_FILE"},{"import": 2408,"src": 5443,"name": "FILE_CREATE_TREE_CONNECTION"},{"import": 2408,"src": 5444,"name": "FILE_COMPLETE_IF_OPLOCKED"},{"import": 2408,"src": 5445,"name": "FILE_NO_EA_KNOWLEDGE"},{"import": 2408,"src": 5446,"name": "FILE_OPEN_FOR_RECOVERY"},{"import": 2408,"src": 5447,"name": "FILE_RANDOM_ACCESS"},{"import": 2408,"src": 5448,"name": "FILE_DELETE_ON_CLOSE"},{"import": 2408,"src": 5449,"name": "FILE_OPEN_BY_FILE_ID"},{"import": 2408,"src": 5450,"name": "FILE_OPEN_FOR_BACKUP_INTENT"},{"import": 2408,"src": 5451,"name": "FILE_NO_COMPRESSION"},{"import": 2408,"src": 5452,"name": "FILE_RESERVE_OPFILTER"},{"import": 2408,"src": 5453,"name": "FILE_OPEN_REPARSE_POINT"},{"import": 2408,"src": 5454,"name": "FILE_OPEN_OFFLINE_FILE"},{"import": 2408,"src": 5455,"name": "FILE_OPEN_FOR_FREE_SPACE_QUERY"},{"import": 2408,"src": 5456,"name": "CREATE_ALWAYS"},{"import": 2408,"src": 5457,"name": "CREATE_NEW"},{"import": 2408,"src": 5458,"name": "OPEN_ALWAYS"},{"import": 2408,"src": 5459,"name": "OPEN_EXISTING"},{"import": 2408,"src": 5460,"name": "TRUNCATE_EXISTING"},{"import": 2408,"src": 5461,"name": "FILE_ATTRIBUTE_ARCHIVE"},{"import": 2408,"src": 5462,"name": "FILE_ATTRIBUTE_COMPRESSED"},{"import": 2408,"src": 5463,"name": "FILE_ATTRIBUTE_DEVICE"},{"import": 2408,"src": 5464,"name": "FILE_ATTRIBUTE_DIRECTORY"},{"import": 2408,"src": 5465,"name": "FILE_ATTRIBUTE_ENCRYPTED"},{"import": 2408,"src": 5466,"name": "FILE_ATTRIBUTE_HIDDEN"},{"import": 2408,"src": 5467,"name": "FILE_ATTRIBUTE_INTEGRITY_STREAM"},{"import": 2408,"src": 5468,"name": "FILE_ATTRIBUTE_NORMAL"},{"import": 2408,"src": 5469,"name": "FILE_ATTRIBUTE_NOT_CONTENT_INDEXED"},{"import": 2408,"src": 5470,"name": "FILE_ATTRIBUTE_NO_SCRUB_DATA"},{"import": 2408,"src": 5471,"name": "FILE_ATTRIBUTE_OFFLINE"},{"import": 2408,"src": 5472,"name": "FILE_ATTRIBUTE_READONLY"},{"import": 2408,"src": 5473,"name": "FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS"},{"import": 2408,"src": 5474,"name": "FILE_ATTRIBUTE_RECALL_ON_OPEN"},{"import": 2408,"src": 5475,"name": "FILE_ATTRIBUTE_REPARSE_POINT"},{"import": 2408,"src": 5476,"name": "FILE_ATTRIBUTE_SPARSE_FILE"},{"import": 2408,"src": 5477,"name": "FILE_ATTRIBUTE_SYSTEM"},{"import": 2408,"src": 5478,"name": "FILE_ATTRIBUTE_TEMPORARY"},{"import": 2408,"src": 5479,"name": "FILE_ATTRIBUTE_VIRTUAL"},{"import": 2408,"src": 5480,"name": "CREATE_EVENT_INITIAL_SET"},{"import": 2408,"src": 5481,"name": "CREATE_EVENT_MANUAL_RESET"},{"import": 2408,"src": 5482,"name": "EVENT_ALL_ACCESS"},{"import": 2408,"src": 5483,"name": "EVENT_MODIFY_STATE"},{"import": 2408,"src": 5484,"name": "PROCESS_INFORMATION"},{"import": 2408,"src": 5485,"name": "STARTUPINFOW"},{"import": 2408,"src": 5486,"name": "STARTF_FORCEONFEEDBACK"},{"import": 2408,"src": 5487,"name": "STARTF_FORCEOFFFEEDBACK"},{"import": 2408,"src": 5488,"name": "STARTF_PREVENTPINNING"},{"import": 2408,"src": 5489,"name": "STARTF_RUNFULLSCREEN"},{"import": 2408,"src": 5490,"name": "STARTF_TITLEISAPPID"},{"import": 2408,"src": 5491,"name": "STARTF_TITLEISLINKNAME"},{"import": 2408,"src": 5492,"name": "STARTF_UNTRUSTEDSOURCE"},{"import": 2408,"src": 5493,"name": "STARTF_USECOUNTCHARS"},{"import": 2408,"src": 5494,"name": "STARTF_USEFILLATTRIBUTE"},{"import": 2408,"src": 5495,"name": "STARTF_USEHOTKEY"},{"import": 2408,"src": 5496,"name": "STARTF_USEPOSITION"},{"import": 2408,"src": 5497,"name": "STARTF_USESHOWWINDOW"},{"import": 2408,"src": 5498,"name": "STARTF_USESIZE"},{"import": 2408,"src": 5499,"name": "STARTF_USESTDHANDLES"},{"import": 2408,"src": 5500,"name": "INFINITE"},{"import": 2408,"src": 5501,"name": "MAXIMUM_WAIT_OBJECTS"},{"import": 2408,"src": 5502,"name": "WAIT_ABANDONED"},{"import": 2408,"src": 5503,"name": "WAIT_ABANDONED_0"},{"import": 2408,"src": 5504,"name": "WAIT_OBJECT_0"},{"import": 2408,"src": 5505,"name": "WAIT_TIMEOUT"},{"import": 2408,"src": 5506,"name": "WAIT_FAILED"},{"import": 2408,"src": 5507,"name": "HANDLE_FLAG_INHERIT"},{"import": 2408,"src": 5508,"name": "HANDLE_FLAG_PROTECT_FROM_CLOSE"},{"import": 2408,"src": 5509,"name": "MOVEFILE_COPY_ALLOWED"},{"import": 2408,"src": 5510,"name": "MOVEFILE_CREATE_HARDLINK"},{"import": 2408,"src": 5511,"name": "MOVEFILE_DELAY_UNTIL_REBOOT"},{"import": 2408,"src": 5512,"name": "MOVEFILE_FAIL_IF_NOT_TRACKABLE"},{"import": 2408,"src": 5513,"name": "MOVEFILE_REPLACE_EXISTING"},{"import": 2408,"src": 5514,"name": "MOVEFILE_WRITE_THROUGH"},{"import": 2408,"src": 5515,"name": "FILE_BEGIN"},{"import": 2408,"src": 5516,"name": "FILE_CURRENT"},{"import": 2408,"src": 5517,"name": "FILE_END"},{"import": 2408,"src": 5518,"name": "HEAP_CREATE_ENABLE_EXECUTE"},{"import": 2408,"src": 5519,"name": "HEAP_REALLOC_IN_PLACE_ONLY"},{"import": 2408,"src": 5520,"name": "HEAP_GENERATE_EXCEPTIONS"},{"import": 2408,"src": 5521,"name": "HEAP_NO_SERIALIZE"},{"import": 2408,"src": 5522,"name": "MEM_COMMIT"},{"import": 2408,"src": 5523,"name": "MEM_RESERVE"},{"import": 2408,"src": 5524,"name": "MEM_RESET"},{"import": 2408,"src": 5525,"name": "MEM_RESET_UNDO"},{"import": 2408,"src": 5526,"name": "MEM_LARGE_PAGES"},{"import": 2408,"src": 5527,"name": "MEM_PHYSICAL"},{"import": 2408,"src": 5528,"name": "MEM_TOP_DOWN"},{"import": 2408,"src": 5529,"name": "MEM_WRITE_WATCH"},{"import": 2408,"src": 5530,"name": "PAGE_EXECUTE"},{"import": 2408,"src": 5531,"name": "PAGE_EXECUTE_READ"},{"import": 2408,"src": 5532,"name": "PAGE_EXECUTE_READWRITE"},{"import": 2408,"src": 5533,"name": "PAGE_EXECUTE_WRITECOPY"},{"import": 2408,"src": 5534,"name": "PAGE_NOACCESS"},{"import": 2408,"src": 5535,"name": "PAGE_READONLY"},{"import": 2408,"src": 5536,"name": "PAGE_READWRITE"},{"import": 2408,"src": 5537,"name": "PAGE_WRITECOPY"},{"import": 2408,"src": 5538,"name": "PAGE_TARGETS_INVALID"},{"import": 2408,"src": 5539,"name": "PAGE_TARGETS_NO_UPDATE"},{"import": 2408,"src": 5540,"name": "PAGE_GUARD"},{"import": 2408,"src": 5541,"name": "PAGE_NOCACHE"},{"import": 2408,"src": 5542,"name": "PAGE_WRITECOMBINE"},{"import": 2408,"src": 5543,"name": "MEM_COALESCE_PLACEHOLDERS"},{"import": 2408,"src": 5544,"name": "MEM_RESERVE_PLACEHOLDERS"},{"import": 2408,"src": 5545,"name": "MEM_DECOMMIT"},{"import": 2408,"src": 5546,"name": "MEM_RELEASE"},{"import": 2408,"src": 5547,"name": "PTHREAD_START_ROUTINE"},{"import": 2408,"src": 5548,"name": "LPTHREAD_START_ROUTINE"},{"import": 2408,"src": 5549,"name": "WIN32_FIND_DATAW"},{"import": 2408,"src": 5550,"name": "FILETIME"},{"import": 2408,"src": 5551,"name": "SYSTEM_INFO"},{"import": 2408,"src": 5552,"name": "HRESULT"},{"import": 2408,"src": 5553,"name": "KNOWNFOLDERID"},{"import": 2408,"src": 5554,"name": "GUID"},{"import": 2408,"src": 5555,"name": "FOLDERID_LocalAppData"},{"import": 2408,"src": 5556,"name": "KF_FLAG_DEFAULT"},{"import": 2408,"src": 5557,"name": "KF_FLAG_NO_APPCONTAINER_REDIRECTION"},{"import": 2408,"src": 5558,"name": "KF_FLAG_CREATE"},{"import": 2408,"src": 5559,"name": "KF_FLAG_DONT_VERIFY"},{"import": 2408,"src": 5560,"name": "KF_FLAG_DONT_UNEXPAND"},{"import": 2408,"src": 5561,"name": "KF_FLAG_NO_ALIAS"},{"import": 2408,"src": 5562,"name": "KF_FLAG_INIT"},{"import": 2408,"src": 5563,"name": "KF_FLAG_DEFAULT_PATH"},{"import": 2408,"src": 5564,"name": "KF_FLAG_NOT_PARENT_RELATIVE"},{"import": 2408,"src": 5565,"name": "KF_FLAG_SIMPLE_IDLIST"},{"import": 2408,"src": 5566,"name": "KF_FLAG_ALIAS_ONLY"},{"import": 2408,"src": 5567,"name": "S_OK"},{"import": 2408,"src": 5568,"name": "E_NOTIMPL"},{"import": 2408,"src": 5569,"name": "E_NOINTERFACE"},{"import": 2408,"src": 5570,"name": "E_POINTER"},{"import": 2408,"src": 5571,"name": "E_ABORT"},{"import": 2408,"src": 5572,"name": "E_FAIL"},{"import": 2408,"src": 5573,"name": "E_UNEXPECTED"},{"import": 2408,"src": 5574,"name": "E_ACCESSDENIED"},{"import": 2408,"src": 5575,"name": "E_HANDLE"},{"import": 2408,"src": 5576,"name": "E_OUTOFMEMORY"},{"import": 2408,"src": 5577,"name": "E_INVALIDARG"},{"import": 2408,"src": 5578,"name": "FILE_FLAG_BACKUP_SEMANTICS"},{"import": 2408,"src": 5579,"name": "FILE_FLAG_DELETE_ON_CLOSE"},{"import": 2408,"src": 5580,"name": "FILE_FLAG_NO_BUFFERING"},{"import": 2408,"src": 5581,"name": "FILE_FLAG_OPEN_NO_RECALL"},{"import": 2408,"src": 5582,"name": "FILE_FLAG_OPEN_REPARSE_POINT"},{"import": 2408,"src": 5583,"name": "FILE_FLAG_OVERLAPPED"},{"import": 2408,"src": 5584,"name": "FILE_FLAG_POSIX_SEMANTICS"},{"import": 2408,"src": 5585,"name": "FILE_FLAG_RANDOM_ACCESS"},{"import": 2408,"src": 5586,"name": "FILE_FLAG_SESSION_AWARE"},{"import": 2408,"src": 5587,"name": "FILE_FLAG_SEQUENTIAL_SCAN"},{"import": 2408,"src": 5588,"name": "FILE_FLAG_WRITE_THROUGH"},{"import": 2408,"src": 5589,"name": "RECT"},{"import": 2408,"src": 5590,"name": "SMALL_RECT"},{"import": 2408,"src": 5591,"name": "POINT"},{"import": 2408,"src": 5592,"name": "COORD"},{"import": 2408,"src": 5593,"name": "CREATE_UNICODE_ENVIRONMENT"},{"import": 2408,"src": 5594,"name": "TLS_OUT_OF_INDEXES"},{"import": 2408,"src": 5595,"name": "IMAGE_TLS_DIRECTORY"},{"import": 2408,"src": 5596,"name": "IMAGE_TLS_DIRECTORY64"},{"import": 2408,"src": 5597,"name": "IMAGE_TLS_DIRECTORY32"},{"import": 2408,"src": 5598,"name": "PIMAGE_TLS_CALLBACK"},{"import": 2408,"src": 5599,"name": "PROV_RSA_FULL"},{"import": 2408,"src": 5600,"name": "REGSAM"},{"import": 2408,"src": 5601,"name": "ACCESS_MASK"},{"import": 2408,"src": 5602,"name": "HKEY"},{"import": 2408,"src": 5603,"name": "HKEY__"},{"import": 2408,"src": 5604,"name": "LSTATUS"},{"import": 2408,"src": 5605,"name": "FILE_NOTIFY_INFORMATION"},{"import": 2408,"src": 5606,"name": "FILE_ACTION_ADDED"},{"import": 2408,"src": 5607,"name": "FILE_ACTION_REMOVED"},{"import": 2408,"src": 5608,"name": "FILE_ACTION_MODIFIED"},{"import": 2408,"src": 5609,"name": "FILE_ACTION_RENAMED_OLD_NAME"},{"import": 2408,"src": 5610,"name": "FILE_ACTION_RENAMED_NEW_NAME"},{"import": 2408,"src": 5611,"name": "LPOVERLAPPED_COMPLETION_ROUTINE"},{"import": 2408,"src": 5612,"name": "FILE_NOTIFY_CHANGE_CREATION"},{"import": 2408,"src": 5613,"name": "FILE_NOTIFY_CHANGE_SIZE"},{"import": 2408,"src": 5614,"name": "FILE_NOTIFY_CHANGE_SECURITY"},{"import": 2408,"src": 5615,"name": "FILE_NOTIFY_CHANGE_LAST_ACCESS"},{"import": 2408,"src": 5616,"name": "FILE_NOTIFY_CHANGE_LAST_WRITE"},{"import": 2408,"src": 5617,"name": "FILE_NOTIFY_CHANGE_DIR_NAME"},{"import": 2408,"src": 5618,"name": "FILE_NOTIFY_CHANGE_FILE_NAME"},{"import": 2408,"src": 5619,"name": "FILE_NOTIFY_CHANGE_ATTRIBUTES"},{"import": 2408,"src": 5620,"name": "CONSOLE_SCREEN_BUFFER_INFO"},{"import": 2408,"src": 5621,"name": "FOREGROUND_BLUE"},{"import": 2408,"src": 5622,"name": "FOREGROUND_GREEN"},{"import": 2408,"src": 5623,"name": "FOREGROUND_RED"},{"import": 2408,"src": 5624,"name": "FOREGROUND_INTENSITY"},{"import": 2408,"src": 5625,"name": "LIST_ENTRY"},{"import": 2408,"src": 5626,"name": "RTL_CRITICAL_SECTION_DEBUG"},{"import": 2408,"src": 5627,"name": "RTL_CRITICAL_SECTION"},{"import": 2408,"src": 5628,"name": "CRITICAL_SECTION"},{"import": 2408,"src": 5629,"name": "INIT_ONCE"},{"import": 2408,"src": 5630,"name": "INIT_ONCE_STATIC_INIT"},{"import": 2408,"src": 5631,"name": "INIT_ONCE_FN"},{"import": 2408,"src": 5632,"name": "RTL_RUN_ONCE"},{"import": 2408,"src": 5633,"name": "RTL_RUN_ONCE_INIT"},{"import": 2408,"src": 5634,"name": "COINIT_APARTMENTTHREADED"},{"import": 2408,"src": 5635,"name": "COINIT_MULTITHREADED"},{"import": 2408,"src": 5636,"name": "COINIT_DISABLE_OLE1DDE"},{"import": 2408,"src": 5637,"name": "COINIT_SPEED_OVER_MEMORY"},{"import": 2408,"src": 5638,"name": "COINIT"},{"import": 2408,"src": 5639,"name": "PATH_MAX_WIDE"},{"import": 2408,"src": 5640,"name": "FORMAT_MESSAGE_ALLOCATE_BUFFER"},{"import": 2408,"src": 5641,"name": "FORMAT_MESSAGE_ARGUMENT_ARRAY"},{"import": 2408,"src": 5642,"name": "FORMAT_MESSAGE_FROM_HMODULE"},{"import": 2408,"src": 5643,"name": "FORMAT_MESSAGE_FROM_STRING"},{"import": 2408,"src": 5644,"name": "FORMAT_MESSAGE_FROM_SYSTEM"},{"import": 2408,"src": 5645,"name": "FORMAT_MESSAGE_IGNORE_INSERTS"},{"import": 2408,"src": 5646,"name": "FORMAT_MESSAGE_MAX_WIDTH_MASK"},{"import": 2408,"src": 5647,"name": "EXCEPTION_DATATYPE_MISALIGNMENT"},{"import": 2408,"src": 5648,"name": "EXCEPTION_ACCESS_VIOLATION"},{"import": 2408,"src": 5649,"name": "EXCEPTION_ILLEGAL_INSTRUCTION"},{"import": 2408,"src": 5650,"name": "EXCEPTION_STACK_OVERFLOW"},{"import": 2408,"src": 5651,"name": "EXCEPTION_CONTINUE_SEARCH"},{"import": 2408,"src": 5652,"name": "EXCEPTION_RECORD"},{"import": 2408,"src": 5653,"name": "EXCEPTION_POINTERS"},{"import": 2408,"src": 5654,"name": "VECTORED_EXCEPTION_HANDLER"},{"import": 2408,"src": 5655,"name": "OBJECT_ATTRIBUTES"},{"import": 2408,"src": 5656,"name": "OBJ_INHERIT"},{"import": 2408,"src": 5657,"name": "OBJ_PERMANENT"},{"import": 2408,"src": 5658,"name": "OBJ_EXCLUSIVE"},{"import": 2408,"src": 5659,"name": "OBJ_CASE_INSENSITIVE"},{"import": 2408,"src": 5660,"name": "OBJ_OPENIF"},{"import": 2408,"src": 5661,"name": "OBJ_OPENLINK"},{"import": 2408,"src": 5662,"name": "OBJ_KERNEL_HANDLE"},{"import": 2408,"src": 5663,"name": "OBJ_VALID_ATTRIBUTES"},{"import": 2408,"src": 5664,"name": "UNICODE_STRING"},{"import": 2408,"src": 5665,"name": "ACTIVATION_CONTEXT_DATA"},{"import": 2408,"src": 5666,"name": "ASSEMBLY_STORAGE_MAP"},{"import": 2408,"src": 5667,"name": "FLS_CALLBACK_INFO"},{"import": 2408,"src": 5668,"name": "RTL_BITMAP"},{"import": 2408,"src": 5669,"name": "KAFFINITY"},{"import": 2408,"src": 5670,"name": "TEB"},{"import": 2408,"src": 5671,"name": "PEB"},{"import": 2408,"src": 5672,"name": "PEB_LDR_DATA"},{"import": 2408,"src": 5673,"name": "RTL_USER_PROCESS_PARAMETERS"},{"import": 2408,"src": 5674,"name": "RTL_DRIVE_LETTER_CURDIR"},{"import": 2408,"src": 5675,"name": "PPS_POST_PROCESS_INIT_ROUTINE"},{"import": 2408,"src": 5676,"name": "FILE_BOTH_DIR_INFORMATION"},{"import": 2408,"src": 5677,"name": "FILE_BOTH_DIRECTORY_INFORMATION"},{"import": 2408,"src": 5678,"name": "IO_APC_ROUTINE"},{"import": 2408,"src": 5679,"name": "CURDIR"},{"import": 2408,"src": 5680,"name": "DUPLICATE_SAME_ACCESS"},{"import": 2408,"src": 5681,"name": "MODULEINFO"},{"import": 2408,"src": 5682,"name": "PSAPI_WS_WATCH_INFORMATION"},{"import": 2408,"src": 5683,"name": "PROCESS_MEMORY_COUNTERS"},{"import": 2408,"src": 5684,"name": "PROCESS_MEMORY_COUNTERS_EX"},{"import": 2408,"src": 5685,"name": "PERFORMANCE_INFORMATION"},{"import": 2408,"src": 5686,"name": "ENUM_PAGE_FILE_INFORMATION"},{"import": 2408,"src": 5687,"name": "PENUM_PAGE_FILE_CALLBACKW"},{"import": 2408,"src": 5688,"name": "PENUM_PAGE_FILE_CALLBACKA"},{"import": 2408,"src": 5689,"name": "PSAPI_WS_WATCH_INFORMATION_EX"},{"import": 2408,"src": 5690,"name": "OSVERSIONINFOW"},{"import": 2408,"src": 5691,"name": "RTL_OSVERSIONINFOW"},{"import": 2408,"src": 5692,"name": "REPARSE_DATA_BUFFER"},{"import": 2408,"src": 5693,"name": "SYMBOLIC_LINK_REPARSE_BUFFER"},{"import": 2408,"src": 5694,"name": "MOUNT_POINT_REPARSE_BUFFER"},{"import": 2408,"src": 5695,"name": "MAXIMUM_REPARSE_DATA_BUFFER_SIZE"},{"import": 2408,"src": 5696,"name": "FSCTL_SET_REPARSE_POINT"},{"import": 2408,"src": 5697,"name": "FSCTL_GET_REPARSE_POINT"},{"import": 2408,"src": 5698,"name": "IO_REPARSE_TAG_SYMLINK"},{"import": 2408,"src": 5699,"name": "IO_REPARSE_TAG_MOUNT_POINT"},{"import": 2408,"src": 5700,"name": "SYMLINK_FLAG_RELATIVE"},{"import": 2408,"src": 5701,"name": "SYMBOLIC_LINK_FLAG_DIRECTORY"},{"import": 2408,"src": 5702,"name": "SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE"},{"import": 2408,"src": 5703,"name": "MOUNTMGR_MOUNT_POINT"},{"import": 2408,"src": 5704,"name": "MOUNTMGR_MOUNT_POINTS"},{"import": 2408,"src": 5705,"name": "IOCTL_MOUNTMGR_QUERY_POINTS"},{"import": 2408,"src": 5706,"name": "OBJECT_INFORMATION_CLASS"},{"import": 2408,"src": 5707,"name": "OBJECT_NAME_INFORMATION"},{"import": 2408,"src": 5708,"name": "SRWLOCK"},{"import": 2408,"src": 5709,"name": "SRWLOCK_INIT"},{"import": 2408,"src": 5710,"name": "CONDITION_VARIABLE"},{"import": 2408,"src": 5711,"name": "CONDITION_VARIABLE_INIT"},{"import": 2408,"src": 5712,"name": "FILE_SKIP_COMPLETION_PORT_ON_SUCCESS"},{"import": 2408,"src": 5713,"name": "FILE_SKIP_SET_EVENT_ON_HANDLE"},{"import": 2408,"src": 5714,"name": "CTRL_C_EVENT"},{"import": 2408,"src": 5715,"name": "CTRL_BREAK_EVENT"},{"import": 2408,"src": 5716,"name": "CTRL_CLOSE_EVENT"},{"import": 2408,"src": 5717,"name": "CTRL_LOGOFF_EVENT"},{"import": 2408,"src": 5718,"name": "CTRL_SHUTDOWN_EVENT"},{"import": 2408,"src": 5719,"name": "HANDLER_ROUTINE"},{"import": 2408,"src": 5720,"name": "builtin","kind": "const","type": 954,"value": 1283},{"import": 2408,"src": 5721,"name": "std"},{"import": 2408,"src": 5722,"name": "mem"},{"import": 2408,"src": 5723,"name": "assert"},{"import": 2408,"src": 5724,"name": "math"},{"import": 2408,"src": 5725,"name": "maxInt"},{"import": 2408,"src": 5726,"name": "native_arch","kind": "const","type": 968,"value": null},{"import": 2408,"src": 5727,"name": "parseReadlinkPath"},{"import": 2408,"src": 5728,"name": "wsa_startup_mutex"},{"import": 2408,"src": 5729,"name": "GetModuleFileNameError"},{"import": 2408,"src": 5730,"name": "getFullPathNameW"},{"import": 2408,"src": 5731,"name": "MAKELANGID"},{"import": 1945,"src": 5732,"name": "Error","kind": "const","type": 954,"value": 1888},{"import": 1945,"src": 5733,"name": "Error","kind": "const","type": 954,"value": 1888},{"import": 1945,"src": 5734,"name": "Error","kind": "const","type": 954,"value": 972},{"import": 1945,"src": 5735,"name": "Error","kind": "const","type": 954,"value": 972},{"import": 1945,"src": 5736,"name": "Error","kind": "const","type": 954,"value": 2556},{"import": 1945,"src": 5737,"name": "Error","kind": "const","type": 954,"value": 2556},{"import": 1945,"src": 5738,"name": "Error","kind": "const","type": 954,"value": 2555},{"import": 1945,"src": 5739,"name": "Error","kind": "const","type": 954,"value": 2555},{"import": 1945,"src": 5740,"name": "Error","kind": "const","type": 954,"value": 2212},{"import": 1945,"src": 5741,"name": "Error","kind": "const","type": 954,"value": 2212},{"import": 1945,"src": 5742,"name": "Error","kind": "const","type": 954,"value": 2558},{"import": 1959,"src": 5743,"name": "CREAT"},{"import": 1959,"src": 5744,"name": "EXCL"},{"import": 1959,"src": 5745,"name": "NOCTTY","kind": "const","type": 1034,"value": null},{"import": 1959,"src": 5746,"name": "TRUNC"},{"import": 1959,"src": 5747,"name": "APPEND"},{"import": 1959,"src": 5748,"name": "NONBLOCK"},{"import": 1959,"src": 5749,"name": "DSYNC"},{"import": 1959,"src": 5750,"name": "SYNC"},{"import": 1959,"src": 5751,"name": "RSYNC"},{"import": 1959,"src": 5752,"name": "DIRECTORY"},{"import": 1959,"src": 5753,"name": "NOFOLLOW"},{"import": 1959,"src": 5754,"name": "CLOEXEC","kind": "const","type": 1034,"value": null},{"import": 1959,"src": 5755,"name": "ASYNC"},{"import": 1959,"src": 5756,"name": "DIRECT"},{"import": 1959,"src": 5757,"name": "LARGEFILE","kind": "const","type": 1034,"value": null},{"import": 1959,"src": 5758,"name": "NOATIME"},{"import": 1959,"src": 5759,"name": "PATH"},{"import": 1959,"src": 5760,"name": "TMPFILE"},{"import": 1959,"src": 5761,"name": "NDELAY"},{"import": 1959,"src": 5762,"name": "SH","kind": "const","type": 1034,"value": null},{"import": 1959,"src": 5763,"name": "EX","kind": "const","type": 1034,"value": null},{"import": 1959,"src": 5764,"name": "UN"},{"import": 1959,"src": 5765,"name": "NB","kind": "const","type": 1034,"value": null},{"import": 1959,"src": 5766,"name": "GROWSDOWN"},{"import": 1959,"src": 5767,"name": "DENYWRITE"},{"import": 1959,"src": 5768,"name": "EXECUTABLE"},{"import": 1959,"src": 5769,"name": "LOCKED"},{"import": 1959,"src": 5770,"name": "NORESERVE"},{"import": 1959,"src": 5771,"name": "CGT_SYM","kind": "const","type": 2609,"value": null},{"import": 1959,"src": 5772,"name": "CGT_VER","kind": "const","type": 2610,"value": null},{"import": 1959,"src": 5773,"name": "SWP"},{"import": 1959,"src": 5774,"name": "HALF"},{"import": 1959,"src": 5775,"name": "THUMB"},{"import": 1959,"src": 5776,"name": "26BIT"},{"import": 1959,"src": 5777,"name": "FAST_MULT"},{"import": 1959,"src": 5778,"name": "FPA"},{"import": 1959,"src": 5779,"name": "VFP"},{"import": 1959,"src": 5780,"name": "EDSP"},{"import": 1959,"src": 5781,"name": "JAVA"},{"import": 1959,"src": 5782,"name": "IWMMXT"},{"import": 1959,"src": 5783,"name": "CRUNCH"},{"import": 1959,"src": 5784,"name": "THUMBEE"},{"import": 1959,"src": 5785,"name": "NEON"},{"import": 1959,"src": 5786,"name": "VFPv3"},{"import": 1959,"src": 5787,"name": "VFPv3D16"},{"import": 1959,"src": 5788,"name": "TLS","kind": "const","type": 1034,"value": null},{"import": 1959,"src": 5789,"name": "VFPv4"},{"import": 1959,"src": 5790,"name": "IDIVA"},{"import": 1959,"src": 5791,"name": "IDIVT"},{"import": 1959,"src": 5792,"name": "VFPD32"},{"import": 1959,"src": 5793,"name": "IDIV"},{"import": 1959,"src": 5794,"name": "LPAE"},{"import": 1959,"src": 5795,"name": "EVTSTRM"},{"import": 1960,"src": 5796,"name": "vtable","kind": "const","type": 2040,"value": null},{"import": 1960,"src": 207,"name": "alloc","kind": "const","type": 271,"value": 290},{"import": 1960,"src": 208,"name": "resize","kind": "const","type": 272,"value": 291},{"import": 1960,"src": 209,"name": "free","kind": "const","type": 273,"value": 292},{"import": 1962,"src": 5797,"name": "asText"},{"import": 2479,"src": 5798,"name": "wait"},{"import": 2479,"src": 5799,"name": "timedWait"},{"import": 2479,"src": 5800,"name": "set"},{"import": 2479,"src": 5801,"name": "std"},{"import": 2479,"src": 5802,"name": "builtin"},{"import": 2479,"src": 5803,"name": "testing"},{"import": 2479,"src": 5804,"name": "assert"},{"import": 2479,"src": 5805,"name": "StaticResetEvent"},{"import": 2479,"src": 5806,"name": "AutoResetEvent"},{"import": 2479,"src": 5807,"name": "UNSET"},{"import": 2479,"src": 5808,"name": "SET"},{"import": 2479,"src": 5809,"name": "event_align"},{"import": 2479,"src": 5810,"name": "waitFor"},{"import": 2480,"src": 5811,"name": "Impl","kind": "const","type": 954,"value": 2160},{"import": 2480,"src": 5812,"name": "InitError"},{"import": 2480,"src": 5813,"name": "init"},{"import": 2480,"src": 5814,"name": "deinit"},{"import": 2480,"src": 5815,"name": "set"},{"import": 2480,"src": 5816,"name": "reset"},{"import": 2480,"src": 5817,"name": "wait"},{"import": 2480,"src": 5818,"name": "TimedWaitResult","kind": "const","type": 954,"value": 1533},{"import": 2480,"src": 5819,"name": "timedWait"},{"import": 2480,"src": 5820,"name": "DarwinEvent"},{"import": 2480,"src": 5821,"name": "PosixEvent"},{"import": 2480,"src": 5822,"name": "ResetEvent"},{"import": 2480,"src": 5823,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 2480,"src": 5824,"name": "builtin","kind": "const","type": 954,"value": 1283},{"import": 2480,"src": 5825,"name": "testing"},{"import": 2480,"src": 5826,"name": "assert"},{"import": 2480,"src": 5827,"name": "c"},{"import": 2480,"src": 5828,"name": "os"},{"import": 2480,"src": 5829,"name": "time"},{"import": 1998,"src": 5830,"name": "ThreadHandle"},{"import": 1998,"src": 5831,"name": "linux","kind": "const","type": 954,"value": 2405},{"import": 1998,"src": 5832,"name": "tls_thread_id","kind": "var","threadlocal": true,"type": 1534,"value": "null"},{"import": 1998,"src": 33,"name": "getCurrentId","kind": "const","type": 14,"value": 35},{"import": 1998,"src": 5833,"name": "getCpuCount"},{"import": 1998,"src": 5834,"name": "ThreadCompletion","kind": "const","type": 954,"value": 2613},{"import": 1998,"src": 5835,"name": "spawn"},{"import": 1998,"src": 5836,"name": "getHandle"},{"import": 1998,"src": 5837,"name": "detach"},{"import": 1998,"src": 5838,"name": "join"},{"import": 2000,"src": 5839,"name": "init"},{"import": 2000,"src": 5840,"name": "loadHeader"},{"import": 2000,"src": 5841,"name": "getPdbPath"},{"import": 2000,"src": 5842,"name": "loadSections"},{"import": 2000,"src": 5843,"name": "getSection"},{"import": 2000,"src": 5844,"name": "getSectionData"},{"import": 2000,"src": 5845,"name": "readStringFromTable"},{"import": 2000,"src": 5846,"name": "loadOptionalHeader"},{"import": 2000,"src": 5847,"name": "DataDirectory","kind": "const","type": 954,"value": 2616},{"import": 2001,"src": 5848,"name": "Color","kind": "const","type": 954,"value": 1524},{"import": 2001,"src": 5849,"name": "Config","kind": "const","type": 954,"value": 1314},{"import": 2001,"src": 5850,"name": "address"},{"import": 2001,"src": 5851,"name": "addressLessThan"},{"import": 2497,"src": 5852,"name": "padding"},{"import": 2497,"src": 5853,"name": "array_type"},{"import": 2497,"src": 5854,"name": "class_type"},{"import": 2497,"src": 5855,"name": "entry_point","kind": "const","type": 1034,"value": null},{"import": 2497,"src": 5856,"name": "enumeration_type"},{"import": 2497,"src": 5857,"name": "formal_parameter"},{"import": 2497,"src": 5858,"name": "imported_declaration"},{"import": 2497,"src": 5859,"name": "label"},{"import": 2497,"src": 5860,"name": "lexical_block"},{"import": 2497,"src": 5861,"name": "member"},{"import": 2497,"src": 5862,"name": "pointer_type"},{"import": 2497,"src": 5863,"name": "reference_type"},{"import": 2497,"src": 5864,"name": "compile_unit","kind": "const","type": 1034,"value": null},{"import": 2497,"src": 5865,"name": "string_type"},{"import": 2497,"src": 5866,"name": "structure_type"},{"import": 2497,"src": 5867,"name": "subroutine","kind": "const","type": 1034,"value": null},{"import": 2497,"src": 5868,"name": "subroutine_type"},{"import": 2497,"src": 5869,"name": "typedef"},{"import": 2497,"src": 5870,"name": "union_type"},{"import": 2497,"src": 5871,"name": "unspecified_parameters"},{"import": 2497,"src": 5872,"name": "variant"},{"import": 2497,"src": 5873,"name": "common_block"},{"import": 2497,"src": 5874,"name": "common_inclusion"},{"import": 2497,"src": 5875,"name": "inheritance"},{"import": 2497,"src": 5876,"name": "inlined_subroutine","kind": "const","type": 1034,"value": null},{"import": 2497,"src": 5877,"name": "module"},{"import": 2497,"src": 5878,"name": "ptr_to_member_type"},{"import": 2497,"src": 5879,"name": "set_type"},{"import": 2497,"src": 5880,"name": "subrange_type"},{"import": 2497,"src": 5881,"name": "with_stmt"},{"import": 2497,"src": 5882,"name": "access_declaration"},{"import": 2497,"src": 5883,"name": "base_type"},{"import": 2497,"src": 5884,"name": "catch_block"},{"import": 2497,"src": 5885,"name": "const_type"},{"import": 2497,"src": 5886,"name": "constant"},{"import": 2497,"src": 5887,"name": "enumerator"},{"import": 2497,"src": 5888,"name": "file_type"},{"import": 2497,"src": 5889,"name": "friend"},{"import": 2497,"src": 5890,"name": "namelist"},{"import": 2497,"src": 5891,"name": "namelist_item"},{"import": 2497,"src": 5892,"name": "packed_type"},{"import": 2497,"src": 5893,"name": "subprogram","kind": "const","type": 1034,"value": null},{"import": 2497,"src": 5894,"name": "template_type_param"},{"import": 2497,"src": 5895,"name": "template_value_param"},{"import": 2497,"src": 5896,"name": "thrown_type"},{"import": 2497,"src": 5897,"name": "try_block"},{"import": 2497,"src": 5898,"name": "variant_part"},{"import": 2497,"src": 5899,"name": "variable"},{"import": 2497,"src": 5900,"name": "volatile_type"},{"import": 2497,"src": 5901,"name": "dwarf_procedure"},{"import": 2497,"src": 5902,"name": "restrict_type"},{"import": 2497,"src": 5903,"name": "interface_type"},{"import": 2497,"src": 5904,"name": "namespace"},{"import": 2497,"src": 5905,"name": "imported_module"},{"import": 2497,"src": 5906,"name": "unspecified_type"},{"import": 2497,"src": 5907,"name": "partial_unit"},{"import": 2497,"src": 5908,"name": "imported_unit"},{"import": 2497,"src": 5909,"name": "condition"},{"import": 2497,"src": 5910,"name": "shared_type"},{"import": 2497,"src": 5911,"name": "type_unit"},{"import": 2497,"src": 5912,"name": "rvalue_reference_type"},{"import": 2497,"src": 5913,"name": "template_alias"},{"import": 2497,"src": 5914,"name": "lo_user"},{"import": 2497,"src": 5915,"name": "hi_user"},{"import": 2497,"src": 5916,"name": "MIPS_loop"},{"import": 2497,"src": 5917,"name": "HP_array_descriptor"},{"import": 2497,"src": 5918,"name": "HP_Bliss_field"},{"import": 2497,"src": 5919,"name": "HP_Bliss_field_set"},{"import": 2497,"src": 5920,"name": "format_label"},{"import": 2497,"src": 5921,"name": "function_template"},{"import": 2497,"src": 5922,"name": "class_template"},{"import": 2497,"src": 5923,"name": "GNU_BINCL"},{"import": 2497,"src": 5924,"name": "GNU_EINCL"},{"import": 2497,"src": 5925,"name": "GNU_template_template_param"},{"import": 2497,"src": 5926,"name": "GNU_template_parameter_pack"},{"import": 2497,"src": 5927,"name": "GNU_formal_parameter_pack"},{"import": 2497,"src": 5928,"name": "GNU_call_site"},{"import": 2497,"src": 5929,"name": "GNU_call_site_parameter"},{"import": 2497,"src": 5930,"name": "upc_shared_type"},{"import": 2497,"src": 5931,"name": "upc_strict_type"},{"import": 2497,"src": 5932,"name": "upc_relaxed_type"},{"import": 2497,"src": 5933,"name": "PGI_kanji_type"},{"import": 2497,"src": 5934,"name": "PGI_interface_block"},{"import": 2498,"src": 5935,"name": "sibling"},{"import": 2498,"src": 5936,"name": "location"},{"import": 2498,"src": 5937,"name": "name","kind": "const","type": 1034,"value": null},{"import": 2498,"src": 5938,"name": "ordering"},{"import": 2498,"src": 5939,"name": "subscr_data"},{"import": 2498,"src": 5940,"name": "byte_size"},{"import": 2498,"src": 5941,"name": "bit_offset"},{"import": 2498,"src": 5942,"name": "bit_size"},{"import": 2498,"src": 5943,"name": "element_list"},{"import": 2498,"src": 5944,"name": "stmt_list","kind": "const","type": 1034,"value": null},{"import": 2498,"src": 5945,"name": "low_pc","kind": "const","type": 1034,"value": null},{"import": 2498,"src": 5946,"name": "high_pc","kind": "const","type": 1034,"value": null},{"import": 2498,"src": 5947,"name": "language"},{"import": 2498,"src": 5948,"name": "member"},{"import": 2498,"src": 5949,"name": "discr"},{"import": 2498,"src": 5950,"name": "discr_value"},{"import": 2498,"src": 5951,"name": "visibility"},{"import": 2498,"src": 5952,"name": "import"},{"import": 2498,"src": 5953,"name": "string_length"},{"import": 2498,"src": 5954,"name": "common_reference"},{"import": 2498,"src": 5955,"name": "comp_dir","kind": "const","type": 1034,"value": null},{"import": 2498,"src": 5956,"name": "const_value"},{"import": 2498,"src": 5957,"name": "containing_type"},{"import": 2498,"src": 5958,"name": "default_value"},{"import": 2498,"src": 5959,"name": "inline"},{"import": 2498,"src": 5960,"name": "is_optional"},{"import": 2498,"src": 5961,"name": "lower_bound"},{"import": 2498,"src": 5962,"name": "producer"},{"import": 2498,"src": 5963,"name": "prototyped"},{"import": 2498,"src": 5964,"name": "return_addr"},{"import": 2498,"src": 5965,"name": "start_scope"},{"import": 2498,"src": 5966,"name": "bit_stride"},{"import": 2498,"src": 5967,"name": "upper_bound"},{"import": 2498,"src": 5968,"name": "abstract_origin","kind": "const","type": 1034,"value": null},{"import": 2498,"src": 5969,"name": "accessibility"},{"import": 2498,"src": 5970,"name": "address_class"},{"import": 2498,"src": 5971,"name": "artificial"},{"import": 2498,"src": 5972,"name": "base_types"},{"import": 2498,"src": 5973,"name": "calling_convention"},{"import": 2498,"src": 5974,"name": "count"},{"import": 2498,"src": 5975,"name": "data_member_location"},{"import": 2498,"src": 5976,"name": "decl_column"},{"import": 2498,"src": 5977,"name": "decl_file"},{"import": 2498,"src": 5978,"name": "decl_line"},{"import": 2498,"src": 5979,"name": "declaration"},{"import": 2498,"src": 5980,"name": "discr_list"},{"import": 2498,"src": 5981,"name": "encoding"},{"import": 2498,"src": 5982,"name": "external"},{"import": 2498,"src": 5983,"name": "frame_base"},{"import": 2498,"src": 5984,"name": "friend"},{"import": 2498,"src": 5985,"name": "identifier_case"},{"import": 2498,"src": 5986,"name": "macro_info"},{"import": 2498,"src": 5987,"name": "namelist_items"},{"import": 2498,"src": 5988,"name": "priority"},{"import": 2498,"src": 5989,"name": "segment"},{"import": 2498,"src": 5990,"name": "specification","kind": "const","type": 1034,"value": null},{"import": 2498,"src": 5991,"name": "static_link"},{"import": 2498,"src": 5992,"name": "type"},{"import": 2498,"src": 5993,"name": "use_location"},{"import": 2498,"src": 5994,"name": "variable_parameter"},{"import": 2498,"src": 5995,"name": "virtuality"},{"import": 2498,"src": 5996,"name": "vtable_elem_location"},{"import": 2498,"src": 5997,"name": "allocated"},{"import": 2498,"src": 5998,"name": "associated"},{"import": 2498,"src": 5999,"name": "data_location"},{"import": 2498,"src": 6000,"name": "byte_stride"},{"import": 2498,"src": 6001,"name": "entry_pc"},{"import": 2498,"src": 6002,"name": "use_UTF8"},{"import": 2498,"src": 6003,"name": "extension"},{"import": 2498,"src": 6004,"name": "ranges","kind": "const","type": 1034,"value": null},{"import": 2498,"src": 6005,"name": "trampoline"},{"import": 2498,"src": 6006,"name": "call_column"},{"import": 2498,"src": 6007,"name": "call_file"},{"import": 2498,"src": 6008,"name": "call_line"},{"import": 2498,"src": 6009,"name": "description"},{"import": 2498,"src": 6010,"name": "binary_scale"},{"import": 2498,"src": 6011,"name": "decimal_scale"},{"import": 2498,"src": 6012,"name": "small"},{"import": 2498,"src": 6013,"name": "decimal_sign"},{"import": 2498,"src": 6014,"name": "digit_count"},{"import": 2498,"src": 6015,"name": "picture_string"},{"import": 2498,"src": 6016,"name": "mutable"},{"import": 2498,"src": 6017,"name": "threads_scaled"},{"import": 2498,"src": 6018,"name": "explicit"},{"import": 2498,"src": 6019,"name": "object_pointer"},{"import": 2498,"src": 6020,"name": "endianity"},{"import": 2498,"src": 6021,"name": "elemental"},{"import": 2498,"src": 6022,"name": "pure"},{"import": 2498,"src": 6023,"name": "recursive"},{"import": 2498,"src": 6024,"name": "signature"},{"import": 2498,"src": 6025,"name": "main_subprogram"},{"import": 2498,"src": 6026,"name": "data_bit_offset"},{"import": 2498,"src": 6027,"name": "const_expr"},{"import": 2498,"src": 6028,"name": "enum_class"},{"import": 2498,"src": 6029,"name": "linkage_name"},{"import": 2498,"src": 6030,"name": "alignment"},{"import": 2498,"src": 6031,"name": "lo_user"},{"import": 2498,"src": 6032,"name": "hi_user"},{"import": 2498,"src": 6033,"name": "MIPS_fde"},{"import": 2498,"src": 6034,"name": "MIPS_loop_begin"},{"import": 2498,"src": 6035,"name": "MIPS_tail_loop_begin"},{"import": 2498,"src": 6036,"name": "MIPS_epilog_begin"},{"import": 2498,"src": 6037,"name": "MIPS_loop_unroll_factor"},{"import": 2498,"src": 6038,"name": "MIPS_software_pipeline_depth"},{"import": 2498,"src": 6039,"name": "MIPS_linkage_name"},{"import": 2498,"src": 6040,"name": "MIPS_stride"},{"import": 2498,"src": 6041,"name": "MIPS_abstract_name"},{"import": 2498,"src": 6042,"name": "MIPS_clone_origin"},{"import": 2498,"src": 6043,"name": "MIPS_has_inlines"},{"import": 2498,"src": 6044,"name": "HP_block_index"},{"import": 2498,"src": 6045,"name": "HP_unmodifiable"},{"import": 2498,"src": 6046,"name": "HP_prologue"},{"import": 2498,"src": 6047,"name": "HP_epilogue"},{"import": 2498,"src": 6048,"name": "HP_actuals_stmt_list"},{"import": 2498,"src": 6049,"name": "HP_proc_per_section"},{"import": 2498,"src": 6050,"name": "HP_raw_data_ptr"},{"import": 2498,"src": 6051,"name": "HP_pass_by_reference"},{"import": 2498,"src": 6052,"name": "HP_opt_level"},{"import": 2498,"src": 6053,"name": "HP_prof_version_id"},{"import": 2498,"src": 6054,"name": "HP_opt_flags"},{"import": 2498,"src": 6055,"name": "HP_cold_region_low_pc"},{"import": 2498,"src": 6056,"name": "HP_cold_region_high_pc"},{"import": 2498,"src": 6057,"name": "HP_all_variables_modifiable"},{"import": 2498,"src": 6058,"name": "HP_linkage_name"},{"import": 2498,"src": 6059,"name": "HP_prof_flags"},{"import": 2498,"src": 6060,"name": "HP_unit_name"},{"import": 2498,"src": 6061,"name": "HP_unit_size"},{"import": 2498,"src": 6062,"name": "HP_widened_byte_size"},{"import": 2498,"src": 6063,"name": "HP_definition_points"},{"import": 2498,"src": 6064,"name": "HP_default_location"},{"import": 2498,"src": 6065,"name": "HP_is_result_param"},{"import": 2498,"src": 6066,"name": "sf_names"},{"import": 2498,"src": 6067,"name": "src_info"},{"import": 2498,"src": 6068,"name": "mac_info"},{"import": 2498,"src": 6069,"name": "src_coords"},{"import": 2498,"src": 6070,"name": "body_begin"},{"import": 2498,"src": 6071,"name": "body_end"},{"import": 2498,"src": 6072,"name": "GNU_vector"},{"import": 2498,"src": 6073,"name": "GNU_guarded_by"},{"import": 2498,"src": 6074,"name": "GNU_pt_guarded_by"},{"import": 2498,"src": 6075,"name": "GNU_guarded"},{"import": 2498,"src": 6076,"name": "GNU_pt_guarded"},{"import": 2498,"src": 6077,"name": "GNU_locks_excluded"},{"import": 2498,"src": 6078,"name": "GNU_exclusive_locks_required"},{"import": 2498,"src": 6079,"name": "GNU_shared_locks_required"},{"import": 2498,"src": 6080,"name": "GNU_odr_signature"},{"import": 2498,"src": 6081,"name": "GNU_template_name"},{"import": 2498,"src": 6082,"name": "GNU_call_site_value"},{"import": 2498,"src": 6083,"name": "GNU_call_site_data_value"},{"import": 2498,"src": 6084,"name": "GNU_call_site_target"},{"import": 2498,"src": 6085,"name": "GNU_call_site_target_clobbered"},{"import": 2498,"src": 6086,"name": "GNU_tail_call"},{"import": 2498,"src": 6087,"name": "GNU_all_tail_call_sites"},{"import": 2498,"src": 6088,"name": "GNU_all_call_sites"},{"import": 2498,"src": 6089,"name": "GNU_all_source_call_sites"},{"import": 2498,"src": 6090,"name": "GNU_macros"},{"import": 2498,"src": 6091,"name": "GNU_dwo_name"},{"import": 2498,"src": 6092,"name": "GNU_dwo_id"},{"import": 2498,"src": 6093,"name": "GNU_ranges_base"},{"import": 2498,"src": 6094,"name": "GNU_addr_base"},{"import": 2498,"src": 6095,"name": "GNU_pubnames"},{"import": 2498,"src": 6096,"name": "GNU_pubtypes"},{"import": 2498,"src": 6097,"name": "VMS_rtnbeg_pd_address"},{"import": 2498,"src": 6098,"name": "use_GNAT_descriptive_type"},{"import": 2498,"src": 6099,"name": "GNAT_descriptive_type"},{"import": 2498,"src": 6100,"name": "upc_threads_scaled"},{"import": 2498,"src": 6101,"name": "PGI_lbase"},{"import": 2498,"src": 6102,"name": "PGI_soffset"},{"import": 2498,"src": 6103,"name": "PGI_lstride"},{"import": 2002,"src": 6104,"name": "addr","kind": "const","type": 1034,"value": null},{"import": 2002,"src": 6105,"name": "block2","kind": "const","type": 1034,"value": null},{"import": 2002,"src": 6106,"name": "block4","kind": "const","type": 1034,"value": null},{"import": 2002,"src": 6107,"name": "data2","kind": "const","type": 1034,"value": null},{"import": 2002,"src": 6108,"name": "data4","kind": "const","type": 1034,"value": null},{"import": 2002,"src": 6109,"name": "data8","kind": "const","type": 1034,"value": null},{"import": 2002,"src": 6110,"name": "string","kind": "const","type": 1034,"value": null},{"import": 2002,"src": 6111,"name": "block","kind": "const","type": 1034,"value": null},{"import": 2002,"src": 6112,"name": "block1","kind": "const","type": 1034,"value": null},{"import": 2002,"src": 6113,"name": "data1","kind": "const","type": 1034,"value": null},{"import": 2002,"src": 6114,"name": "flag","kind": "const","type": 1034,"value": null},{"import": 2002,"src": 6115,"name": "sdata","kind": "const","type": 1034,"value": null},{"import": 2002,"src": 6116,"name": "strp","kind": "const","type": 1034,"value": null},{"import": 2002,"src": 6117,"name": "udata","kind": "const","type": 1034,"value": null},{"import": 2002,"src": 6118,"name": "ref_addr","kind": "const","type": 1034,"value": null},{"import": 2002,"src": 6119,"name": "ref1","kind": "const","type": 1034,"value": null},{"import": 2002,"src": 6120,"name": "ref2","kind": "const","type": 1034,"value": null},{"import": 2002,"src": 6121,"name": "ref4","kind": "const","type": 1034,"value": null},{"import": 2002,"src": 6122,"name": "ref8","kind": "const","type": 1034,"value": null},{"import": 2002,"src": 6123,"name": "ref_udata","kind": "const","type": 1034,"value": null},{"import": 2002,"src": 6124,"name": "indirect","kind": "const","type": 1034,"value": null},{"import": 2002,"src": 6125,"name": "sec_offset","kind": "const","type": 1034,"value": null},{"import": 2002,"src": 6126,"name": "exprloc","kind": "const","type": 1034,"value": null},{"import": 2002,"src": 6127,"name": "flag_present","kind": "const","type": 1034,"value": null},{"import": 2002,"src": 6128,"name": "ref_sig8","kind": "const","type": 1034,"value": null},{"import": 2002,"src": 6129,"name": "GNU_addr_index"},{"import": 2002,"src": 6130,"name": "GNU_str_index"},{"import": 2002,"src": 6131,"name": "GNU_ref_alt"},{"import": 2002,"src": 6132,"name": "GNU_strp_alt"},{"import": 2002,"src": 6133,"name": "no"},{"import": 2002,"src": 6134,"name": "yes","kind": "const","type": 1034,"value": null},{"import": 2002,"src": 6135,"name": "extended_op","kind": "const","type": 1034,"value": null},{"import": 2002,"src": 6136,"name": "copy","kind": "const","type": 1034,"value": null},{"import": 2002,"src": 6137,"name": "advance_pc","kind": "const","type": 1034,"value": null},{"import": 2002,"src": 6138,"name": "advance_line","kind": "const","type": 1034,"value": null},{"import": 2002,"src": 6139,"name": "set_file","kind": "const","type": 1034,"value": null},{"import": 2002,"src": 6140,"name": "set_column","kind": "const","type": 1034,"value": null},{"import": 2002,"src": 6141,"name": "negate_stmt","kind": "const","type": 1034,"value": null},{"import": 2002,"src": 6142,"name": "set_basic_block","kind": "const","type": 1034,"value": null},{"import": 2002,"src": 6143,"name": "const_add_pc","kind": "const","type": 1034,"value": null},{"import": 2002,"src": 6144,"name": "fixed_advance_pc","kind": "const","type": 1034,"value": null},{"import": 2002,"src": 6145,"name": "set_prologue_end","kind": "const","type": 1034,"value": null},{"import": 2002,"src": 6146,"name": "set_epilogue_begin"},{"import": 2002,"src": 6147,"name": "set_isa"},{"import": 2002,"src": 6148,"name": "end_sequence","kind": "const","type": 1034,"value": null},{"import": 2002,"src": 6149,"name": "set_address","kind": "const","type": 1034,"value": null},{"import": 2002,"src": 6150,"name": "define_file","kind": "const","type": 1034,"value": null},{"import": 2002,"src": 6151,"name": "set_discriminator"},{"import": 2002,"src": 6152,"name": "lo_user"},{"import": 2002,"src": 6153,"name": "hi_user"},{"import": 2503,"src": 105,"name": "readULEB128","kind": "const","type": 2620,"value": 1343},{"import": 2503,"src": 6154,"name": "writeULEB128"},{"import": 2503,"src": 167,"name": "readILEB128","kind": "const","type": 2621,"value": 1344},{"import": 2503,"src": 6155,"name": "writeILEB128"},{"import": 2503,"src": 6156,"name": "writeUnsignedFixed"},{"import": 2503,"src": 6157,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 2503,"src": 6158,"name": "testing"},{"import": 2503,"src": 6159,"name": "test_read_stream_ileb128"},{"import": 2503,"src": 6160,"name": "test_read_stream_uleb128"},{"import": 2503,"src": 6161,"name": "test_read_ileb128"},{"import": 2503,"src": 6162,"name": "test_read_uleb128"},{"import": 2503,"src": 6163,"name": "test_read_ileb128_seq"},{"import": 2503,"src": 6164,"name": "test_read_uleb128_seq"},{"import": 2503,"src": 6165,"name": "test_write_leb128"},{"import": 2003,"src": 6166,"name": "LOPROC"},{"import": 2003,"src": 6167,"name": "HIPROC"},{"import": 2532,"src": 6168,"name": "sep_windows"},{"import": 2532,"src": 6169,"name": "sep_posix","kind": "const","type": 1034,"value": null},{"import": 2532,"src": 6170,"name": "sep","kind": "const","type": 1034,"value": null},{"import": 2532,"src": 6171,"name": "sep_str_windows"},{"import": 2532,"src": 6172,"name": "sep_str_posix"},{"import": 2532,"src": 6173,"name": "sep_str"},{"import": 2532,"src": 6174,"name": "delimiter_windows"},{"import": 2532,"src": 6175,"name": "delimiter_posix"},{"import": 2532,"src": 6176,"name": "delimiter"},{"import": 2532,"src": 163,"name": "isSep","kind": "const","type": 228,"value": 242},{"import": 2532,"src": 161,"name": "join","kind": "const","type": 226,"value": 240},{"import": 2532,"src": 6177,"name": "joinZ"},{"import": 2532,"src": 298,"name": "isAbsoluteZ","kind": "const","type": 384,"value": 420},{"import": 2532,"src": 6178,"name": "isAbsolute"},{"import": 2532,"src": 6179,"name": "isAbsoluteWindows"},{"import": 2532,"src": 6180,"name": "isAbsoluteWindowsW"},{"import": 2532,"src": 6181,"name": "isAbsoluteWindowsWTF16"},{"import": 2532,"src": 6182,"name": "isAbsoluteWindowsZ"},{"import": 2532,"src": 361,"name": "isAbsolutePosix","kind": "const","type": 492,"value": 564},{"import": 2532,"src": 338,"name": "isAbsolutePosixZ","kind": "const","type": 384,"value": 504},{"import": 2532,"src": 6183,"name": "WindowsPath"},{"import": 2532,"src": 6184,"name": "windowsParsePath"},{"import": 2532,"src": 6185,"name": "diskDesignator"},{"import": 2532,"src": 6186,"name": "diskDesignatorWindows"},{"import": 2532,"src": 6187,"name": "resolve"},{"import": 2532,"src": 6188,"name": "resolveWindows"},{"import": 2532,"src": 6189,"name": "resolvePosix"},{"import": 2532,"src": 6190,"name": "dirname"},{"import": 2532,"src": 6191,"name": "dirnameWindows"},{"import": 2532,"src": 6192,"name": "dirnamePosix"},{"import": 2532,"src": 6193,"name": "basename"},{"import": 2532,"src": 6194,"name": "basenamePosix"},{"import": 2532,"src": 6195,"name": "basenameWindows"},{"import": 2532,"src": 6196,"name": "relative"},{"import": 2532,"src": 6197,"name": "relativeWindows"},{"import": 2532,"src": 6198,"name": "relativePosix"},{"import": 2532,"src": 6199,"name": "extension"},{"import": 2532,"src": 6200,"name": "builtin","kind": "const","type": 954,"value": 1283},{"import": 2532,"src": 6201,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 2532,"src": 6202,"name": "debug","kind": "const","type": 954,"value": 2001},{"import": 2532,"src": 6203,"name": "assert","kind": "const","type": 30,"value": 38},{"import": 2532,"src": 6204,"name": "testing"},{"import": 2532,"src": 6205,"name": "mem","kind": "const","type": 954,"value": 1971},{"import": 2532,"src": 6206,"name": "fmt"},{"import": 2532,"src": 6207,"name": "Allocator","kind": "const","type": 954,"value": 1312},{"import": 2532,"src": 6208,"name": "math"},{"import": 2532,"src": 6209,"name": "windows"},{"import": 2532,"src": 6210,"name": "fs"},{"import": 2532,"src": 6211,"name": "process"},{"import": 2532,"src": 6212,"name": "native_os","kind": "const","type": 1011,"value": null},{"import": 2532,"src": 162,"name": "joinSepMaybeZ","kind": "const","type": 227,"value": 241},{"import": 2532,"src": 6213,"name": "testJoinMaybeZUefi"},{"import": 2532,"src": 6214,"name": "testJoinMaybeZWindows"},{"import": 2532,"src": 6215,"name": "testJoinMaybeZPosix"},{"import": 2532,"src": 6216,"name": "isAbsoluteWindowsImpl"},{"import": 2532,"src": 6217,"name": "testIsAbsoluteWindows"},{"import": 2532,"src": 6218,"name": "testIsAbsolutePosix"},{"import": 2532,"src": 6219,"name": "networkShareServersEql"},{"import": 2532,"src": 6220,"name": "compareDiskDesignators"},{"import": 2532,"src": 6221,"name": "asciiUpper"},{"import": 2532,"src": 6222,"name": "asciiEqlIgnoreCase"},{"import": 2532,"src": 6223,"name": "testResolveWindows"},{"import": 2532,"src": 6224,"name": "testResolvePosix"},{"import": 2532,"src": 6225,"name": "testDirnamePosix"},{"import": 2532,"src": 6226,"name": "testDirnameWindows"},{"import": 2532,"src": 6227,"name": "testBasename"},{"import": 2532,"src": 6228,"name": "testBasenamePosix"},{"import": 2532,"src": 6229,"name": "testBasenameWindows"},{"import": 2532,"src": 6230,"name": "testRelativePosix"},{"import": 2532,"src": 6231,"name": "testRelativeWindows"},{"import": 2532,"src": 6232,"name": "testExtension"},{"import": 2405,"src": 6233,"name": "FDCWD","kind": "const","type": 1034,"value": null},{"import": 2405,"src": 6234,"name": "SYMLINK_NOFOLLOW"},{"import": 2405,"src": 6235,"name": "REMOVEDIR"},{"import": 2405,"src": 6236,"name": "SYMLINK_FOLLOW"},{"import": 2405,"src": 6237,"name": "NO_AUTOMOUNT"},{"import": 2405,"src": 6238,"name": "EMPTY_PATH"},{"import": 2405,"src": 6239,"name": "STATX_SYNC_TYPE"},{"import": 2405,"src": 6240,"name": "STATX_SYNC_AS_STAT"},{"import": 2405,"src": 6241,"name": "STATX_FORCE_SYNC"},{"import": 2405,"src": 6242,"name": "STATX_DONT_SYNC"},{"import": 2405,"src": 6243,"name": "RECURSIVE"},{"import": 2405,"src": 6244,"name": "REALTIME"},{"import": 2405,"src": 6245,"name": "MONOTONIC","kind": "const","type": 1034,"value": null},{"import": 2405,"src": 6246,"name": "PROCESS_CPUTIME_ID"},{"import": 2405,"src": 6247,"name": "THREAD_CPUTIME_ID"},{"import": 2405,"src": 6248,"name": "MONOTONIC_RAW"},{"import": 2405,"src": 6249,"name": "REALTIME_COARSE"},{"import": 2405,"src": 6250,"name": "MONOTONIC_COARSE"},{"import": 2405,"src": 6251,"name": "BOOTTIME"},{"import": 2405,"src": 6252,"name": "REALTIME_ALARM"},{"import": 2405,"src": 6253,"name": "BOOTTIME_ALARM"},{"import": 2405,"src": 6254,"name": "SGI_CYCLE"},{"import": 2405,"src": 6255,"name": "TAI"},{"import": 2405,"src": 6256,"name": "SHARED","kind": "const","type": 1034,"value": null},{"import": 2405,"src": 6257,"name": "PRIVATE","kind": "const","type": 1034,"value": null},{"import": 2405,"src": 6258,"name": "SHARED_VALIDATE"},{"import": 2405,"src": 6259,"name": "TYPE"},{"import": 2405,"src": 6260,"name": "FIXED"},{"import": 2405,"src": 6261,"name": "ANONYMOUS","kind": "const","type": 1034,"value": null},{"import": 2405,"src": 6262,"name": "POPULATE"},{"import": 2405,"src": 6263,"name": "NONBLOCK"},{"import": 2405,"src": 6264,"name": "STACK"},{"import": 2405,"src": 6265,"name": "HUGETLB"},{"import": 2405,"src": 6266,"name": "SYNC"},{"import": 2405,"src": 6267,"name": "FIXED_NOREPLACE"},{"import": 2405,"src": 6268,"name": "UNINITIALIZED"},{"import": 2405,"src": 6269,"name": "RDONLY","kind": "const","type": 1034,"value": null},{"import": 2405,"src": 6270,"name": "WRONLY","kind": "const","type": 1034,"value": null},{"import": 2405,"src": 6271,"name": "RDWR","kind": "const","type": 1034,"value": null},{"import": 2405,"src": 6272,"name": "NONE"},{"import": 2405,"src": 6273,"name": "READ","kind": "const","type": 1034,"value": null},{"import": 2405,"src": 6274,"name": "WRITE","kind": "const","type": 1034,"value": null},{"import": 2405,"src": 6275,"name": "EXEC"},{"import": 2405,"src": 6276,"name": "SEM"},{"import": 2405,"src": 6277,"name": "GROWSDOWN"},{"import": 2405,"src": 6278,"name": "GROWSUP"},{"import": 2405,"src": 6279,"name": "IFMT","kind": "const","type": 1034,"value": null},{"import": 2405,"src": 6280,"name": "IFDIR","kind": "const","type": 1034,"value": null},{"import": 2405,"src": 6281,"name": "IFCHR","kind": "const","type": 1034,"value": null},{"import": 2405,"src": 6282,"name": "IFBLK","kind": "const","type": 1034,"value": null},{"import": 2405,"src": 6283,"name": "IFREG","kind": "const","type": 1034,"value": null},{"import": 2405,"src": 6284,"name": "IFIFO","kind": "const","type": 1034,"value": null},{"import": 2405,"src": 6285,"name": "IFLNK","kind": "const","type": 1034,"value": null},{"import": 2405,"src": 6286,"name": "IFSOCK","kind": "const","type": 1034,"value": null},{"import": 2405,"src": 6287,"name": "ISUID"},{"import": 2405,"src": 6288,"name": "ISGID"},{"import": 2405,"src": 6289,"name": "ISVTX"},{"import": 2405,"src": 6290,"name": "IRUSR"},{"import": 2405,"src": 6291,"name": "IWUSR"},{"import": 2405,"src": 6292,"name": "IXUSR"},{"import": 2405,"src": 6293,"name": "IRWXU"},{"import": 2405,"src": 6294,"name": "IRGRP"},{"import": 2405,"src": 6295,"name": "IWGRP"},{"import": 2405,"src": 6296,"name": "IXGRP"},{"import": 2405,"src": 6297,"name": "IRWXG"},{"import": 2405,"src": 6298,"name": "IROTH"},{"import": 2405,"src": 6299,"name": "IWOTH"},{"import": 2405,"src": 6300,"name": "IXOTH"},{"import": 2405,"src": 6301,"name": "IRWXO"},{"import": 2405,"src": 6302,"name": "ISREG"},{"import": 2405,"src": 6303,"name": "ISDIR"},{"import": 2405,"src": 6304,"name": "ISCHR"},{"import": 2405,"src": 6305,"name": "ISBLK"},{"import": 2405,"src": 6306,"name": "ISFIFO"},{"import": 2405,"src": 6307,"name": "ISLNK"},{"import": 2405,"src": 6308,"name": "ISSOCK"},{"import": 2405,"src": 6309,"name": "NOCLDSTOP"},{"import": 2405,"src": 6310,"name": "NOCLDWAIT"},{"import": 2405,"src": 6311,"name": "SIGINFO","kind": "const","type": 1034,"value": null},{"import": 2405,"src": 6312,"name": "RESTART","kind": "const","type": 1034,"value": null},{"import": 2405,"src": 6313,"name": "RESETHAND","kind": "const","type": 1034,"value": null},{"import": 2405,"src": 6314,"name": "ONSTACK"},{"import": 2405,"src": 6315,"name": "NODEFER"},{"import": 2405,"src": 6316,"name": "RESTORER","kind": "const","type": 1034,"value": null},{"import": 2405,"src": 6317,"name": "BLOCK","kind": "const","type": 1034,"value": null},{"import": 2405,"src": 6318,"name": "UNBLOCK"},{"import": 2405,"src": 6319,"name": "SETMASK","kind": "const","type": 1034,"value": null},{"import": 2405,"src": 6320,"name": "HUP"},{"import": 2405,"src": 6321,"name": "INT"},{"import": 2405,"src": 6322,"name": "QUIT"},{"import": 2405,"src": 6323,"name": "ILL","kind": "const","type": 1034,"value": null},{"import": 2405,"src": 6324,"name": "TRAP"},{"import": 2405,"src": 6325,"name": "ABRT","kind": "const","type": 1034,"value": null},{"import": 2405,"src": 6326,"name": "IOT"},{"import": 2405,"src": 6327,"name": "BUS","kind": "const","type": 1034,"value": null},{"import": 2405,"src": 6328,"name": "FPE"},{"import": 2405,"src": 6329,"name": "KILL","kind": "const","type": 1034,"value": null},{"import": 2405,"src": 6330,"name": "USR1"},{"import": 2405,"src": 6331,"name": "SEGV","kind": "const","type": 1034,"value": null},{"import": 2405,"src": 6332,"name": "USR2"},{"import": 2405,"src": 6333,"name": "PIPE"},{"import": 2405,"src": 6334,"name": "ALRM"},{"import": 2405,"src": 6335,"name": "TERM"},{"import": 2405,"src": 6336,"name": "STKFLT"},{"import": 2405,"src": 6337,"name": "CHLD"},{"import": 2405,"src": 6338,"name": "CONT"},{"import": 2405,"src": 6339,"name": "STOP","kind": "const","type": 1034,"value": null},{"import": 2405,"src": 6340,"name": "TSTP"},{"import": 2405,"src": 6341,"name": "TTIN"},{"import": 2405,"src": 6342,"name": "TTOU"},{"import": 2405,"src": 6343,"name": "URG"},{"import": 2405,"src": 6344,"name": "XCPU"},{"import": 2405,"src": 6345,"name": "XFSZ"},{"import": 2405,"src": 6346,"name": "VTALRM"},{"import": 2405,"src": 6347,"name": "PROF"},{"import": 2405,"src": 6348,"name": "WINCH"},{"import": 2405,"src": 6349,"name": "IO"},{"import": 2405,"src": 6350,"name": "POLL"},{"import": 2405,"src": 6351,"name": "PWR"},{"import": 2405,"src": 6352,"name": "SYS"},{"import": 2405,"src": 6353,"name": "UNUSED"},{"import": 2405,"src": 6354,"name": "ERR"},{"import": 2405,"src": 6355,"name": "DFL","kind": "const","type": 2624,"value": "null"},{"import": 2405,"src": 6356,"name": "IGN"},{"import": 2405,"src": 6357,"name": "handler_fn","kind": "const","type": 954,"value": 2625},{"import": 2405,"src": 6358,"name": "sigaction_fn","kind": "const","type": 954,"value": 2626},{"import": 2563,"src": 6359,"name": "DynLib"},{"import": 2563,"src": 293,"name": "get_DYNAMIC","kind": "const","type": 380,"value": 415},{"import": 2563,"src": 215,"name": "linkmap_iterator","kind": "const","type": 281,"value": 301},{"import": 2563,"src": 6360,"name": "ElfDynLib"},{"import": 2563,"src": 6361,"name": "WindowsDynLib"},{"import": 2563,"src": 6362,"name": "DlDynlib"},{"import": 2563,"src": 6363,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 2563,"src": 6364,"name": "builtin"},{"import": 2563,"src": 6365,"name": "mem"},{"import": 2563,"src": 6366,"name": "os"},{"import": 2563,"src": 6367,"name": "assert"},{"import": 2563,"src": 6368,"name": "testing"},{"import": 2563,"src": 6369,"name": "elf","kind": "const","type": 954,"value": 2003},{"import": 2563,"src": 6370,"name": "windows"},{"import": 2563,"src": 6371,"name": "system"},{"import": 2563,"src": 6372,"name": "maxInt"},{"import": 2563,"src": 6373,"name": "max"},{"import": 2563,"src": 6374,"name": "LinkMap","kind": "const","type": 954,"value": 2577},{"import": 2563,"src": 6375,"name": "RDebug","kind": "const","type": 954,"value": 2630},{"import": 2563,"src": 6376,"name": "checkver"},{"import": 2012,"src": 6377,"name": "Module","kind": "const","type": 954,"value": 2631},{"import": 2012,"src": 6378,"name": "init"},{"import": 2012,"src": 6379,"name": "deinit"},{"import": 2012,"src": 6380,"name": "parseDbiStream"},{"import": 2012,"src": 6381,"name": "parseInfoStream"},{"import": 2012,"src": 6382,"name": "getSymbolName"},{"import": 2012,"src": 6383,"name": "getLineNumberInfo"},{"import": 2012,"src": 6384,"name": "getModule"},{"import": 2012,"src": 6385,"name": "getStreamById"},{"import": 2012,"src": 6386,"name": "getStream"},{"import": 2012,"src": 6387,"name": "init"},{"import": 2012,"src": 6388,"name": "Error"},{"import": 2012,"src": 6389,"name": "seekBy"},{"import": 2012,"src": 6390,"name": "seekTo"},{"import": 2012,"src": 6391,"name": "reader"},{"import": 2012,"src": 6392,"name": "init"},{"import": 2012,"src": 6393,"name": "read"},{"import": 2012,"src": 6394,"name": "getSize"},{"import": 2012,"src": 6395,"name": "getFilePos"},{"import": 2013,"src": 6396,"name": "NextError","kind": "const","type": 954,"value": 2239},{"import": 2013,"src": 6397,"name": "init"},{"import": 2013,"src": 6398,"name": "initWithCmdLine"},{"import": 2013,"src": 6399,"name": "next"},{"import": 2013,"src": 6400,"name": "skip"},{"import": 2013,"src": 6401,"name": "getPointAtIndex"},{"import": 2013,"src": 6402,"name": "internalNext"},{"import": 2013,"src": 6403,"name": "convertFromWindowsCmdLineToUTF8"},{"import": 2013,"src": 6404,"name": "emitBackslashes"},{"import": 2028,"src": 6405,"name": "wake"},{"import": 2028,"src": 319,"name": "wait","kind": "const","type": 441,"value": 484},{"import": 2563,"src": 6406,"name": "Iterator","kind": "const","type": 954,"value": 2178},{"import": 1915,"src": 6407,"name": "includesVersion"},{"import": 1915,"src": 6408,"name": "isAtLeast"},{"import": 1877,"src": 6409,"name": "includesVersion"},{"import": 1877,"src": 6410,"name": "isAtLeast"},{"import": 2588,"src": 6411,"name": "tls_image","kind": "var","type": 2646,"value": null},{"import": 2588,"src": 176,"name": "setThreadPointer","kind": "const","type": 243,"value": 259},{"import": 2588,"src": 175,"name": "prepareTLS","kind": "const","type": 242,"value": 258},{"import": 2588,"src": 24,"name": "initStaticTLS","kind": "const","type": 21,"value": 26},{"import": 2588,"src": 6412,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 2588,"src": 6413,"name": "os","kind": "const","type": 954,"value": 2011},{"import": 2588,"src": 6414,"name": "mem","kind": "const","type": 954,"value": 1971},{"import": 2588,"src": 6415,"name": "elf","kind": "const","type": 954,"value": 2003},{"import": 2588,"src": 6416,"name": "math"},{"import": 2588,"src": 6417,"name": "assert","kind": "const","type": 30,"value": 38},{"import": 2588,"src": 6418,"name": "native_arch","kind": "const","type": 968,"value": null},{"import": 2588,"src": 6419,"name": "TLSVariant","kind": "const","type": 954,"value": 2647},{"import": 2588,"src": 6420,"name": "tls_variant","kind": "const","type": 2647,"value": null},{"import": 2588,"src": 6421,"name": "tls_tcb_size","kind": "const","type": 1034,"value": null},{"import": 2588,"src": 6422,"name": "tls_tp_points_past_tcb","kind": "const","type": 967,"value": "false"},{"import": 2588,"src": 6423,"name": "tls_tp_offset","kind": "const","type": 1034,"value": null},{"import": 2588,"src": 6424,"name": "tls_dtv_offset","kind": "const","type": 1034,"value": null},{"import": 2588,"src": 6425,"name": "CustomData","kind": "const","type": 954,"value": 2648},{"import": 2588,"src": 6426,"name": "DTV","kind": "const","type": 954,"value": 2203},{"import": 2588,"src": 6427,"name": "TLSImage","kind": "const","type": 954,"value": 2646},{"import": 2588,"src": 174,"name": "initTLS","kind": "const","type": 21,"value": 257},{"import": 2588,"src": 257,"name": "alignPtrCast","kind": "const","type": 2649,"value": 1345},{"import": 2588,"src": 6428,"name": "main_thread_tls_buffer","kind": "var","type": 2650,"value": "undefined"},{"import": 2405,"src": 6429,"name": "WAIT","kind": "const","type": 1034,"value": null},{"import": 2405,"src": 6430,"name": "WAKE","kind": "const","type": 1034,"value": null},{"import": 2405,"src": 6431,"name": "FD"},{"import": 2405,"src": 6432,"name": "REQUEUE"},{"import": 2405,"src": 6433,"name": "CMP_REQUEUE"},{"import": 2405,"src": 6434,"name": "WAKE_OP"},{"import": 2405,"src": 6435,"name": "LOCK_PI"},{"import": 2405,"src": 6436,"name": "UNLOCK_PI"},{"import": 2405,"src": 6437,"name": "TRYLOCK_PI"},{"import": 2405,"src": 6438,"name": "WAIT_BITSET"},{"import": 2405,"src": 6439,"name": "WAKE_BITSET"},{"import": 2405,"src": 6440,"name": "WAIT_REQUEUE_PI"},{"import": 2405,"src": 6441,"name": "CMP_REQUEUE_PI"},{"import": 2405,"src": 6442,"name": "PRIVATE_FLAG","kind": "const","type": 1034,"value": null},{"import": 2405,"src": 6443,"name": "CLOCK_REALTIME"},{"import": 2405,"src": 6444,"name": "CGETS"},{"import": 2405,"src": 6445,"name": "CSETS"},{"import": 2405,"src": 6446,"name": "CSETSW"},{"import": 2405,"src": 6447,"name": "CSETSF"},{"import": 2405,"src": 6448,"name": "CGETA"},{"import": 2405,"src": 6449,"name": "CSETA"},{"import": 2405,"src": 6450,"name": "CSETAW"},{"import": 2405,"src": 6451,"name": "CSETAF"},{"import": 2405,"src": 6452,"name": "CSBRK"},{"import": 2405,"src": 6453,"name": "CXONC"},{"import": 2405,"src": 6454,"name": "CFLSH"},{"import": 2405,"src": 6455,"name": "IOCEXCL"},{"import": 2405,"src": 6456,"name": "IOCNXCL"},{"import": 2405,"src": 6457,"name": "IOCSCTTY"},{"import": 2405,"src": 6458,"name": "IOCGPGRP"},{"import": 2405,"src": 6459,"name": "IOCSPGRP"},{"import": 2405,"src": 6460,"name": "IOCOUTQ"},{"import": 2405,"src": 6461,"name": "IOCSTI"},{"import": 2405,"src": 6462,"name": "IOCGWINSZ","kind": "const","type": 1034,"value": null},{"import": 2405,"src": 6463,"name": "IOCSWINSZ"},{"import": 2405,"src": 6464,"name": "IOCMGET"},{"import": 2405,"src": 6465,"name": "IOCMBIS"},{"import": 2405,"src": 6466,"name": "IOCMBIC"},{"import": 2405,"src": 6467,"name": "IOCMSET"},{"import": 2405,"src": 6468,"name": "IOCGSOFTCAR"},{"import": 2405,"src": 6469,"name": "IOCSSOFTCAR"},{"import": 2405,"src": 6470,"name": "FIONREAD"},{"import": 2405,"src": 6471,"name": "IOCINQ"},{"import": 2405,"src": 6472,"name": "IOCLINUX"},{"import": 2405,"src": 6473,"name": "IOCCONS"},{"import": 2405,"src": 6474,"name": "IOCGSERIAL"},{"import": 2405,"src": 6475,"name": "IOCSSERIAL"},{"import": 2405,"src": 6476,"name": "IOCPKT"},{"import": 2405,"src": 6477,"name": "FIONBIO"},{"import": 2405,"src": 6478,"name": "IOCNOTTY"},{"import": 2405,"src": 6479,"name": "IOCSETD"},{"import": 2405,"src": 6480,"name": "IOCGETD"},{"import": 2405,"src": 6481,"name": "CSBRKP"},{"import": 2405,"src": 6482,"name": "IOCSBRK"},{"import": 2405,"src": 6483,"name": "IOCCBRK"},{"import": 2405,"src": 6484,"name": "IOCGSID"},{"import": 2405,"src": 6485,"name": "IOCGRS485"},{"import": 2405,"src": 6486,"name": "IOCSRS485"},{"import": 2405,"src": 6487,"name": "IOCGPTN"},{"import": 2405,"src": 6488,"name": "IOCSPTLCK"},{"import": 2405,"src": 6489,"name": "IOCGDEV"},{"import": 2405,"src": 6490,"name": "CGETX"},{"import": 2405,"src": 6491,"name": "CSETX"},{"import": 2405,"src": 6492,"name": "CSETXF"},{"import": 2405,"src": 6493,"name": "CSETXW"},{"import": 2405,"src": 6494,"name": "IOCSIG"},{"import": 2405,"src": 6495,"name": "IOCVHANGUP"},{"import": 2405,"src": 6496,"name": "IOCGPKT"},{"import": 2405,"src": 6497,"name": "IOCGPTLCK"},{"import": 2405,"src": 6498,"name": "IOCGEXCL"},{"import": 2597,"src": 6499,"name": "std"},{"import": 2597,"src": 6500,"name": "builtin"},{"import": 2597,"src": 6501,"name": "assert"},{"import": 2597,"src": 6502,"name": "mem"},{"import": 2597,"src": 6503,"name": "net"},{"import": 2597,"src": 6504,"name": "os"},{"import": 2597,"src": 6505,"name": "linux"},{"import": 2597,"src": 6506,"name": "testing"},{"import": 2597,"src": 6507,"name": "io_uring_params"},{"import": 2597,"src": 6508,"name": "io_uring_sqe"},{"import": 2597,"src": 6509,"name": "io_uring_cqe"},{"import": 2598,"src": 411,"name": "lookup","kind": "const","type": 615,"value": 707},{"import": 2598,"src": 6510,"name": "std","kind": "const","type": 954,"value": 1282},{"import": 2598,"src": 6511,"name": "elf","kind": "const","type": 954,"value": 2003},{"import": 2598,"src": 6512,"name": "linux","kind": "const","type": 954,"value": 2405},{"import": 2598,"src": 6513,"name": "mem","kind": "const","type": 954,"value": 1971},{"import": 2598,"src": 6514,"name": "maxInt","kind": "const","type": 1036,"value": 1160},{"import": 2598,"src": 414,"name": "checkver","kind": "const","type": 632,"value": 727},{"import": 1945,"src": 6515,"name": "init"},{"import": 1945,"src": 6516,"name": "run"},{"import": 1945,"src": 6517,"name": "Waiters","kind": "const","type": 954,"value": 2657},{"import": 1998,"src": 6518,"name": "freeAndExit"},{"import": 1945,"src": 6519,"name": "Entry"},{"import": 1945,"src": 6520,"name": "insert"},{"import": 1945,"src": 6521,"name": "popExpired"},{"import": 1945,"src": 6522,"name": "nextExpire"},{"import": 1945,"src": 6523,"name": "peekExpiringEntry"}],"fns": [{"src": 0,"type": 0,"decl": 2567},{"src": 1,"type": 1},{"src": 2,"type": 2,"decl": 0},{"src": 3,"type": 3,"decl": 10},{"src": 4,"type": 4,"decl": 13},{"src": 5,"type": 5,"decl": 25},{"src": 6,"type": 5,"decl": 27},{"src": 7,"type": 6,"decl": 4822},{"src": 8,"type": 7,"decl": 3124},{"src": 9,"type": 8},{"src": 10,"type": 9,"decl": 4825},{"src": 11,"type": 8,"decl": 3189},{"src": 12,"type": 10,"decl": 2596},{"src": 13,"type": 11,"decl": 3875},{"src": 14,"type": 12,"decl": 103},{"src": 15,"type": 13,"decl": 121},{"src": 16,"type": 14,"decl": 3040},{"src": 17,"type": 15},{"src": 18,"type": 9,"decl": 4301},{"src": 17,"type": 16},{"src": 19,"type": 17,"decl": 3120},{"src": 20,"type": 18,"decl": 3117},{"src": 21,"type": 10,"decl": 2597},{"src": 22,"type": 19,"decl": 4837},{"src": 17,"type": 20},{"src": 23,"type": 5,"decl": 22},{"src": 24,"type": 21,"decl": 7170},{"src": 25,"type": 21,"decl": 4826},{"src": 26,"type": 22,"decl": 4306},{"src": 27,"type": 23,"decl": 4827},{"src": 28,"type": 5,"decl": 30},{"src": 29,"type": 24,"decl": 4497},{"src": 30,"type": 25,"decl": 4853},{"src": 31,"type": 26,"decl": 3924},{"src": 32,"type": 27,"decl": 4316},{"src": 33,"type": 14,"decl": 6577},{"src": 34,"type": 28},{"src": 35,"type": 29,"decl": 44},{"src": 36,"type": 30,"decl": 3121},{"src": 37,"type": 31,"decl": 4862},{"src": 38,"type": 32,"decl": 4861},{"src": 39,"type": 33,"decl": 4858},{"src": 40,"type": 34,"decl": 4859},{"src": 41,"type": 35,"decl": 4860},{"src": 42,"type": 36,"decl": 4863},{"src": 43,"type": 37,"decl": 4865},{"src": 44,"type": 38},{"src": 45,"type": 39,"decl": 4864},{"src": 46,"type": 40,"decl": 4303},{"src": 34,"type": 41},{"src": 44,"type": 42},{"src": 47,"type": 43},{"src": 48,"type": 44},{"src": 49,"type": 45,"decl": 3115},{"src": 50,"type": 46,"decl": 3132},{"src": 51,"type": 47,"decl": 3187},{"src": 17,"type": 48},{"src": 52,"type": 49,"decl": 3116},{"src": 53,"type": 50},{"src": 54,"type": 51},{"src": 55,"type": 52},{"src": 56,"type": 53,"decl": 2264},{"src": 57,"type": 54,"decl": 580},{"src": 58,"type": 55,"decl": 534},{"src": 59,"type": 56,"decl": 2267},{"src": 60,"type": 57},{"src": 61,"type": 58},{"src": 62,"type": 59,"decl": 175},{"src": 63,"type": 60},{"src": 64,"type": 61,"decl": 3798},{"src": 65,"type": 62,"decl": 2162},{"src": 66,"type": 63,"decl": 3823},{"src": 67,"type": 64},{"src": 68,"type": 65,"decl": 3133},{"src": 69,"type": 66,"decl": 3183},{"src": 70,"type": 67,"decl": 77},{"src": 71,"type": 68,"decl": 66},{"src": 72,"type": 69},{"src": 73,"type": 70,"decl": 4454},{"src": 74,"type": 71},{"src": 75,"type": 72,"decl": 36},{"src": 76,"type": 73},{"src": 77,"type": 74},{"src": 78,"type": 75,"decl": 3179},{"src": 79,"type": 76,"decl": 3206},{"src": 80,"type": 77,"decl": 283},{"src": 80,"type": 78,"decl": 409},{"src": 80,"type": 79,"decl": 493},{"src": 81,"type": 80,"decl": 2235},{"src": 82,"type": 81},{"src": 83,"type": 82,"decl": 603},{"src": 84,"type": 83,"decl": 600},{"src": 85,"type": 84,"decl": 605},{"src": 86,"type": 85,"decl": 606},{"src": 87,"type": 86,"decl": 608},{"src": 88,"type": 86,"decl": 607},{"src": 89,"type": 87,"decl": 602},{"src": 90,"type": 88,"decl": 644},{"src": 91,"type": 89,"decl": 642},{"src": 92,"type": 90},{"src": 93,"type": 91},{"src": 94,"type": 92},{"src": 95,"type": 93,"decl": 615},{"src": 96,"type": 94,"decl": 614},{"src": 97,"type": 95},{"src": 93,"type": 96},{"src": 94,"type": 97},{"src": 97,"type": 98},{"src": 93,"type": 99},{"src": 94,"type": 100},{"src": 97,"type": 101},{"src": 98,"type": 102,"decl": 625},{"src": 99,"type": 94,"decl": 613},{"src": 100,"type": 88,"decl": 645},{"src": 101,"type": 103,"decl": 2237},{"src": 102,"type": 104,"decl": 294},{"src": 103,"type": 105,"decl": 2238},{"src": 80,"type": 106,"decl": 325},{"src": 104,"type": 107,"decl": 2231},{"src": 105,"type": 108},{"src": 106,"type": 109,"decl": 327},{"src": 102,"type": 110,"decl": 336},{"src": 80,"type": 111,"decl": 367},{"src": 107,"type": 112,"decl": 356},{"src": 108,"type": 113,"decl": 352},{"src": 109,"type": 114,"decl": 353},{"src": 110,"type": 115,"decl": 362},{"src": 111,"type": 116},{"src": 112,"type": 117,"decl": 357},{"src": 102,"type": 118,"decl": 378},{"src": 107,"type": 119,"decl": 398},{"src": 108,"type": 120,"decl": 394},{"src": 109,"type": 121,"decl": 395},{"src": 110,"type": 122,"decl": 404},{"src": 111,"type": 123},{"src": 112,"type": 124,"decl": 399},{"src": 107,"type": 125,"decl": 314},{"src": 108,"type": 126,"decl": 310},{"src": 109,"type": 127,"decl": 311},{"src": 110,"type": 128,"decl": 320},{"src": 111,"type": 129},{"src": 112,"type": 130,"decl": 315},{"src": 113,"type": 131},{"src": 114,"type": 132,"decl": 3235},{"src": 80,"type": 133,"decl": 451},{"src": 115,"type": 134,"decl": 472},{"src": 108,"type": 135,"decl": 478},{"src": 109,"type": 136,"decl": 479},{"src": 110,"type": 137,"decl": 488},{"src": 111,"type": 138},{"src": 116,"type": 139},{"src": 117,"type": 140,"decl": 4868},{"src": 118,"type": 141,"decl": 4866},{"src": 119,"type": 142,"decl": 2240},{"src": 106,"type": 143,"decl": 453},{"src": 120,"type": 144,"decl": 4872},{"src": 121,"type": 145,"decl": 4869},{"src": 122,"type": 146,"decl": 4873},{"src": 102,"type": 147,"decl": 504},{"src": 107,"type": 148,"decl": 524},{"src": 108,"type": 149,"decl": 520},{"src": 109,"type": 150,"decl": 521},{"src": 110,"type": 151,"decl": 530},{"src": 111,"type": 152},{"src": 112,"type": 153,"decl": 525},{"src": 123,"type": 154,"decl": 2236},{"src": 63,"type": 155},{"src": 102,"type": 156,"decl": 420},{"src": 107,"type": 157,"decl": 440},{"src": 108,"type": 158,"decl": 436},{"src": 109,"type": 159,"decl": 437},{"src": 110,"type": 160,"decl": 446},{"src": 111,"type": 161},{"src": 112,"type": 162,"decl": 441},{"src": 124,"type": 163,"decl": 168},{"src": 125,"type": 164,"decl": 219},{"src": 126,"type": 165,"decl": 258},{"src": 127,"type": 166,"decl": 278},{"src": 128,"type": 167,"decl": 279},{"src": 129,"type": 168,"decl": 271},{"src": 130,"type": 169,"decl": 277},{"src": 131,"type": 168},{"src": 132,"type": 169,"decl": 214},{"src": 133,"type": 170},{"src": 134,"type": 171,"decl": 280},{"src": 135,"type": 51,"decl": 2936},{"src": 136,"type": 172},{"src": 137,"type": 173,"decl": 205},{"src": 138,"type": 174,"decl": 276},{"src": 139,"type": 175,"decl": 273},{"src": 140,"type": 176,"decl": 274},{"src": 141,"type": 177,"decl": 2241},{"src": 142,"type": 178,"decl": 223},{"src": 143,"type": 179},{"src": 144,"type": 180},{"src": 145,"type": 181,"decl": 2463},{"src": 146,"type": 182,"decl": 3184},{"src": 147,"type": 183,"decl": 2233},{"src": 148,"type": 184,"decl": 4870},{"src": 93,"type": 185},{"src": 97,"type": 186},{"src": 149,"type": 187,"decl": 2232},{"src": 150,"type": 188,"decl": 2234},{"src": 151,"type": 189,"decl": 626},{"src": 152,"type": 190},{"src": 153,"type": 191},{"src": 80,"type": 192,"decl": 648},{"src": 102,"type": 193,"decl": 659},{"src": 107,"type": 194,"decl": 679},{"src": 108,"type": 195,"decl": 675},{"src": 109,"type": 196,"decl": 676},{"src": 110,"type": 197,"decl": 685},{"src": 111,"type": 198},{"src": 112,"type": 199,"decl": 680},{"src": 154,"type": 200,"decl": 620},{"src": 80,"type": 201,"decl": 690},{"src": 155,"type": 202,"decl": 619},{"src": 156,"type": 203,"decl": 713},{"src": 102,"type": 204,"decl": 701},{"src": 107,"type": 205,"decl": 721},{"src": 108,"type": 206,"decl": 717},{"src": 109,"type": 207,"decl": 718},{"src": 110,"type": 208,"decl": 727},{"src": 111,"type": 209},{"src": 112,"type": 210,"decl": 722},{"src": 106,"type": 211,"decl": 692},{"src": 157,"type": 212,"decl": 696},{"src": 80,"type": 213,"decl": 732},{"src": 158,"type": 214,"decl": 2253},{"src": 105,"type": 215},{"src": 102,"type": 216,"decl": 743},{"src": 107,"type": 217,"decl": 763},{"src": 108,"type": 218,"decl": 759},{"src": 109,"type": 219,"decl": 760},{"src": 110,"type": 220,"decl": 769},{"src": 111,"type": 221},{"src": 112,"type": 222,"decl": 764},{"src": 72,"type": 223},{"src": 159,"type": 224,"decl": 643},{"src": 160,"type": 225,"decl": 2254},{"src": 161,"type": 226,"decl": 6925},{"src": 162,"type": 227,"decl": 6965},{"src": 163,"type": 228,"decl": 6924},{"src": 164,"type": 229},{"src": 165,"type": 230},{"src": 166,"type": 231,"decl": 2252},{"src": 167,"type": 232},{"src": 168,"type": 233,"decl": 2255},{"src": 17,"type": 234},{"src": 17,"type": 235},{"src": 169,"type": 236},{"src": 170,"type": 237,"decl": 2256},{"src": 171,"type": 238,"decl": 2257},{"src": 17,"type": 239},{"src": 172,"type": 25,"decl": 4854},{"src": 173,"type": 240,"decl": 4877},{"src": 34,"type": 241},{"src": 174,"type": 21,"decl": 7187},{"src": 175,"type": 242,"decl": 7169},{"src": 176,"type": 243,"decl": 7168},{"src": 177,"type": 244,"decl": 4550},{"src": 178,"type": 245,"decl": 5169},{"src": 179,"type": 8,"decl": 3138},{"src": 180,"type": 246,"decl": 4831},{"src": 181,"type": 247,"decl": 5102},{"src": 182,"type": 248,"decl": 5207},{"src": 183,"type": 249,"decl": 4856},{"src": 184,"type": 250,"decl": 5152},{"src": 185,"type": 251,"decl": 4494},{"src": 186,"type": 26,"decl": 5205},{"src": 187,"type": 252,"decl": 43},{"src": 188,"type": 253},{"src": 189,"type": 254},{"src": 190,"type": 255},{"src": 191,"type": 256},{"src": 192,"type": 257,"decl": 3718},{"src": 193,"type": 258},{"src": 194,"type": 259,"decl": 4759},{"src": 195,"type": 260},{"src": 196,"type": 261,"decl": 4752},{"src": 197,"type": 262,"decl": 4754},{"src": 198,"type": 263,"decl": 47},{"src": 199,"type": 264,"decl": 5206},{"src": 200,"type": 265,"decl": 5172},{"src": 201,"type": 266,"decl": 4948},{"src": 202,"type": 267},{"src": 203,"type": 268},{"src": 204,"type": 269,"decl": 2262},{"src": 205,"type": 270,"decl": 2271},{"src": 206,"type": 54,"decl": 579},{"src": 207,"type": 271,"decl": 6538},{"src": 208,"type": 272,"decl": 6539},{"src": 209,"type": 273,"decl": 6540},{"src": 210,"type": 274,"decl": 2270},{"src": 34,"type": 275},{"src": 44,"type": 276},{"src": 211,"type": 277},{"src": 211,"type": 277},{"src": 212,"type": 278,"decl": 68},{"src": 213,"type": 279},{"src": 214,"type": 280,"decl": 4630},{"src": 215,"type": 281,"decl": 7114},{"src": 216,"type": 282,"decl": 4891},{"src": 217,"type": 283,"decl": 4892},{"src": 218,"type": 284,"decl": 246},{"src": 219,"type": 285},{"src": 220,"type": 286,"decl": 4491},{"src": 221,"type": 287},{"src": 222,"type": 288,"decl": 2164},{"src": 223,"type": 289,"decl": 3803},{"src": 224,"type": 290,"decl": 2122},{"src": 225,"type": 291,"decl": 82},{"src": 226,"type": 292,"decl": 4294},{"src": 227,"type": 293,"decl": 5132},{"src": 228,"type": 294},{"src": 77,"type": 295},{"src": 191,"type": 296},{"src": 72,"type": 297},{"src": 229,"type": 298},{"src": 195,"type": 299},{"src": 230,"type": 299},{"src": 195,"type": 300},{"src": 230,"type": 300},{"src": 195,"type": 301},{"src": 230,"type": 301},{"src": 153,"type": 302},{"src": 231,"type": 303},{"src": 231,"type": 304},{"src": 231,"type": 305},{"src": 231,"type": 306},{"src": 232,"type": 307},{"src": 233,"type": 308},{"src": 234,"type": 309},{"src": 235,"type": 310},{"src": 235,"type": 311},{"src": 235,"type": 312},{"src": 235,"type": 313},{"src": 235,"type": 314},{"src": 236,"type": 315},{"src": 237,"type": 316},{"src": 63,"type": 317},{"src": 67,"type": 318},{"src": 238,"type": 319},{"src": 153,"type": 320},{"src": 231,"type": 321},{"src": 219,"type": 322},{"src": 231,"type": 323},{"src": 239,"type": 165},{"src": 240,"type": 324},{"src": 241,"type": 325,"decl": 272},{"src": 242,"type": 51},{"src": 219,"type": 326},{"src": 243,"type": 173,"decl": 281},{"src": 244,"type": 327,"decl": 2244},{"src": 245,"type": 328,"decl": 2245},{"src": 246,"type": 329},{"src": 17,"type": 330},{"src": 17,"type": 331},{"src": 247,"type": 332},{"src": 248,"type": 333,"decl": 93},{"src": 249,"type": 334,"decl": 46},{"src": 230,"type": 260},{"src": 219,"type": 335},{"src": 250,"type": 336},{"src": 231,"type": 337},{"src": 231,"type": 338},{"src": 251,"type": 339},{"src": 231,"type": 340},{"src": 252,"type": 341,"decl": 2278},{"src": 34,"type": 342},{"src": 34,"type": 343},{"src": 253,"type": 238,"decl": 2261},{"src": 34,"type": 344},{"src": 254,"type": 25,"decl": 4857},{"src": 255,"type": 345,"decl": 4878},{"src": 256,"type": 346},{"src": 257,"type": 347},{"src": 257,"type": 348},{"src": 258,"type": 349,"decl": 2690},{"src": 259,"type": 350,"decl": 5279},{"src": 260,"type": 8,"decl": 3139},{"src": 261,"type": 351,"decl": 4798},{"src": 262,"type": 352,"decl": 2698},{"src": 263,"type": 352,"decl": 2697},{"src": 264,"type": 353,"decl": 2693},{"src": 54,"type": 354},{"src": 265,"type": 355,"decl": 3074},{"src": 266,"type": 356,"decl": 5115},{"src": 267,"type": 357,"decl": 2692},{"src": 268,"type": 358},{"src": 269,"type": 359,"decl": 2689},{"src": 270,"type": 360,"decl": 4755},{"src": 271,"type": 361,"decl": 4756},{"src": 272,"type": 362,"decl": 4757},{"src": 273,"type": 363,"decl": 2691},{"src": 274,"type": 266,"decl": 2283},{"src": 275,"type": 364,"decl": 149},{"src": 276,"type": 365,"decl": 2279},{"src": 277,"type": 268,"decl": 2944},{"src": 278,"type": 366},{"src": 279,"type": 367,"decl": 4455},{"src": 280,"type": 368,"decl": 2747},{"src": 281,"type": 369,"decl": 2275},{"src": 282,"type": 370,"decl": 2276},{"src": 283,"type": 371,"decl": 2277},{"src": 284,"type": 372,"decl": 2274},{"src": 285,"type": 373,"decl": 2120},{"src": 286,"type": 374,"decl": 796},{"src": 287,"type": 375},{"src": 288,"type": 274},{"src": 289,"type": 376,"decl": 4336},{"src": 290,"type": 278,"decl": 67},{"src": 291,"type": 377,"decl": 4337},{"src": 213,"type": 378},{"src": 292,"type": 379,"decl": 5101},{"src": 293,"type": 380,"decl": 7113},{"src": 294,"type": 284},{"src": 295,"type": 381},{"src": 296,"type": 382,"decl": 4327},{"src": 297,"type": 383,"decl": 4478},{"src": 298,"type": 384,"decl": 6927},{"src": 299,"type": 385,"decl": 4434},{"src": 300,"type": 386,"decl": 1014},{"src": 301,"type": 386,"decl": 1015},{"src": 302,"type": 386,"decl": 1016},{"src": 303,"type": 387,"decl": 5163},{"src": 304,"type": 388,"decl": 2695},{"src": 305,"type": 389},{"src": 228,"type": 390},{"src": 250,"type": 391},{"src": 219,"type": 392},{"src": 306,"type": 393,"decl": 2146},{"src": 307,"type": 394},{"src": 308,"type": 395,"decl": 2121},{"src": 219,"type": 396},{"src": 153,"type": 397},{"src": 250,"type": 398},{"src": 307,"type": 399},{"src": 219,"type": 400},{"src": 153,"type": 401},{"src": 250,"type": 402},{"src": 307,"type": 403},{"src": 219,"type": 404},{"src": 250,"type": 405},{"src": 307,"type": 406},{"src": 309,"type": 407},{"src": 310,"type": 408},{"src": 93,"type": 409},{"src": 94,"type": 410},{"src": 97,"type": 411},{"src": 219,"type": 412},{"src": 219,"type": 413},{"src": 153,"type": 414},{"src": 250,"type": 415},{"src": 307,"type": 416},{"src": 219,"type": 417},{"src": 153,"type": 418},{"src": 250,"type": 419},{"src": 307,"type": 420},{"src": 311,"type": 421},{"src": 312,"type": 422},{"src": 313,"type": 51},{"src": 307,"type": 423},{"src": 153,"type": 424},{"src": 34,"type": 425},{"src": 44,"type": 38},{"src": 34,"type": 426},{"src": 44,"type": 427},{"src": 314,"type": 428,"decl": 4308},{"src": 219,"type": 429},{"src": 153,"type": 430},{"src": 250,"type": 431},{"src": 307,"type": 432},{"src": 219,"type": 335},{"src": 307,"type": 336},{"src": 315,"type": 433},{"src": 219,"type": 434},{"src": 153,"type": 435},{"src": 250,"type": 436},{"src": 307,"type": 437},{"src": 153,"type": 438},{"src": 316,"type": 5,"decl": 26},{"src": 317,"type": 439},{"src": 318,"type": 440,"decl": 5116},{"src": 319,"type": 441,"decl": 7161},{"src": 320,"type": 442,"decl": 5280},{"src": 321,"type": 443,"decl": 3190},{"src": 322,"type": 8,"decl": 2104},{"src": 323,"type": 444,"decl": 12},{"src": 17,"type": 445},{"src": 324,"type": 446,"decl": 2280},{"src": 325,"type": 447,"decl": 2281},{"src": 326,"type": 448,"decl": 2282},{"src": 327,"type": 449},{"src": 328,"type": 450},{"src": 329,"type": 451,"decl": 5134},{"src": 330,"type": 368,"decl": 2844},{"src": 331,"type": 452},{"src": 332,"type": 272},{"src": 333,"type": 273},{"src": 334,"type": 453,"decl": 4404},{"src": 335,"type": 389},{"src": 336,"type": 454,"decl": 5160},{"src": 337,"type": 265,"decl": 5181},{"src": 338,"type": 384,"decl": 6934},{"src": 339,"type": 455,"decl": 5228},{"src": 340,"type": 456},{"src": 219,"type": 392},{"src": 219,"type": 396},{"src": 219,"type": 400},{"src": 219,"type": 404},{"src": 195,"type": 457},{"src": 230,"type": 457},{"src": 219,"type": 413},{"src": 219,"type": 417},{"src": 341,"type": 177,"decl": 2243},{"src": 250,"type": 423},{"src": 188,"type": 458},{"src": 189,"type": 459},{"src": 188,"type": 460},{"src": 189,"type": 461},{"src": 190,"type": 462},{"src": 191,"type": 463},{"src": 342,"type": 464,"decl": 5137},{"src": 219,"type": 429},{"src": 219,"type": 434},{"src": 250,"type": 295},{"src": 17,"type": 465},{"src": 17,"type": 466},{"src": 17,"type": 467},{"src": 343,"type": 468,"decl": 3118},{"src": 344,"type": 8,"decl": 2113},{"src": 345,"type": 469,"decl": 3013},{"src": 346,"type": 470,"decl": 2302},{"src": 347,"type": 471,"decl": 2285},{"src": 348,"type": 472,"decl": 2288},{"src": 349,"type": 473,"decl": 3015},{"src": 268,"type": 474},{"src": 350,"type": 472,"decl": 2287},{"src": 351,"type": 475},{"src": 268,"type": 476},{"src": 352,"type": 477,"decl": 890},{"src": 268,"type": 478},{"src": 351,"type": 479},{"src": 268,"type": 480},{"src": 351,"type": 481},{"src": 268,"type": 482},{"src": 268,"type": 483},{"src": 268,"type": 484},{"src": 268,"type": 485},{"src": 268,"type": 486},{"src": 34,"type": 487},{"src": 44,"type": 488},{"src": 353,"type": 447,"decl": 2284},{"src": 354,"type": 489,"decl": 4900},{"src": 355,"type": 490},{"src": 355,"type": 490},{"src": 355,"type": 490},{"src": 356,"type": 490,"decl": 4898},{"src": 357,"type": 489,"decl": 4901},{"src": 358,"type": 491,"decl": 4899},{"src": 313,"type": 491},{"src": 359,"type": 51,"decl": 2939},{"src": 360,"type": 5,"decl": 29},{"src": 361,"type": 492,"decl": 6933},{"src": 202,"type": 493},{"src": 34,"type": 494},{"src": 34,"type": 495},{"src": 34,"type": 496},{"src": 17,"type": 497},{"src": 362,"type": 498,"decl": 4625},{"src": 363,"type": 499,"decl": 1017},{"src": 364,"type": 500,"decl": 1018},{"src": 365,"type": 501,"decl": 4623},{"src": 80,"type": 502,"decl": 1029},{"src": 366,"type": 503,"decl": 2295},{"src": 106,"type": 504,"decl": 1031},{"src": 367,"type": 505,"decl": 2299},{"src": 368,"type": 506,"decl": 705},{"src": 369,"type": 507,"decl": 719},{"src": 370,"type": 508,"decl": 706},{"src": 153,"type": 509},{"src": 102,"type": 510,"decl": 1040},{"src": 107,"type": 511,"decl": 1060},{"src": 108,"type": 512,"decl": 1056},{"src": 109,"type": 513,"decl": 1057},{"src": 110,"type": 514,"decl": 1066},{"src": 111,"type": 515},{"src": 112,"type": 516,"decl": 1061},{"src": 307,"type": 517},{"src": 268,"type": 518},{"src": 371,"type": 519,"decl": 4488},{"src": 372,"type": 519,"decl": 4487},{"src": 373,"type": 520,"decl": 2595},{"src": 374,"type": 473,"decl": 3023},{"src": 17,"type": 521},{"src": 375,"type": 473,"decl": 3014},{"src": 376,"type": 472,"decl": 2286},{"src": 17,"type": 522},{"src": 17,"type": 523},{"src": 377,"type": 477,"decl": 889},{"src": 137,"type": 524,"decl": 933},{"src": 17,"type": 525},{"src": 17,"type": 526},{"src": 17,"type": 527},{"src": 17,"type": 528},{"src": 17,"type": 529},{"src": 17,"type": 530},{"src": 17,"type": 531},{"src": 17,"type": 532},{"src": 17,"type": 533},{"src": 188,"type": 534},{"src": 189,"type": 535},{"src": 190,"type": 536},{"src": 191,"type": 537},{"src": 355,"type": 490},{"src": 378,"type": 538},{"src": 379,"type": 51,"decl": 2940},{"src": 34,"type": 539},{"src": 380,"type": 540,"decl": 1024},{"src": 381,"type": 541,"decl": 1025},{"src": 382,"type": 542,"decl": 1026},{"src": 328,"type": 543},{"src": 288,"type": 500},{"src": 383,"type": 501,"decl": 2291},{"src": 384,"type": 544,"decl": 2310},{"src": 385,"type": 545},{"src": 153,"type": 546},{"src": 250,"type": 547},{"src": 231,"type": 548},{"src": 17,"type": 549},{"src": 386,"type": 550,"decl": 5183},{"src": 387,"type": 550,"decl": 5182},{"src": 388,"type": 551,"decl": 4852},{"src": 389,"type": 552},{"src": 389,"type": 553},{"src": 390,"type": 554},{"src": 390,"type": 555},{"src": 390,"type": 556},{"src": 390,"type": 557},{"src": 390,"type": 558},{"src": 390,"type": 559},{"src": 390,"type": 560},{"src": 391,"type": 561,"decl": 2303},{"src": 34,"type": 562},{"src": 44,"type": 427},{"src": 34,"type": 563},{"src": 34,"type": 564},{"src": 392,"type": 379,"decl": 907},{"src": 393,"type": 565,"decl": 908},{"src": 394,"type": 566,"decl": 945},{"src": 395,"type": 567,"decl": 1070},{"src": 396,"type": 568,"decl": 1012},{"src": 397,"type": 569},{"src": 243,"type": 524,"decl": 1009},{"src": 34,"type": 570},{"src": 34,"type": 571},{"src": 34,"type": 572},{"src": 34,"type": 573},{"src": 34,"type": 574},{"src": 34,"type": 575},{"src": 34,"type": 576},{"src": 34,"type": 577},{"src": 34,"type": 578},{"src": 398,"type": 579,"decl": 1021},{"src": 399,"type": 579,"decl": 1022},{"src": 331,"type": 452},{"src": 332,"type": 272},{"src": 333,"type": 273},{"src": 400,"type": 580,"decl": 2309},{"src": 213,"type": 581},{"src": 250,"type": 582},{"src": 219,"type": 583},{"src": 307,"type": 584},{"src": 34,"type": 585},{"src": 44,"type": 586},{"src": 401,"type": 587,"decl": 5725},{"src": 82,"type": 588},{"src": 402,"type": 589,"decl": 1090},{"src": 403,"type": 590,"decl": 1087},{"src": 34,"type": 591},{"src": 35,"type": 592,"decl": 1100},{"src": 44,"type": 593},{"src": 404,"type": 594,"decl": 1095},{"src": 34,"type": 595},{"src": 389,"type": 596},{"src": 389,"type": 597},{"src": 389,"type": 598},{"src": 389,"type": 599},{"src": 389,"type": 600},{"src": 389,"type": 601},{"src": 389,"type": 602},{"src": 405,"type": 14,"decl": 2307},{"src": 406,"type": 603,"decl": 2308},{"src": 188,"type": 604},{"src": 189,"type": 605},{"src": 407,"type": 606,"decl": 2686},{"src": 408,"type": 607,"decl": 904},{"src": 397,"type": 608},{"src": 132,"type": 609,"decl": 942},{"src": 140,"type": 610,"decl": 1002},{"src": 141,"type": 611,"decl": 2312},{"src": 409,"type": 569},{"src": 241,"type": 612,"decl": 1000},{"src": 410,"type": 613,"decl": 2778},{"src": 335,"type": 614},{"src": 219,"type": 583},{"src": 411,"type": 615,"decl": 7271},{"src": 77,"type": 336},{"src": 187,"type": 616,"decl": 1099},{"src": 188,"type": 617},{"src": 189,"type": 618},{"src": 190,"type": 619},{"src": 193,"type": 620},{"src": 198,"type": 621,"decl": 1103},{"src": 34,"type": 622},{"src": 34,"type": 623},{"src": 44,"type": 624},{"src": 34,"type": 625},{"src": 34,"type": 626},{"src": 34,"type": 627},{"src": 34,"type": 628},{"src": 34,"type": 629},{"src": 412,"type": 630,"decl": 2687},{"src": 409,"type": 608},{"src": 413,"type": 569},{"src": 76,"type": 631},{"src": 414,"type": 632,"decl": 7277},{"src": 228,"type": 242},{"src": 415,"type": 379,"decl": 905},{"src": 413,"type": 608},{"src": 268,"type": 633},{"src": 268,"type": 634},{"src": 17,"type": 635},{"src": 17,"type": 636},{"src": 34,"type": 637},{"src": 44,"type": 638},{"src": 34,"type": 639},{"src": 416,"type": 640},{"src": 17,"type": 641},{"src": 417,"type": 642,"decl": 2272},{"src": 17,"type": 643},{"src": 34,"type": 644},{"src": 34,"type": 645},{"src": 418,"type": 1},{"src": 419,"type": 1},{"src": 420,"type": 646,"decl": 1119},{"src": 421,"type": 647,"decl": 1120},{"src": 422,"type": 1},{"src": 420,"type": 648,"decl": 1301},{"src": 421,"type": 649,"decl": 1302},{"src": 423,"type": 1},{"src": 424,"type": 650,"decl": 1328},{"src": 425,"type": 651,"decl": 1329},{"src": 426,"type": 1},{"src": 427,"type": 1},{"src": 9,"type": 8},{"src": 9,"type": 8},{"src": 9,"type": 8},{"src": 9,"type": 8},{"src": 428,"type": 490,"decl": 2442},{"src": 429,"type": 71,"decl": 2441},{"src": 9,"type": 8},{"src": 420,"type": 652,"decl": 1826},{"src": 421,"type": 653,"decl": 1827},{"src": 430,"type": 654,"decl": 1856},{"src": 431,"type": 655,"decl": 1822},{"src": 432,"type": 656},{"src": 268,"type": 657},{"src": 433,"type": 658,"decl": 1820},{"src": 434,"type": 659,"decl": 1877},{"src": 435,"type": 659,"decl": 1878},{"src": 436,"type": 660,"decl": 1879},{"src": 437,"type": 661,"decl": 1880},{"src": 438,"type": 662,"decl": 1209},{"src": 439,"type": 663,"decl": 1210},{"src": 440,"type": 664,"decl": 1211},{"src": 441,"type": 665,"decl": 1212},{"src": 442,"type": 664,"decl": 1213},{"src": 443,"type": 665,"decl": 1214},{"src": 444,"type": 666,"decl": 1215},{"src": 445,"type": 666,"decl": 1216},{"src": 446,"type": 667,"decl": 1217},{"src": 447,"type": 665,"decl": 1218},{"src": 448,"type": 668,"decl": 1219},{"src": 449,"type": 669,"decl": 1220},{"src": 450,"type": 669,"decl": 1221},{"src": 451,"type": 670,"decl": 1222},{"src": 430,"type": 671,"decl": 1149},{"src": 452,"type": 672,"decl": 1266},{"src": 453,"type": 673,"decl": 1267},{"src": 454,"type": 674,"decl": 1268},{"src": 455,"type": 675,"decl": 1269},{"src": 456,"type": 676,"decl": 1270},{"src": 457,"type": 677,"decl": 1271},{"src": 458,"type": 678,"decl": 1272},{"src": 459,"type": 679,"decl": 1273},{"src": 460,"type": 680,"decl": 1274},{"src": 461,"type": 681,"decl": 1275},{"src": 462,"type": 681,"decl": 1276},{"src": 463,"type": 681,"decl": 1277},{"src": 464,"type": 682,"decl": 1278},{"src": 465,"type": 683,"decl": 1279},{"src": 466,"type": 684,"decl": 1280},{"src": 467,"type": 685,"decl": 1281},{"src": 468,"type": 685,"decl": 1282},{"src": 469,"type": 686,"decl": 1283},{"src": 470,"type": 687,"decl": 1284},{"src": 471,"type": 688,"decl": 1885},{"src": 472,"type": 689,"decl": 1886},{"src": 473,"type": 690,"decl": 1887},{"src": 474,"type": 691,"decl": 1888},{"src": 475,"type": 692,"decl": 1889},{"src": 476,"type": 693,"decl": 1890},{"src": 477,"type": 694,"decl": 1891},{"src": 478,"type": 695,"decl": 1892},{"src": 479,"type": 696,"decl": 1893},{"src": 480,"type": 697,"decl": 1900},{"src": 481,"type": 698,"decl": 1901},{"src": 482,"type": 699,"decl": 1902},{"src": 483,"type": 700,"decl": 1903},{"src": 484,"type": 701,"decl": 1904},{"src": 485,"type": 702,"decl": 1905},{"src": 486,"type": 703,"decl": 1906},{"src": 487,"type": 704,"decl": 1907},{"src": 488,"type": 698,"decl": 1917},{"src": 489,"type": 705,"decl": 1918},{"src": 490,"type": 706,"decl": 1919},{"src": 491,"type": 707,"decl": 1833},{"src": 17,"type": 708},{"src": 492,"type": 709,"decl": 1839},{"src": 433,"type": 710,"decl": 1113},{"src": 493,"type": 710,"decl": 1114},{"src": 431,"type": 711,"decl": 1115},{"src": 494,"type": 712,"decl": 1172},{"src": 494,"type": 713,"decl": 1229},{"src": 495,"type": 714,"decl": 1179},{"src": 496,"type": 715,"decl": 1200},{"src": 497,"type": 716,"decl": 1196},{"src": 498,"type": 717,"decl": 1197},{"src": 499,"type": 718,"decl": 1206},{"src": 111,"type": 719},{"src": 500,"type": 720,"decl": 1201},{"src": 495,"type": 721,"decl": 1236},{"src": 496,"type": 722,"decl": 1257},{"src": 497,"type": 723,"decl": 1253},{"src": 498,"type": 724,"decl": 1254},{"src": 499,"type": 725,"decl": 1263},{"src": 111,"type": 726},{"src": 500,"type": 727,"decl": 1258},{"src": 433,"type": 728,"decl": 1295},{"src": 493,"type": 728,"decl": 1296},{"src": 431,"type": 729,"decl": 1297},{"src": 501,"type": 730,"decl": 2324},{"src": 275,"type": 731,"decl": 1339},{"src": 502,"type": 732,"decl": 1347},{"src": 395,"type": 733,"decl": 1920},{"src": 503,"type": 734,"decl": 1387},{"src": 106,"type": 735,"decl": 650},{"src": 504,"type": 736,"decl": 1341},{"src": 505,"type": 737,"decl": 2339},{"src": 67,"type": 738},{"src": 506,"type": 739,"decl": 1384},{"src": 507,"type": 740,"decl": 1367},{"src": 508,"type": 734,"decl": 1385},{"src": 509,"type": 741,"decl": 1357},{"src": 510,"type": 734,"decl": 1386},{"src": 368,"type": 742,"decl": 663},{"src": 157,"type": 743,"decl": 654},{"src": 369,"type": 744,"decl": 677},{"src": 370,"type": 745,"decl": 664},{"src": 511,"type": 746,"decl": 1429},{"src": 512,"type": 747,"decl": 1443},{"src": 513,"type": 748},{"src": 127,"type": 749,"decl": 1472},{"src": 128,"type": 750,"decl": 1473},{"src": 129,"type": 168,"decl": 1465},{"src": 130,"type": 751,"decl": 1471},{"src": 132,"type": 751,"decl": 1408},{"src": 134,"type": 752,"decl": 1474},{"src": 137,"type": 753,"decl": 1399},{"src": 138,"type": 754,"decl": 1470},{"src": 139,"type": 755,"decl": 1467},{"src": 140,"type": 756,"decl": 1468},{"src": 141,"type": 757,"decl": 2340},{"src": 142,"type": 758,"decl": 1417},{"src": 143,"type": 759},{"src": 311,"type": 760},{"src": 514,"type": 761},{"src": 63,"type": 762},{"src": 515,"type": 763,"decl": 1375},{"src": 516,"type": 764,"decl": 1344},{"src": 62,"type": 765,"decl": 1365},{"src": 517,"type": 766,"decl": 4626},{"src": 518,"type": 767,"decl": 2352},{"src": 519,"type": 768,"decl": 2379},{"src": 520,"type": 769,"decl": 2353},{"src": 521,"type": 770,"decl": 2392},{"src": 522,"type": 11,"decl": 3874},{"src": 523,"type": 771},{"src": 524,"type": 772},{"src": 525,"type": 773,"decl": 1925},{"src": 526,"type": 774,"decl": 1924},{"src": 527,"type": 775},{"src": 17,"type": 776},{"src": 528,"type": 777},{"src": 249,"type": 778,"decl": 1965},{"src": 529,"type": 779},{"src": 35,"type": 780,"decl": 1963},{"src": 17,"type": 781},{"src": 17,"type": 782},{"src": 530,"type": 783,"decl": 2335},{"src": 17,"type": 784},{"src": 17,"type": 785},{"src": 531,"type": 786},{"src": 17,"type": 787},{"src": 17,"type": 788},{"src": 532,"type": 789},{"src": 17,"type": 790},{"src": 17,"type": 791},{"src": 17,"type": 792},{"src": 17,"type": 793},{"src": 17,"type": 794},{"src": 533,"type": 795},{"src": 17,"type": 796},{"src": 534,"type": 797,"decl": 1923},{"src": 535,"type": 798,"decl": 1937},{"src": 536,"type": 799,"decl": 1938},{"src": 537,"type": 800,"decl": 1859},{"src": 34,"type": 801},{"src": 44,"type": 802},{"src": 538,"type": 803,"decl": 1862},{"src": 492,"type": 804,"decl": 1132},{"src": 539,"type": 805,"decl": 1135},{"src": 491,"type": 806,"decl": 1126},{"src": 153,"type": 807},{"src": 153,"type": 808},{"src": 231,"type": 809},{"src": 231,"type": 810},{"src": 492,"type": 811,"decl": 1314},{"src": 539,"type": 812,"decl": 1317},{"src": 491,"type": 813,"decl": 1308},{"src": 394,"type": 814,"decl": 1411},{"src": 540,"type": 815,"decl": 1437},{"src": 251,"type": 816},{"src": 165,"type": 817},{"src": 241,"type": 818,"decl": 1466},{"src": 243,"type": 753,"decl": 1475},{"src": 126,"type": 819,"decl": 1452},{"src": 244,"type": 327,"decl": 2343},{"src": 245,"type": 820,"decl": 2344},{"src": 341,"type": 757,"decl": 2342},{"src": 541,"type": 757,"decl": 2341},{"src": 219,"type": 821},{"src": 542,"type": 751,"decl": 1407},{"src": 218,"type": 822,"decl": 1440},{"src": 153,"type": 823},{"src": 543,"type": 824,"decl": 2387},{"src": 544,"type": 825,"decl": 2390},{"src": 545,"type": 826,"decl": 2380},{"src": 546,"type": 827,"decl": 2391},{"src": 547,"type": 828,"decl": 2403},{"src": 548,"type": 829,"decl": 2368},{"src": 549,"type": 828,"decl": 2401},{"src": 550,"type": 828,"decl": 2402},{"src": 551,"type": 830,"decl": 2388},{"src": 552,"type": 831,"decl": 2369},{"src": 553,"type": 832,"decl": 2378},{"src": 397,"type": 833},{"src": 397,"type": 834},{"src": 397,"type": 835},{"src": 397,"type": 836},{"src": 397,"type": 837},{"src": 397,"type": 838},{"src": 397,"type": 839},{"src": 397,"type": 840},{"src": 397,"type": 841},{"src": 17,"type": 842},{"src": 397,"type": 843},{"src": 397,"type": 844},{"src": 397,"type": 845},{"src": 554,"type": 26,"decl": 3923},{"src": 555,"type": 846,"decl": 1954},{"src": 556,"type": 847,"decl": 1942},{"src": 557,"type": 848,"decl": 1946},{"src": 34,"type": 849},{"src": 44,"type": 850},{"src": 187,"type": 851,"decl": 1962},{"src": 34,"type": 852},{"src": 34,"type": 853},{"src": 34,"type": 854},{"src": 44,"type": 855},{"src": 34,"type": 856},{"src": 34,"type": 857},{"src": 34,"type": 858},{"src": 34,"type": 859},{"src": 34,"type": 860},{"src": 44,"type": 861},{"src": 34,"type": 862},{"src": 34,"type": 863},{"src": 34,"type": 864},{"src": 34,"type": 865},{"src": 558,"type": 866,"decl": 1957},{"src": 559,"type": 867,"decl": 1875},{"src": 538,"type": 868,"decl": 1155},{"src": 560,"type": 868,"decl": 1156},{"src": 537,"type": 869,"decl": 1152},{"src": 250,"type": 870},{"src": 250,"type": 871},{"src": 219,"type": 872},{"src": 307,"type": 873},{"src": 219,"type": 874},{"src": 307,"type": 875},{"src": 561,"type": 815},{"src": 315,"type": 876},{"src": 239,"type": 819},{"src": 294,"type": 822},{"src": 250,"type": 877},{"src": 562,"type": 878,"decl": 2381},{"src": 563,"type": 71},{"src": 564,"type": 879,"decl": 2384},{"src": 565,"type": 879,"decl": 2385},{"src": 566,"type": 880,"decl": 2400},{"src": 567,"type": 881,"decl": 2374},{"src": 568,"type": 831,"decl": 2370},{"src": 569,"type": 831,"decl": 2371},{"src": 570,"type": 882,"decl": 2383},{"src": 571,"type": 883,"decl": 2338},{"src": 572,"type": 884,"decl": 2337},{"src": 409,"type": 833},{"src": 409,"type": 834},{"src": 409,"type": 835},{"src": 409,"type": 836},{"src": 409,"type": 837},{"src": 409,"type": 838},{"src": 409,"type": 839},{"src": 409,"type": 840},{"src": 409,"type": 841},{"src": 34,"type": 885},{"src": 409,"type": 843},{"src": 409,"type": 844},{"src": 409,"type": 845},{"src": 573,"type": 866,"decl": 1943},{"src": 574,"type": 799,"decl": 1945},{"src": 193,"type": 886},{"src": 198,"type": 887,"decl": 1966},{"src": 188,"type": 888},{"src": 189,"type": 889},{"src": 575,"type": 890},{"src": 559,"type": 891,"decl": 1168},{"src": 219,"type": 872},{"src": 219,"type": 874},{"src": 576,"type": 892},{"src": 577,"type": 893},{"src": 578,"type": 894},{"src": 579,"type": 895,"decl": 1982},{"src": 580,"type": 896,"decl": 2377},{"src": 581,"type": 897,"decl": 2375},{"src": 582,"type": 898,"decl": 2376},{"src": 583,"type": 899,"decl": 2372},{"src": 584,"type": 900,"decl": 2404},{"src": 585,"type": 901,"decl": 2405},{"src": 586,"type": 902,"decl": 2389},{"src": 587,"type": 903,"decl": 2408},{"src": 588,"type": 903,"decl": 2409},{"src": 589,"type": 904,"decl": 2406},{"src": 590,"type": 903,"decl": 2410},{"src": 591,"type": 904,"decl": 2407},{"src": 592,"type": 905,"decl": 2373},{"src": 413,"type": 833},{"src": 413,"type": 834},{"src": 413,"type": 835},{"src": 413,"type": 836},{"src": 413,"type": 837},{"src": 413,"type": 838},{"src": 413,"type": 839},{"src": 413,"type": 840},{"src": 413,"type": 841},{"src": 413,"type": 843},{"src": 413,"type": 844},{"src": 413,"type": 845},{"src": 593,"type": 906},{"src": 594,"type": 878,"decl": 2382},{"src": 595,"type": 907},{"src": 596,"type": 908,"decl": 1985},{"src": 597,"type": 909,"decl": 1986},{"src": 598,"type": 903,"decl": 2411},{"src": 268,"type": 910},{"src": 268,"type": 911},{"src": 268,"type": 912},{"src": 268,"type": 913},{"src": 268,"type": 914},{"src": 268,"type": 915},{"src": 268,"type": 916},{"src": 268,"type": 917},{"src": 268,"type": 918},{"src": 268,"type": 919},{"src": 268,"type": 920},{"src": 268,"type": 921},{"src": 599,"type": 277},{"src": 600,"type": 906},{"src": 601,"type": 922,"decl": 2965},{"src": 602,"type": 923,"decl": 1989},{"src": 17,"type": 924},{"src": 17,"type": 925},{"src": 17,"type": 926},{"src": 17,"type": 927},{"src": 17,"type": 928},{"src": 17,"type": 929},{"src": 17,"type": 930},{"src": 17,"type": 931},{"src": 17,"type": 932},{"src": 17,"type": 933},{"src": 17,"type": 934},{"src": 17,"type": 935},{"src": 133,"type": 277},{"src": 34,"type": 936},{"src": 34,"type": 937},{"src": 34,"type": 938},{"src": 34,"type": 939},{"src": 34,"type": 940},{"src": 34,"type": 941},{"src": 34,"type": 942},{"src": 34,"type": 943},{"src": 34,"type": 944},{"src": 34,"type": 945},{"src": 34,"type": 946},{"src": 34,"type": 947},{"src": 603,"type": 1},{"src": 604,"type": 948,"decl": 4908},{"src": 605,"type": 949,"decl": 4701},{"src": 268,"type": 950},{"src": 17,"type": 951},{"src": 34,"type": 952},{"src": 606,"type": 953,"decl": 5048},{"src": 607,"type": 958,"decl": 4143},{"src": 608,"type": 963,"decl": 4065},{"src": 609,"type": 969,"decl": 2416},{"src": 610,"type": 973,"decl": 4126},{"src": 611,"type": 977,"decl": 3741},{"src": 612,"type": 980,"decl": 3740},{"src": 613,"type": 983,"decl": 2437},{"src": 614,"type": 985,"decl": 2433},{"src": 615,"type": 986,"decl": 2434},{"src": 616,"type": 987,"decl": 2447},{"src": 617,"type": 989,"decl": 2448},{"src": 618,"type": 992,"decl": 2435},{"src": 619,"type": 993,"decl": 2449},{"src": 620,"type": 995,"decl": 4050},{"src": 621,"type": 996,"decl": 2465},{"src": 622,"type": 1000,"decl": 2464},{"src": 623,"type": 1014,"decl": 4121},{"src": 624,"type": 1017,"decl": 4123},{"src": 625,"type": 1019,"decl": 2854},{"src": 626,"type": 1021,"decl": 2510},{"src": 627,"type": 1022,"decl": 2503},{"src": 628,"type": 1024,"decl": 2511},{"src": 629,"type": 1028,"decl": 2517},{"src": 131,"type": 1033,"decl": 4053},{"src": 630,"type": 1035,"decl": 4054},{"src": 631,"type": 1036,"decl": 4089},{"src": 74,"type": 1041,"decl": 2852},{"src": 632,"type": 1042,"decl": 4916},{"src": 633,"type": 1044},{"src": 634,"type": 1045,"decl": 4933},{"src": 635,"type": 1046,"decl": 3761},{"src": 133,"type": 1047,"decl": 4081},{"src": 599,"type": 1048,"decl": 4939},{"src": 636,"type": 1049,"decl": 4133},{"src": 637,"type": 1052,"decl": 4918},{"src": 638,"type": 1054},{"src": 639,"type": 1056,"decl": 4925},{"src": 640,"type": 1057,"decl": 4120},{"src": 641,"type": 1058,"decl": 2970},{"src": 642,"type": 1062,"decl": 2971},{"src": 643,"type": 1063,"decl": 2572},{"src": 644,"type": 1068,"decl": 2962},{"src": 645,"type": 1071,"decl": 4090},{"src": 646,"type": 1072,"decl": 4927},{"src": 647,"type": 1073,"decl": 2974},{"src": 648,"type": 1075,"decl": 2585},{"src": 649,"type": 1078,"decl": 2573},{"src": 650,"type": 1080,"decl": 2614},{"src": 651,"type": 1088,"decl": 2651},{"src": 652,"type": 1094,"decl": 4919},{"src": 653,"type": 1096},{"src": 654,"type": 1097,"decl": 2973},{"src": 655,"type": 1105,"decl": 4122},{"src": 638,"type": 1112},{"src": 638,"type": 1114},{"src": 638,"type": 1116},{"src": 656,"type": 1117,"decl": 4934},{"src": 657,"type": 1118,"decl": 4928},{"src": 658,"type": 1119,"decl": 2},{"src": 659,"type": 1139,"decl": 2669},{"src": 660,"type": 1142},{"src": 661,"type": 1146,"decl": 2436},{"src": 662,"type": 1147,"decl": 4125},{"src": 663,"type": 1160,"decl": 997},{"src": 664,"type": 1162,"decl": 2785},{"src": 665,"type": 1176,"decl": 2800},{"src": 666,"type": 1179,"decl": 2803},{"src": 667,"type": 1181,"decl": 4128},{"src": 668,"type": 1183,"decl": 2825},{"src": 669,"type": 1185,"decl": 2818},{"src": 670,"type": 1187,"decl": 2817},{"src": 671,"type": 1188,"decl": 2815},{"src": 672,"type": 1191},{"src": 673,"type": 1192,"decl": 2811},{"src": 674,"type": 1194,"decl": 2827},{"src": 675,"type": 1196,"decl": 2826},{"src": 676,"type": 1197,"decl": 2467},{"src": 677,"type": 1200,"decl": 2466},{"src": 672,"type": 1208},{"src": 678,"type": 1213,"decl": 2438},{"src": 679,"type": 1220,"decl": 4930},{"src": 680,"type": 1221,"decl": 832},{"src": 681,"type": 1224,"decl": 4929},{"src": 680,"type": 1227,"decl": 855},{"src": 672,"type": 1237},{"src": 663,"type": 1244,"decl": 1463},{"src": 682,"type": 1246,"decl": 2999},{"src": 683,"type": 1248,"decl": 3004},{"src": 633,"type": 1254},{"src": 191,"type": 1255,"decl": 4076},{"src": 684,"type": 1257,"decl": 4147},{"src": 685,"type": 1265,"decl": 4139},{"src": 686,"type": 1277,"decl": 2907},{"src": 687,"type": 1280,"decl": 2906},{"src": 17,"type": 1880,"decl": 45},{"src": 294,"type": 1895,"decl": 247},{"src": 239,"type": 1896,"decl": 259},{"src": 311,"type": 1898,"decl": 275},{"src": 94,"type": 1911,"decl": 627},{"src": 93,"type": 1912,"decl": 632},{"src": 309,"type": 1913,"decl": 633},{"src": 397,"type": 1963,"decl": 1074},{"src": 416,"type": 1965,"decl": 1111},{"src": 561,"type": 1972,"decl": 1438},{"src": 294,"type": 1973,"decl": 1441},{"src": 513,"type": 1974,"decl": 1445},{"src": 514,"type": 1975,"decl": 1448},{"src": 239,"type": 1976,"decl": 1453},{"src": 311,"type": 1978,"decl": 1469},{"src": 17,"type": 1994,"decl": 1964},{"src": 397,"type": 1995,"decl": 1977},{"src": 413,"type": 2023,"decl": 2105},{"src": 288,"type": 2041,"decl": 2116},{"src": 63,"type": 2042,"decl": 2123},{"src": 67,"type": 2043,"decl": 2124},{"src": 152,"type": 2044,"decl": 2125},{"src": 136,"type": 2045,"decl": 2129},{"src": 219,"type": 2046,"decl": 2132},{"src": 287,"type": 2047,"decl": 2133},{"src": 111,"type": 2048,"decl": 2135},{"src": 231,"type": 2049,"decl": 2137},{"src": 251,"type": 2050,"decl": 2138},{"src": 315,"type": 2051,"decl": 2140},{"src": 153,"type": 2052,"decl": 2141},{"src": 164,"type": 2053,"decl": 2142},{"src": 385,"type": 2054,"decl": 2143},{"src": 246,"type": 2056,"decl": 2154},{"src": 113,"type": 2087,"decl": 2239},{"src": 523,"type": 2298,"decl": 2325},{"src": 527,"type": 2299,"decl": 2330},{"src": 529,"type": 2300,"decl": 2331},{"src": 531,"type": 2301,"decl": 2332},{"src": 532,"type": 2302,"decl": 2333},{"src": 533,"type": 2303,"decl": 2334},{"src": 528,"type": 2304,"decl": 2336},{"src": 82,"type": 2389,"decl": 2504},{"src": 409,"type": 2438,"decl": 2799},{"src": 165,"type": 2439,"decl": 2845},{"src": 256,"type": 2440,"decl": 2847},{"src": 340,"type": 2441,"decl": 2848},{"src": 77,"type": 2442,"decl": 2855},{"src": 213,"type": 2443,"decl": 2857},{"src": 228,"type": 2444,"decl": 2858},{"src": 305,"type": 2445,"decl": 2860},{"src": 576,"type": 2446,"decl": 2864},{"src": 221,"type": 2447,"decl": 2867},{"src": 238,"type": 2448,"decl": 2869},{"src": 600,"type": 2449,"decl": 2875},{"src": 593,"type": 2450,"decl": 2877},{"src": 577,"type": 2451,"decl": 2879},{"src": 310,"type": 2452,"decl": 2880},{"src": 195,"type": 2453,"decl": 2881},{"src": 230,"type": 2454,"decl": 2882},{"src": 97,"type": 2455,"decl": 2889},{"src": 595,"type": 2456,"decl": 2902},{"src": 578,"type": 2457,"decl": 2903},{"src": 563,"type": 2458,"decl": 2904},{"src": 143,"type": 2459,"decl": 2913},{"src": 328,"type": 2460,"decl": 2928},{"src": 278,"type": 2461,"decl": 2929},{"src": 202,"type": 2462,"decl": 2930},{"src": 307,"type": 2463,"decl": 2934},{"src": 250,"type": 2464,"decl": 2935},{"src": 242,"type": 2465,"decl": 2937},{"src": 313,"type": 2466,"decl": 2941},{"src": 327,"type": 2467,"decl": 2945},{"src": 335,"type": 2468,"decl": 2963},{"src": 524,"type": 2474,"decl": 3000},{"src": 351,"type": 2475,"decl": 3016},{"src": 390,"type": 2476,"decl": 3024},{"src": 268,"type": 2485,"decl": 3113},{"src": 53,"type": 2486,"decl": 3125},{"src": 169,"type": 2487,"decl": 3127},{"src": 55,"type": 2489,"decl": 3130},{"src": 144,"type": 2494,"decl": 3177},{"src": 247,"type": 2495,"decl": 3181},{"src": 92,"type": 2504,"decl": 3227},{"src": 236,"type": 2505,"decl": 3228},{"src": 232,"type": 2506,"decl": 3229},{"src": 234,"type": 2507,"decl": 3230},{"src": 233,"type": 2508,"decl": 3231},{"src": 235,"type": 2509,"decl": 3232},{"src": 237,"type": 2510,"decl": 3233},{"src": 116,"type": 2511,"decl": 3234},{"src": 34,"type": 2523,"decl": 3688},{"src": 44,"type": 2524,"decl": 3690},{"src": 189,"type": 2525,"decl": 3691},{"src": 575,"type": 2526,"decl": 3700},{"src": 193,"type": 2527,"decl": 3702},{"src": 190,"type": 2528,"decl": 3706},{"src": 389,"type": 2529,"decl": 3720},{"src": 188,"type": 2531,"decl": 3750},{"src": 54,"type": 2534,"decl": 4051},{"src": 295,"type": 2535,"decl": 4056},{"src": 229,"type": 2536,"decl": 4057},{"src": 317,"type": 2537,"decl": 4058},{"src": 72,"type": 2538,"decl": 4078},{"src": 312,"type": 2539,"decl": 4083},{"src": 240,"type": 2540,"decl": 4084},{"src": 378,"type": 2541,"decl": 4091},{"src": 76,"type": 2542,"decl": 4124},{"src": 203,"type": 2543,"decl": 4136},{"src": 61,"type": 2562,"decl": 4485},{"src": 211,"type": 2569,"decl": 4617},{"src": 3989,"type": 2571,"decl": 4650},{"src": 432,"type": 2572,"decl": 4696},{"src": 9,"type": 2573,"decl": 4706},{"src": 355,"type": 2581,"decl": 4897},{"src": 105,"type": 2620,"decl": 6899},{"src": 167,"type": 2621,"decl": 6901},{"src": 257,"type": 2649,"decl": 7188}],"errors": [{"src": 6524,"name": "DiskQuota"},{"src": 6525,"name": "FileTooBig"},{"src": 6526,"name": "InputOutput"},{"src": 6527,"name": "NoSpaceLeft"},{"src": 6528,"name": "AccessDenied"},{"src": 6529,"name": "BrokenPipe"},{"src": 6530,"name": "SystemResources"},{"src": 6531,"name": "OperationAborted"},{"src": 6532,"name": "NotOpenForWriting"},{"src": 6533,"name": "WouldBlock"},{"src": 6534,"name": "ConnectionResetByPeer"},{"src": 6535,"name": "Unexpected"},{"src": 6536,"name": "NoSpaceLeft"},{"src": 6537,"name": "UnknownFlag"},{"src": 6538,"name": "UnknownCommand"},{"src": 6539,"name": "CommandArgumentNotProvided"},{"src": 6540,"name": "CommandSubcommandNotProvided"},{"src": 6541,"name": "FlagValueNotProvided"},{"src": 6542,"name": "UnneededAttachedValue"},{"src": 6543,"name": "UnneededEmptyAttachedValue"},{"src": 6544,"name": "EmptyFlagValueNotAllowed"},{"src": 6545,"name": "ProvidedValueIsNotValidOption"},{"src": 6546,"name": "TooFewArgValue"},{"src": 6547,"name": "TooManyArgValue"},{"src": 6548,"name": "OutOfMemory"},{"src": 6549,"name": "SharingViolation"},{"src": 6550,"name": "PathAlreadyExists"},{"src": 6551,"name": "FileNotFound"},{"src": 6552,"name": "AccessDenied"},{"src": 6553,"name": "PipeBusy"},{"src": 6554,"name": "NameTooLong"},{"src": 6555,"name": "InvalidUtf8"},{"src": 6556,"name": "BadPathName"},{"src": 6557,"name": "Unexpected"},{"src": 6558,"name": "SymLinkLoop"},{"src": 6559,"name": "ProcessFdQuotaExceeded"},{"src": 6560,"name": "SystemFdQuotaExceeded"},{"src": 6561,"name": "NoDevice"},{"src": 6562,"name": "SystemResources"},{"src": 6563,"name": "FileTooBig"},{"src": 6564,"name": "IsDir"},{"src": 6565,"name": "NoSpaceLeft"},{"src": 6566,"name": "NotDir"},{"src": 6567,"name": "DeviceBusy"},{"src": 6568,"name": "FileLocksNotSupported"},{"src": 6569,"name": "FileBusy"},{"src": 6570,"name": "WouldBlock"},{"src": 6571,"name": "Unseekable"},{"src": 6572,"name": "AccessDenied"},{"src": 6573,"name": "SystemResources"},{"src": 6574,"name": "AccessDenied"},{"src": 6575,"name": "InputOutput"},{"src": 6576,"name": "SystemResources"},{"src": 6577,"name": "IsDir"},{"src": 6578,"name": "OperationAborted"},{"src": 6579,"name": "BrokenPipe"},{"src": 6580,"name": "ConnectionResetByPeer"},{"src": 6581,"name": "ConnectionTimedOut"},{"src": 6582,"name": "NotOpenForReading"},{"src": 6583,"name": "WouldBlock"},{"src": 6584,"name": "AccessDenied"},{"src": 6585,"name": "InvalidCmdLine"},{"src": 6586,"name": "Overflow"},{"src": 6587,"name": "Expected closing ]"},{"src": 6588,"name": "Found"},{"src": 6589,"name": "SharingViolation"},{"src": 6590,"name": "PathAlreadyExists"},{"src": 6591,"name": "FileNotFound"},{"src": 6592,"name": "AccessDenied"},{"src": 6593,"name": "PipeBusy"},{"src": 6594,"name": "NameTooLong"},{"src": 6595,"name": "InvalidUtf8"},{"src": 6596,"name": "BadPathName"},{"src": 6597,"name": "Unexpected"},{"src": 6598,"name": "FileSystem"},{"src": 6599,"name": "NotLink"},{"src": 6600,"name": "UnsupportedReparsePointType"},{"src": 6601,"name": "PermissionDenied"},{"src": 6602,"name": "UnknownName"},{"src": 6603,"name": "NotSupported"},{"src": 6604,"name": "InputOutput"},{"src": 6605,"name": "MemoryMappingNotSupported"},{"src": 6606,"name": "AccessDenied"},{"src": 6607,"name": "PermissionDenied"},{"src": 6608,"name": "LockedMemoryLimitExceeded"},{"src": 6609,"name": "OutOfMemory"},{"src": 6610,"name": "Overflow"},{"src": 6611,"name": "EndOfStream"},{"src": 6612,"name": "InvalidDebugInfo"},{"src": 6613,"name": "MissingDebugInfo"},{"src": 6614,"name": "EndOfFile"},{"src": 6615,"name": "StreamTooLong"},{"src": 6610,"name": "Overflow"},{"src": 6616,"name": "PermissionDenied"},{"src": 6617,"name": "LimitTooBig"},{"src": 6618,"name": "Utf8ExpectedContinuation"},{"src": 6619,"name": "Utf8OverlongEncoding"},{"src": 6620,"name": "Utf8EncodesSurrogateHalf"},{"src": 6621,"name": "Utf8CodepointTooLarge"},{"src": 6622,"name": "TruncatedInput"},{"src": 6623,"name": "Utf8InvalidStartByte"},{"src": 6624,"name": "OutOfMemory"},{"src": 6625,"name": "InvalidExe"},{"src": 6610,"name": "Overflow"},{"src": 6626,"name": "Overflow"},{"src": 6627,"name": "Overflow"},{"src": 6628,"name": "Utf8ExpectedContinuation"},{"src": 6629,"name": "Utf8OverlongEncoding"},{"src": 6630,"name": "Utf8ExpectedContinuation"},{"src": 6631,"name": "Utf8OverlongEncoding"},{"src": 6632,"name": "Overflow"},{"src": 6633,"name": "AccessDenied"},{"src": 6634,"name": "FileNotFound"},{"src": 6635,"name": "NameTooLong"},{"src": 6636,"name": "PathAlreadyExists"},{"src": 6637,"name": "BadPathName"},{"src": 6638,"name": "InvalidUtf8"},{"src": 6639,"name": "WouldBlock"},{"src": 6640,"name": "SystemResources"},{"src": 6641,"name": "FileLocksNotSupported"},{"src": 6642,"name": "Overflow"},{"src": 6643,"name": "TimedOut"},{"src": 6644,"name": "TimerUnsupported"},{"src": 6645,"name": "OutOfMemory"},{"src": 6646,"name": "InvalidCmdLine"},{"src": 6647,"name": "UnsupportedClock"},{"src": 6648,"name": "NoSpaceLeft"},{"src": 6649,"name": "TestExpectedEqual"},{"src": 6650,"name": "ArgValueNotProvided"},{"src": 6651,"name": "EmptyArgValueNotAllowed"},{"src": 6652,"name": "TestUnexpectedResult"},{"src": 6653,"name": "AccessDenied"},{"src": 6654,"name": "SymLinkLoop"},{"src": 6655,"name": "NameTooLong"},{"src": 6656,"name": "FileNotFound"},{"src": 6657,"name": "SystemResources"},{"src": 6658,"name": "NotDir"},{"src": 6659,"name": "InvalidUtf8"},{"src": 6660,"name": "BadPathName"},{"src": 6661,"name": "FileTooBig"},{"src": 6662,"name": "IsDir"},{"src": 6663,"name": "ProcessFdQuotaExceeded"},{"src": 6664,"name": "SystemFdQuotaExceeded"},{"src": 6665,"name": "NoDevice"},{"src": 6666,"name": "NoSpaceLeft"},{"src": 6667,"name": "DeviceBusy"},{"src": 6668,"name": "SharingViolation"},{"src": 6669,"name": "PipeBusy"},{"src": 6670,"name": "PathAlreadyExists"},{"src": 6671,"name": "Unseekable"},{"src": 6672,"name": "Unseekable"},{"src": 6673,"name": "PermissionDenied"},{"src": 6674,"name": "FileNotFound"},{"src": 6675,"name": "NameTooLong"},{"src": 6676,"name": "InputOutput"},{"src": 6677,"name": "SystemResources"},{"src": 6678,"name": "BadPathName"},{"src": 6679,"name": "FileBusy"},{"src": 6680,"name": "SymLinkLoop"},{"src": 6681,"name": "ReadOnlyFileSystem"},{"src": 6682,"name": "InvalidUtf8"},{"src": 6683,"name": "SystemResources"},{"src": 6684,"name": "NameTooLong"},{"src": 6685,"name": "FileNotFound"},{"src": 6686,"name": "AccessDenied"},{"src": 6687,"name": "NameTooLong"},{"src": 6688,"name": "NotDir"},{"src": 6689,"name": "SymLinkLoop"},{"src": 6690,"name": "SystemResources"},{"src": 6691,"name": "FileSystem"},{"src": 6692,"name": "BadPathName"},{"src": 6693,"name": "InvalidUtf8"}],"astNodes": [{"file": 22,"line": 718,"col": 4,"docs": " This function is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation.","fields": [6694,6695]},{"file": 0,"line": 7,"col": 0},{"file": 13,"line": 725,"col": 24,"docs": " Populates only the feature bits specified.","fields": [6696]},{"file": 13,"line": 647,"col": 20,"fields": []},{"file": 13,"line": 664,"col": 20,"docs": " Adds the specified feature but not its dependencies.","fields": [6697,6698]},{"file": 13,"line": 848,"col": 16,"fields": [6699]},{"file": 13,"line": 862,"col": 16,"fields": [6700]},{"file": 60,"line": 248,"col": 0,"fields": []},{"file": 43,"line": 270,"col": 4,"fields": [6701,6702,6703]},{"file": 57,"line": 463,"col": 4,"docs": " Given a type, reference all the declarations inside, so that the semantic analyzer sees them.","fields": [6704]},{"file": 60,"line": 348,"col": 0,"fields": []},{"file": 43,"line": 1646,"col": 0,"fields": []},{"file": 25,"line": 42,"col": 4,"docs": " Acquire the mutex. Deadlocks if the mutex is already held by the calling thread.","fields": [6705]},{"file": 50,"line": 73,"col": 4,"docs": " This returns a `File` that is configured to block with every write, in order to facilitate better debugging. This can be changed by modifying the `intended_io_mode` field.","fields": []},{"file": 15,"line": 604,"col": 8,"fields": [6706,6707]},{"file": 15,"line": 868,"col": 8,"fields": [6708]},{"file": 40,"line": 248,"col": 4,"docs": " Returns the platform ID of the callers thread. Attempts to use thread locals and avoid syscalls when possible.","fields": []},{"file": 14,"line": 26,"col": 12,"fields": [6709,6710,6711]},{"file": 53,"line": 415,"col": 4,"docs": " Causes abnormal process termination. If linking against libc, this calls the abort() libc function. Otherwise it raises SIGABRT followed by SIGKILL and finally lo","fields": []},{"file": 43,"line": 195,"col": 4,"docs": " Tries to print a stack trace to stderr, unbuffered, and ignores any error returned. TODO multithreaded awareness","fields": [6712]},{"file": 43,"line": 104,"col": 4,"docs": " Tries to print the current stack trace to stderr, unbuffered, and ignores any error returned. TODO multithreaded awareness","fields": [6713]},{"file": 25,"line": 46,"col": 4,"fields": [6714]},{"file": 61,"line": 38,"col": 4,"docs": " Wait for the event to be set by blocking the current thread. Thread-safe. No spurious wakeups. Upon return from `wait`, the only function available to be called in `StaticResetEvent` is `reset`.","fields": [6715]},{"file": 13,"line": 827,"col": 16,"fields": [6716]},{"file": 75,"line": 308,"col": 4,"fields": [6717]},{"file": 60,"line": 411,"col": 0,"fields": [6718]},{"file": 53,"line": 488,"col": 4,"docs": " Exits the program cleanly with the specified status code.","fields": [6719]},{"file": 60,"line": 438,"col": 0,"fields": [6720,6721,6722]},{"file": 13,"line": 883,"col": 16,"fields": [6723]},{"file": 53,"line": 5010,"col": 4,"docs": " Examine and change a signal action.","fields": [6724,6725,6726]},{"file": 25,"line": 79,"col": 8,"fields": [6727]},{"file": 50,"line": 59,"col": 0,"fields": []},{"file": 53,"line": 923,"col": 4,"docs": " Write to a file descriptor. Retries when interrupted by a signal. Returns the number of bytes written. If nonzero bytes were supplied, this will be nonzero. Note that a successful write() may transfer fewer than count bytes.  Such partial  writes  can occur  for  various reasons; for example, because there was insufficient space on the disk device to write all of the requested bytes, or because a blocked write() to a socket,  pipe,  or similar  was  interrupted by a signal handler after it had transferred some, but before it had transferred all of the requested bytes.  In the event of a partial write, the caller can  make another  write() call to transfer the remaining bytes.  The subsequent call will either transfer further bytes or may result in an error (e.g., if the disk is now full). For POSIX systems, if `fd` is opened in non blocking mode, the function will return error.WouldBlock when EAGAIN is received. On Windows, if the application has a global event loop enabled, I/O Completion Ports are used to perform the I/O. `error.WouldBlock` is not possible on Windows. Linux has a limit on how many bytes may be transferred in one `write` call, which is `0x7ffff000` on both 64-bit and 32-bit systems. This is due to using a signed C int as the return value, as well as stuffing the errno codes into the last `4096` values. This is noted on the `write` man page. The limit on Darwin is `0x7fffffff`, trying to read more than that returns EINVAL. The corresponding POSIX limit is `math.maxInt(isize)`.","fields": [6728,6729]},{"file": 40,"line": 695,"col": 4,"fields": []},{"file": 47,"line": 72,"col": 4,"docs": " Renders fmt string with args, calling output with slices of bytes. If `output` returns an error, the error is returned from `format` and `output` is not called again. The format string must be comptime known and may contain placeholders following this format: `{[argument][specifier]:[fill][alignment][width].[precision]}` Each word between `[` and `]` is a parameter you have to replace with something: - *argument* is either the index or the name of the argument that should be inserted - *specifier* is a type-dependent formatting option that determines how a type should formatted (see below) - *fill* is a single character which is used to pad the formatted text - *alignment* is one of the three characters `<`, `^` or `>`. they define if the text is *left*, *center*, or *right* aligned - *width* is the total width of the field in characters - *precision* specifies how many decimals a formatted number should have Note that most of the parameters are optional and may be omitted. Also you can leave out separators like `:` and `.` when all parameters after the separator are omitted. Only exception is the *fill* parameter. If *fill* is required, one has to specify *alignment* as well, as otherwise the digits after `:` is interpreted as *width*, not *fill*. The *specifier* has several options for types: - `x` and `X`: output numeric value in hexadecimal notation - `s`:   - for pointer-to-many and C pointers of u8, print as a C-string using zero-termination   - for slices of u8, print the entire slice as a string without zero-termination - `e`: output floating point value in scientific notation - `d`: output numeric value in decimal notation - `b`: output integer value in binary notation - `o`: output integer value in octal notation - `c`: output integer as an ASCII character. Integer type must have 8 bits at max. - `u`: output integer as an UTF-8 sequence. Integer type must have 21 bits at max. - `*`: output the address of the value instead of the value itself. - `any`: output a value of any type using its default format If a formatted user type contains a function of the type ``` pub fn format(value: ?, comptime fmt: []const u8, options: std.fmt.FormatOptions, writer: anytype) !void ``` with `?` being the type formatted, this function will be called instead of the default implementation. This allows user types to be formatted in a logical manner instead of dumping all fields of the type. A user type may be a `struct`, `vector`, `union` or `enum` type. To print literal curly braces, escape them by writing them twice, e.g. `{{` or `}}`.","fields": [6730,6731,6732]},{"file": 14,"line": 19,"col": 12,"fields": [6733,6734]},{"file": 43,"line": 223,"col": 4,"docs": " This function invokes undefined behavior when `ok` is `false`. In Debug and ReleaseSafe modes, calls to this function are always generated, and the `unreachable` statement triggers a panic. In ReleaseFast and ReleaseSmall modes, calls to this function are optimized away, and in fact the optimizer is able to use the assertion in its heuristics. Inside a test block, it is best to use the `std.testing` module rather than this function, because this function may not detect a test failure in ReleaseFast and ReleaseSmall mode. Outside of a test block, this assert function is the correct function to use.","fields": [6735]},{"file": 47,"line": 348,"col": 4,"fields": [6736]},{"file": 47,"line": 338,"col": 4,"fields": [6737,6738]},{"file": 47,"line": 297,"col": 4,"fields": [6739]},{"file": 47,"line": 316,"col": 4,"fields": [6740,6741]},{"file": 47,"line": 329,"col": 4,"fields": [6742]},{"file": 47,"line": 364,"col": 4,"fields": [6743,6744]},{"file": 47,"line": 381,"col": 4,"fields": [6745,6746]},{"file": 47,"line": 444,"col": 4,"fields": [6747,6748,6749,6750,6751]},{"file": 47,"line": 377,"col": 4,"fields": [6752]},{"file": 53,"line": 447,"col": 4,"fields": [6753]},{"file": 16,"line": 24,"col": 8,"fields": [6754,6755]},{"file": 16,"line": 39,"col": 8,"fields": [6756,6757,6758]},{"file": 43,"line": 76,"col": 4,"fields": []},{"file": 43,"line": 692,"col": 4,"docs": " TODO resources https://github.com/ziglang/zig/issues/4353","fields": [6759]},{"file": 43,"line": 1592,"col": 0,"fields": []},{"file": 43,"line": 85,"col": 4,"fields": []},{"file": 43,"line": 339,"col": 4,"fields": [6760,6761,6762,6763,6764]},{"file": 51,"line": 338,"col": 4,"docs": " Returns the smaller number. When one parameter's type's full range fits in the other, the return type is the smaller type.","fields": [6765,6766]},{"file": 43,"line": 606,"col": 4,"docs": " TODO resources https://github.com/ziglang/zig/issues/4353","fields": [6767,6768,6769,6770]},{"file": 43,"line": 1070,"col": 8,"fields": [6771,6772]},{"file": 13,"line": 1422,"col": 8,"fields": [6773]},{"file": 13,"line": 59,"col": 16,"fields": [6774]},{"file": 43,"line": 1220,"col": 4,"fields": [6775,6776]},{"file": 43,"line": 1231,"col": 12,"fields": [6777,6778,6779]},{"file": 53,"line": 4792,"col": 4,"fields": [6780,6781,6782]},{"file": 16,"line": 574,"col": 12,"docs": " Finds the value associated with a key in the map","fields": [6783,6784]},{"file": 9,"line": 168,"col": 4,"docs": " Returns a pointer to undefined memory. Call `destroy` with the result to free the memory.","fields": [6785,6786]},{"file": 48,"line": 2242,"col": 4,"docs": " Returns a handle to the current working directory. It is not opened with iteration capability. Closing the returned `Dir` is checked illegal behavior. Iterating over the result is illegal behavior. On POSIX targets, this function is comptime-callable.","fields": []},{"file": 48,"line": 948,"col": 8,"docs": " Opens a file for reading or writing, without attempting to create a new file. To create a new file, see `createFile`. Call `File.close` to release the resource. Asserts that the path parameter has no null bytes.","fields": [6787,6788,6789]},{"file": 48,"line": 2482,"col": 4,"fields": [6790]},{"file": 9,"line": 176,"col": 4,"docs": " `ptr` should be the return value of `create`, or otherwise have the same address and alignment property.","fields": [6791,6792]},{"file": 43,"line": 785,"col": 4,"docs": " This takes ownership of elf_file: users of this function should not close it themselves, even on error. TODO resources https://github.com/ziglang/zig/issues/4353 TODO it's weird to take ownership even on error, rework this code.","fields": [6793,6794]},{"file": 43,"line": 1035,"col": 0,"docs": " `file` is expected to have been opened with .intended_io_mode == .blocking. Takes ownership of file, even on error. TODO it's weird to take ownership even on error, rework this code.","fields": [6795]},{"file": 15,"line": 257,"col": 8,"docs": " TODO: integrate with async I/O","fields": [6796]},{"file": 15,"line": 181,"col": 8,"docs": " Upon success, the stream is in an uninitialized state. To continue using it, you must use the open() function.","fields": [6797]},{"file": 51,"line": 997,"col": 4,"docs": " Cast an integer to a different integer type. If the value doesn't fit, return an error. TODO make this an optional not an error.","fields": [6798,6799]},{"file": 53,"line": 3964,"col": 4,"docs": " Map files or devices into memory. `length` does not need to be aligned. Use of a mapped region can result in these signals: * SIGSEGV - Attempted write into a region mapped as read-only. * SIGBUS - Attempted  access to a portion of the buffer that does not correspond to the file","fields": [6800,6801,6802,6803,6804,6805]},{"file": 36,"line": 553,"col": 4,"docs": " Compares two slices and returns whether they are equal.","fields": [6806,6807,6808]},{"file": 13,"line": 1035,"col": 16,"fields": [6809]},{"file": 52,"line": 293,"col": 4,"docs": " Takes a Slice or Many Pointer and returns it with the Type modified to have the given sentinel value. This function assumes the caller has verified the memory contains the sentinel value.","fields": [6810,6811]},{"file": 36,"line": 644,"col": 4,"docs": " Takes a pointer to an array, a sentinel-terminated pointer, or a slice, and returns a slice. If there is a sentinel on the input type, there will be a sentinel on the output type. The constness of the output type matches the constness of the input type. When there is both a sentinel and an array length or slice length, the length value is used instead of the sentinel.","fields": [6812]},{"file": 43,"line": 775,"col": 0,"fields": [6813,6814,6815]},{"file": 44,"line": 1094,"col": 4,"docs": " Initialize DWARF info. The caller has the responsibility to initialize most the DwarfInfo fields before calling. These fields can be left undefined: * abbrev_table_list * compile_unit_list","fields": [6816,6817]},{"file": 17,"line": 49,"col": 12,"docs": " Deinitialize with `deinit` or use `toOwnedSlice`.","fields": [6818]},{"file": 44,"line": 622,"col": 4,"fields": [6819]},{"file": 19,"line": 115,"col": 4,"fields": [6820]},{"file": 19,"line": 46,"col": 12,"fields": [6821,6822]},{"file": 19,"line": 34,"col": 12,"fields": [6823]},{"file": 19,"line": 77,"col": 12,"fields": [6824,6825]},{"file": 19,"line": 81,"col": 12,"fields": [6826,6827]},{"file": 19,"line": 101,"col": 12,"fields": [6828]},{"file": 19,"line": 97,"col": 12,"fields": [6829]},{"file": 19,"line": 42,"col": 12,"fields": [6830]},{"file": 21,"line": 26,"col": 12,"fields": [6831]},{"file": 21,"line": 18,"col": 12,"fields": [6832,6833]},{"file": 44,"line": 455,"col": 0,"fields": [6834,6835,6836]},{"file": 20,"line": 271,"col": 12,"fields": [6837,6838,6839]},{"file": 20,"line": 243,"col": 12,"docs": " Reads exactly `num_bytes` bytes and returns as an array. `num_bytes` must be comptime-known","fields": [6840,6841]},{"file": 20,"line": 42,"col": 12,"docs": " If the number read would be smaller than `buf.len`, `error.EndOfStream` is returned instead.","fields": [6842,6843]},{"file": 20,"line": 31,"col": 12,"docs": " Returns the number of bytes read. If the number read is smaller than `buffer.len`, it means the stream reached the end. Reaching the end of a stream is not an error condition.","fields": [6844,6845]},{"file": 36,"line": 1322,"col": 4,"docs": " Reads an integer from memory with bit count specified by T. The bit count of T must be evenly divisible by 8. This function cannot fail and cannot cause undefined behavior.","fields": [6846,6847,6848]},{"file": 20,"line": 229,"col": 12,"docs": " Reads 1 byte from the stream or returns `error.EndOfStream`.","fields": [6849]},{"file": 20,"line": 24,"col": 12,"docs": " Returns the number of bytes read. It may be less than buffer.len. If the number of bytes read is 0, it means end of stream. End of stream is not an error condition.","fields": [6850,6851]},{"file": 21,"line": 30,"col": 12,"fields": [6852]},{"file": 44,"line": 841,"col": 4,"docs": " Gets an already existing AbbrevTable given the abbrev_offset, or if not found, seeks in the stream and parses it.","fields": [6853,6854]},{"file": 17,"line": 159,"col": 12,"docs": " Extend the list by 1 element. Allocates more memory as necessary.","fields": [6855,6856]},{"file": 44,"line": 854,"col": 4,"fields": [6857,6858]},{"file": 44,"line": 606,"col": 8,"fields": [6859]},{"file": 72,"line": 5,"col": 4,"docs": " Read a single unsigned LEB128 value from the given reader as type T, or error.Overflow if the value cannot fit.","fields": [6860,6861]},{"file": 17,"line": 67,"col": 12,"docs": " Release all allocated memory.","fields": [6862]},{"file": 17,"line": 346,"col": 12,"docs": " Increase length by 1, returning pointer to the new item. The returned pointer becomes invalid when the list resized.","fields": [6863]},{"file": 17,"line": 299,"col": 12,"docs": " Modify the array so that it can hold at least `new_capacity` items. Invalidates pointers if additional memory is needed.","fields": [6864,6865]},{"file": 17,"line": 319,"col": 12,"docs": " Modify the array so that it can hold at least `new_capacity` items. Like `ensureTotalCapacity`, but the resulting capacity is much more likely (but not guaranteed) to be equal to `new_capacity`. Invalidates pointers if additional memory is needed.","fields": [6866,6867]},{"file": 17,"line": 404,"col": 12,"docs": " Returns a slice of all the items plus the extra capacity, whose memory contents are `undefined`.","fields": [6868]},{"file": 9,"line": 349,"col": 4,"fields": [6869,6870,6871]},{"file": 17,"line": 356,"col": 12,"docs": " Increase length by 1, returning pointer to the new item. Asserts that there is already space for the new item without allocating more. The returned pointer becomes invalid when the list is resized. **Does not** invalidate element pointers.","fields": [6872]},{"file": 44,"line": 885,"col": 4,"fields": [6873,6874,6875,6876]},{"file": 44,"line": 586,"col": 0,"fields": [6877,6878]},{"file": 17,"line": 253,"col": 12,"docs": " Adjust the list's length to `new_len`. Does not initialize added items if any.","fields": [6879,6880]},{"file": 44,"line": 537,"col": 0,"fields": [6881,6882,6883,6884,6885]},{"file": 44,"line": 298,"col": 4,"fields": [6886,6887]},{"file": 44,"line": 338,"col": 8,"fields": [6888,6889,6890]},{"file": 44,"line": 1075,"col": 4,"fields": [6891,6892]},{"file": 44,"line": 330,"col": 4,"fields": [6893,6894]},{"file": 44,"line": 305,"col": 4,"fields": [6895,6896]},{"file": 44,"line": 282,"col": 4,"fields": [6897]},{"file": 44,"line": 726,"col": 4,"fields": [6898]},{"file": 16,"line": 535,"col": 12,"docs": " Inserts a key-value pair into the hash map, asserting that no previous entry with the same key is already present","fields": [6899,6900,6901]},{"file": 16,"line": 976,"col": 12,"fields": [6902,6903,6904,6905,6906]},{"file": 16,"line": 1372,"col": 12,"fields": [6907,6908,6909]},{"file": 16,"line": 1415,"col": 8,"fields": [6910,6911,6912,6913]},{"file": 16,"line": 1451,"col": 8,"fields": [6914,6915,6916,6917]},{"file": 16,"line": 873,"col": 8,"fields": [6918]},{"file": 16,"line": 1409,"col": 8,"fields": [6919]},{"file": 51,"line": 407,"col": 4,"docs": " Returns the maximum of two numbers. Return type is the one with the larger range.","fields": [6920,6921]},{"file": 16,"line": 928,"col": 12,"fields": [6922]},{"file": 51,"line": 1030,"col": 4,"fields": [6923]},{"file": 16,"line": 1482,"col": 8,"fields": [6924,6925,6926]},{"file": 36,"line": 2858,"col": 4,"docs": " Round an address up to the nearest aligned address The alignment must be a power of 2 and greater than 0.","fields": [6927,6928]},{"file": 9,"line": 250,"col": 4,"fields": [6929,6930,6931,6932]},{"file": 16,"line": 868,"col": 12,"fields": [6933,6934]},{"file": 16,"line": 1403,"col": 8,"fields": [6935]},{"file": 16,"line": 920,"col": 8,"fields": [6936]},{"file": 16,"line": 924,"col": 8,"fields": [6937]},{"file": 16,"line": 755,"col": 16,"fields": [6938]},{"file": 16,"line": 1003,"col": 12,"fields": [6939,6940,6941,6942]},{"file": 36,"line": 2171,"col": 4,"fields": [6943,6944,6945]},{"file": 43,"line": 636,"col": 0,"fields": [6946,6947,6948,6949,6950,6951,6952]},{"file": 43,"line": 1559,"col": 12,"fields": [6953,6954]},{"file": 43,"line": 1568,"col": 0,"fields": [6955,6956]},{"file": 44,"line": 793,"col": 8,"fields": [6957,6958]},{"file": 44,"line": 313,"col": 4,"fields": [6959,6960]},{"file": 44,"line": 610,"col": 8,"fields": [6961,6962]},{"file": 44,"line": 905,"col": 8,"fields": [6963,6964,6965]},{"file": 20,"line": 237,"col": 12,"docs": " Same as `readByte` except the returned byte is signed.","fields": [6966]},{"file": 9,"line": 192,"col": 4,"docs": " Allocates an array of `n` items of type `T` and sets all the items to `undefined`. Depending on the Allocator implementation, it may be required to call `free` once the memory is no longer needed, to avoid a resource leak. If the `Allocator` implementation is unknown, then correct code will call `free` when done. For allocating a single item, see `create`.","fields": [6967,6968,6969]},{"file": 9,"line": 483,"col": 4,"docs": " Free an array allocated with `alloc`. To free a single item, see `destroy`.","fields": [6970,6971]},{"file": 20,"line": 127,"col": 12,"docs": " Allocates enough memory to read until `delimiter`. If the allocated memory would be greater than `max_size`, returns `error.StreamTooLong`. Caller owns returned memory. If this function returns an error, the contents from the stream read so far are lost.","fields": [6972,6973,6974,6975]},{"file": 20,"line": 101,"col": 12,"docs": " Replaces the `std.ArrayList` contents by reading from the stream until `delimiter` is found. Does not include the delimiter in the result. If the `std.ArrayList` length would exceed `max_size`, `error.StreamTooLong` is returned and the `std.ArrayList` is populated with `max_size` bytes from the stream.","fields": [6976,6977,6978,6979]},{"file": 17,"line": 278,"col": 12,"docs": " Reduce length to `new_len`. Invalidates pointers for the elements `items[new_len..]`.","fields": [6980,6981]},{"file": 17,"line": 96,"col": 12,"docs": " The caller owns the returned memory. Empties this ArrayList.","fields": [6982]},{"file": 44,"line": 398,"col": 8,"fields": [6983,6984,6985,6986]},{"file": 21,"line": 22,"col": 12,"fields": [6987,6988]},{"file": 44,"line": 422,"col": 8,"fields": [6989]},{"file": 73,"line": 107,"col": 4,"docs": " Naively combines a series of paths with the native path seperator. Allocates memory for the result, which must be freed by the caller.","fields": [6990,6991]},{"file": 73,"line": 43,"col": 0,"docs": " This is different from mem.join in that the separator will not be repeated if it is found at the end or beginning of a pair of consecutive paths.","fields": [6992,6993,6994,6995,6996]},{"file": 73,"line": 33,"col": 4,"docs": " Returns if the given byte is a valid path separator","fields": [6997]},{"file": 9,"line": 495,"col": 4,"docs": " Copies `m` to newly allocated memory. Caller owns the memory.","fields": [6998,6999,7000]},{"file": 36,"line": 213,"col": 4,"docs": " Copy all of source into dest at position 0. dest.len must be >= source.len. If the slices overlap, dest.ptr must be <= src.ptr.","fields": [7001,7002,7003]},{"file": 44,"line": 379,"col": 8,"fields": [7004]},{"file": 72,"line": 54,"col": 4,"docs": " Read a single signed LEB128 value from the given reader as type T, or error.Overflow if the value cannot fit.","fields": [7005,7006]},{"file": 43,"line": 45,"col": 8,"fields": [7007]},{"file": 43,"line": 448,"col": 4,"fields": [7008,7009,7010,7011]},{"file": 43,"line": 366,"col": 8,"fields": [7012,7013]},{"file": 43,"line": 404,"col": 8,"fields": [7014]},{"file": 25,"line": 86,"col": 8,"fields": [7015]},{"file": 61,"line": 140,"col": 8,"fields": [7016]},{"file": 75,"line": 187,"col": 0,"fields": [7017]},{"file": 75,"line": 275,"col": 4,"docs": " Initializes all the fields of the static TLS area and returns the computed architecture-specific value of the thread-pointer register","fields": [7018]},{"file": 75,"line": 110,"col": 4,"fields": [7019]},{"file": 53,"line": 6358,"col": 4,"fields": [7020,7021]},{"file": 66,"line": 777,"col": 4,"fields": [7022]},{"file": 43,"line": 1618,"col": 4,"fields": []},{"file": 60,"line": 472,"col": 0,"fields": []},{"file": 66,"line": 189,"col": 4,"docs": " Get the errno from a syscall return value, or 0 for no error.","fields": [7023]},{"file": 66,"line": 1056,"col": 4,"fields": [7024,7025,7026]},{"file": 25,"line": 94,"col": 4,"fields": [7027,7028]},{"file": 66,"line": 590,"col": 4,"fields": [7029,7030,7031]},{"file": 53,"line": 4982,"col": 4,"docs": " Call this when you made a syscall or something that sets errno and you get an unexpected error.","fields": [7032]},{"file": 66,"line": 1048,"col": 4,"fields": []},{"file": 14,"line": 15,"col": 12,"fields": [7033,7034]},{"file": 47,"line": 683,"col": 0,"fields": [7035,7036,7037,7038]},{"file": 47,"line": 704,"col": 4,"fields": [7039,7040,7041,7042]},{"file": 47,"line": 1361,"col": 4,"fields": [7043,7044,7045,7046,7047]},{"file": 51,"line": 938,"col": 4,"docs": " Returns the absolute value of the integer parameter. Result is an unsigned integer.","fields": [7048]},{"file": 47,"line": 1822,"col": 4,"fields": [7049,7050]},{"file": 47,"line": 981,"col": 4,"fields": [7051,7052,7053]},{"file": 59,"line": 162,"col": 4,"docs": " Returns the length of a supplied UTF-8 string literal in terms of unicode codepoints. Asserts that the data is valid UTF-8.","fields": [7054]},{"file": 36,"line": 1268,"col": 4,"docs": " Reads an integer from memory with bit count specified by T. The bit count of T must be evenly divisible by 8. This function cannot fail and cannot cause undefined behavior. Assumes the endianness of memory is native. This means the function can simply pointer cast memory.","fields": [7055,7056]},{"file": 59,"line": 18,"col": 4,"docs": " Given the first byte of a UTF-8 codepoint, returns a number 1-4 indicating the total length of the codepoint in bytes. If this byte does not match the form of a UTF-8 start byte, returns Utf8InvalidStartByte.","fields": [7057]},{"file": 59,"line": 70,"col": 4,"docs": " Decodes the UTF-8 codepoint encoded in the given slice of bytes. bytes.len must be equal to utf8ByteSequenceLength(bytes[0]) catch unreachable. If you already know the length at comptime, you can call one of utf8Decode2,utf8Decode3,utf8Decode4 directly instead of this function.","fields": [7058]},{"file": 14,"line": 35,"col": 12,"fields": [7059,7060,7061]},{"file": 66,"line": 1052,"col": 4,"fields": [7062,7063,7064]},{"file": 66,"line": 790,"col": 4,"fields": [7065,7066]},{"file": 63,"line": 168,"col": 8,"fields": [7067,7068]},{"file": 36,"line": 2502,"col": 4,"docs": " Given a pointer to a single item, returns a slice of the underlying bytes, preserving pointer attributes.","fields": [7069]},{"file": 52,"line": 675,"col": 4,"docs": " Compares two of any type for equality. Containers are compared on a field-by-field basis, where possible. Pointers are not followed.","fields": [7070,7071]},{"file": 43,"line": 1058,"col": 8,"fields": [7072]},{"file": 62,"line": 31,"col": 8,"fields": [7073]},{"file": 13,"line": 1418,"col": 8,"fields": [7074]},{"file": 31,"line": 259,"col": 4,"fields": [7075,7076,7077,7078,7079]},{"file": 31,"line": 356,"col": 4,"fields": [7080,7081,7082,7083,7084,7085]},{"file": 31,"line": 408,"col": 4,"fields": [7086,7087,7088,7089]},{"file": 62,"line": 25,"col": 8,"fields": [7090]},{"file": 55,"line": 176,"col": 4,"fields": [7091]},{"file": 15,"line": 198,"col": 8,"docs": " Test whether ANSI escape codes will be treated as such.","fields": [7092]},{"file": 36,"line": 730,"col": 4,"docs": " Takes an array, a pointer to an array, a sentinel-terminated pointer, or a slice and iterates searching for the first occurrence of `end`, returning the scanned slice. If `end` is not found, the full length of the array/slice/sentinel terminated pointer is returned. If the pointer type is sentinel terminated and `end` matches that terminator, the resulting slice is also sentinel terminated. Pointer properties such as mutability and alignment are preserved. C pointers are assumed to be non-null.","fields": [7093,7094]},{"file": 55,"line": 719,"col": 4,"fields": []},{"file": 74,"line": 61,"col": 4,"fields": [7095]},{"file": 74,"line": 34,"col": 12,"fields": [7096]},{"file": 74,"line": 38,"col": 12,"fields": [7097]},{"file": 16,"line": 1231,"col": 12,"fields": [7098,7099,7100]},{"file": 9,"line": 273,"col": 4,"fields": [7101,7102,7103,7104,7105,7106]},{"file": 53,"line": 4957,"col": 4,"docs": " Used to convert a slice to a null terminated slice on the stack. TODO https://github.com/ziglang/zig/issues/287","fields": [7107]},{"file": 36,"line": 967,"col": 4,"docs": " Linear search for the index of a scalar value inside a slice.","fields": [7108,7109,7110]},{"file": 48,"line": 986,"col": 8,"docs": " Same as `openFile` but the path parameter is null-terminated.","fields": [7111,7112,7113]},{"file": 48,"line": 2294,"col": 4,"docs": " Same as `openFileAbsolute` but the path parameter is null-terminated.","fields": [7114,7115]},{"file": 9,"line": 162,"col": 4,"docs": " This function is not intended to be called except from within the implementation of an Allocator","fields": [7116,7117,7118,7119]},{"file": 15,"line": 299,"col": 8,"docs": " TODO: integrate with async I/O","fields": [7120]},{"file": 53,"line": 236,"col": 4,"docs": " Closes the file descriptor. This function is not capable of returning any indication of failure. An application which wants to ensure writes have succeeded before closing must call `fsync` before `close`. Note: The Zig standard library does not support POSIX thread cancellation.","fields": [7121]},{"file": 66,"line": 376,"col": 4,"fields": [7122,7123,7124,7125,7126,7127]},{"file": 36,"line": 861,"col": 4,"docs": " Takes a pointer to an array, an array, a vector, a sentinel-terminated pointer, a slice or a tuple, and returns the length. In the case of a sentinel-terminated array, it uses the array length. For C pointers it assumes it is a pointer-to-many with a 0 sentinel.","fields": [7128]},{"file": 51,"line": 459,"col": 4,"docs": " Returns the sum of a and b. Returns an error on overflow.","fields": [7129,7130,7131]},{"file": 36,"line": 1276,"col": 4,"docs": " Reads an integer from memory with bit count specified by T. The bit count of T must be evenly divisible by 8. This function cannot fail and cannot cause undefined behavior. Assumes the endianness of memory is foreign, so it must byte-swap.","fields": [7132,7133]},{"file": 9,"line": 370,"col": 4,"fields": [7134,7135,7136,7137,7138,7139]},{"file": 44,"line": 476,"col": 0,"fields": [7140,7141,7142]},{"file": 44,"line": 489,"col": 0,"fields": [7143,7144,7145,7146]},{"file": 44,"line": 483,"col": 0,"fields": [7147,7148,7149]},{"file": 44,"line": 494,"col": 0,"fields": [7150,7151,7152,7153,7154]},{"file": 44,"line": 468,"col": 0,"fields": [7155,7156,7157]},{"file": 44,"line": 522,"col": 0,"fields": [7158,7159,7160,7161]},{"file": 36,"line": 981,"col": 4,"fields": [7162,7163,7164,7165]},{"file": 16,"line": 1375,"col": 12,"fields": [7166,7167,7168]},{"file": 51,"line": 1077,"col": 4,"docs": " Returns the next power of two (if the value is not already a power of two). Only unsigned integers can be used. Zero is not an allowed input. If the value doesn't fit, returns an error.","fields": [7169,7170]},{"file": 16,"line": 916,"col": 8,"fields": [7171]},{"file": 36,"line": 2864,"col": 4,"docs": " Round an address up to the nearest aligned address The alignment must be a power of 2 and greater than 0.","fields": [7172,7173,7174]},{"file": 16,"line": 1515,"col": 8,"fields": [7175,7176]},{"file": 16,"line": 767,"col": 16,"fields": [7177]},{"file": 16,"line": 773,"col": 16,"fields": [7178,7179]},{"file": 43,"line": 505,"col": 12,"fields": [7180,7181,7182]},{"file": 43,"line": 982,"col": 0,"fields": [7183,7184]},{"file": 15,"line": 467,"col": 8,"fields": [7185,7186]},{"file": 14,"line": 30,"col": 12,"fields": [7187,7188]},{"file": 36,"line": 2761,"col": 4,"docs": " Given a slice, returns a slice of the underlying bytes, preserving pointer attributes.","fields": [7189]},{"file": 9,"line": 427,"col": 4,"docs": " Prefer calling realloc to shrink if you can tolerate failure, such as in an ArrayList data structure with a storage capacity. Shrink always succeeds, and `new_n` must be <= `old_mem.len`. Returned slice has same alignment as old_mem. Shrinking to 0 is the same as calling `free`.","fields": [7190,7191,7192]},{"file": 43,"line": 34,"col": 8,"fields": [7193]},{"file": 43,"line": 417,"col": 4,"fields": [7194]},{"file": 25,"line": 145,"col": 4,"fields": [7195]},{"file": 61,"line": 147,"col": 8,"fields": [7196,7197]},{"file": 36,"line": 240,"col": 4,"docs": " Sets all elements of `dest` to `value`.","fields": [7198,7199,7200]},{"file": 75,"line": 269,"col": 0,"fields": [7201,7202]},{"file": 30,"line": 22,"col": 4,"fields": [7203,7204]},{"file": 66,"line": 1533,"col": 4,"fields": [7205,7206]},{"file": 43,"line": 1627,"col": 4,"docs": " Attaches a global SIGSEGV handler which calls @panic(\"segmentation fault\");","fields": []},{"file": 60,"line": 544,"col": 4,"fields": []},{"file": 30,"line": 118,"col": 4,"fields": []},{"file": 30,"line": 110,"col": 4,"fields": []},{"file": 30,"line": 52,"col": 4,"fields": [7207,7208,7209,7210,7211]},{"file": 41,"line": 41,"col": 4,"docs": " Signals to the processor that the caller is inside a busy-wait spin-loop.","fields": []},{"file": 66,"line": 286,"col": 4,"fields": [7212,7213,7214,7215]},{"file": 30,"line": 41,"col": 4,"fields": [7216,7217,7218,7219]},{"file": 43,"line": 62,"col": 4,"docs": " Print to stderr, unbuffered, and silently returning on failure. Intended for use in \"printf debugging.\" Use `std.log` functions for proper logging.","fields": [7220,7221]},{"file": 30,"line": 14,"col": 4,"fields": [7222]},{"file": 59,"line": 84,"col": 4,"fields": [7223]},{"file": 59,"line": 103,"col": 4,"fields": [7224]},{"file": 59,"line": 127,"col": 4,"fields": [7225]},{"file": 30,"line": 31,"col": 4,"fields": [7226,7227,7228]},{"file": 63,"line": 119,"col": 8,"fields": [7229,7230]},{"file": 16,"line": 392,"col": 12,"docs": " Create a managed hash map with an empty context. If the context is not zero-sized, you must use initContext(allocator, ctx) instead.","fields": [7231]},{"file": 62,"line": 17,"col": 12,"fields": [7232,7233]},{"file": 36,"line": 2934,"col": 4,"docs": " Given an address and an alignment, return true if the address is a multiple of the alignment The alignment must be a power of 2 and greater than 0.","fields": [7234,7235]},{"file": 36,"line": 2450,"col": 4,"docs": " Aligns a given pointer value to a specified alignment factor. Returns an aligned pointer or null if one of the following conditions is met: - The aligned pointer would not fit the address space, - The delta required to align the pointer is not a multiple of the pointee's   type.","fields": [7236,7237]},{"file": 53,"line": 4008,"col": 4,"docs": " Deletes the mappings for the specified address range, causing further references to addresses within the range to generate invalid memory references. Note that while POSIX allows unmapping a region in the middle of an existing mapping, Zig's munmap function does not, for two reasons: * It violates the Zig principle that resource deallocation must succeed. * The Windows function, VirtualFree, has this restriction.","fields": [7238]},{"file": 31,"line": 243,"col": 4,"docs": " Verifies that the adjusted length will still map to the full length","fields": [7239,7240,7241]},{"file": 62,"line": 60,"col": 4,"fields": [7242,7243,7244,7245,7246]},{"file": 62,"line": 88,"col": 4,"fields": [7247,7248,7249,7250,7251,7252]},{"file": 62,"line": 111,"col": 4,"fields": [7253,7254,7255,7256]},{"file": 62,"line": 45,"col": 4,"fields": [7257,7258,7259]},{"file": 9,"line": 152,"col": 4,"docs": " This function is not intended to be called except from within the implementation of an Allocator","fields": [7260,7261,7262,7263,7264]},{"file": 23,"line": 73,"col": 12,"docs": " Insert a new node at the head. Arguments:     new_node: Pointer to the new node to insert.","fields": [7265,7266]},{"file": 9,"line": 316,"col": 4,"docs": " Increases or decreases the size of an allocation. It is guaranteed to not move the pointer.","fields": [7267,7268,7269]},{"file": 9,"line": 54,"col": 4,"fields": [7270,7271,7272,7273]},{"file": 53,"line": 1652,"col": 4,"docs": " Get an environment variable. See also `getenvZ`.","fields": [7274]},{"file": 15,"line": 193,"col": 8,"docs": " Test whether the file refers to a terminal. See also `supportsAnsiEscapeCodes`.","fields": [7275]},{"file": 53,"line": 1699,"col": 4,"docs": " Get an environment variable with a null-terminated name. See also `getenv`.","fields": [7276]},{"file": 66,"line": 140,"col": 4,"docs": " See `std.elf` for the constants.","fields": [7277]},{"file": 74,"line": 57,"col": 4,"docs": " TODO make it possible to reference this same external symbol 2x so we don't need this helper function.","fields": []},{"file": 16,"line": 1234,"col": 12,"fields": [7278,7279,7280]},{"file": 51,"line": 453,"col": 4,"docs": " Returns the product of a and b. Returns an error on overflow.","fields": [7281,7282,7283]},{"file": 53,"line": 1443,"col": 4,"docs": " Open and possibly create a file. Keeps trying if it gets interrupted. `file_path` is relative to the open directory handle `dir_fd`. See also `openat`.","fields": [7284,7285,7286,7287]},{"file": 53,"line": 4578,"col": 4,"docs": " Depending on the operating system `flock` may or may not interact with `fcntl` locks made by other processes.","fields": [7288,7289]},{"file": 73,"line": 211,"col": 4,"fields": [7290]},{"file": 53,"line": 3683,"col": 4,"docs": " Return information about a file descriptor.","fields": [7291]},{"file": 30,"line": 697,"col": 8,"fields": [7292]},{"file": 30,"line": 701,"col": 8,"fields": [7293]},{"file": 30,"line": 705,"col": 8,"fields": [7294]},{"file": 66,"line": 737,"col": 4,"fields": [7295]},{"file": 30,"line": 77,"col": 4,"fields": [7296,7297,7298,7299,7300,7301,7302]},{"file": 36,"line": 917,"col": 4,"fields": [7303,7304,7305]},{"file": 9,"line": 713,"col": 4,"docs": " Call `vtable.resize`, but caller guarantees that `new_len` <= `buf.len` meaning than a `null` return value should be impossible. This function allows a runtime `buf_align` value. Callers should generally prefer to call `shrink`.","fields": [7306,7307,7308,7309,7310,7311]},{"file": 36,"line": 2673,"col": 4,"docs": " Given a slice of bytes, returns a slice of the specified type backed by those bytes, preserving pointer attributes.","fields": [7312,7313]},{"file": 9,"line": 157,"col": 4,"docs": " This function is not intended to be called except from within the implementation of an Allocator","fields": [7314,7315,7316,7317,7318,7319]},{"file": 20,"line": 276,"col": 12,"fields": [7320,7321,7322,7323]},{"file": 36,"line": 1245,"col": 4,"docs": " Reads an integer from memory with size equal to bytes.len. T specifies the return type, which must be large enough to store the result.","fields": [7324,7325,7326]},{"file": 16,"line": 1102,"col": 8,"docs": " Find the index containing the data for the given key. Whether this function returns null is almost always branched on after this function returns, and this function returns null/not null from separate code paths.  We want the optimizer to remove that branch and instead directly fuse the basic blocks after the branch to the basic blocks from this function.  To encourage that, this function is marked as inline.","fields": [7327,7328,7329]},{"file": 51,"line": 1065,"col": 4,"docs": " Returns the next power of two (if the value is not already a power of two). Only unsigned integers can be used. Zero is not an allowed input. Result is a type with 1 more bit than the input type.","fields": [7330,7331]},{"file": 36,"line": 2911,"col": 4,"docs": " Round an address up to the previous aligned address The alignment must be a power of 2 and greater than 0.","fields": [7332,7333,7334]},{"file": 53,"line": 542,"col": 4,"docs": " Returns the number of bytes that were read, which can be less than buf.len. If 0 bytes were read, that means EOF. If `fd` is opened in non blocking mode, the function will return error.WouldBlock when EAGAIN is received. Linux has a limit on how many bytes may be transferred in one `read` call, which is `0x7ffff000` on both 64-bit and 32-bit systems. This is due to using a signed C int as the return value, as well as stuffing the errno codes into the last `4096` values. This is noted on the `read` man page. The limit on Darwin is `0x7fffffff`, trying to read more than that returns EINVAL. The corresponding POSIX limit is `math.maxInt(isize)`.","fields": [7335,7336]},{"file": 9,"line": 450,"col": 4,"docs": " This is the same as `alignedShrink`, except caller may additionally pass the return address of the first stack frame, which may be relevant for allocators which collect stack traces.","fields": [7337,7338,7339,7340,7341]},{"file": 13,"line": 855,"col": 16,"fields": [7342]},{"file": 51,"line": 466,"col": 4,"docs": " Returns a - b, or an error on overflow.","fields": [7343,7344,7345]},{"file": 66,"line": 290,"col": 4,"fields": [7346,7347,7348]},{"file": 61,"line": 201,"col": 8,"fields": [7349,7350]},{"file": 66,"line": 1538,"col": 4,"fields": [7351,7352,7353,7354]},{"file": 43,"line": 1664,"col": 0,"fields": [7355,7356,7357]},{"file": 3,"line": 24,"col": 4,"fields": []},{"file": 13,"line": 657,"col": 20,"fields": [7358,7359]},{"file": 63,"line": 41,"col": 8,"fields": [7360]},{"file": 63,"line": 62,"col": 8,"fields": [7361,7362]},{"file": 63,"line": 73,"col": 8,"fields": [7363,7364]},{"file": 36,"line": 2938,"col": 4,"fields": [7365,7366,7367]},{"file": 36,"line": 2418,"col": 4,"docs": " Returns the number of elements that, if added to the given pointer, align it to a multiple of the given quantity, or `null` if one of the following conditions is met: - The aligned pointer would not fit the address space, - The delta required to align the pointer is not a multiple of the pointee's   type.","fields": [7368,7369]},{"file": 66,"line": 408,"col": 4,"fields": [7370,7371]},{"file": 36,"line": 135,"col": 4,"docs": " An allocator helper function.  Adjusts an allocation length satisfy `len_align`. `full_len` should be the full capacity of the allocation which may be greater than the `len` that was requsted.  This function should only be used by allocators that are unaffected by `len_align`.","fields": [7372,7373,7374]},{"file": 9,"line": 69,"col": 8,"fields": [7375,7376,7377,7378,7379]},{"file": 9,"line": 73,"col": 8,"fields": [7380,7381,7382,7383,7384,7385]},{"file": 9,"line": 78,"col": 8,"fields": [7386,7387,7388,7389]},{"file": 53,"line": 2854,"col": 4,"docs": " Test whether a file descriptor refers to a terminal.","fields": [7390]},{"file": 36,"line": 784,"col": 0,"docs": " Private helper for sliceTo(). If you want the length, use sliceTo(foo, x).len","fields": [7391,7392]},{"file": 66,"line": 722,"col": 4,"fields": [7393,7394,7395,7396]},{"file": 66,"line": 853,"col": 4,"fields": [7397,7398]},{"file": 73,"line": 270,"col": 4,"fields": [7399]},{"file": 66,"line": 1282,"col": 4,"fields": [7400,7401]},{"file": 36,"line": 251,"col": 4,"docs": " Generally, Zig users are encouraged to explicitly initialize all fields of a struct explicitly rather than using this function. However, it is recognized that there are sometimes use cases for initializing all fields to a \"zero\" value. For example, when interfacing with a C API where this practice is more common and relied upon. If you are performing code review and see this function used, examine closely - it may be a code smell. Zero initializes the type. This can be used to zero initialize a any type for which it makes sense. Structs will be initialized recursively.","fields": [7402]},{"file": 16,"line": 763,"col": 16,"fields": [7403]},{"file": 66,"line": 437,"col": 4,"fields": [7404,7405,7406]},{"file": 43,"line": 125,"col": 4,"docs": " Tries to print the stack trace starting from the supplied base pointer to stderr, unbuffered, and ignores any error returned. TODO multithreaded awareness","fields": [7407,7408]},{"file": 3,"line": 11,"col": 0,"fields": []},{"file": 39,"line": 141,"col": 4,"docs": " Create a new progress node. Call `Node.end` when done. TODO solve https://github.com/ziglang/zig/issues/2765 and then change this API to return Progress rather than accept it as a parameter. `estimated_total_items` value of 0 means unknown.","fields": [7409,7410,7411]},{"file": 58,"line": 160,"col": 8,"docs": " Initialize the timer structure. Can only fail when running in a hostile environment that intentionally injects error values into syscalls, such as using seccomp on Linux to intercept `clock_gettime`.","fields": []},{"file": 39,"line": 83,"col": 8,"docs": " Create a new child progress node. Thread-safe. Call `Node.end` when done. TODO solve https://github.com/ziglang/zig/issues/2765 and then change this API to set `self.parent.recently_updated_child` with the return value. Until that is fixed you probably want to call `activate` on the return value. Passing 0 for `estimated_total_items` means unknown.","fields": [7412,7413,7414]},{"file": 39,"line": 119,"col": 8,"docs": " Tell the parent node that this node is actively being worked on. Thread-safe.","fields": [7415]},{"file": 39,"line": 182,"col": 4,"docs": " Updates the terminal and resets `self.next_refresh_timestamp`. Thread-safe.","fields": [7416]},{"file": 39,"line": 101,"col": 8,"docs": " Finish a started `Node`. Thread-safe.","fields": [7417]},{"file": 39,"line": 290,"col": 4,"fields": [7418,7419,7420]},{"file": 29,"line": 432,"col": 12,"fields": [7421]},{"file": 63,"line": 48,"col": 4,"fields": [7422,7423]},{"file": 63,"line": 26,"col": 0,"fields": [7424,7425,7426]},{"file": 63,"line": 11,"col": 0,"fields": [7427,7428]},{"file": 63,"line": 16,"col": 0,"fields": [7429]},{"file": 63,"line": 30,"col": 0,"fields": [7430,7431,7432]},{"file": 63,"line": 20,"col": 0,"fields": [7433,7434]},{"file": 36,"line": 2896,"col": 4,"docs": " Round an address up to the previous aligned address Unlike `alignBackward`, `alignment` can be any positive number, not just a power of 2.","fields": [7435,7436]},{"file": 13,"line": 876,"col": 16,"fields": [7437]},{"file": 73,"line": 266,"col": 4,"fields": [7438]},{"file": 55,"line": 541,"col": 4,"docs": " Caller must call argsFree on result.","fields": [7439]},{"file": 31,"line": 729,"col": 8,"fields": [7440]},{"file": 31,"line": 737,"col": 8,"docs": " *WARNING* using this at the same time as the interface returned by `threadSafeAllocator` is not thread safe","fields": [7441]},{"file": 55,"line": 510,"col": 4,"fields": []},{"file": 55,"line": 476,"col": 8,"docs": " You must free the returned memory when done.","fields": [7442,7443]},{"file": 55,"line": 502,"col": 8,"docs": " Call this to free the iterator's internal buffer if the iterator was created with `initWithAllocator` function.","fields": [7444]},{"file": 17,"line": 201,"col": 12,"docs": " Append the slice of items to the list. Allocates more memory as necessary.","fields": [7445,7446]},{"file": 17,"line": 334,"col": 12,"docs": " Modify the array so that it can hold at least `additional_count` **more** items. Invalidates pointers if additional memory is needed.","fields": [7447,7448]},{"file": 17,"line": 208,"col": 12,"docs": " Append the slice of items to the list, asserting the capacity is already enough to store the new items. **Does not** invalidate pointers.","fields": [7449,7450]},{"file": 53,"line": 4919,"col": 4,"fields": [7451,7452]},{"file": 53,"line": 4878,"col": 4,"docs": " TODO: change this to return the timespec as a return value TODO: look into making clk_id an enum","fields": [7453,7454]},{"file": 25,"line": 36,"col": 4,"docs": " Try to acquire the mutex without blocking. Returns `false` if the mutex is unavailable. Otherwise returns `true`. Call `unlock` on the mutex to release.","fields": [7455]},{"file": 39,"line": 189,"col": 0,"fields": [7456]},{"file": 39,"line": 169,"col": 4,"docs": " Updates the terminal if enough time has passed since last update. Thread-safe.","fields": [7457]},{"file": 39,"line": 94,"col": 8,"docs": " This is the same as calling `start` and then `end` on the returned `Node`. Thread-safe.","fields": [7458]},{"file": 29,"line": 357,"col": 12,"docs": " Emits log messages for leaks and then returns whether there were any leaks.","fields": [7459]},{"file": 51,"line": 1278,"col": 4,"docs": " Multiply a and b. Return type is wide enough to guarantee no overflow.","fields": [7460,7461,7462]},{"file": 36,"line": 2905,"col": 4,"docs": " Round an address up to the previous aligned address The alignment must be a power of 2 and greater than 0.","fields": [7463,7464]},{"file": 31,"line": 767,"col": 4,"fields": [7465,7466,7467,7468,7469]},{"file": 31,"line": 783,"col": 4,"fields": [7470,7471,7472,7473,7474,7475]},{"file": 31,"line": 813,"col": 4,"fields": [7476,7477,7478,7479]},{"file": 55,"line": 454,"col": 8,"docs": " Initialize the args iterator.","fields": []},{"file": 55,"line": 212,"col": 8,"fields": [7480]},{"file": 9,"line": 502,"col": 4,"docs": " Copies `m` to newly allocated memory, with a null-terminated element. Caller owns the memory.","fields": [7481,7482,7483]},{"file": 66,"line": 890,"col": 4,"fields": [7484,7485]},{"file": 66,"line": 862,"col": 4,"fields": [7486,7487]},{"file": 25,"line": 68,"col": 8,"fields": [7488]},{"file": 47,"line": 1834,"col": 4,"fields": [7489,7490,7491]},{"file": 39,"line": 300,"col": 0,"fields": [7492,7493,7494,7495]},{"file": 58,"line": 205,"col": 8,"docs": " Reads the timer value since start or the last reset in nanoseconds","fields": [7496]},{"file": 29,"line": 320,"col": 8,"fields": [7497]},{"file": 29,"line": 326,"col": 8,"fields": [7498,7499,7500]},{"file": 16,"line": 954,"col": 12,"fields": [7501]},{"file": 16,"line": 826,"col": 20,"fields": [7502]},{"file": 29,"line": 224,"col": 12,"fields": [7503,7504]},{"file": 32,"line": 183,"col": 12,"docs": " Log an error message. This log level is intended to be used when something has gone wrong. This might be recoverable or might be followed by the program exiting.","fields": [7505,7506]},{"file": 31,"line": 756,"col": 8,"fields": [7507,7508]},{"file": 31,"line": 763,"col": 8,"docs": " NOTE: this will not work in all cases, if the last allocation had an adjusted_index       then we won't be able to determine what the last allocation was.  This is because       the alignForward operation done in alloc is not reversible.","fields": [7509,7510]},{"file": 55,"line": 205,"col": 8,"fields": []},{"file": 66,"line": 877,"col": 0,"fields": [7511,7512]},{"file": 19,"line": 60,"col": 12,"docs": " If the returned number of bytes written is less than requested, the buffer is full. Returns `error.NoSpaceLeft` when no bytes would be written. Note: `error.NoSpaceLeft` matches the corresponding error from `std.fs.File.WriteError`.","fields": [7513,7514]},{"file": 19,"line": 38,"col": 12,"fields": [7515]},{"file": 19,"line": 105,"col": 12,"fields": [7516]},{"file": 58,"line": 223,"col": 4,"fields": []},{"file": 58,"line": 235,"col": 4,"fields": [7517,7518]},{"file": 29,"line": 257,"col": 12,"fields": [7519,7520]},{"file": 29,"line": 291,"col": 8,"fields": [7521,7522,7523,7524]},{"file": 32,"line": 126,"col": 0,"fields": [7525,7526,7527,7528]},{"file": 31,"line": 720,"col": 0,"fields": [7529,7530]},{"file": 77,"line": 6,"col": 4,"fields": [7531,7532]},{"file": 29,"line": 261,"col": 12,"fields": [7533,7534,7535,7536]},{"file": 3,"line": 119,"col": 4,"fields": [7537,7538,7539,7540]},{"file": 77,"line": 82,"col": 0,"fields": [7541,7542,7543,7544]},{"file": 29,"line": 308,"col": 8,"fields": [7545]},{"file": 22,"line": 57,"col": 8,"fields": [7546,7547,7548,7549]},{"file": 62,"line": 35,"col": 8,"fields": [7550]},{"file": 6,"line": 52,"col": 0},{"file": 4,"line": 112,"col": 0},{"file": 34,"line": 758,"col": 16,"fields": [7551]},{"file": 34,"line": 761,"col": 16,"fields": [7552]},{"file": 5,"line": 152,"col": 0},{"file": 7,"line": 189,"col": 0},{"file": 16,"line": 75,"col": 8,"fields": [7553,7554]},{"file": 16,"line": 79,"col": 8,"fields": [7555,7556,7557]},{"file": 8,"line": 122,"col": 0},{"file": 33,"line": 42,"col": 0},{"file": 16,"line": 89,"col": 4,"fields": [7558]},{"file": 16,"line": 85,"col": 4,"fields": [7559,7560]},{"file": 35,"line": 69,"col": 12,"docs": " Creates a bit set with no elements present.","fields": []},{"file": 33,"line": 18,"col": 12,"fields": [7561,7562]},{"file": 57,"line": 45,"col": 4,"docs": " This function is intended to be used only in tests. When the two values are not equal, prints diagnostics to stderr to show exactly how they are not equal, then aborts. `actual` is casted to the type of `expected`.","fields": [7563,7564]},{"file": 33,"line": 10,"col": 12,"fields": [7565,7566]},{"file": 6,"line": 6,"col": 4,"docs": " Defines a boolean flag","fields": [7567,7568,7569]},{"file": 6,"line": 17,"col": 4,"docs": " Defines a single argument flag","fields": [7570,7571,7572]},{"file": 6,"line": 22,"col": 4,"docs": " Defines a given `max_values` number of arguments flag","fields": [7573,7574,7575,7576]},{"file": 6,"line": 41,"col": 4,"docs": " Defines a single argument flag with given pre-defined values","fields": [7577,7578,7579,7580]},{"file": 4,"line": 23,"col": 4,"docs": " Creates a new instance of it","fields": [7581]},{"file": 4,"line": 36,"col": 4,"docs": " Sets the short name of the argument","fields": [7582,7583]},{"file": 4,"line": 41,"col": 4,"docs": " Sets the short name of the argument from the name","fields": [7584]},{"file": 4,"line": 46,"col": 4,"docs": " Sets the long name of the argument","fields": [7585,7586]},{"file": 4,"line": 50,"col": 4,"fields": [7587]},{"file": 4,"line": 54,"col": 4,"fields": [7588,7589]},{"file": 4,"line": 60,"col": 4,"docs": " Sets the minimum number of values required to provide for an argument. Implicitly applies the `.takes_value` setting","fields": [7590,7591]},{"file": 4,"line": 69,"col": 4,"docs": " Sets the maximum number of values an argument can take. Implicitly applies the `.takes_value` setting","fields": [7592,7593]},{"file": 4,"line": 77,"col": 4,"docs": " Sets the allowed values for an argument. Value outside of allowed values will be consider as error. Implicitly applies the `.takes_value` setting","fields": [7594,7595]},{"file": 4,"line": 84,"col": 4,"docs": " Sets separator between the values of an argument. Implicitly applies the `.takes_value` setting","fields": [7596,7597]},{"file": 4,"line": 89,"col": 4,"fields": [7598,7599]},{"file": 4,"line": 100,"col": 4,"fields": [7600,7601]},{"file": 4,"line": 104,"col": 4,"fields": [7602,7603]},{"file": 4,"line": 108,"col": 4,"fields": [7604,7605]},{"file": 5,"line": 25,"col": 4,"docs": " Creates a new instance of it","fields": [7606,7607]},{"file": 5,"line": 29,"col": 4,"fields": [7608,7609,7610]},{"file": 5,"line": 36,"col": 4,"docs": " Release all allocated memory","fields": [7611]},{"file": 5,"line": 47,"col": 4,"docs": " Appends the new arg into the args list","fields": [7612,7613]},{"file": 5,"line": 56,"col": 4,"docs": " Appends args into the args list","fields": [7614,7615]},{"file": 5,"line": 61,"col": 4,"docs": " Appends the new subcommand into the subcommands list","fields": [7616,7617]},{"file": 5,"line": 66,"col": 4,"docs": " Appends the `subcommands` into the subcommands list","fields": [7618,7619]},{"file": 5,"line": 71,"col": 4,"docs": " Create a new [Argument](/#root;Arg) with the given name and specifies that Command will take single value","fields": [7620,7621]},{"file": 5,"line": 76,"col": 4,"docs": " Creates an [Argument](/#root;Arg) with given name and specifies that command will take `n` values","fields": [7622,7623,7624]},{"file": 5,"line": 86,"col": 4,"fields": [7625]},{"file": 5,"line": 90,"col": 4,"fields": [7626]},{"file": 5,"line": 94,"col": 4,"fields": [7627]},{"file": 5,"line": 100,"col": 4,"docs": " Linearly searches for an argument with short name equals to given `short_name`. Returns a const pointer of a found argument otherwise null.","fields": [7628,7629]},{"file": 5,"line": 111,"col": 4,"docs": " Linearly searches for an argument with long name equals to given `long_name`. Returns a const pointer of a found argument otherwise null.","fields": [7630,7631]},{"file": 5,"line": 122,"col": 4,"docs": " Linearly searches a sub-command with name equals to given `subcmd_name`. Returns a const pointer of a found sub-command otherwise null.","fields": [7632,7633]},{"file": 5,"line": 132,"col": 4,"fields": [7634,7635]},{"file": 5,"line": 136,"col": 4,"fields": [7636,7637]},{"file": 5,"line": 140,"col": 4,"fields": [7638,7639]},{"file": 5,"line": 144,"col": 4,"fields": [7640]},{"file": 7,"line": 64,"col": 4,"fields": [7641]},{"file": 7,"line": 72,"col": 4,"fields": [7642]},{"file": 7,"line": 86,"col": 4,"fields": [7643,7644,7645]},{"file": 7,"line": 133,"col": 4,"fields": [7646,7647]},{"file": 7,"line": 142,"col": 4,"docs": " Checks if argument or subcommand is present","fields": [7648,7649]},{"file": 7,"line": 154,"col": 4,"docs": " Checks if arguments were present on command line or not","fields": [7650]},{"file": 7,"line": 159,"col": 4,"docs": " Returns the single value of an argument if found otherwise null","fields": [7651,7652]},{"file": 7,"line": 172,"col": 4,"docs": " Returns the array of values of an argument if found otherwise null","fields": [7653,7654]},{"file": 7,"line": 180,"col": 4,"docs": " Returns the subcommand `ArgsContext` if subcommand is present otherwise null","fields": [7655,7656]},{"file": 8,"line": 23,"col": 4,"fields": [7657,7658,7659]},{"file": 8,"line": 39,"col": 4,"docs": " Deinitialize all the structures of `yazap` and release all the memory used by them","fields": [7660]},{"file": 8,"line": 46,"col": 4,"docs": " Creates a new `Command` with given name by setting a allocator to it","fields": [7661,7662,7663]},{"file": 8,"line": 53,"col": 4,"docs": " Returns a pointer to a root `Command`.","fields": [7664]},{"file": 8,"line": 58,"col": 4,"docs": " Starts parsing the process arguments","fields": [7665]},{"file": 8,"line": 64,"col": 4,"docs": " Starts parsing the given arguments","fields": [7666,7667]},{"file": 8,"line": 78,"col": 4,"docs": " Displays the help message of root command","fields": [7668]},{"file": 8,"line": 84,"col": 4,"docs": " Displays the help message of subcommand if it is provided on command line otherwise it will display nothing","fields": [7669]},{"file": 8,"line": 88,"col": 0,"fields": [7670]},{"file": 8,"line": 92,"col": 0,"fields": [7671,7672]},{"file": 8,"line": 104,"col": 0,"fields": [7673]},{"file": 34,"line": 467,"col": 12,"docs": " Checks if the map contains an item.","fields": [7674,7675]},{"file": 34,"line": 510,"col": 12,"docs": " Adds the key to the map with the supplied value. If the key is already in the map, overwrites the value.","fields": [7676,7677,7678]},{"file": 33,"line": 14,"col": 12,"fields": [7679,7680]},{"file": 17,"line": 466,"col": 12,"docs": " Release all allocated memory.","fields": [7681,7682]},{"file": 17,"line": 524,"col": 12,"docs": " Extend the list by 1 element. Allocates more memory as necessary.","fields": [7683,7684,7685]},{"file": 17,"line": 708,"col": 12,"docs": " Increase length by 1, returning pointer to the new item. The returned pointer becomes invalid when the list resized.","fields": [7686,7687]},{"file": 17,"line": 665,"col": 12,"docs": " Modify the array so that it can hold at least `new_capacity` items. Invalidates pointers if additional memory is needed.","fields": [7688,7689,7690]},{"file": 17,"line": 681,"col": 12,"docs": " Modify the array so that it can hold at least `new_capacity` items. Like `ensureTotalCapacity`, but the resulting capacity is much more likely (but not guaranteed) to be equal to `new_capacity`. Invalidates pointers if additional memory is needed.","fields": [7691,7692,7693]},{"file": 17,"line": 765,"col": 12,"docs": " For a nicer API, `items.len` is the length, not the capacity. This requires \"unsafe\" slicing.","fields": [7694]},{"file": 17,"line": 718,"col": 12,"docs": " Increase length by 1, returning pointer to the new item. Asserts that there is already space for the new item without allocating more. **Does not** invalidate pointers. The returned pointer becomes invalid when the list resized.","fields": [7695]},{"file": 10,"line": 36,"col": 4,"fields": [7696,7697]},{"file": 16,"line": 456,"col": 12,"docs": " Create an iterator over the values in the map. The iterator is invalidated if the map is modified.","fields": [7698]},{"file": 7,"line": 33,"col": 8,"fields": [7699]},{"file": 16,"line": 416,"col": 12,"docs": " Release the backing array and invalidate this map. This does *not* deinit keys, values, or the context! If your keys or values need to be released, ensure that that is done before calling this function.","fields": [7700]},{"file": 7,"line": 55,"col": 8,"fields": [7701]},{"file": 7,"line": 15,"col": 8,"fields": [7702]},{"file": 16,"line": 581,"col": 12,"fields": [7703,7704]},{"file": 7,"line": 25,"col": 8,"fields": [7705]},{"file": 16,"line": 529,"col": 12,"docs": " Clobbers any existing data. To detect if a put would clobber existing data, see `getOrPut`.","fields": [7706,7707,7708]},{"file": 7,"line": 29,"col": 8,"fields": [7709]},{"file": 16,"line": 1172,"col": 12,"fields": [7710,7711,7712,7713,7714]},{"file": 16,"line": 1246,"col": 12,"fields": [7715,7716,7717,7718]},{"file": 16,"line": 1258,"col": 12,"fields": [7719,7720,7721,7722,7723]},{"file": 16,"line": 1285,"col": 12,"fields": [7724,7725,7726]},{"file": 16,"line": 613,"col": 12,"docs": " Check if the map contains a key","fields": [7727,7728]},{"file": 16,"line": 438,"col": 12,"docs": " Return the number of items in the map.","fields": [7729]},{"file": 55,"line": 580,"col": 4,"fields": [7730,7731]},{"file": 11,"line": 98,"col": 4,"fields": [7732,7733,7734]},{"file": 64,"line": 68,"col": 8,"fields": [7735]},{"file": 11,"line": 114,"col": 4,"fields": [7736]},{"file": 12,"line": 41,"col": 4,"fields": [7737]},{"file": 50,"line": 51,"col": 4,"docs": " TODO: async stdout on windows without a dedicated thread. https://github.com/ziglang/zig/pull/4816#issuecomment-604521023","fields": []},{"file": 10,"line": 40,"col": 4,"fields": [7738,7739]},{"file": 37,"line": 38,"col": 4,"fields": [7740]},{"file": 37,"line": 27,"col": 12,"fields": [7741,7742]},{"file": 37,"line": 23,"col": 12,"fields": [7743]},{"file": 10,"line": 53,"col": 0,"fields": [7744,7745]},{"file": 10,"line": 167,"col": 0,"fields": [7746]},{"file": 10,"line": 61,"col": 0,"fields": [7747,7748]},{"file": 10,"line": 163,"col": 0,"fields": [7749]},{"file": 10,"line": 88,"col": 0,"fields": [7750,7751]},{"file": 10,"line": 102,"col": 0,"fields": [7752,7753]},{"file": 10,"line": 152,"col": 0,"fields": [7754,7755]},{"file": 37,"line": 14,"col": 12,"fields": [7756]},{"file": 38,"line": 162,"col": 12,"docs": " Returns a readable slice from `offset`","fields": [7757,7758]},{"file": 38,"line": 167,"col": 12,"docs": " Discard first `count` items in the fifo","fields": [7759,7760]},{"file": 35,"line": 86,"col": 12,"docs": " Returns true if the bit at the specified index is present in the set, false otherwise.","fields": [7761,7762]},{"file": 35,"line": 107,"col": 12,"docs": " Adds a specific bit to the bit set","fields": [7763,7764]},{"file": 34,"line": 540,"col": 12,"docs": " Removes a key from the map.  If the key was not in the map, does nothing.","fields": [7765,7766]},{"file": 16,"line": 1215,"col": 12,"fields": [7767,7768,7769]},{"file": 16,"line": 759,"col": 16,"fields": [7770]},{"file": 16,"line": 912,"col": 12,"fields": [7771]},{"file": 12,"line": 21,"col": 4,"fields": []},{"file": 12,"line": 33,"col": 4,"fields": [7772,7773]},{"file": 64,"line": 72,"col": 8,"fields": [7774]},{"file": 12,"line": 37,"col": 4,"fields": [7775,7776]},{"file": 64,"line": 59,"col": 8,"fields": [7777]},{"file": 11,"line": 172,"col": 0,"fields": [7778,7779]},{"file": 64,"line": 36,"col": 8,"fields": [7780]},{"file": 64,"line": 49,"col": 8,"fields": [7781]},{"file": 12,"line": 25,"col": 4,"fields": [7782,7783]},{"file": 11,"line": 203,"col": 0,"fields": [7784,7785]},{"file": 11,"line": 420,"col": 0,"fields": [7786,7787]},{"file": 50,"line": 37,"col": 0,"fields": []},{"file": 38,"line": 51,"col": 20,"fields": []},{"file": 38,"line": 234,"col": 12,"docs": " Returns number of items available in fifo","fields": [7788]},{"file": 38,"line": 273,"col": 12,"docs": " Appends the data in `src` to the fifo. You must have ensured there is enough space.","fields": [7789,7790]},{"file": 38,"line": 148,"col": 8,"docs": " Returns a writable slice from the 'read' end of the fifo","fields": [7791,7792]},{"file": 35,"line": 214,"col": 8,"fields": [7793]},{"file": 35,"line": 113,"col": 12,"docs": " Removes a specific bit from the bit set","fields": [7794,7795]},{"file": 16,"line": 1218,"col": 12,"fields": [7796,7797,7798]},{"file": 64,"line": 96,"col": 8,"docs": " Returns the next raw argument without converting it to token","fields": [7799]},{"file": 36,"line": 1716,"col": 4,"fields": [7800,7801,7802]},{"file": 64,"line": 122,"col": 4,"fields": [7803]},{"file": 64,"line": 144,"col": 4,"fields": [7804]},{"file": 64,"line": 32,"col": 8,"fields": [7805,7806]},{"file": 11,"line": 310,"col": 0,"fields": [7807,7808,7809,7810]},{"file": 11,"line": 211,"col": 0,"fields": [7811,7812]},{"file": 11,"line": 249,"col": 0,"fields": [7813,7814]},{"file": 64,"line": 115,"col": 8,"fields": [7815]},{"file": 7,"line": 49,"col": 8,"fields": [7816,7817]},{"file": 7,"line": 42,"col": 8,"fields": [7818]},{"file": 38,"line": 240,"col": 12,"docs": " Returns the first section of writable buffer Note that this may be of length 0","fields": [7819,7820]},{"file": 38,"line": 266,"col": 12,"docs": " Update the tail location of the buffer (usually follows use of writable/writableWithSize)","fields": [7821,7822]},{"file": 47,"line": 957,"col": 4,"fields": [7823,7824,7825]},{"file": 36,"line": 937,"col": 4,"docs": " Remove values from the beginning of a slice.","fields": [7826,7827,7828]},{"file": 36,"line": 1211,"col": 4,"docs": " Returns true if the haystack contains expected_count or more needles needle.len must be > 0 does not count overlapping needles","fields": [7829,7830,7831,7832]},{"file": 36,"line": 1655,"col": 4,"docs": " Returns an iterator that iterates over the slices of `buffer` that are separated by bytes in `delimiter`. split(u8, \"abc|def||ghi\", \"|\") will return slices for \"abc\", \"def\", \"\", \"ghi\", null, in that order. If `delimiter` does not exist in buffer, the iterator will return `buffer`, null, in that order. The delimiter length must not be zero. See also the related function `tokenize`.","fields": [7833,7834,7835]},{"file": 36,"line": 1791,"col": 12,"docs": " Returns a slice of the next field, or null if splitting is complete.","fields": [7836]},{"file": 11,"line": 404,"col": 0,"fields": [7837,7838,7839,7840]},{"file": 11,"line": 381,"col": 0,"fields": [7841,7842,7843,7844]},{"file": 11,"line": 394,"col": 0,"fields": [7845,7846,7847]},{"file": 11,"line": 273,"col": 0,"fields": [7848]},{"file": 11,"line": 39,"col": 8,"fields": [7849,7850]},{"file": 11,"line": 47,"col": 8,"fields": [7851]},{"file": 12,"line": 29,"col": 4,"fields": [7852,7853]},{"file": 11,"line": 65,"col": 8,"fields": [7854]},{"file": 11,"line": 73,"col": 8,"fields": [7855]},{"file": 11,"line": 54,"col": 8,"fields": [7856]},{"file": 11,"line": 81,"col": 8,"fields": [7857]},{"file": 11,"line": 58,"col": 8,"fields": [7858]},{"file": 11,"line": 294,"col": 0,"fields": [7859,7860,7861]},{"file": 36,"line": 1097,"col": 4,"docs": " Uses Boyer-moore-horspool algorithm on large inputs; `indexOfPosLinear` on small inputs.","fields": [7862,7863,7864,7865]},{"file": 64,"line": 104,"col": 8,"docs": " Returns the next non option argument","fields": [7866]},{"file": 36,"line": 1561,"col": 4,"docs": " Returns an iterator that iterates over the slices of `buffer` that are not any of the bytes in `delimiter_bytes`. tokenize(u8, \"   abc def    ghi  \", \" \") Will return slices for \"abc\", \"def\", \"ghi\", null, in that order. If `buffer` is empty, the iterator will return null. If `delimiter_bytes` does not exist in buffer, the iterator will return `buffer`, null, in that order. See also the related function `split`.","fields": [7867,7868,7869]},{"file": 36,"line": 1743,"col": 12,"docs": " Returns a slice of the next token, or null if tokenization is complete.","fields": [7870]},{"file": 36,"line": 1759,"col": 12,"docs": " Returns a slice of the remaining bytes. Does not affect iterator state.","fields": [7871]},{"file": 11,"line": 85,"col": 4,"fields": [7872]},{"file": 65,"line": 546,"col": 4,"docs": " True if every value of the type `T` has a unique bit pattern representing it. In other words, `T` has no unused bits and no padding.","fields": [7873]},{"file": 36,"line": 1032,"col": 4,"docs": " Consider using `indexOfPos` instead of this, which will automatically use a more sophisticated algorithm on larger inputs.","fields": [7874,7875,7876,7877]},{"file": 36,"line": 1054,"col": 0,"fields": [7878,7879]},{"file": 36,"line": 1771,"col": 8,"fields": [7880,7881]},{"file": 64,"line": 189,"col": 0},{"file": 64,"line": 180,"col": 0,"fields": [7882,7883]},{"file": 57,"line": 301,"col": 4,"docs": " This function is intended to be used only in tests. When `ok` is false, the test fails. A message is printed to stderr and then abort is called.","fields": [7884]},{"file": 13,"line": 722,"col": 16,"fields": [7885]},{"file": 52,"line": 858,"col": 4,"fields": [7886,7887]},{"file": 51,"line": 620,"col": 4,"docs": " Returns an unsigned int type that can hold the number of bits in T - 1. Suitable for 0-based bit indices of T.","fields": [7888]},{"file": 14,"line": 4,"col": 4,"fields": [7889,7890,7891]},{"file": 52,"line": 363,"col": 4,"fields": [7892]},{"file": 47,"line": 272,"col": 0,"fields": [7893]},{"file": 47,"line": 202,"col": 0,"fields": [7894]},{"file": 16,"line": 54,"col": 4,"fields": [7895]},{"file": 16,"line": 11,"col": 4,"fields": [7896,7897]},{"file": 16,"line": 37,"col": 4,"fields": [7898,7899]},{"file": 16,"line": 133,"col": 4,"docs": " This function issues a compile error with a helpful message if there is a problem with the provided context type.  A context must have the following member functions:   - hash(self, PseudoKey) Hash   - eql(self, PseudoKey, Key) bool If you are passing a context to a *Adapted function, PseudoKey is the type of the key parameter.  Otherwise, when creating a HashMap or HashMapUnmanaged type, PseudoKey = Key = K.","fields": [7900,7901,7902,7903]},{"file": 16,"line": 356,"col": 4,"docs": " General purpose hash table. No order is guaranteed and any modification invalidates live iterators. It provides fast operations (lookup, insertion, deletion) with quite high load factors (up to 80% by default) for a low memory usage. For a hash map that can be initialized directly that does not store an Allocator field, see `HashMapUnmanaged`. If iterating over the table entries is a strong usecase and needs to be fast, prefer the alternative `std.ArrayHashMap`. Context must be a struct type with two member functions:   hash(self, K) u64   eql(self, K, K) bool Adapted variants of many functions are provided.  These variants take a pseudo key instead of a key.  Their context must have the functions:   hash(self, PseudoKey) u64   eql(self, PseudoKey, K) bool","fields": [7904,7905,7906,7907]},{"file": 16,"line": 46,"col": 4,"fields": [7908,7909]},{"file": 16,"line": 670,"col": 4,"docs": " A HashMap based on open addressing and linear probing. A lookup or modification typically occurs only 2 cache misses. No order is guaranteed and any modification invalidates live iterators. It achieves good performance with quite high load factors (by default, grow is triggered at 80% full) and only one byte of overhead per element. The struct itself is only 16 bytes for a small footprint. This comes at the price of handling size with u32, which should be reasonnable enough for almost all uses. Deletions are achieved with tombstones.","fields": [7910,7911,7912,7913]},{"file": 51,"line": 319,"col": 4,"docs": " Given two types, returns the smallest one which is capable of holding the full range of the minimum value.","fields": [7914,7915]},{"file": 17,"line": 23,"col": 4,"docs": " A contiguous, growable list of arbitrarily aligned items in memory. This is a wrapper around an array of T values aligned to `alignment`-byte addresses. If the specified alignment is `null`, then `@alignOf(T)` is used. Initialize with `init`. This struct internally stores a `std.mem.Allocator` for memory management. To manually specify an allocator with each method call see `ArrayListAlignedUnmanaged`.","fields": [7916,7917]},{"file": 17,"line": 12,"col": 4,"docs": " A contiguous, growable list of items in memory. This is a wrapper around an array of T values. Initialize with `init`. This struct internally stores a `std.mem.Allocator` for memory management. To manually specify an allocator with each method call see `ArrayListUnmanaged`.","fields": [7918]},{"file": 52,"line": 159,"col": 4,"docs": " Given a \"memory span\" type, returns the \"element type\".","fields": [7919]},{"file": 52,"line": 226,"col": 4,"docs": " Given a \"memory span\" type, returns the same type except with the given sentinel value.","fields": [7920,7921]},{"file": 36,"line": 586,"col": 4,"docs": " Takes a pointer to an array, a sentinel-terminated pointer, or a slice, and returns a slice. If there is a sentinel on the input type, there will be a sentinel on the output type. The constness of the output type matches the constness of the input type. `[*c]` pointers are assumed to be 0-terminated, and assumed to not allow null.","fields": [7922]},{"file": 19,"line": 119,"col": 0,"fields": [7923]},{"file": 19,"line": 8,"col": 4,"docs": " This turns a byte buffer into an `io.Writer`, `io.Reader`, or `io.SeekableStream`. If the supplied byte buffer is const, then `io.Writer` is not available.","fields": [7924]},{"file": 20,"line": 6,"col": 4,"fields": [7925,7926,7927]},{"file": 21,"line": 2,"col": 4,"fields": [7928,7929,7930,7931,7932,7933,7934]},{"file": 51,"line": 417,"col": 4,"docs": " Finds the maximum of three numbers.","fields": [7935,7936,7937]},{"file": 51,"line": 1218,"col": 4,"docs": " Returns the maximum value of integer type T.","fields": [7938]},{"file": 65,"line": 44,"col": 4,"fields": [7939]},{"file": 65,"line": 46,"col": 12,"fields": [7940]},{"file": 65,"line": 353,"col": 4,"fields": [7941]},{"file": 47,"line": 933,"col": 0,"fields": [7942]},{"file": 52,"line": 598,"col": 4,"fields": [7943]},{"file": 65,"line": 98,"col": 4,"fields": [7944]},{"file": 65,"line": 100,"col": 12,"fields": [7945]},{"file": 65,"line": 217,"col": 4,"fields": [7946]},{"file": 52,"line": 140,"col": 4,"fields": [7947]},{"file": 36,"line": 2476,"col": 0,"fields": [7948,7949,7950]},{"file": 36,"line": 2492,"col": 0,"fields": [7951]},{"file": 23,"line": 14,"col": 4,"docs": " A singly-linked list is headed by a single forward pointer. The elements are singly linked for minimum space and pointer manipulation overhead at the expense of O(n) removal for arbitrary elements. New elements can be added to the list after an existing element or at the head of the list. A singly-linked list may only be traversed in the forward direction. Singly-linked lists are ideal for applications with large datasets and few or no removals or for implementing a LIFO queue.","fields": [7952]},{"file": 36,"line": 672,"col": 0,"docs": " Helper for the return type of sliceTo()","fields": [7953,7954]},{"file": 51,"line": 1226,"col": 4,"docs": " Returns the minimum value of integer type T.","fields": [7955]},{"file": 65,"line": 247,"col": 4,"fields": [7956]},{"file": 36,"line": 2752,"col": 0,"fields": [7957]},{"file": 24,"line": 9,"col": 4,"docs": " Many producer, many consumer, non-allocating, thread-safe. Uses a mutex to protect access. The queue does not manage ownership and the user is responsible to manage the storage of the nodes.","fields": [7958]},{"file": 23,"line": 161,"col": 4,"docs": " A tail queue is headed by a pair of pointers, one to the head of the list and the other to the tail of the list. The elements are doubly linked so that an arbitrary element can be removed without a need to traverse the list. New elements can be added to the list before or after an existing element, at the head of the list, or at the end of the list. A tail queue may be traversed in either direction.","fields": [7959]},{"file": 26,"line": 6,"col": 4,"fields": [7960]},{"file": 28,"line": 8,"col": 4,"docs": " Many reader, many writer, non-allocating, thread-safe Uses a spinlock to protect push() and pop() When building in single threaded mode, this is a simple linked list.","fields": [7961]},{"file": 65,"line": 115,"col": 4,"fields": [7962]},{"file": 65,"line": 117,"col": 12,"fields": [7963]},{"file": 36,"line": 2659,"col": 0,"fields": [7964,7965]},{"file": 52,"line": 190,"col": 4,"docs": " Given a type which can have a sentinel e.g. `[:0]u8`, returns the sentinel value, or `null` if there is not one. Types which cannot possibly have a sentinel will be a compile error.","fields": [7966]},{"file": 65,"line": 378,"col": 4,"fields": [7967]},{"file": 65,"line": 262,"col": 4,"fields": [7968]},{"file": 13,"line": 739,"col": 24,"docs": " Returns true if any specified feature is enabled.","fields": [7969,7970]},{"file": 29,"line": 177,"col": 4,"fields": [7971]},{"file": 78,"line": 18,"col": 4,"docs": " Returns the base-2 logarithm of x. Special Cases:  - log2(+inf)  = +inf  - log2(0)     = -inf  - log2(x)     = nan if x < 0  - log2(nan)   = nan","fields": [7972]},{"file": 16,"line": 50,"col": 4,"fields": [7973,7974]},{"file": 52,"line": 328,"col": 4,"fields": [7975]},{"file": 16,"line": 820,"col": 8,"fields": [7976]},{"file": 32,"line": 174,"col": 4,"docs": " Returns a scoped logging namespace that logs all messages using the scope provided here.","fields": [7977]},{"file": 33,"line": 3,"col": 4,"fields": [7978]},{"file": 33,"line": 24,"col": 0,"fields": [7979]},{"file": 52,"line": 440,"col": 4,"fields": [7980]},{"file": 34,"line": 725,"col": 0,"fields": [7981,7982,7983]},{"file": 34,"line": 729,"col": 4,"fields": [7984]},{"file": 34,"line": 699,"col": 4,"docs": " Verifies that a type is a valid Indexer, providing a helpful compile error if not.  An Indexer maps a comptime known set of keys to a dense set of zero-based indices. The indexer interface must look like this: ``` struct {     /// The key type which this indexer converts to indices     pub const Key: type,     /// The number of indexes in the dense mapping     pub const count: usize,     /// Converts from a key to an index     pub fn indexOf(Key) usize;     /// Converts from an index to a key     pub fn keyForIndex(usize) Key; } ```","fields": [7985]},{"file": 34,"line": 437,"col": 4,"docs": " A map from keys to values, using an index lookup.  Uses a bitfield to track presence and a dense array of values. This type does no allocation and can be copied by value.","fields": [7986,7987,7988]},{"file": 34,"line": 239,"col": 8,"fields": [7989]},{"file": 34,"line": 237,"col": 4,"docs": " A map keyed by an enum, backed by a bitfield and a dense array. If the enum is not dense, a mapping will be constructed from enum values to dense indices.  This type does no dynamic allocation and can be copied by value.","fields": [7990,7991]},{"file": 35,"line": 51,"col": 4,"docs": " A bit set with static size, which is backed by a single integer. This set is good for sets with a small size, but may generate inefficient code for larger sets, especially in debug mode.","fields": [7992]},{"file": 35,"line": 40,"col": 4,"docs": " Returns the optimal static bit set type for the specified number of elements.  The returned type will perform no allocations, can be copied by value, and does not require deinitialization. Both possible implementations fulfill the same interface.","fields": [7993]},{"file": 17,"line": 432,"col": 4,"docs": " An ArrayListAligned, but the allocator is passed as a parameter to the relevant functions rather than stored  in the struct itself. The same allocator **must** be used throughout the entire lifetime of an ArrayListAlignedUnmanaged. Initialize directly or with `initCapacity`, and deinitialize with `deinit` or use `toOwnedSlice`.","fields": [7994,7995]},{"file": 17,"line": 424,"col": 4,"docs": " An ArrayList, but the allocator is passed as a parameter to the relevant functions rather than stored in the struct itself. The same allocator **must** be used throughout the entire lifetime of an ArrayListUnmanaged. Initialize directly or with `initCapacity`, and deinitialize with `deinit` or use `toOwnedSlice`.","fields": [7996]},{"file": 16,"line": 64,"col": 4,"docs": " Builtin hashmap for strings as keys. Key memory is managed by the caller.  Keys and values will not automatically be freed.","fields": [7997]},{"file": 65,"line": 307,"col": 4,"fields": [7998]},{"file": 26,"line": 108,"col": 8,"fields": [7999,8000]},{"file": 65,"line": 286,"col": 4,"fields": [8001]},{"file": 37,"line": 3,"col": 4,"fields": [8002,8003]},{"file": 38,"line": 22,"col": 4,"fields": [8004,8005]},{"file": 52,"line": 938,"col": 4,"docs": " For a given anonymous list of types, returns a new tuple type with those types as fields. Examples: - `Tuple(&[_]type {})` ⇒ `tuple { }` - `Tuple(&[_]type {f32})` ⇒ `tuple { f32 }` - `Tuple(&[_]type {f32,u32})` ⇒ `tuple { f32, u32 }`","fields": [8006]},{"file": 52,"line": 827,"col": 4,"docs": " Given a type and a name, return the field index according to source order. Returns `null` if the field is not found.","fields": [8007,8008]},{"file": 36,"line": 1782,"col": 4,"fields": [8009]},{"file": 36,"line": 1734,"col": 4,"fields": [8010]},{"file": 13,"line": 723,"col": 23,"fields": []},{"file": 18,"line": 6,"col": 20,"fields": [8011,8012,8013,8014,8015,8016,8017,8018,8019,8020,8021,8022,8023,8024,8025,8026,8027,8028,8029,8030,8031,8032,8033,8034,8035,8036,8037,8038,8039,8040,8041,8042,8043,8044,8045,8046,8047,8048,8049,8050,8051,8052,8053,8054,8055,8056,8057,8058,8059,8060,8061,8062,8063,8064,8065,8066,8067,8068,8069,8070,8071,8072,8073,8074,8075,8076,8077,8078,8079,8080,8081,8082,8083,8084,8085,8086,8087,8088,8089,8090,8091,8092,8093,8094,8095,8096,8097,8098,8099,8100,8101,8102,8103,8104,8105,8106,8107,8108,8109,8110,8111,8112,8113,8114,8115,8116,8117,8118,8119,8120,8121,8122,8123,8124,8125,8126,8127,8128,8129,8130,8131,8132,8133,8134,8135,8136,8137,8138,8139,8140,8141,8142,8143,8144,8145,8146,8147,8148,8149,8150,8151,8152,8153,8154,8155,8156,8157,8158,8159,8160,8161,8162,8163,8164,8165,8166,8167,8168,8169,8170,8171,8172,8173,8174,8175,8176,8177,8178,8179,8180,8181,8182,8183]},{"file": 13,"line": 637,"col": 28,"fields": [8184]},{"file": 22,"line": 450,"col": 23,"fields": [8185,8186]},{"file": 13,"line": 759,"col": 25,"fields": [8187,8188,8189,8190,8191,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8203,8204,8205,8206,8207,8208,8209,8210,8211,8212,8213,8214,8215,8216,8217,8218,8219,8220,8221,8222,8223,8224,8225,8226,8227,8228,8229,8230,8231,8232,8233,8234,8235,8236,8237,8238,8239,8240,8241,8242,8243]},{"file": 14,"line": 9,"col": 11,"fields": [8244]},{"file": 15,"line": 12,"col": 17,"fields": [8245,8246,8247]},{"file": 0,"line": 0,"col": 0,"fields": []},{"file": 47,"line": 276,"col": 20,"fields": [8248,8249,8250,8251,8252,8253]},{"file": 16,"line": 55,"col": 11,"fields": []},{"file": 16,"line": 363,"col": 11,"fields": [8254,8255,8256]},{"file": 16,"line": 680,"col": 11,"fields": [8257,8258,8259]},{"file": 17,"line": 29,"col": 11,"fields": [8260,8261,8262]},{"file": 44,"line": 247,"col": 26,"fields": [8263,8264]},{"file": 44,"line": 253,"col": 25,"fields": [8265,8266,8267,8268]},{"file": 44,"line": 260,"col": 19,"fields": [8269,8270]},{"file": 44,"line": 238,"col": 20,"fields": [8271,8272,8273,8274]},{"file": 44,"line": 293,"col": 17,"fields": [8275,8276]},{"file": 44,"line": 233,"col": 13,"fields": [8277,8278]},{"file": 13,"line": 16,"col": 24,"fields": [8279,8280,8281,8282,8283,8284,8285,8286,8287,8288,8289,8290,8291,8292,8293,8294,8295,8296,8297,8298,8299,8300,8301,8302,8303,8304,8305,8306,8307,8308,8309,8310,8311,8312,8313,8314,8315,8316,8317,8318,8319]},{"file": 13,"line": 7,"col": 19,"fields": [8320,8321,8322]},{"file": 22,"line": 443,"col": 19,"fields": [8323,8324]},{"file": 19,"line": 9,"col": 11,"fields": [8325,8326]},{"file": 20,"line": 14,"col": 11,"fields": [8327]},{"file": 21,"line": 11,"col": 11,"fields": [8328]},{"file": 44,"line": 348,"col": 18,"fields": [8329,8330,8331,8332]},{"file": 22,"line": 196,"col": 21,"fields": [8333,8334,8335,8336,8337,8338,8339,8340,8341,8342,8343,8344,8345,8346,8347,8348,8349,8350,8351,8352,8353,8354,8355,8356,8357]},{"file": 22,"line": 255,"col": 25,"fields": [8358,8359,8360,8361]},{"file": 23,"line": 15,"col": 11,"fields": [8362]},{"file": 24,"line": 10,"col": 11,"fields": [8363,8364,8365]},{"file": 23,"line": 162,"col": 11,"fields": [8366,8367,8368]},{"file": 26,"line": 7,"col": 11,"fields": [8369]},{"file": 40,"line": 337,"col": 26,"fields": [8370,8371,8372]},{"file": 27,"line": 1565,"col": 24,"fields": [8373,8374]},{"file": 28,"line": 9,"col": 11,"fields": [8375,8376]},{"file": 27,"line": 71,"col": 22,"fields": [8377,8378,8379]},{"file": 41,"line": 61,"col": 93},{"file": 29,"line": 178,"col": 11,"fields": [8380,8381,8382,8383,8384,8385,8386]},{"file": 29,"line": 134,"col": 19,"fields": [8387,8388,8389,8390,8391,8392,8393,8394]},{"file": 29,"line": 211,"col": 27,"fields": [8395,8396,8397,8398,8399]},{"file": 22,"line": 278,"col": 32,"fields": [8400,8401,8402]},{"file": 30,"line": 679,"col": 17,"fields": [8403,8404,8405,8406,8407,8408,8409,8410,8411,8412,8413,8414,8415,8416,8417,8418]},{"file": 31,"line": 725,"col": 33,"fields": [8419,8420]},{"file": 16,"line": 821,"col": 19,"fields": [8421,8422,8423]},{"file": 32,"line": 175,"col": 11,"fields": []},{"file": 22,"line": 53,"col": 23,"fields": [8424,8425]},{"file": 33,"line": 4,"col": 11,"fields": [8426]},{"file": 33,"line": 31,"col": 18},{"file": 22,"line": 328,"col": 26,"fields": [8427,8428]},{"file": 34,"line": 755,"col": 15,"fields": []},{"file": 34,"line": 439,"col": 11,"fields": [8429,8430]},{"file": 34,"line": 241,"col": 19,"fields": []},{"file": 35,"line": 52,"col": 11,"fields": [8431]},{"file": 17,"line": 438,"col": 11,"fields": [8432,8433]},{"file": 4,"line": 0,"col": 0,"docs": "","fields": [8434,8435,8436,8437,8438,8439,8440,8441,8442]},{"file": 5,"line": 0,"col": 0,"fields": [8443,8444,8445,8446,8447,8448,8449]},{"file": 16,"line": 74,"col": 26,"fields": []},{"file": 7,"line": 10,"col": 28,"fields": [8450,8451,8452]},{"file": 43,"line": 1303,"col": 26,"fields": [8453,8454]},{"file": 42,"line": 374,"col": 20,"fields": [8455]},{"file": 26,"line": 109,"col": 49,"fields": []},{"file": 26,"line": 130,"col": 68,"fields": []},{"file": 26,"line": 112,"col": 66,"fields": []},{"file": 6,"line": 0,"col": 0,"docs": "","fields": []},{"file": 7,"line": 0,"col": 0,"docs": "","fields": [8456,8457,8458]},{"file": 8,"line": 0,"col": 0,"fields": [8459,8460,8461,8462,8463]},{"file": 37,"line": 4,"col": 11,"fields": [8464,8465]},{"file": 38,"line": 34,"col": 11,"fields": [8466,8467,8468,8469]},{"file": 38,"line": 11,"col": 33,"fields": [8470,8471,8472]},{"file": 47,"line": 784,"col": 17,"fields": [8473,8474]},{"file": 52,"line": 952,"col": 37},{"file": 10,"line": 117,"col": 57},{"file": 36,"line": 1783,"col": 11,"fields": [8475,8476,8477]},{"file": 36,"line": 1735,"col": 11,"fields": [8478,8479,8480]},{"file": 1,"line": 0,"col": 0,"fields": []},{"file": 2,"line": 0,"col": 0,"fields": []},{"file": 3,"line": 0,"col": 0,"fields": []},{"file": 43,"line": 295,"col": 55},{"file": 43,"line": 297,"col": 39},{"file": 43,"line": 321,"col": 66},{"file": 47,"line": 19,"col": 26,"fields": [8481,8482,8483,8484]},{"file": 9,"line": 0,"col": 0,"docs": "","fields": [8485,8486]},{"file": 43,"line": 203,"col": 90},{"file": 43,"line": 499,"col": 23,"fields": [8487,8488,8489]},{"file": 48,"line": 283,"col": 16,"fields": [8490]},{"file": 15,"line": 74,"col": 26,"fields": [8491,8492,8493,8494,8495,8496]},{"file": 44,"line": 593,"col": 22,"fields": [8497,8498,8499,8500,8501,8502,8503,8504,8505]},{"file": 16,"line": 743,"col": 25,"fields": [8506,8507]},{"file": 44,"line": 355,"col": 26,"fields": [8508,8509,8510,8511,8512,8513,8514,8515,8516,8517,8518,8519,8520,8521,8522,8523,8524,8525,8526]},{"file": 43,"line": 40,"col": 23,"fields": [8527,8528,8529]},{"file": 43,"line": 207,"col": 63},{"file": 43,"line": 112,"col": 90},{"file": 43,"line": 360,"col": 26,"fields": [8530,8531]},{"file": 43,"line": 116,"col": 63},{"file": 66,"line": 4218,"col": 4,"fields": [8532,8533,8534,8535,8536,8537,8538,8539,8540,8541,8542,8543,8544,8545,8546,8547,8548]},{"file": 66,"line": 4288,"col": 19,"fields": [8549,8550]},{"file": 79,"line": 0,"col": 14,"fields": [8551,8552,8553,8554,8555,8556,8557,8558,8559,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,8570,8571,8572,8573,8574,8575,8576,8577,8578,8579,8580,8581,8582,8583,8584,8585,8586,8587,8588,8589,8590,8591,8592,8593,8594,8595,8596,8597,8598,8599,8600,8601,8602,8603,8604,8605,8606,8607,8608,8609,8610,8611,8612,8613,8614,8615,8616,8617,8618,8619,8620,8621,8622,8623,8624,8625,8626,8627,8628,8629,8630,8631,8632,8633,8634,8635,8636,8637,8638,8639,8640,8641,8642,8643,8644,8645,8646,8647,8648,8649,8650,8651,8652,8653,8654,8655,8656,8657,8658,8659,8660,8661,8662,8663,8664,8665,8666,8667,8668,8669,8670,8671,8672,8673,8674,8675,8676,8677,8678,8679,8680,8681,8682,8683,8684,8685,8686,8687,8688,8689,8690,8691,8692,8693,8694,8695,8696,8697,8698,8699,8700,8701]},{"file": 25,"line": 62,"col": 18,"fields": [8702,8703,8704]},{"file": 43,"line": 1054,"col": 22,"fields": [8705,8706]},{"file": 62,"line": 7,"col": 27,"fields": [8707,8708]},{"file": 9,"line": 271,"col": 18,"fields": [8709,8710]},{"file": 43,"line": 489,"col": 22,"fields": [8711,8712,8713,8714,8715,8716,8717]},{"file": 43,"line": 649,"col": 49},{"file": 43,"line": 657,"col": 52},{"file": 43,"line": 28,"col": 21,"fields": [8718,8719,8720,8721]},{"file": 69,"line": 64,"col": 28,"fields": [8722,8723]},{"file": 30,"line": 126,"col": 16,"fields": [8724,8725,8726,8727,8728,8729,8730,8731,8732,8733,8734,8735,8736,8737,8738,8739,8740,8741,8742,8743,8744,8745,8746,8747,8748,8749,8750,8751,8752,8753,8754,8755,8756,8757,8758,8759,8760,8761,8762,8763,8764,8765,8766,8767,8768,8769,8770,8771,8772,8773,8774,8775,8776,8777,8778,8779,8780,8781,8782,8783,8784,8785,8786,8787,8788,8789,8790,8791,8792,8793,8794,8795,8796,8797,8798,8799,8800,8801,8802,8803,8804,8805,8806,8807,8808,8809,8810,8811,8812,8813,8814,8815,8816,8817,8818,8819,8820,8821,8822,8823,8824,8825,8826,8827,8828,8829,8830,8831,8832,8833,8834,8835,8836,8837,8838,8839,8840,8841,8842,8843,8844,8845,8846,8847,8848,8849,8850,8851,8852,8853,8854,8855,8856,8857,8858,8859,8860,8861,8862,8863,8864,8865,8866,8867,8868,8869,8870,8871,8872,8873,8874,8875,8876,8877,8878,8879,8880,8881,8882,8883,8884,8885,8886,8887,8888,8889,8890,8891,8892,8893,8894,8895,8896,8897,8898,8899,8900,8901,8902,8903,8904,8905,8906,8907,8908,8909,8910,8911,8912,8913,8914,8915,8916,8917,8918,8919,8920,8921,8922,8923,8924,8925,8926,8927,8928,8929,8930,8931,8932,8933,8934,8935,8936,8937,8938,8939,8940,8941,8942,8943,8944,8945,8946,8947,8948,8949,8950,8951,8952,8953,8954,8955,8956,8957,8958,8959,8960,8961,8962,8963,8964,8965,8966,8967,8968,8969,8970,8971,8972,8973,8974,8975,8976,8977,8978,8979,8980,8981,8982,8983,8984,8985,8986,8987,8988,8989,8990,8991,8992,8993,8994,8995,8996,8997,8998,8999,9000,9001,9002,9003,9004,9005,9006,9007,9008,9009,9010,9011,9012,9013,9014,9015,9016,9017,9018,9019,9020,9021,9022,9023,9024,9025,9026,9027,9028,9029,9030,9031,9032,9033,9034,9035,9036,9037,9038,9039,9040,9041,9042,9043,9044,9045,9046,9047,9048,9049,9050,9051,9052,9053,9054,9055,9056,9057,9058,9059,9060,9061,9062,9063,9064,9065,9066,9067,9068,9069,9070,9071,9072,9073,9074,9075,9076,9077,9078,9079,9080,9081,9082,9083,9084,9085,9086,9087,9088,9089,9090,9091,9092,9093,9094,9095,9096,9097,9098,9099,9100,9101,9102,9103,9104,9105,9106,9107,9108,9109,9110,9111,9112,9113,9114,9115,9116,9117,9118,9119,9120,9121,9122,9123,9124,9125,9126,9127,9128,9129]},{"file": 53,"line": 4984,"col": 52},{"file": 62,"line": 13,"col": 22,"fields": [9130,9131]},{"file": 66,"line": 4351,"col": 21,"fields": [9132,9133]},{"file": 63,"line": 37,"col": 24,"fields": [9134,9135]},{"file": 43,"line": 1683,"col": 82},{"file": 43,"line": 1684,"col": 82},{"file": 43,"line": 1685,"col": 72},{"file": 39,"line": 66,"col": 17,"fields": [9136,9137,9138,9139,9140,9141]},{"file": 3,"line": 61,"col": 48},{"file": 3,"line": 75,"col": 60},{"file": 3,"line": 76,"col": 71},{"file": 3,"line": 83,"col": 52},{"file": 3,"line": 94,"col": 53},{"file": 3,"line": 95,"col": 64},{"file": 3,"line": 88,"col": 47},{"file": 3,"line": 89,"col": 58},{"file": 3,"line": 104,"col": 52},{"file": 3,"line": 106,"col": 67},{"file": 3,"line": 109,"col": 54},{"file": 3,"line": 112,"col": 55},{"file": 43,"line": 133,"col": 90},{"file": 55,"line": 444,"col": 24,"fields": [9142]},{"file": 3,"line": 18,"col": 56},{"file": 39,"line": 201,"col": 78},{"file": 39,"line": 202,"col": 76},{"file": 39,"line": 256,"col": 45},{"file": 39,"line": 263,"col": 48},{"file": 39,"line": 267,"col": 64},{"file": 39,"line": 268,"col": 55},{"file": 39,"line": 271,"col": 64},{"file": 39,"line": 272,"col": 51},{"file": 39,"line": 279,"col": 41},{"file": 58,"line": 137,"col": 18,"fields": [9143,9144,9145]},{"file": 29,"line": 931,"col": 18,"fields": [9146,9147]},{"file": 29,"line": 374,"col": 61},{"file": 55,"line": 201,"col": 29,"fields": [9148,9149]},{"file": 29,"line": 343,"col": 73},{"file": 3,"line": 129,"col": 105},{"file": 22,"line": 73,"col": 100},{"file": 22,"line": 78,"col": 68},{"file": 57,"line": 77,"col": 60},{"file": 10,"line": 0,"col": 0,"docs": "","fields": [9150,9151]},{"file": 7,"line": 38,"col": 30,"fields": [9152,9153]},{"file": 16,"line": 842,"col": 35,"fields": [9154,9155,9156]},{"file": 11,"line": 0,"col": 0,"fields": [9157,9158,9159,9160,9161,9162,9163]},{"file": 64,"line": 64,"col": 22,"fields": [9164,9165]},{"file": 10,"line": 55,"col": 33},{"file": 10,"line": 66,"col": 38},{"file": 10,"line": 68,"col": 30},{"file": 10,"line": 74,"col": 44},{"file": 10,"line": 82,"col": 43},{"file": 10,"line": 95,"col": 39},{"file": 10,"line": 96,"col": 61},{"file": 10,"line": 109,"col": 44},{"file": 10,"line": 128,"col": 49},{"file": 10,"line": 137,"col": 47},{"file": 10,"line": 143,"col": 43},{"file": 10,"line": 157,"col": 13},{"file": 12,"line": 0,"col": 0,"docs": "","fields": [9166,9167,9168,9169]},{"file": 12,"line": 43,"col": 68},{"file": 12,"line": 44,"col": 74},{"file": 12,"line": 45,"col": 120},{"file": 12,"line": 46,"col": 125},{"file": 12,"line": 47,"col": 108},{"file": 12,"line": 48,"col": 103},{"file": 12,"line": 49,"col": 120},{"file": 12,"line": 50,"col": 112},{"file": 12,"line": 52,"col": 78},{"file": 12,"line": 63,"col": 60},{"file": 12,"line": 67,"col": 107},{"file": 12,"line": 83,"col": 15},{"file": 12,"line": 85,"col": 63},{"file": 64,"line": 3,"col": 18,"fields": [9170,9171]},{"file": 64,"line": 4,"col": 20,"fields": [9172,9173,9174,9175,9176,9177,9178,9179,9180,9181,9182]},{"file": 11,"line": 34,"col": 20,"fields": [9183,9184,9185]},{"file": 64,"line": 182,"col": 60},{"file": 13,"line": 0,"col": 0,"fields": []},{"file": 14,"line": 0,"col": 0,"fields": []},{"file": 15,"line": 0,"col": 0,"fields": []},{"file": 15,"line": 36,"col": 21,"fields": [9186,9187,9188,9189,9190,9191,9192,9193,9194,9195,9196]},{"file": 15,"line": 71,"col": 21,"fields": [9197,9198,9199]},{"file": 15,"line": 274,"col": 21,"fields": [9200,9201,9202,9203,9204,9205,9206]},{"file": 50,"line": 34,"col": 49,"fields": [9207]},{"file": 22,"line": 406,"col": 28,"fields": [9208,9209,9210]},{"file": 47,"line": 13,"col": 22,"fields": [9211,9212,9213]},{"file": 47,"line": 285,"col": 18,"fields": [9214,9215,9216]},{"file": 16,"line": 0,"col": 0,"fields": []},{"file": 43,"line": 1554,"col": 73,"fields": [9217,9218,9219]},{"file": 16,"line": 723,"col": 23,"fields": [9220,9221,9222]},{"file": 17,"line": 0,"col": 0,"fields": []},{"file": 44,"line": 265,"col": 18,"fields": [9223,9224,9225,9226,9227,9228,9229,9230,9231,9232]},{"file": 13,"line": 12,"col": 19,"fields": [9233,9234]},{"file": 18,"line": 0,"col": 0,"docs": "","fields": []},{"file": 13,"line": 460,"col": 20,"fields": [9235,9236,9237,9238,9239,9240,9241,9242,9243,9244,9245,9246,9247,9248,9249,9250,9251,9252,9253,9254,9255,9256]},{"file": 13,"line": 562,"col": 29,"fields": [9257,9258,9259,9260,9261,9262,9263,9264,9265]},{"file": 13,"line": 606,"col": 20,"fields": [9266,9267,9268]},{"file": 19,"line": 0,"col": 0,"fields": []},{"file": 20,"line": 0,"col": 0,"fields": []},{"file": 21,"line": 0,"col": 0,"fields": []},{"file": 22,"line": 0,"col": 0,"fields": []},{"file": 22,"line": 225,"col": 20,"fields": [9269,9270]},{"file": 22,"line": 232,"col": 22,"fields": [9271]},{"file": 22,"line": 238,"col": 24,"fields": [9272,9273,9274,9275,9276,9277,9278,9279]},{"file": 22,"line": 265,"col": 22,"fields": [9280,9281,9282]},{"file": 22,"line": 286,"col": 28,"fields": [9283,9284,9285,9286,9287]},{"file": 22,"line": 296,"col": 23,"fields": [9288,9289,9290,9291]},{"file": 22,"line": 305,"col": 25,"fields": [9292]},{"file": 22,"line": 311,"col": 27,"fields": [9293,9294]},{"file": 22,"line": 318,"col": 22,"fields": [9295]},{"file": 22,"line": 335,"col": 21,"fields": [9296,9297,9298,9299,9300]},{"file": 22,"line": 345,"col": 27,"fields": [9301,9302,9303]},{"file": 22,"line": 353,"col": 22,"fields": [9304,9305,9306,9307]},{"file": 22,"line": 362,"col": 22,"fields": [9308,9309,9310]},{"file": 22,"line": 370,"col": 19,"fields": [9311,9312,9313,9314,9315,9316]},{"file": 22,"line": 381,"col": 23,"fields": [9317]},{"file": 22,"line": 387,"col": 22,"fields": [9318]},{"file": 22,"line": 393,"col": 25,"fields": [9319]},{"file": 22,"line": 399,"col": 23,"fields": [9320,9321]},{"file": 23,"line": 0,"col": 0,"fields": []},{"file": 23,"line": 19,"col": 25,"fields": [9322,9323]},{"file": 24,"line": 0,"col": 0,"fields": []},{"file": 23,"line": 166,"col": 25,"fields": [9324,9325,9326]},{"file": 25,"line": 0,"col": 0,"docs": "","fields": [9327]},{"file": 26,"line": 0,"col": 0,"fields": []},{"file": 27,"line": 0,"col": 0,"fields": []},{"file": 27,"line": 1571,"col": 27,"fields": [9328,9329]},{"file": 27,"line": 1576,"col": 24,"fields": [9330,9331,9332,9333,9334,9335,9336,9337,9338,9339,9340,9341,9342]},{"file": 28,"line": 0,"col": 0,"fields": []},{"file": 28,"line": 17,"col": 25,"fields": [9343,9344]},{"file": 27,"line": 42,"col": 27,"fields": [9345,9346,9347]},{"file": 29,"line": 0,"col": 0,"docs": "","fields": []},{"file": 29,"line": 250,"col": 29,"fields": [9348,9349,9350,9351,9352]},{"file": 30,"line": 0,"col": 0,"fields": []},{"file": 31,"line": 0,"col": 0,"fields": []},{"file": 32,"line": 0,"col": 0,"docs": "","fields": []},{"file": 33,"line": 0,"col": 0,"fields": []},{"file": 34,"line": 0,"col": 0,"docs": "","fields": []},{"file": 35,"line": 0,"col": 0,"docs": "","fields": []},{"file": 36,"line": 0,"col": 0,"fields": []},{"file": 42,"line": 378,"col": 22,"fields": [9353,9354,9355,9356,9357,9358,9359,9360,9361,9362]},{"file": 37,"line": 0,"col": 0,"fields": []},{"file": 38,"line": 3,"col": 0,"fields": []},{"file": 39,"line": 0,"col": 0,"docs": "","fields": [9363,9364,9365,9366,9367,9368,9369,9370,9371,9372,9373,9374,9375]},{"file": 40,"line": 0,"col": 0,"docs": "","fields": [9376]},{"file": 41,"line": 0,"col": 0,"fields": []},{"file": 42,"line": 0,"col": 0,"fields": []},{"file": 43,"line": 0,"col": 0,"fields": []},{"file": 44,"line": 0,"col": 0,"fields": []},{"file": 45,"line": 0,"col": 0,"fields": []},{"file": 46,"line": 0,"col": 0,"fields": []},{"file": 47,"line": 0,"col": 0,"fields": []},{"file": 48,"line": 0,"col": 0,"fields": []},{"file": 49,"line": 0,"col": 0,"fields": []},{"file": 50,"line": 0,"col": 0,"fields": []},{"file": 51,"line": 0,"col": 0,"fields": []},{"file": 52,"line": 0,"col": 0,"fields": []},{"file": 53,"line": 0,"col": 0,"docs": "","fields": []},{"file": 54,"line": 0,"col": 0,"fields": []},{"file": 55,"line": 0,"col": 0,"fields": []},{"file": 56,"line": 0,"col": 0,"fields": []},{"file": 57,"line": 0,"col": 0,"fields": []},{"file": 58,"line": 0,"col": 0,"fields": []},{"file": 59,"line": 0,"col": 0,"fields": []},{"file": 60,"line": 2,"col": 0,"fields": []},{"file": 22,"line": 457,"col": 23,"fields": [9377,9378,9379]},{"file": 22,"line": 147,"col": 17,"fields": [9380,9381,9382,9383]},{"file": 50,"line": 14,"col": 17,"fields": [9384,9385]},{"file": 61,"line": 0,"col": 0,"docs": "","fields": [9386]},{"file": 45,"line": 594,"col": 23,"fields": [9387,9388,9389,9390,9391,9392,9393,9394]},{"file": 25,"line": 59,"col": 24,"fields": [9395]},{"file": 47,"line": 291,"col": 15,"fields": [9396,9397]},{"file": 47,"line": 372,"col": 17,"fields": [9398,9399,9400]},{"file": 9,"line": 15,"col": 19,"fields": [9401,9402,9403]},{"file": 66,"line": 3304,"col": 25,"fields": [9404,9405,9406,9407]},{"file": 43,"line": 1221,"col": 17,"fields": [9408,9409,9410]},{"file": 44,"line": 288,"col": 12,"fields": [9411,9412,9413]},{"file": 44,"line": 278,"col": 17,"fields": [9414,9415]},{"file": 61,"line": 115,"col": 24,"fields": [9416]},{"file": 62,"line": 0,"col": 0,"fields": []},{"file": 74,"line": 31,"col": 25,"fields": [9417]},{"file": 75,"line": 90,"col": 12,"fields": [9418,9419]},{"file": 66,"line": 3409,"col": 4,"fields": [9420,9421,9422,9423]},{"file": 63,"line": 0,"col": 0,"fields": []},{"file": 45,"line": 727,"col": 25,"fields": [9424,9425,9426,9427,9428,9429,9430]},{"file": 10,"line": 26,"col": 20,"fields": [9431,9432,9433,9434]},{"file": 64,"line": 0,"col": 0,"fields": []},{"file": 22,"line": 479,"col": 20,"fields": [9435,9436,9437]},{"file": 22,"line": 413,"col": 25,"fields": [9438,9439,9440]},{"file": 65,"line": 0,"col": 0,"fields": []},{"file": 63,"line": 130,"col": 19,"fields": [9441,9442,9443]},{"file": 44,"line": 228,"col": 16,"fields": [9444,9445]},{"file": 13,"line": 93,"col": 35,"fields": [9446,9447,9448,9449,9450,9451,9452,9453,9454,9455,9456,9457,9458,9459,9460,9461,9462,9463,9464,9465]},{"file": 13,"line": 181,"col": 38,"fields": [9466,9467]},{"file": 13,"line": 220,"col": 33,"fields": [9468,9469,9470,9471]},{"file": 18,"line": 1457,"col": 16,"fields": []},{"file": 13,"line": 617,"col": 28,"fields": [9472,9473,9474,9475,9476]},{"file": 13,"line": 1247,"col": 26,"fields": [9477,9478,9479]},{"file": 22,"line": 86,"col": 26,"fields": [9480,9481,9482,9483]},{"file": 22,"line": 95,"col": 24,"fields": [9484,9485,9486,9487,9488,9489]},{"file": 22,"line": 118,"col": 24,"fields": [9490,9491,9492,9493,9494,9495,9496,9497,9498]},{"file": 22,"line": 156,"col": 30,"fields": [9499,9500,9501,9502,9503,9504,9505,9506,9507,9508,9509,9510,9511,9512,9513]},{"file": 22,"line": 176,"col": 25,"fields": [9514,9515,9516,9517]},{"file": 22,"line": 612,"col": 24,"fields": [9518,9519]},{"file": 22,"line": 680,"col": 26,"fields": [9520,9521,9522]},{"file": 22,"line": 688,"col": 26,"fields": [9523,9524,9525,9526]},{"file": 22,"line": 697,"col": 19,"fields": [9527,9528,9529]},{"file": 66,"line": 0,"col": 0,"docs": "","fields": []},{"file": 27,"line": 13,"col": 17,"fields": [9530,9531,9532,9533,9534,9535,9536,9537,9538,9539,9540,9541,9542]},{"file": 67,"line": 0,"col": 0,"docs": "","fields": []},{"file": 27,"line": 1593,"col": 29,"fields": [9543,9544,9545]},{"file": 27,"line": 1601,"col": 30,"fields": [9546,9547,9548]},{"file": 27,"line": 1609,"col": 30,"fields": [9549,9550,9551]},{"file": 27,"line": 1617,"col": 31,"fields": [9552,9553,9554]},{"file": 27,"line": 1625,"col": 31,"fields": [9555,9556,9557,9558]},{"file": 27,"line": 1634,"col": 32,"fields": [9559,9560,9561,9562]},{"file": 27,"line": 1643,"col": 30,"fields": [9563,9564,9565,9566]},{"file": 27,"line": 1652,"col": 31,"fields": [9567,9568,9569,9570]},{"file": 27,"line": 1661,"col": 29,"fields": [9571,9572,9573,9574]},{"file": 27,"line": 1670,"col": 31,"fields": [9575,9576,9577,9578,9579]},{"file": 27,"line": 1680,"col": 30,"fields": [9580]},{"file": 27,"line": 1684,"col": 34,"fields": [9581,9582,9583,9584,9585]},{"file": 27,"line": 63,"col": 23,"fields": [9586,9587,9588]},{"file": 30,"line": 539,"col": 14,"fields": []},{"file": 30,"line": 588,"col": 17,"fields": []},{"file": 30,"line": 595,"col": 16,"fields": []},{"file": 30,"line": 608,"col": 17,"fields": []},{"file": 30,"line": 613,"col": 18,"fields": []},{"file": 30,"line": 720,"col": 23,"fields": [9589,9590,9591,9592,9593,9594,9595,9596,9597,9598,9599,9600,9601,9602,9603,9604,9605,9606,9607,9608,9609]},{"file": 30,"line": 744,"col": 23,"fields": [9610,9611,9612,9613,9614,9615]},{"file": 66,"line": 3346,"col": 4,"fields": [9616,9617,9618]},{"file": 31,"line": 252,"col": 22,"fields": []},{"file": 32,"line": 74,"col": 18,"fields": [9619,9620,9621,9622]},{"file": 32,"line": 116,"col": 23,"fields": [9623,9624]},{"file": 42,"line": 379,"col": 17,"fields": [9625,9626]},{"file": 68,"line": 0,"col": 0,"docs": "","fields": [9627]},{"file": 69,"line": 0,"col": 0,"docs": "","fields": [9628]},{"file": 40,"line": 688,"col": 24,"fields": [9629]},{"file": 42,"line": 98,"col": 17,"fields": [9630,9631,9632,9633,9634,9635,9636]},{"file": 42,"line": 342,"col": 19,"fields": [9637,9638,9639,9640,9641,9642,9643]},{"file": 42,"line": 352,"col": 23,"fields": [9644,9645,9646]},{"file": 43,"line": 488,"col": 16,"fields": []},{"file": 43,"line": 51,"col": 19,"fields": [9647,9648]},{"file": 43,"line": 1015,"col": 20,"fields": [9649,9650,9651,9652]},{"file": 70,"line": 0,"col": 0,"fields": []},{"file": 71,"line": 0,"col": 0,"fields": []},{"file": 44,"line": 14,"col": 17,"fields": []},{"file": 44,"line": 138,"col": 21,"fields": []},{"file": 44,"line": 143,"col": 16,"fields": []},{"file": 44,"line": 159,"col": 16,"fields": []},{"file": 72,"line": 0,"col": 0,"fields": []},{"file": 45,"line": 308,"col": 15,"fields": [9653,9654,9655,9656,9657]},{"file": 45,"line": 562,"col": 23,"fields": [9658,9659,9660,9661,9662,9663,9664,9665,9666,9667,9668,9669,9670,9671]},{"file": 45,"line": 578,"col": 23,"fields": [9672,9673,9674,9675,9676,9677,9678,9679,9680,9681,9682,9683,9684,9685]},{"file": 45,"line": 604,"col": 23,"fields": [9686,9687,9688,9689,9690,9691,9692,9693]},{"file": 45,"line": 614,"col": 23,"fields": [9694,9695,9696,9697,9698,9699,9700,9701,9702,9703]},{"file": 45,"line": 626,"col": 23,"fields": [9704,9705,9706,9707,9708,9709,9710,9711,9712,9713]},{"file": 45,"line": 649,"col": 22,"fields": [9714,9715,9716,9717,9718,9719]},{"file": 45,"line": 719,"col": 22,"fields": [9720,9721]},{"file": 45,"line": 745,"col": 26,"fields": [9722,9723]},{"file": 45,"line": 781,"col": 25,"fields": [9724,9725]},{"file": 45,"line": 947,"col": 15,"fields": [9726,9727,9728,9729,9730,9731,9732,9733,9734,9735,9736,9737,9738,9739,9740,9741,9742,9743,9744,9745,9746,9747,9748,9749,9750,9751,9752,9753,9754,9755,9756,9757,9758,9759,9760,9761,9762,9763,9764,9765,9766,9767,9768,9769,9770,9771,9772,9773,9774,9775,9776,9777,9778,9779,9780,9781,9782,9783,9784,9785,9786,9787,9788,9789,9790,9791,9792,9793,9794,9795,9796,9797,9798,9799,9800,9801,9802,9803,9804,9805,9806,9807,9808,9809,9810,9811,9812,9813,9814,9815,9816,9817,9818,9819,9820,9821,9822,9823,9824,9825,9826,9827,9828,9829,9830,9831,9832,9833,9834,9835,9836,9837,9838,9839,9840,9841,9842,9843,9844,9845,9846,9847,9848,9849,9850,9851,9852,9853,9854,9855,9856,9857,9858,9859,9860,9861,9862,9863,9864,9865,9866,9867,9868,9869,9870,9871,9872,9873,9874,9875,9876,9877,9878,9879,9880,9881,9882,9883,9884,9885,9886,9887,9888,9889,9890,9891,9892,9893,9894,9895,9896,9897,9898,9899,9900,9901,9902,9903,9904]},{"file": 73,"line": 0,"col": 0,"fields": []},{"file": 66,"line": 1699,"col": 15,"fields": []},{"file": 66,"line": 2808,"col": 18,"fields": []},{"file": 66,"line": 94,"col": 16,"fields": []},{"file": 66,"line": 126,"col": 14,"fields": []},{"file": 66,"line": 1777,"col": 17,"fields": []},{"file": 66,"line": 2948,"col": 14,"fields": []},{"file": 66,"line": 1860,"col": 7,"fields": []},{"file": 66,"line": 1958,"col": 7,"fields": []},{"file": 66,"line": 3055,"col": 22,"fields": [9905,9906,9907,9908]},{"file": 53,"line": 182,"col": 18,"fields": [9909,9910]},{"file": 53,"line": 187,"col": 24,"fields": [9911,9912]},{"file": 74,"line": 0,"col": 0,"fields": []},{"file": 54,"line": 39,"col": 32,"fields": [9913,9914,9915,9916,9917,9918,9919,9920,9921]},{"file": 54,"line": 52,"col": 20,"fields": [9922,9923,9924,9925,9926,9927,9928,9929,9930,9931,9932,9933]},{"file": 54,"line": 480,"col": 16,"fields": [9934,9935,9936,9937,9938,9939,9940,9941,9942]},{"file": 54,"line": 856,"col": 12,"fields": [9943,9944]},{"file": 54,"line": 997,"col": 18,"fields": [9945,9946,9947,9948]},{"file": 55,"line": 301,"col": 31,"fields": [9949,9950]},{"file": 61,"line": 192,"col": 27,"fields": []},{"file": 74,"line": 24,"col": 16,"fields": [9951,9952,9953,9954,9955]},{"file": 66,"line": 3357,"col": 29,"fields": [9956,9957,9958,9959,9960]},{"file": 22,"line": 484,"col": 22,"fields": [9961,9962]},{"file": 22,"line": 420,"col": 31,"fields": [9963,9964,9965,9966,9967,9968,9969,9970]},{"file": 13,"line": 139,"col": 30,"fields": [9971,9972]},{"file": 22,"line": 618,"col": 25,"fields": [9973,9974,9975,9976,9977,9978,9979,9980]},{"file": 75,"line": 0,"col": 0,"fields": []},{"file": 66,"line": 1757,"col": 18,"fields": []},{"file": 66,"line": 2726,"col": 14,"fields": []},{"file": 66,"line": 3017,"col": 20,"fields": [9981,9982,9983,9984]},{"file": 66,"line": 3046,"col": 12,"fields": [9985,9986,9987,9988]},{"file": 66,"line": 3165,"col": 23,"fields": [9989,9990,9991,9992]},{"file": 66,"line": 3179,"col": 12,"fields": [9993,9994]},{"file": 66,"line": 3352,"col": 19,"fields": [9995,9996]},{"file": 76,"line": 0,"col": 0,"fields": []},{"file": 77,"line": 0,"col": 0,"fields": []},{"file": 27,"line": 844,"col": 23,"fields": [9997,9998,9999,10000,10001]},{"file": 27,"line": 1559,"col": 24,"fields": [10002,10003,10004]},{"file": 40,"line": 711,"col": 29,"fields": [10005,10006,10007,10008]},{"file": 42,"line": 353,"col": 26,"fields": [10009,10010]},{"file": 45,"line": 783,"col": 10,"fields": [10011]},{"file": 66,"line": 3059,"col": 13,"fields": [10012,10013]},{"file": 74,"line": 48,"col": 15,"fields": [10014,10015,10016,10017]},{"file": 54,"line": 491,"col": 23,"fields": [10018,10019,10020,10021,10022,10023,10024]},{"file": 66,"line": 3359,"col": 12,"fields": [10025,10026]},{"file": 66,"line": 3379,"col": 14,"fields": [10027,10028,10029]},{"file": 66,"line": 3390,"col": 13,"fields": [10030,10031]},{"file": 66,"line": 3394,"col": 12,"fields": [10032,10033,10034]},{"file": 75,"line": 96,"col": 17,"fields": [10035,10036,10037,10038,10039,10040,10041,10042]},{"file": 75,"line": 44,"col": 19,"fields": [10043,10044]},{"file": 75,"line": 85,"col": 19,"fields": [10045]},{"file": 27,"line": 891,"col": 24,"fields": [10046]},{"file": 66,"line": 3360,"col": 15,"fields": [10047,10048]},{"file": 66,"line": 3370,"col": 16,"fields": [10049,10050]},{"file": 66,"line": 3382,"col": 15,"fields": [10051,10052]},{"file": 66,"line": 3361,"col": 20,"fields": [10053,10054]},{"file": 66,"line": 3365,"col": 19,"fields": [10055,10056]},{"file": 66,"line": 3372,"col": 21,"fields": [10057,10058,10059]},{"file": 66,"line": 3383,"col": 22,"fields": [10060,10061]},{"file": 13,"line": 734,"col": 24,"docs": " Returns true if the specified feature is enabled.","fields": [10062,10063]},{"file": 13,"line": 748,"col": 24,"docs": " Returns true if every specified feature is enabled.","fields": [10064,10065]},{"file": 13,"line": 640,"col": 20},{"file": 13,"line": 641,"col": 20},{"file": 13,"line": 642,"col": 20},{"file": 13,"line": 643,"col": 20},{"file": 13,"line": 644,"col": 20},{"file": 13,"line": 646,"col": 20},{"file": 13,"line": 651,"col": 20,"fields": [10066]},{"file": 13,"line": 671,"col": 20,"docs": " Adds the specified feature set but not its dependencies.","fields": [10067,10068]},{"file": 13,"line": 677,"col": 20,"docs": " Removes the specified feature but not its dependents.","fields": [10069,10070]},{"file": 13,"line": 684,"col": 20,"docs": " Removes the specified feature but not its dependents.","fields": [10071,10072]},{"file": 13,"line": 689,"col": 20,"fields": [10073,10074]},{"file": 13,"line": 706,"col": 20,"fields": [10075]},{"file": 13,"line": 710,"col": 20,"fields": [10076,10077]},{"file": 13,"line": 714,"col": 20,"fields": [10078,10079]},{"file": 13,"line": 820,"col": 16,"fields": [10080]},{"file": 13,"line": 834,"col": 16,"fields": [10081]},{"file": 13,"line": 841,"col": 16,"fields": [10082]},{"file": 13,"line": 869,"col": 16,"fields": [10083]},{"file": 13,"line": 890,"col": 16,"fields": [10084]},{"file": 13,"line": 897,"col": 16,"fields": [10085]},{"file": 13,"line": 904,"col": 16,"fields": [10086,10087]},{"file": 13,"line": 913,"col": 16,"fields": [10088]},{"file": 13,"line": 974,"col": 16,"fields": [10089]},{"file": 13,"line": 1101,"col": 16,"fields": [10090]},{"file": 13,"line": 1169,"col": 16,"docs": " Returns a name that matches the lib/std/target/* source file name.","fields": [10091]},{"file": 13,"line": 1189,"col": 16,"docs": " All CPU features Zig is aware of, sorted lexicographically by name.","fields": [10092]},{"file": 13,"line": 1214,"col": 16,"docs": " All processors Zig is aware of, sorted lexicographically by name.","fields": [10093]},{"file": 13,"line": 1237,"col": 12,"fields": [10094]},{"file": 14,"line": 13,"col": 12},{"file": 14,"line": 49,"col": 12,"docs": " Write a native-endian integer. TODO audit non-power-of-two int sizes","fields": [10095,10096,10097]},{"file": 14,"line": 57,"col": 12,"docs": " Write a foreign-endian integer. TODO audit non-power-of-two int sizes","fields": [10098,10099,10100]},{"file": 14,"line": 64,"col": 12,"docs": " TODO audit non-power-of-two int sizes","fields": [10101,10102,10103]},{"file": 14,"line": 71,"col": 12,"docs": " TODO audit non-power-of-two int sizes","fields": [10104,10105,10106]},{"file": 14,"line": 78,"col": 12,"docs": " TODO audit non-power-of-two int sizes","fields": [10107,10108,10109,10110]},{"file": 14,"line": 84,"col": 12,"fields": [10111,10112]},{"file": 14,"line": 12,"col": 8},{"file": 15,"line": 30,"col": 8},{"file": 15,"line": 31,"col": 8},{"file": 15,"line": 32,"col": 8},{"file": 15,"line": 33,"col": 8},{"file": 15,"line": 34,"col": 8},{"file": 15,"line": 36,"col": 8},{"file": 15,"line": 50,"col": 8},{"file": 15,"line": 56,"col": 8},{"file": 15,"line": 71,"col": 8},{"file": 15,"line": 74,"col": 8,"docs": " TODO https://github.com/ziglang/zig/issues/3802"},{"file": 15,"line": 123,"col": 8,"docs": " TODO https://github.com/ziglang/zig/issues/3802"},{"file": 15,"line": 221,"col": 8},{"file": 15,"line": 225,"col": 8,"docs": " Shrinks or expands the file. The file offset after this call is left unchanged.","fields": [10113,10114]},{"file": 15,"line": 229,"col": 8},{"file": 15,"line": 233,"col": 8,"docs": " Repositions read/write file offset relative to the current offset. TODO: integrate with async I/O","fields": [10115,10116]},{"file": 15,"line": 239,"col": 8,"docs": " Repositions read/write file offset relative to the end. TODO: integrate with async I/O","fields": [10117,10118]},{"file": 15,"line": 245,"col": 8,"docs": " Repositions read/write file offset relative to the beginning. TODO: integrate with async I/O","fields": [10119,10120]},{"file": 15,"line": 249,"col": 8},{"file": 15,"line": 252,"col": 8,"docs": " TODO: integrate with async I/O","fields": [10121]},{"file": 15,"line": 264,"col": 8},{"file": 15,"line": 267,"col": 8,"docs": " TODO: integrate with async I/O","fields": [10122]},{"file": 15,"line": 274,"col": 8},{"file": 15,"line": 296,"col": 8},{"file": 15,"line": 366,"col": 8},{"file": 15,"line": 372,"col": 8,"docs": " Changes the mode of the file. The process must have the correct privileges in order to do this successfully, or must have the effective user ID matching the owner of the file.","fields": [10123,10124]},{"file": 15,"line": 376,"col": 8},{"file": 15,"line": 383,"col": 8,"docs": " Changes the owner and group of the file. The process must have the correct privileges in order to do this successfully. The group may be changed by the owner of the file to any group of which the owner is a member. If the owner or group is specified as `null`, the ID is not changed.","fields": [10125,10126,10127]},{"file": 15,"line": 387,"col": 8},{"file": 15,"line": 394,"col": 8,"docs": " The underlying file system may have a different granularity than nanoseconds, and therefore this function cannot guarantee any precision will be stored. Further, the maximum value is limited by the system ABI. When a value is provided that exceeds this range, the value is clamped to the maximum. TODO: integrate with async I/O","fields": [10128,10129,10130]},{"file": 15,"line": 422,"col": 8,"docs": " Reads all the bytes from the current position to the end of the file. On success, caller owns returned buffer. If the file is larger than `max_bytes`, returns `error.FileTooBig`.","fields": [10131,10132,10133]},{"file": 15,"line": 432,"col": 8,"docs": " Reads all the bytes from the current position to the end of the file. On success, caller owns returned buffer. If the file is larger than `max_bytes`, returns `error.FileTooBig`. If `size_hint` is specified the initial buffer size is calculated using that value, otherwise an arbitrary value is used instead. Allows specifying alignment and a sentinel value.","fields": [10134,10135,10136,10137,10138,10139]},{"file": 15,"line": 464,"col": 8},{"file": 15,"line": 465,"col": 8},{"file": 15,"line": 481,"col": 8,"docs": " Returns the number of bytes read. If the number read is smaller than `buffer.len`, it means the file reached the end. Reaching the end of a file is not an error condition.","fields": [10140,10141]},{"file": 15,"line": 491,"col": 8,"fields": [10142,10143,10144]},{"file": 15,"line": 505,"col": 8,"docs": " Returns the number of bytes read. If the number read is smaller than `buffer.len`, it means the file reached the end. Reaching the end of a file is not an error condition.","fields": [10145,10146,10147]},{"file": 15,"line": 516,"col": 8,"docs": " See https://github.com/ziglang/zig/issues/7699","fields": [10148,10149]},{"file": 15,"line": 537,"col": 8,"docs": " Returns the number of bytes read. If the number read is smaller than the total bytes from all the buffers, it means the file reached the end. Reaching the end of a file is not an error condition. The `iovecs` parameter is mutable because this function needs to mutate the fields in order to handle partial reads from the underlying OS layer. See https://github.com/ziglang/zig/issues/7699","fields": [10150,10151]},{"file": 15,"line": 559,"col": 8,"docs": " See https://github.com/ziglang/zig/issues/7699","fields": [10152,10153,10154]},{"file": 15,"line": 580,"col": 8,"docs": " Returns the number of bytes read. If the number read is smaller than the total bytes from all the buffers, it means the file reached the end. Reaching the end of a file is not an error condition. The `iovecs` parameter is mutable because this function needs to mutate the fields in order to handle partial reads from the underlying OS layer. See https://github.com/ziglang/zig/issues/7699","fields": [10155,10156,10157]},{"file": 15,"line": 601,"col": 8},{"file": 15,"line": 602,"col": 8},{"file": 15,"line": 616,"col": 8,"fields": [10158,10159]},{"file": 15,"line": 623,"col": 8,"fields": [10160,10161,10162]},{"file": 15,"line": 635,"col": 8,"fields": [10163,10164,10165]},{"file": 15,"line": 644,"col": 8,"docs": " See https://github.com/ziglang/zig/issues/7699 See equivalent function: `std.net.Stream.writev`.","fields": [10166,10167]},{"file": 15,"line": 663,"col": 8,"docs": " The `iovecs` parameter is mutable because this function needs to mutate the fields in order to handle partial writes from the underlying OS layer. See https://github.com/ziglang/zig/issues/7699 See equivalent function: `std.net.Stream.writevAll`.","fields": [10168,10169]},{"file": 15,"line": 680,"col": 8,"docs": " See https://github.com/ziglang/zig/issues/7699","fields": [10170,10171,10172]},{"file": 15,"line": 698,"col": 8,"docs": " The `iovecs` parameter is mutable because this function needs to mutate the fields in order to handle partial writes from the underlying OS layer. See https://github.com/ziglang/zig/issues/7699","fields": [10173,10174,10175]},{"file": 15,"line": 716,"col": 8},{"file": 15,"line": 718,"col": 8,"fields": [10176,10177,10178,10179,10180]},{"file": 15,"line": 726,"col": 8,"docs": " Returns the number of bytes copied. If the number read is smaller than `buffer.len`, it means the in file reached the end. Reaching the end of a file is not an error condition.","fields": [10181,10182,10183,10184,10185]},{"file": 15,"line": 740,"col": 8},{"file": 15,"line": 756,"col": 8},{"file": 15,"line": 758,"col": 8,"fields": [10186,10187,10188]},{"file": 15,"line": 774,"col": 8,"docs": " Does not try seeking in either of the File parameters. See `writeFileAll` as an alternative to calling this.","fields": [10189,10190,10191]},{"file": 15,"line": 860,"col": 8},{"file": 15,"line": 862,"col": 8,"fields": [10192]},{"file": 15,"line": 866,"col": 8},{"file": 15,"line": 872,"col": 8},{"file": 15,"line": 882,"col": 8,"fields": [10193]},{"file": 15,"line": 889,"col": 8},{"file": 15,"line": 901,"col": 8,"docs": " Blocks when an incompatible lock is held by another process. A process may hold only one type of lock (shared or exclusive) on a file. When a process terminates in any way, the lock is released. Assumes the file is unlocked. TODO: integrate with async I/O","fields": [10194,10195]},{"file": 15,"line": 937,"col": 8,"docs": " Assumes the file is locked.","fields": [10196]},{"file": 15,"line": 968,"col": 8,"docs": " Attempts to obtain a lock, returning `true` if the lock is obtained, and `false` if there was an existing incompatible lock held. A process may hold only one type of lock (shared or exclusive) on a file. When a process terminates in any way, the lock is released. Assumes the file is unlocked. TODO: integrate with async I/O","fields": [10197,10198]},{"file": 15,"line": 1008,"col": 8,"docs": " Assumes the file is already locked in exclusive mode. Atomically modifies the lock to be in shared mode, without releasing it. TODO: integrate with async I/O","fields": [10199]},{"file": 15,"line": 796,"col": 4,"docs": " Low level function which can fail for OS-specific reasons. See `writeFileAll` as an alternative to calling this. TODO integrate with async I/O","fields": [10200,10201,10202]},{"file": 15,"line": 886,"col": 4},{"file": 15,"line": 887,"col": 4},{"file": 0,"line": 1,"col": 4},{"file": 0,"line": 2,"col": 4},{"file": 0,"line": 3,"col": 4},{"file": 0,"line": 4,"col": 4},{"file": 0,"line": 5,"col": 4},{"file": 0,"line": 0,"col": 0},{"file": 16,"line": 56,"col": 12},{"file": 16,"line": 57,"col": 12},{"file": 16,"line": 369,"col": 12,"docs": " The type of the unmanaged hash map underlying this wrapper"},{"file": 16,"line": 371,"col": 12,"docs": " An entry, containing pointers to a key and value stored in the map"},{"file": 16,"line": 373,"col": 12,"docs": " A copy of a key and value which are no longer in the map"},{"file": 16,"line": 375,"col": 12,"docs": " The integer type that is the result of hashing"},{"file": 16,"line": 377,"col": 12,"docs": " The iterator type returned by iterator()"},{"file": 16,"line": 379,"col": 12},{"file": 16,"line": 380,"col": 12},{"file": 16,"line": 383,"col": 12,"docs": " The integer type used to store the size of the map"},{"file": 16,"line": 385,"col": 12,"docs": " The type returned from getOrPut and variants"},{"file": 16,"line": 404,"col": 12,"docs": " Create a managed hash map with a context","fields": [10203,10204]},{"file": 16,"line": 425,"col": 12,"docs": " Empty the map, but keep the backing allocation for future use. This does *not* free keys or values! Be sure to release them if they need deinitialization before calling this function.","fields": [10205]},{"file": 16,"line": 433,"col": 12,"docs": " Empty the map and release the backing allocation. This does *not* free keys or values! Be sure to release them if they need deinitialization before calling this function.","fields": [10206]},{"file": 16,"line": 444,"col": 12,"docs": " Create an iterator over the entries in the map. The iterator is invalidated if the map is modified.","fields": [10207]},{"file": 16,"line": 450,"col": 12,"docs": " Create an iterator over the keys in the map. The iterator is invalidated if the map is modified.","fields": [10208]},{"file": 16,"line": 466,"col": 12,"docs": " If key exists this function cannot fail. If there is an existing item with `key`, then the result `Entry` pointers point to it, and found_existing is true. Otherwise, puts a new item with undefined value, and the `Entry` pointers point to it. Caller should then initialize the value (but not the key).","fields": [10209,10210]},{"file": 16,"line": 476,"col": 12,"docs": " If key exists this function cannot fail. If there is an existing item with `key`, then the result `Entry` pointers point to it, and found_existing is true. Otherwise, puts a new item with undefined key and value, and the `Entry` pointers point to it. Caller must then initialize the key and value.","fields": [10211,10212,10213]},{"file": 16,"line": 487,"col": 12,"docs": " If there is an existing item with `key`, then the result `Entry` pointers point to it, and found_existing is true. Otherwise, puts a new item with undefined value, and the `Entry` pointers point to it. Caller should then initialize the value (but not the key). If a new entry needs to be stored, this function asserts there is enough capacity to store it.","fields": [10214,10215]},{"file": 16,"line": 498,"col": 12,"docs": " If there is an existing item with `key`, then the result `Entry` pointers point to it, and found_existing is true. Otherwise, puts a new item with undefined value, and the `Entry` pointers point to it. Caller must then initialize the key and value. If a new entry needs to be stored, this function asserts there is enough capacity to store it.","fields": [10216,10217,10218]},{"file": 16,"line": 502,"col": 12,"fields": [10219,10220,10221]},{"file": 16,"line": 506,"col": 12},{"file": 16,"line": 510,"col": 12,"docs": " Increases capacity, guaranteeing that insertions up until the `expected_count` will not cause an allocation, and therefore cannot fail.","fields": [10222,10223]},{"file": 16,"line": 517,"col": 12,"docs": " Increases capacity, guaranteeing that insertions up until `additional_count` **more** items will not cause an allocation, and therefore cannot fail.","fields": [10224,10225]},{"file": 16,"line": 523,"col": 12,"docs": " Returns the number of total elements which may be present before it is no longer guaranteed that no allocations will be performed.","fields": [10226]},{"file": 16,"line": 542,"col": 12,"docs": " Asserts there is enough capacity to store the new key-value pair. Clobbers any existing data. To detect if a put would clobber existing data, see `getOrPutAssumeCapacity`.","fields": [10227,10228,10229]},{"file": 16,"line": 549,"col": 12,"docs": " Asserts there is enough capacity to store the new key-value pair. Asserts that it does not clobber any existing data. To detect if a put would clobber existing data, see `getOrPutAssumeCapacity`.","fields": [10230,10231,10232]},{"file": 16,"line": 554,"col": 12,"docs": " Inserts a new `Entry` into the hash map, returning the previous one, if any.","fields": [10233,10234,10235]},{"file": 16,"line": 560,"col": 12,"docs": " Inserts a new `Entry` into the hash map, returning the previous one, if any. If insertion happuns, asserts there is enough capacity without allocating.","fields": [10236,10237,10238]},{"file": 16,"line": 565,"col": 12,"docs": " Removes a value from the map and returns the removed kv pair.","fields": [10239,10240]},{"file": 16,"line": 569,"col": 12,"fields": [10241,10242,10243]},{"file": 16,"line": 577,"col": 12,"fields": [10244,10245,10246]},{"file": 16,"line": 584,"col": 12,"fields": [10247,10248,10249]},{"file": 16,"line": 589,"col": 12,"docs": " Finds the actual key associated with an adapted key in the map","fields": [10250,10251]},{"file": 16,"line": 592,"col": 12,"fields": [10252,10253,10254]},{"file": 16,"line": 596,"col": 12,"fields": [10255,10256]},{"file": 16,"line": 599,"col": 12,"fields": [10257,10258,10259]},{"file": 16,"line": 604,"col": 12,"docs": " Finds the key and value associated with a key in the map","fields": [10260,10261]},{"file": 16,"line": 608,"col": 12,"fields": [10262,10263,10264]},{"file": 16,"line": 617,"col": 12,"fields": [10265,10266,10267]},{"file": 16,"line": 623,"col": 12,"docs": " If there is an `Entry` with a matching key, it is deleted from the hash map, and then returned from this function.","fields": [10268,10269]},{"file": 16,"line": 627,"col": 12,"fields": [10270,10271,10272]},{"file": 16,"line": 632,"col": 12,"docs": " Creates a copy of this map, using the same allocator","fields": [10273]},{"file": 16,"line": 638,"col": 12,"docs": " Creates a copy of this map, using a specified allocator","fields": [10274,10275]},{"file": 16,"line": 644,"col": 12,"docs": " Creates a copy of this map, using a specified context","fields": [10276,10277]},{"file": 16,"line": 650,"col": 12,"docs": " Creates a copy of this map, using a specified allocator and context.","fields": [10278,10279,10280]},{"file": 16,"line": 387,"col": 8},{"file": 16,"line": 707,"col": 12},{"file": 16,"line": 711,"col": 12},{"file": 16,"line": 713,"col": 12},{"file": 16,"line": 718,"col": 12},{"file": 16,"line": 789,"col": 12},{"file": 16,"line": 817,"col": 12},{"file": 16,"line": 818,"col": 12},{"file": 16,"line": 842,"col": 12},{"file": 16,"line": 848,"col": 12},{"file": 16,"line": 850,"col": 12,"fields": [10281,10282]},{"file": 16,"line": 856,"col": 12,"fields": [10283,10284,10285]},{"file": 16,"line": 879,"col": 12},{"file": 16,"line": 881,"col": 12,"fields": [10286,10287,10288]},{"file": 16,"line": 886,"col": 12,"fields": [10289,10290,10291,10292]},{"file": 16,"line": 891,"col": 12,"fields": [10293,10294,10295]},{"file": 16,"line": 894,"col": 12,"fields": [10296,10297,10298,10299]},{"file": 16,"line": 898,"col": 12,"fields": [10300]},{"file": 16,"line": 906,"col": 12,"fields": [10301,10302]},{"file": 16,"line": 934,"col": 12,"fields": [10303]},{"file": 16,"line": 938,"col": 12,"fields": [10304]},{"file": 16,"line": 971,"col": 12,"docs": " Insert an entry in the map. Assumes it is not already present.","fields": [10305,10306,10307,10308]},{"file": 16,"line": 986,"col": 12,"docs": " Asserts there is enough capacity to store the new key-value pair. Clobbers any existing data. To detect if a put would clobber existing data, see `getOrPutAssumeCapacity`.","fields": [10309,10310,10311]},{"file": 16,"line": 991,"col": 12,"fields": [10312,10313,10314,10315]},{"file": 16,"line": 998,"col": 12,"docs": " Insert an entry in the map. Assumes it is not already present, and that no allocation is needed.","fields": [10316,10317,10318]},{"file": 16,"line": 1028,"col": 12,"docs": " Inserts a new `Entry` into the hash map, returning the previous one, if any.","fields": [10319,10320,10321,10322]},{"file": 16,"line": 1033,"col": 12,"fields": [10323,10324,10325,10326,10327]},{"file": 16,"line": 1048,"col": 12,"docs": " Inserts a new `Entry` into the hash map, returning the previous one, if any. If insertion happens, asserts there is enough capacity without allocating.","fields": [10328,10329,10330]},{"file": 16,"line": 1053,"col": 12,"fields": [10331,10332,10333,10334]},{"file": 16,"line": 1068,"col": 12,"docs": " If there is an `Entry` with a matching key, it is deleted from the hash map, and then returned from this function.","fields": [10335,10336]},{"file": 16,"line": 1073,"col": 12,"fields": [10337,10338,10339]},{"file": 16,"line": 1076,"col": 12,"fields": [10340,10341,10342]},{"file": 16,"line": 1148,"col": 12,"fields": [10343,10344]},{"file": 16,"line": 1153,"col": 12,"fields": [10345,10346,10347]},{"file": 16,"line": 1156,"col": 12,"fields": [10348,10349,10350]},{"file": 16,"line": 1167,"col": 12,"docs": " Insert an entry if the associated key is not already present, otherwise update preexisting value.","fields": [10351,10352,10353,10354]},{"file": 16,"line": 1178,"col": 12,"docs": " Get an optional pointer to the actual key associated with adapted key, if present.","fields": [10355,10356]},{"file": 16,"line": 1183,"col": 12,"fields": [10357,10358,10359]},{"file": 16,"line": 1186,"col": 12,"fields": [10360,10361,10362]},{"file": 16,"line": 1194,"col": 12,"docs": " Get a copy of the actual key associated with adapted key, if present.","fields": [10363,10364]},{"file": 16,"line": 1199,"col": 12,"fields": [10365,10366,10367]},{"file": 16,"line": 1202,"col": 12,"fields": [10368,10369,10370]},{"file": 16,"line": 1210,"col": 12,"docs": " Get an optional pointer to the value associated with key, if present.","fields": [10371,10372]},{"file": 16,"line": 1226,"col": 12,"docs": " Get a copy of the value associated with key, if present.","fields": [10373,10374]},{"file": 16,"line": 1241,"col": 12,"fields": [10375,10376,10377]},{"file": 16,"line": 1253,"col": 12,"fields": [10378,10379,10380,10381]},{"file": 16,"line": 1273,"col": 12,"fields": [10382,10383]},{"file": 16,"line": 1278,"col": 12,"fields": [10384,10385,10386]},{"file": 16,"line": 1352,"col": 12,"fields": [10387,10388,10389,10390]},{"file": 16,"line": 1357,"col": 12,"fields": [10391,10392,10393,10394,10395]},{"file": 16,"line": 1367,"col": 12,"docs": " Return true if there is a value associated with key in the map.","fields": [10396,10397]},{"file": 16,"line": 1382,"col": 12,"docs": " If there is an `Entry` with a matching key, it is deleted from the hash map, and this function returns true.  Otherwise this function returns false.","fields": [10398,10399]},{"file": 16,"line": 1387,"col": 12,"fields": [10400,10401,10402]},{"file": 16,"line": 1390,"col": 12,"fields": [10403,10404,10405]},{"file": 16,"line": 1421,"col": 12,"fields": [10406,10407]},{"file": 16,"line": 1426,"col": 12,"fields": [10408,10409,10410]},{"file": 16,"line": 681,"col": 8},{"file": 16,"line": 704,"col": 8,"docs": " Capacity of the first grow when bootstrapping the hashmap."},{"file": 16,"line": 723,"col": 8},{"file": 16,"line": 743,"col": 8,"docs": " Metadata for a slot. It can be in three states: empty, used or tombstone. Tombstones indicate that an entry was previously used, they are a simple way to handle removal. To this state, we add 7 bits from the slot's key hash. These are used as a fast way to disambiguate between entries without having to use the equality function. If two fingerprints are different, we know that we don't have to compare the keys at all. The 7 bits are the highest ones from a 64 bit hash. This way, not only we use the `log2(capacity)` lowest bits from the hash to determine a slot index, but we use 7 more bits to quickly resolve collisions when multiple elements with different hashes end up wanting to be in the same slot. Not using the equality function means we don't have to read into the entries array, likely avoiding a cache miss and a potentially costly function call."},{"file": 16,"line": 864,"col": 8,"fields": [10411,10412]},{"file": 17,"line": 46,"col": 12},{"file": 17,"line": 60,"col": 12,"docs": " Initialize with capacity to hold at least `num` elements. The resulting capacity is likely to be equal to `num`. Deinitialize with `deinit` or use `toOwnedSlice`.","fields": [10413,10414]},{"file": 17,"line": 76,"col": 12,"docs": " ArrayList takes ownership of the passed in slice. The slice must have been allocated with `allocator`. Deinitialize with `deinit` or use `toOwnedSlice`.","fields": [10415,10416]},{"file": 17,"line": 84,"col": 12},{"file": 17,"line": 88,"col": 12,"docs": " Initializes an ArrayListUnmanaged with the `items` and `capacity` fields of this ArrayList. Empties this ArrayList.","fields": [10417]},{"file": 17,"line": 104,"col": 12,"docs": " The caller owns the returned memory. Empties this ArrayList.","fields": [10418,10419]},{"file": 17,"line": 112,"col": 12,"docs": " Insert `item` at index `n` by moving `list[n .. list.len]` to make room. This operation is O(N).","fields": [10420,10421,10422]},{"file": 17,"line": 122,"col": 12,"docs": " Insert slice `items` at index `i` by moving `list[i .. list.len]` to make room. This operation is O(N).","fields": [10423,10424,10425]},{"file": 17,"line": 134,"col": 12,"docs": " Replace range of elements `list[start..start+len]` with `new_items`. Grows list if `len < new_items.len`. Shrinks list if `len > new_items.len`. Invalidates pointers if this ArrayList is resized.","fields": [10426,10427,10428,10429]},{"file": 17,"line": 167,"col": 12,"docs": " Extend the list by 1 element, but assert `self.capacity` is sufficient to hold an additional item. **Does not** invalidate pointers.","fields": [10430,10431]},{"file": 17,"line": 177,"col": 12,"docs": " Remove the element at index `i`, shift elements after index `i` forward, and return the removed element. Asserts the array has at least one item. Invalidates pointers to end of list. This operation is O(N).","fields": [10432,10433]},{"file": 17,"line": 191,"col": 12,"docs": " Removes the element at the specified index and returns it. The empty slot is filled from the end of the list. This operation is O(1).","fields": [10434,10435]},{"file": 17,"line": 216,"col": 12},{"file": 17,"line": 223,"col": 12,"docs": " Initializes a Writer which will append to the list.","fields": [10436]},{"file": 17,"line": 236,"col": 12,"docs": " Append a value to the list `n` times. Allocates more memory as necessary.","fields": [10437,10438,10439]},{"file": 17,"line": 244,"col": 12,"docs": " Append a value to the list `n` times. Asserts the capacity is enough. **Does not** invalidate pointers.","fields": [10440,10441,10442]},{"file": 17,"line": 260,"col": 12,"docs": " Reduce allocated capacity to `new_len`. May invalidate element pointers.","fields": [10443,10444]},{"file": 17,"line": 284,"col": 12,"docs": " Invalidates all element pointers.","fields": [10445]},{"file": 17,"line": 289,"col": 12,"docs": " Invalidates all element pointers.","fields": [10446]},{"file": 17,"line": 295,"col": 12},{"file": 17,"line": 340,"col": 12,"docs": " Increases the array's length to match the full capacity that is already allocated. The new elements have `undefined` values. **Does not** invalidate pointers.","fields": [10447]},{"file": 17,"line": 367,"col": 12,"docs": " Resize the array, adding `n` new elements, which have `undefined` values. The return value is an array pointing to the newly allocated elements. The returned pointer becomes invalid when the list is resized. Resizes list if `self.capacity` is not large enough.","fields": [10448,10449]},{"file": 17,"line": 378,"col": 12,"docs": " Resize the array, adding `n` new elements, which have `undefined` values. The return value is an array pointing to the newly allocated elements. Asserts that there is already space for the new item without allocating more. **Does not** invalidate element pointers. The returned pointer becomes invalid when the list is resized.","fields": [10450,10451]},{"file": 17,"line": 388,"col": 12,"docs": " Remove and return the last element from the list. Asserts the list has at least one item. Invalidates pointers to the removed element.","fields": [10452]},{"file": 17,"line": 397,"col": 12,"docs": " Remove and return the last element from the list, or return `null` if list is empty. Invalidates pointers to the removed element, if any.","fields": [10453]},{"file": 17,"line": 414,"col": 12,"docs": " Returns a slice of only the extra capacity after items. This can be useful for writing directly into an ArrayList. Note that such an operation must be followed up with a direct modification of `self.items.len`.","fields": [10454]},{"file": 17,"line": 30,"col": 8},{"file": 17,"line": 229,"col": 8,"docs": " Same as `append` except it returns the number of bytes written, which is always the same as `m.len`. The purpose of this function existing is to match `std.io.Writer` API.","fields": [10455,10456]},{"file": 13,"line": 66,"col": 16,"fields": [10457]},{"file": 13,"line": 73,"col": 16,"fields": [10458]},{"file": 13,"line": 83,"col": 16,"fields": [10459,10460]},{"file": 13,"line": 12,"col": 8},{"file": 13,"line": 441,"col": 8},{"file": 13,"line": 442,"col": 8},{"file": 13,"line": 443,"col": 8},{"file": 13,"line": 444,"col": 8},{"file": 13,"line": 445,"col": 8},{"file": 13,"line": 446,"col": 8},{"file": 13,"line": 447,"col": 8},{"file": 13,"line": 448,"col": 8},{"file": 13,"line": 449,"col": 8},{"file": 13,"line": 450,"col": 8},{"file": 13,"line": 451,"col": 8},{"file": 13,"line": 452,"col": 8},{"file": 13,"line": 453,"col": 8},{"file": 13,"line": 454,"col": 8},{"file": 13,"line": 455,"col": 8},{"file": 13,"line": 456,"col": 8},{"file": 13,"line": 457,"col": 8},{"file": 13,"line": 458,"col": 8},{"file": 13,"line": 460,"col": 8},{"file": 13,"line": 562,"col": 8},{"file": 13,"line": 595,"col": 8},{"file": 13,"line": 606,"col": 8},{"file": 13,"line": 1321,"col": 8,"docs": " TODO delete this deprecated declaration after 0.9.0 is released"},{"file": 13,"line": 1323,"col": 8},{"file": 13,"line": 1325,"col": 8,"fields": [10461,10462]},{"file": 13,"line": 1329,"col": 8,"fields": [10463,10464,10465,10466]},{"file": 13,"line": 1333,"col": 8,"fields": [10467,10468]},{"file": 13,"line": 1337,"col": 8,"fields": [10469,10470]},{"file": 13,"line": 1349,"col": 8,"fields": [10471]},{"file": 13,"line": 1353,"col": 8,"fields": [10472,10473]},{"file": 13,"line": 1363,"col": 8,"fields": [10474]},{"file": 13,"line": 1367,"col": 8,"fields": [10475]},{"file": 13,"line": 1371,"col": 8,"fields": [10476,10477]},{"file": 13,"line": 1381,"col": 8,"fields": [10478]},{"file": 13,"line": 1385,"col": 8,"fields": [10479,10480]},{"file": 13,"line": 1398,"col": 8,"fields": [10481]},{"file": 13,"line": 1402,"col": 8,"fields": [10482]},{"file": 13,"line": 1406,"col": 8,"fields": [10483]},{"file": 13,"line": 1410,"col": 8,"fields": [10484]},{"file": 13,"line": 1414,"col": 8,"fields": [10485]},{"file": 13,"line": 1426,"col": 8,"fields": [10486]},{"file": 13,"line": 1430,"col": 8,"fields": [10487]},{"file": 13,"line": 1434,"col": 8,"fields": [10488,10489]},{"file": 13,"line": 1438,"col": 8,"fields": [10490]},{"file": 13,"line": 1442,"col": 8,"fields": [10491]},{"file": 13,"line": 1446,"col": 8},{"file": 13,"line": 1452,"col": 8,"fields": [10492]},{"file": 13,"line": 1456,"col": 8,"fields": [10493]},{"file": 13,"line": 1479,"col": 8},{"file": 13,"line": 1512,"col": 8,"fields": [10494]},{"file": 13,"line": 1701,"col": 8,"docs": " 0c spim    little-endian MIPS 3000 family 1c 68000   Motorola MC68000 2c 68020   Motorola MC68020 5c arm     little-endian ARM 6c amd64   AMD64 and compatibles (e.g., Intel EM64T) 7c arm64   ARM64 (ARMv8) 8c 386     Intel i386, i486, Pentium, etc. kc sparc   Sun SPARC qc power   Power PC vc mips    big-endian MIPS 3000 family","fields": [10495]},{"file": 13,"line": 1715,"col": 8,"fields": [10496]},{"file": 19,"line": 14,"col": 12},{"file": 19,"line": 15,"col": 12},{"file": 19,"line": 16,"col": 12},{"file": 19,"line": 17,"col": 12},{"file": 19,"line": 19,"col": 12},{"file": 19,"line": 20,"col": 12},{"file": 19,"line": 22,"col": 12},{"file": 19,"line": 109,"col": 12,"fields": [10497]},{"file": 19,"line": 32,"col": 8},{"file": 20,"line": 15,"col": 12},{"file": 20,"line": 52,"col": 12,"docs": " Appends to the `std.ArrayList` contents by reading from the stream until end of stream is found. If the number of bytes appended would exceed `max_append_size`, `error.StreamTooLong` is returned and the `std.ArrayList` has exactly `max_append_size` bytes appended.","fields": [10498,10499,10500]},{"file": 20,"line": 56,"col": 12,"fields": [10501,10502,10503,10504]},{"file": 20,"line": 90,"col": 12,"docs": " Allocates enough memory to hold all the contents of the stream. If the allocated memory would be greater than `max_size`, returns `error.StreamTooLong`. Caller owns returned memory. If this function returns an error, the contents from the stream read so far are lost.","fields": [10505,10506,10507]},{"file": 20,"line": 145,"col": 12,"docs": " Reads from the stream until specified byte is found. If the buffer is not large enough to hold the entire contents, `error.StreamTooLong` is returned. If end-of-stream is found, `error.EndOfStream` is returned. Returns a slice of the stream data, with ptr equal to `buf.ptr`. The delimiter byte is written to the output buffer but is not included in the returned slice.","fields": [10508,10509,10510]},{"file": 20,"line": 166,"col": 12,"docs": " Allocates enough memory to read until `delimiter` or end-of-stream. If the allocated memory would be greater than `max_size`, returns `error.StreamTooLong`. If end-of-stream is found, returns the rest of the stream. If this function is called again after that, returns null. Caller owns returned memory. If this function returns an error, the contents from the stream read so far are lost.","fields": [10511,10512,10513,10514]},{"file": 20,"line": 192,"col": 12,"docs": " Reads from the stream until specified byte is found. If the buffer is not large enough to hold the entire contents, `error.StreamTooLong` is returned. If end-of-stream is found, returns the rest of the stream. If this function is called again after that, returns null. Returns a slice of the stream data, with ptr equal to `buf.ptr`. The delimiter byte is written to the output buffer but is not included in the returned slice.","fields": [10515,10516,10517]},{"file": 20,"line": 218,"col": 12,"docs": " Reads from the stream until specified byte is found, discarding all data, including the delimiter. If end-of-stream is found, this function succeeds.","fields": [10518,10519]},{"file": 20,"line": 250,"col": 12,"docs": " Reads a native-endian integer","fields": [10520,10521]},{"file": 20,"line": 256,"col": 12,"docs": " Reads a foreign-endian integer","fields": [10522,10523]},{"file": 20,"line": 261,"col": 12,"fields": [10524,10525]},{"file": 20,"line": 266,"col": 12,"fields": [10526,10527]},{"file": 20,"line": 285,"col": 12,"docs": " Optional parameters for `skipBytes`"},{"file": 20,"line": 291,"col": 12,"docs": " Reads `num_bytes` bytes from the stream and discards them","fields": [10528,10529,10530]},{"file": 20,"line": 303,"col": 12,"docs": " Reads `slice.len` bytes from the stream and returns if they are the same as the passed slice","fields": [10531,10532]},{"file": 20,"line": 314,"col": 12,"fields": [10533,10534]},{"file": 20,"line": 325,"col": 12,"docs": " Reads an integer with the same size as the given enum's tag type. If the integer matches an enum tag, casts the integer to the enum tag and returns it. Otherwise, returns an error. TODO optimization taking advantage of most fields being in order","fields": [10535,10536,10537]},{"file": 20,"line": 19,"col": 8},{"file": 21,"line": 15,"col": 12},{"file": 21,"line": 16,"col": 12},{"file": 21,"line": 14,"col": 8},{"file": 22,"line": 225,"col": 8,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 22,"line": 232,"col": 8,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 22,"line": 238,"col": 8,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 22,"line": 265,"col": 8,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 22,"line": 278,"col": 8,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 22,"line": 286,"col": 8,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 22,"line": 296,"col": 8,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 22,"line": 305,"col": 8,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 22,"line": 311,"col": 8,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 22,"line": 318,"col": 8,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 22,"line": 324,"col": 8,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 22,"line": 328,"col": 8,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 22,"line": 335,"col": 8,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 22,"line": 345,"col": 8,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 22,"line": 353,"col": 8,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 22,"line": 362,"col": 8,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 22,"line": 370,"col": 8,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 22,"line": 381,"col": 8,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 22,"line": 387,"col": 8,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 22,"line": 393,"col": 8,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 22,"line": 399,"col": 8,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 22,"line": 406,"col": 8,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 23,"line": 19,"col": 12,"docs": " Node inside the linked list wrapping the actual data."},{"file": 23,"line": 82,"col": 12,"docs": " Remove a node from the list. Arguments:     node: Pointer to the node to be removed.","fields": [10538,10539]},{"file": 23,"line": 98,"col": 12,"docs": " Remove and return the first node in the list. Returns:     A pointer to the first node in the list.","fields": [10540]},{"file": 23,"line": 106,"col": 12,"docs": " Iterate over all nodes, returning the count. This operation is O(N).","fields": [10541]},{"file": 23,"line": 16,"col": 8},{"file": 24,"line": 15,"col": 12},{"file": 24,"line": 16,"col": 12},{"file": 24,"line": 20,"col": 12,"docs": " Initializes a new queue. The queue does not provide a `deinit()` function, so the user must take care of cleaning up the queue elements.","fields": []},{"file": 24,"line": 30,"col": 12,"docs": " Appends `node` to the queue. The lifetime of `node` must be longer than lifetime of queue.","fields": [10542,10543]},{"file": 24,"line": 49,"col": 12,"docs": " Gets a previously inserted node or returns `null` if there is none. It is safe to `get()` a node from the queue while another thread tries to `remove()` the same node at the same time.","fields": [10544]},{"file": 24,"line": 66,"col": 12,"fields": [10545,10546]},{"file": 24,"line": 85,"col": 12,"docs": " Removes a node from the queue, returns whether node was actually removed. It is safe to `remove()` a node from the queue while another thread tries to `get()` the same node at the same time.","fields": [10547,10548]},{"file": 24,"line": 111,"col": 12,"docs": " Returns `true` if the queue is currently empty. Note that in a multi-consumer environment a return value of `false` does not mean that `get` will yield a non-`null` value!","fields": [10549]},{"file": 24,"line": 118,"col": 12,"docs": " Dumps the contents of the queue to `stderr`.","fields": [10550]},{"file": 24,"line": 125,"col": 12,"docs": " Dumps the contents of the queue to `stream`. Up to 4 elements from the head are dumped and the tail of the queue is dumped as well.","fields": [10551,10552]},{"file": 23,"line": 166,"col": 12,"docs": " Node inside the linked list wrapping the actual data."},{"file": 23,"line": 181,"col": 12,"docs": " Insert a new node after an existing one. Arguments:     node: Pointer to a node in the list.     new_node: Pointer to the new node to insert.","fields": [10553,10554,10555]},{"file": 23,"line": 202,"col": 12,"docs": " Insert a new node before an existing one. Arguments:     node: Pointer to a node in the list.     new_node: Pointer to the new node to insert.","fields": [10556,10557,10558]},{"file": 23,"line": 223,"col": 12,"docs": " Concatenate list2 onto the end of list1, removing all entries from the former. Arguments:     list1: the list to concatenate onto     list2: the list to be concatenated","fields": [10559,10560]},{"file": 23,"line": 244,"col": 12,"docs": " Insert a new node at the end of the list. Arguments:     new_node: Pointer to the new node to insert.","fields": [10561,10562]},{"file": 23,"line": 258,"col": 12,"docs": " Insert a new node at the beginning of the list. Arguments:     new_node: Pointer to the new node to insert.","fields": [10563,10564]},{"file": 23,"line": 277,"col": 12,"docs": " Remove a node from the list. Arguments:     node: Pointer to the node to be removed.","fields": [10565,10566]},{"file": 23,"line": 302,"col": 12,"docs": " Remove and return the last node in the list. Returns:     A pointer to the last node in the list.","fields": [10567]},{"file": 23,"line": 312,"col": 12,"docs": " Remove and return the first node in the list. Returns:     A pointer to the first node in the list.","fields": [10568]},{"file": 23,"line": 163,"col": 8},{"file": 26,"line": 12,"col": 12,"fields": [10569]},{"file": 26,"line": 18,"col": 12,"docs": " Non-atomically load from the atomic value without synchronization. Care must be taken to avoid data-races when interacting with other atomic operations.","fields": [10570]},{"file": 26,"line": 24,"col": 12,"docs": " Non-atomically store to the atomic value without synchronization. Care must be taken to avoid data-races when interacting with other atomic operations.","fields": [10571,10572]},{"file": 26,"line": 28,"col": 12,"fields": [10573,10574]},{"file": 26,"line": 36,"col": 12,"fields": [10575,10576,10577]},{"file": 26,"line": 44,"col": 12,"fields": [10578,10579,10580]},{"file": 26,"line": 48,"col": 12,"fields": [10581,10582,10583,10584,10585]},{"file": 26,"line": 58,"col": 12,"fields": [10586,10587,10588,10589,10590]},{"file": 26,"line": 10,"col": 8},{"file": 26,"line": 68,"col": 8,"fields": [10591,10592,10593,10594,10595,10596]},{"file": 26,"line": 99,"col": 8,"fields": [10597,10598,10599,10600]},{"file": 26,"line": 131,"col": 16,"fields": [10601,10602,10603]},{"file": 26,"line": 135,"col": 16,"fields": [10604,10605,10606]},{"file": 26,"line": 139,"col": 16,"fields": [10607,10608,10609]},{"file": 26,"line": 143,"col": 16,"fields": [10610,10611,10612]},{"file": 26,"line": 154,"col": 16,"fields": [10613,10614,10615]},{"file": 26,"line": 158,"col": 16,"fields": [10616,10617,10618]},{"file": 26,"line": 162,"col": 16,"fields": [10619,10620,10621]},{"file": 26,"line": 113,"col": 16,"fields": [10622,10623,10624]},{"file": 26,"line": 117,"col": 16,"fields": [10625,10626,10627]},{"file": 26,"line": 121,"col": 16,"fields": [10628,10629,10630]},{"file": 26,"line": 125,"col": 16,"fields": [10631,10632,10633]},{"file": 27,"line": 1569,"col": 12},{"file": 27,"line": 1571,"col": 12},{"file": 27,"line": 1576,"col": 12},{"file": 28,"line": 15,"col": 12},{"file": 28,"line": 17,"col": 12},{"file": 28,"line": 22,"col": 12,"fields": []},{"file": 28,"line": 31,"col": 12,"docs": " push operation, but only if you are the first item in the stack. if you did not succeed in being the first item in the stack, returns the other item that was there.","fields": [10634,10635]},{"file": 28,"line": 36,"col": 12,"fields": [10636,10637]},{"file": 28,"line": 49,"col": 12,"fields": [10638]},{"file": 28,"line": 64,"col": 12,"fields": [10639]},{"file": 28,"line": 13,"col": 8},{"file": 29,"line": 206,"col": 12},{"file": 29,"line": 287,"col": 12,"fields": [10640]},{"file": 29,"line": 652,"col": 12,"fields": [10641,10642]},{"file": 29,"line": 190,"col": 8},{"file": 29,"line": 192,"col": 8},{"file": 29,"line": 193,"col": 8},{"file": 29,"line": 195,"col": 8},{"file": 29,"line": 202,"col": 8},{"file": 29,"line": 203,"col": 8},{"file": 29,"line": 204,"col": 8},{"file": 29,"line": 208,"col": 8},{"file": 29,"line": 209,"col": 8},{"file": 29,"line": 211,"col": 8},{"file": 29,"line": 243,"col": 8},{"file": 29,"line": 250,"col": 8},{"file": 29,"line": 315,"col": 8,"fields": [10643]},{"file": 29,"line": 382,"col": 8,"fields": [10644,10645,10646]},{"file": 29,"line": 388,"col": 8,"fields": [10647]},{"file": 29,"line": 442,"col": 8,"fields": [10648,10649]},{"file": 29,"line": 452,"col": 8,"fields": [10650,10651,10652]},{"file": 29,"line": 464,"col": 8,"fields": [10653,10654,10655]},{"file": 29,"line": 498,"col": 8,"fields": [10656,10657]},{"file": 29,"line": 517,"col": 8,"docs": " This function assumes the object is in the large object storage regardless of the parameters.","fields": [10658,10659,10660,10661,10662,10663]},{"file": 29,"line": 592,"col": 8,"docs": " This function assumes the object is in the large object storage regardless of the parameters.","fields": [10664,10665,10666,10667]},{"file": 29,"line": 656,"col": 8,"fields": [10668,10669,10670,10671,10672,10673]},{"file": 29,"line": 743,"col": 8,"fields": [10674,10675,10676,10677]},{"file": 29,"line": 853,"col": 8,"fields": [10678,10679]},{"file": 29,"line": 864,"col": 8,"fields": [10680,10681,10682,10683,10684]},{"file": 29,"line": 909,"col": 8,"fields": [10685,10686,10687]},{"file": 29,"line": 218,"col": 12},{"file": 29,"line": 220,"col": 12,"fields": [10688,10689]},{"file": 29,"line": 237,"col": 12,"fields": [10690,10691,10692]},{"file": 31,"line": 743,"col": 8,"docs": " Provides a lock free thread safe `Allocator` interface to the underlying `FixedBufferAllocator` *WARNING* using this at the same time as the interface returned by `getAllocator` is not thread safe","fields": [10693]},{"file": 31,"line": 752,"col": 8,"fields": [10694,10695]},{"file": 31,"line": 844,"col": 8,"fields": [10696]},{"file": 31,"line": 828,"col": 4,"fields": [10697,10698,10699,10700,10701]},{"file": 32,"line": 176,"col": 12},{"file": 32,"line": 177,"col": 12},{"file": 32,"line": 178,"col": 12},{"file": 32,"line": 194,"col": 12,"docs": " Log a warning message. This log level is intended to be used if it is uncertain whether something has gone wrong or not, but the circumstances would be worth investigating.","fields": [10702,10703]},{"file": 32,"line": 201,"col": 12},{"file": 32,"line": 205,"col": 12,"docs": " Log an info message. This log level is intended to be used for general messages about the state of the program.","fields": [10704,10705]},{"file": 32,"line": 214,"col": 12,"docs": " Log a debug message. This log level is intended to be used for messages which are only useful for debugging.","fields": [10706,10707]},{"file": 33,"line": 6,"col": 12},{"file": 33,"line": 5,"col": 8},{"file": 34,"line": 756,"col": 16},{"file": 34,"line": 757,"col": 16},{"file": 34,"line": 445,"col": 12,"docs": " The index mapping for this map"},{"file": 34,"line": 447,"col": 12,"docs": " The key type used to index this map"},{"file": 34,"line": 449,"col": 12,"docs": " The value type stored in this map"},{"file": 34,"line": 451,"col": 12,"docs": " The number of possible keys in the map"},{"file": 34,"line": 462,"col": 12,"docs": " The number of items in the map.","fields": [10708]},{"file": 34,"line": 473,"col": 12,"docs": " Gets the value associated with a key. If the key is not in the map, returns null.","fields": [10709,10710]},{"file": 34,"line": 480,"col": 12,"docs": " Gets the value associated with a key, which must exist in the map.","fields": [10711,10712]},{"file": 34,"line": 488,"col": 12,"docs": " Gets the address of the value associated with a key. If the key is not in the map, returns null.","fields": [10713,10714]},{"file": 34,"line": 495,"col": 12,"docs": " Gets the address of the const value associated with a key. If the key is not in the map, returns null.","fields": [10715,10716]},{"file": 34,"line": 502,"col": 12,"docs": " Gets the address of the value associated with a key. The key must be present in the map.","fields": [10717,10718]},{"file": 34,"line": 520,"col": 12,"docs": " Adds the key to the map with an undefined value. If the key is already in the map, the value becomes undefined. A pointer to the value is returned, which should be used to initialize the value.","fields": [10719,10720]},{"file": 34,"line": 530,"col": 12,"docs": " Sets the value associated with the key in the map, and returns the old value.  If the key was not in the map, returns null.","fields": [10721,10722,10723]},{"file": 34,"line": 548,"col": 12,"docs": " Removes a key from the map, and returns the old value. If the key was not in the map, returns null.","fields": [10724,10725]},{"file": 34,"line": 559,"col": 12,"docs": " Returns an iterator over the map, which visits items in index order. Modifications to the underlying map may or may not be observed by the iterator, but will not invalidate it.","fields": [10726]},{"file": 34,"line": 567,"col": 12,"docs": " An entry in the map."},{"file": 34,"line": 578,"col": 12},{"file": 34,"line": 243,"col": 20,"docs": " Initializes the map using a sparse struct of optionals","fields": [10727]},{"file": 34,"line": 258,"col": 20,"docs": " Initializes a full mapping with all keys set to value. Consider using EnumArray instead if the map will remain full.","fields": [10728]},{"file": 34,"line": 268,"col": 20,"docs": " Initializes a full mapping with supplied values. Consider using EnumArray instead if the map will remain full.","fields": [10729]},{"file": 34,"line": 273,"col": 20,"docs": " Initializes a full mapping with a provided default. Consider using EnumArray instead if the map will remain full.","fields": [10730,10731]},{"file": 34,"line": 440,"col": 8},{"file": 34,"line": 453,"col": 8},{"file": 35,"line": 57,"col": 12,"docs": " The number of items in this bit set"},{"file": 35,"line": 60,"col": 12,"docs": " The integer type used to represent a mask in this bit set"},{"file": 35,"line": 63,"col": 12,"docs": " The integer type used to shift a mask in this bit set"},{"file": 35,"line": 74,"col": 12,"docs": " Creates a bit set with all elements present.","fields": []},{"file": 35,"line": 79,"col": 12,"docs": " Returns the number of bits in this bit set","fields": [10732]},{"file": 35,"line": 92,"col": 12,"docs": " Returns the total number of set bits in this bit set.","fields": [10733]},{"file": 35,"line": 98,"col": 12,"docs": " Changes the value of the specified bit of the bit set to match the passed boolean.","fields": [10734,10735,10736]},{"file": 35,"line": 121,"col": 12,"docs": " Flips a specific bit in the bit set","fields": [10737,10738]},{"file": 35,"line": 128,"col": 12,"docs": " Flips all bits in this bit set which are present in the toggles bit set.","fields": [10739,10740]},{"file": 35,"line": 133,"col": 12,"docs": " Flips every bit in the bit set.","fields": [10741]},{"file": 35,"line": 140,"col": 12,"docs": " Performs a union of two bit sets, and stores the result in the first one.  Bits in the result are set if the corresponding bits were set in either input.","fields": [10742,10743]},{"file": 35,"line": 147,"col": 12,"docs": " Performs an intersection of two bit sets, and stores the result in the first one.  Bits in the result are set if the corresponding bits were set in both inputs.","fields": [10744,10745]},{"file": 35,"line": 153,"col": 12,"docs": " Finds the index of the first set bit. If no bits are set, returns null.","fields": [10746]},{"file": 35,"line": 161,"col": 12,"docs": " Finds the index of the first set bit, and unsets it. If no bits are set, returns null.","fields": [10747]},{"file": 35,"line": 173,"col": 12,"docs": " Iterates through the items in the set, according to the options. The default options (.{}) will iterate indices of set bits in ascending order.  Modifications to the underlying bit set may or may not be observed by the iterator.","fields": [10748,10749]},{"file": 35,"line": 182,"col": 12,"fields": [10750]},{"file": 35,"line": 53,"col": 8},{"file": 35,"line": 186,"col": 8,"fields": [10751]},{"file": 35,"line": 218,"col": 8,"fields": [10752,10753]},{"file": 17,"line": 454,"col": 12},{"file": 17,"line": 459,"col": 12,"docs": " Initialize with capacity to hold at least num elements. The resulting capacity is likely to be equal to `num`. Deinitialize with `deinit` or use `toOwnedSlice`.","fields": [10754,10755]},{"file": 17,"line": 473,"col": 12,"docs": " Convert this list into an analogous memory-managed one. The returned list has ownership of the underlying memory.","fields": [10756,10757]},{"file": 17,"line": 478,"col": 12,"docs": " The caller owns the returned memory. ArrayList becomes empty.","fields": [10758,10759]},{"file": 17,"line": 485,"col": 12,"docs": " The caller owns the returned memory. ArrayList becomes empty.","fields": [10760,10761,10762]},{"file": 17,"line": 494,"col": 12,"docs": " Insert `item` at index `n`. Moves `list[n .. list.len]` to higher indices to make room. This operation is O(N).","fields": [10763,10764,10765,10766]},{"file": 17,"line": 505,"col": 12,"docs": " Insert slice `items` at index `i`. Moves `list[i .. list.len]` to higher indicices make room. This operation is O(N).","fields": [10767,10768,10769,10770]},{"file": 17,"line": 517,"col": 12,"docs": " Replace range of elements `list[start..start+len]` with `new_items` Grows list if `len < new_items.len`. Shrinks list if `len > new_items.len` Invalidates pointers if this ArrayList is resized.","fields": [10771,10772,10773,10774,10775]},{"file": 17,"line": 531,"col": 12,"docs": " Extend the list by 1 element, but asserting `self.capacity` is sufficient to hold an additional item.","fields": [10776,10777]},{"file": 17,"line": 540,"col": 12,"docs": " Remove the element at index `i` from the list and return its value. Asserts the array has at least one item. Invalidates pointers to last element. This operation is O(N).","fields": [10778,10779]},{"file": 17,"line": 555,"col": 12,"docs": " Removes the element at the specified index and returns it. The empty slot is filled from the end of the list. Invalidates pointers to last element. This operation is O(1).","fields": [10780,10781]},{"file": 17,"line": 565,"col": 12,"docs": " Append the slice of items to the list. Allocates more memory as necessary.","fields": [10782,10783,10784]},{"file": 17,"line": 572,"col": 12,"docs": " Append the slice of items to the list, asserting the capacity is enough to store the new items.","fields": [10785,10786]},{"file": 17,"line": 580,"col": 12},{"file": 17,"line": 585,"col": 12},{"file": 17,"line": 592,"col": 12,"docs": " Initializes a Writer which will append to the list.","fields": [10787,10788]},{"file": 17,"line": 605,"col": 12,"docs": " Append a value to the list `n` times. Allocates more memory as necessary.","fields": [10789,10790,10791,10792]},{"file": 17,"line": 614,"col": 12,"docs": " Append a value to the list `n` times. **Does not** invalidate pointers. Asserts the capacity is enough.","fields": [10793,10794,10795]},{"file": 17,"line": 623,"col": 12,"docs": " Adjust the list's length to `new_len`. Does not initialize added items, if any.","fields": [10796,10797,10798]},{"file": 17,"line": 629,"col": 12,"docs": " Reduce allocated capacity to `new_len`.","fields": [10799,10800,10801]},{"file": 17,"line": 644,"col": 12,"docs": " Reduce length to `new_len`. Invalidates pointers to elements `items[new_len..]`. Keeps capacity the same.","fields": [10802,10803]},{"file": 17,"line": 650,"col": 12,"docs": " Invalidates all element pointers.","fields": [10804]},{"file": 17,"line": 655,"col": 12,"docs": " Invalidates all element pointers.","fields": [10805,10806]},{"file": 17,"line": 661,"col": 12},{"file": 17,"line": 691,"col": 12,"docs": " Modify the array so that it can hold at least `additional_count` **more** items. Invalidates pointers if additional memory is needed.","fields": [10807,10808,10809]},{"file": 17,"line": 702,"col": 12,"docs": " Increases the array's length to match the full capacity that is already allocated. The new elements have `undefined` values. **Does not** invalidate pointers.","fields": [10810]},{"file": 17,"line": 728,"col": 12,"docs": " Resize the array, adding `n` new elements, which have `undefined` values. The return value is an array pointing to the newly allocated elements. The returned pointer becomes invalid when the list is resized.","fields": [10811,10812,10813]},{"file": 17,"line": 739,"col": 12,"docs": " Resize the array, adding `n` new elements, which have `undefined` values. The return value is an array pointing to the newly allocated elements. Asserts that there is already space for the new item without allocating more. **Does not** invalidate pointers. The returned pointer becomes invalid when the list is resized.","fields": [10814,10815]},{"file": 17,"line": 749,"col": 12,"docs": " Remove and return the last element from the list. Asserts the list has at least one item. Invalidates pointers to last element.","fields": [10816]},{"file": 17,"line": 758,"col": 12,"docs": " Remove and return the last element from the list. If the list is empty, returns `null`. Invalidates pointers to last element.","fields": [10817]},{"file": 17,"line": 439,"col": 8},{"file": 17,"line": 598,"col": 8,"docs": " Same as `append` except it returns the number of bytes written, which is always the same as `m.len`. The purpose of this function existing is to match `std.io.Writer` API.","fields": [10818,10819]},{"file": 4,"line": 2,"col": 0},{"file": 4,"line": 3,"col": 0},{"file": 4,"line": 4,"col": 0},{"file": 4,"line": 6,"col": 0},{"file": 5,"line": 0,"col": 0},{"file": 5,"line": 2,"col": 0},{"file": 5,"line": 3,"col": 0},{"file": 5,"line": 4,"col": 0},{"file": 5,"line": 5,"col": 0},{"file": 5,"line": 7,"col": 0},{"file": 5,"line": 8,"col": 0},{"file": 5,"line": 9,"col": 0},{"file": 5,"line": 10,"col": 0},{"file": 26,"line": 147,"col": 12},{"file": 26,"line": 148,"col": 12},{"file": 26,"line": 166,"col": 12,"fields": [10820,10821,10822,10823]},{"file": 6,"line": 2,"col": 0},{"file": 6,"line": 3,"col": 0},{"file": 7,"line": 10,"col": 4},{"file": 7,"line": 38,"col": 4},{"file": 7,"line": 3,"col": 0},{"file": 7,"line": 5,"col": 0},{"file": 7,"line": 6,"col": 0},{"file": 7,"line": 7,"col": 0},{"file": 7,"line": 8,"col": 0},{"file": 8,"line": 12,"col": 4},{"file": 8,"line": 0,"col": 0},{"file": 8,"line": 2,"col": 0},{"file": 8,"line": 3,"col": 0},{"file": 8,"line": 4,"col": 0},{"file": 8,"line": 5,"col": 0},{"file": 8,"line": 6,"col": 0},{"file": 8,"line": 7,"col": 0},{"file": 8,"line": 8,"col": 0},{"file": 8,"line": 10,"col": 0},{"file": 37,"line": 8,"col": 12},{"file": 37,"line": 9,"col": 12},{"file": 37,"line": 11,"col": 8},{"file": 37,"line": 12,"col": 8},{"file": 38,"line": 41,"col": 12},{"file": 38,"line": 42,"col": 12},{"file": 38,"line": 82,"col": 12,"fields": [10824]},{"file": 38,"line": 86,"col": 12,"fields": [10825]},{"file": 38,"line": 111,"col": 12,"docs": " Reduce allocated capacity to `size`.","fields": [10826,10827]},{"file": 38,"line": 121,"col": 12},{"file": 38,"line": 124,"col": 12,"docs": " Ensure that the buffer can fit at least `size` items","fields": [10828,10829]},{"file": 38,"line": 136,"col": 12,"docs": " Makes sure at least `size` items are unused","fields": [10830,10831]},{"file": 38,"line": 143,"col": 12,"docs": " Returns number of items currently in fifo","fields": [10832]},{"file": 38,"line": 199,"col": 12,"docs": " Read the next item from the fifo","fields": [10833]},{"file": 38,"line": 208,"col": 12,"docs": " Read data from the fifo into `dst`, returns number of items copied.","fields": [10834,10835]},{"file": 38,"line": 229,"col": 12,"fields": [10836]},{"file": 38,"line": 253,"col": 12,"docs": " Returns a writable buffer of at least `size` items, allocating memory as needed. Use `fifo.update` once you've written data to it.","fields": [10837,10838]},{"file": 38,"line": 288,"col": 12,"docs": " Write a single item to the fifo","fields": [10839,10840]},{"file": 38,"line": 293,"col": 12,"fields": [10841,10842]},{"file": 38,"line": 306,"col": 12,"docs": " Appends the data in `src` to the fifo. Allocates more memory as necessary","fields": [10843,10844]},{"file": 38,"line": 319,"col": 12,"fields": [10845]},{"file": 38,"line": 338,"col": 12,"docs": " Place data back into the read stream","fields": [10846,10847]},{"file": 38,"line": 355,"col": 12,"docs": " Returns the item at `offset`. Asserts offset is within bounds.","fields": [10848,10849]},{"file": 38,"line": 370,"col": 12,"docs": " Pump data from a reader into a writer stops when reader returns 0 bytes (EOF) Buffer size must be set before calling; a buffer length of 0 is invalid.","fields": [10850,10851,10852]},{"file": 38,"line": 40,"col": 8},{"file": 38,"line": 47,"col": 8},{"file": 38,"line": 225,"col": 8,"docs": " Same as `read` except it returns an error union The purpose of this function existing is to match `std.io.Reader` API.","fields": [10853,10854]},{"file": 38,"line": 314,"col": 8,"docs": " Same as `write` except it returns the number of bytes written, which is always the same as `bytes.len`. The purpose of this function existing is to match `std.io.Writer` API.","fields": [10855,10856]},{"file": 38,"line": 324,"col": 8,"docs": " Make `count` items available before the current read location","fields": [10857,10858]},{"file": 36,"line": 1804,"col": 12,"docs": " Returns a slice of the remaining bytes. Does not affect iterator state.","fields": [10859]},{"file": 36,"line": 1788,"col": 8},{"file": 36,"line": 1767,"col": 12,"docs": " Resets the iterator to the initial token.","fields": [10860]},{"file": 36,"line": 1740,"col": 8},{"file": 1,"line": 0,"col": 4},{"file": 1,"line": 1,"col": 4},{"file": 1,"line": 2,"col": 4},{"file": 1,"line": 3,"col": 4},{"file": 1,"line": 4,"col": 4},{"file": 1,"line": 5,"col": 4},{"file": 1,"line": 6,"col": 4},{"file": 1,"line": 7,"col": 4},{"file": 1,"line": 8,"col": 4},{"file": 1,"line": 9,"col": 4},{"file": 1,"line": 10,"col": 4},{"file": 1,"line": 11,"col": 4},{"file": 1,"line": 12,"col": 4},{"file": 1,"line": 13,"col": 4},{"file": 1,"line": 14,"col": 4},{"file": 1,"line": 15,"col": 4},{"file": 1,"line": 16,"col": 4},{"file": 1,"line": 17,"col": 4},{"file": 1,"line": 18,"col": 4},{"file": 1,"line": 19,"col": 4},{"file": 1,"line": 20,"col": 4},{"file": 1,"line": 21,"col": 4},{"file": 1,"line": 22,"col": 4},{"file": 1,"line": 23,"col": 4},{"file": 1,"line": 24,"col": 4},{"file": 1,"line": 25,"col": 4},{"file": 1,"line": 26,"col": 4},{"file": 1,"line": 27,"col": 4},{"file": 1,"line": 28,"col": 4},{"file": 1,"line": 29,"col": 4},{"file": 1,"line": 30,"col": 4},{"file": 1,"line": 31,"col": 4},{"file": 1,"line": 32,"col": 4},{"file": 1,"line": 33,"col": 4},{"file": 1,"line": 34,"col": 4},{"file": 1,"line": 35,"col": 4},{"file": 1,"line": 36,"col": 4},{"file": 1,"line": 37,"col": 4},{"file": 1,"line": 38,"col": 4},{"file": 1,"line": 39,"col": 4},{"file": 1,"line": 40,"col": 4},{"file": 1,"line": 42,"col": 4},{"file": 1,"line": 43,"col": 4},{"file": 1,"line": 44,"col": 4},{"file": 1,"line": 45,"col": 4},{"file": 1,"line": 46,"col": 4},{"file": 1,"line": 47,"col": 4},{"file": 1,"line": 48,"col": 4},{"file": 1,"line": 49,"col": 4},{"file": 1,"line": 50,"col": 4},{"file": 1,"line": 51,"col": 4},{"file": 1,"line": 52,"col": 4},{"file": 1,"line": 53,"col": 4},{"file": 1,"line": 54,"col": 4},{"file": 1,"line": 55,"col": 4},{"file": 1,"line": 56,"col": 4},{"file": 1,"line": 57,"col": 4},{"file": 1,"line": 58,"col": 4},{"file": 1,"line": 59,"col": 4},{"file": 1,"line": 60,"col": 4},{"file": 1,"line": 61,"col": 4},{"file": 1,"line": 62,"col": 4},{"file": 1,"line": 63,"col": 4},{"file": 1,"line": 64,"col": 4},{"file": 1,"line": 65,"col": 4},{"file": 1,"line": 66,"col": 4},{"file": 1,"line": 67,"col": 4},{"file": 1,"line": 68,"col": 4},{"file": 1,"line": 69,"col": 4},{"file": 1,"line": 70,"col": 4},{"file": 1,"line": 71,"col": 4},{"file": 1,"line": 72,"col": 4},{"file": 1,"line": 73,"col": 4},{"file": 1,"line": 74,"col": 4},{"file": 1,"line": 75,"col": 4},{"file": 1,"line": 76,"col": 4},{"file": 1,"line": 77,"col": 4},{"file": 1,"line": 78,"col": 4},{"file": 1,"line": 79,"col": 4},{"file": 1,"line": 80,"col": 4},{"file": 1,"line": 81,"col": 4},{"file": 1,"line": 82,"col": 4},{"file": 1,"line": 83,"col": 4},{"file": 1,"line": 84,"col": 4},{"file": 1,"line": 85,"col": 4},{"file": 1,"line": 86,"col": 4},{"file": 1,"line": 87,"col": 4},{"file": 1,"line": 88,"col": 4},{"file": 2,"line": 3,"col": 4,"docs": " Zig version. When writing code that supports multiple versions of Zig, prefer feature detection (i.e. with `@hasDecl` or `@hasField`) over version checks."},{"file": 2,"line": 5,"col": 4,"docs": " Temporary until self-hosted is feature complete."},{"file": 2,"line": 7,"col": 4,"docs": " Temporary until self-hosted supports the `cpu.arch` value."},{"file": 2,"line": 9,"col": 4,"docs": " Temporary until self-hosted can call `std.Target.x86.featureSetHas` at comptime."},{"file": 2,"line": 11,"col": 4},{"file": 2,"line": 12,"col": 4},{"file": 2,"line": 13,"col": 4},{"file": 2,"line": 14,"col": 4},{"file": 2,"line": 15,"col": 4},{"file": 2,"line": 16,"col": 4},{"file": 2,"line": 70,"col": 4},{"file": 2,"line": 92,"col": 4},{"file": 2,"line": 97,"col": 4},{"file": 2,"line": 98,"col": 4},{"file": 2,"line": 99,"col": 4},{"file": 2,"line": 100,"col": 4},{"file": 2,"line": 101,"col": 4},{"file": 2,"line": 102,"col": 4},{"file": 2,"line": 103,"col": 4},{"file": 2,"line": 104,"col": 4},{"file": 2,"line": 105,"col": 4},{"file": 2,"line": 106,"col": 4},{"file": 2,"line": 107,"col": 4},{"file": 2,"line": 108,"col": 4},{"file": 2,"line": 0,"col": 0},{"file": 3,"line": 4,"col": 4},{"file": 3,"line": 133,"col": 4,"fields": []},{"file": 3,"line": 0,"col": 0},{"file": 3,"line": 1,"col": 0},{"file": 3,"line": 2,"col": 0},{"file": 3,"line": 6,"col": 0},{"file": 3,"line": 8,"col": 0},{"file": 3,"line": 9,"col": 0},{"file": 9,"line": 9,"col": 4},{"file": 9,"line": 15,"col": 4},{"file": 9,"line": 97,"col": 4,"docs": " Set resizeFn to `NoResize(AllocatorType).noResize` if in-place resize is not supported.","fields": [10861]},{"file": 9,"line": 117,"col": 4,"docs": " Set freeFn to `NoOpFree(AllocatorType).noOpFree` if free is a no-op.","fields": [10862]},{"file": 9,"line": 134,"col": 4,"docs": " Set freeFn to `PanicFree(AllocatorType).noOpFree` if free is not a supported operation.","fields": [10863]},{"file": 9,"line": 196,"col": 4,"fields": [10864,10865,10866,10867,10868]},{"file": 9,"line": 207,"col": 4,"fields": [10869,10870,10871,10872,10873,10874]},{"file": 9,"line": 241,"col": 4,"docs": " Allocates an array of `n + 1` items of type `T` and sets the first `n` items to `undefined` and the last item to `sentinel`. Depending on the Allocator implementation, it may be required to call `free` once the memory is no longer needed, to avoid a resource leak. If the `Allocator` implementation is unknown, then correct code will call `free` when done. For allocating a single item, see `create`.","fields": [10875,10876,10877,10878]},{"file": 9,"line": 260,"col": 4,"fields": [10879,10880,10881,10882,10883]},{"file": 9,"line": 271,"col": 4},{"file": 9,"line": 341,"col": 4,"docs": " This function requests a new byte size for an existing allocation, which can be larger, smaller, or the same size as the old memory allocation. This function is preferred over `shrink`, because it can fail, even when shrinking. This gives the allocator a chance to perform a cheap shrink operation if possible, or otherwise return OutOfMemory, indicating that the caller should keep their capacity, for example in `std.ArrayList.shrink`. If you need guaranteed success, call `shrink`. If `new_n` is 0, this is the same as `free` and it always succeeds.","fields": [10884,10885,10886]},{"file": 9,"line": 360,"col": 4,"docs": " This is the same as `realloc`, except caller may additionally request a new alignment, which can be larger, smaller, or the same as the old allocation.","fields": [10887,10888,10889,10890,10891]},{"file": 9,"line": 438,"col": 4,"docs": " This is the same as `shrink`, except caller may additionally request a new alignment, which must be smaller or the same as the old allocation.","fields": [10892,10893,10894,10895]},{"file": 9,"line": 511,"col": 4,"docs": " This function allows a runtime `alignment` value. Callers should generally prefer to call the `alloc*` functions.","fields": [10896,10897,10898,10899,10900]},{"file": 9,"line": 602,"col": 4,"docs": " Realloc is used to modify the size or alignment of an existing allocation, as well as to provide the allocator with an opportunity to move an allocation to a better location. The returned slice will have its pointer aligned at least to `new_alignment` bytes. This function allows a runtime `alignment` value. Callers should generally prefer to call the `realloc*` functions. If the size/alignment is greater than the previous allocation, and the requested new allocation could not be granted this function returns `error.OutOfMemory`. When the size/alignment is less than or equal to the previous allocation, this function returns `error.OutOfMemory` when the allocator decides the client would be better off keeping the extra alignment/size.  Clients will call `resizeFn` when they require the allocator to track a new alignment/size, and so this function should only return success when the allocator considers the reallocation desirable from the allocator's perspective. As an example, `std.ArrayList` tracks a \"capacity\", and therefore can handle reallocation failure, even when `new_n` <= `old_mem.len`. A `FixedBufferAllocator` would always return `error.OutOfMemory` for `reallocFn` when the size/alignment is less than or equal to the old allocation, because it cannot reclaim the memory, and thus the `std.ArrayList` would be better off retaining its capacity.","fields": [10901,10902,10903,10904,10905,10906,10907]},{"file": 9,"line": 2,"col": 0},{"file": 9,"line": 3,"col": 0},{"file": 9,"line": 4,"col": 0},{"file": 9,"line": 5,"col": 0},{"file": 9,"line": 6,"col": 0},{"file": 9,"line": 7,"col": 0},{"file": 9,"line": 225,"col": 0,"fields": [10908,10909,10910]},{"file": 48,"line": 286,"col": 8},{"file": 48,"line": 295,"col": 8},{"file": 48,"line": 779,"col": 8,"fields": [10911]},{"file": 48,"line": 822,"col": 8},{"file": 48,"line": 902,"col": 8,"docs": " Recursively iterates over a directory. `self` must have been opened with `OpenDirOptions{.iterate = true}`. Must call `Walker.deinit` when done. The order of returned file system entries is undefined. `self` will not be closed after walking it.","fields": [10912,10913]},{"file": 48,"line": 920,"col": 8},{"file": 48,"line": 935,"col": 8,"fields": [10914]},{"file": 48,"line": 961,"col": 8,"docs": " Same as `openFile` but WASI only.","fields": [10915,10916,10917]},{"file": 48,"line": 1066,"col": 8,"docs": " Same as `openFile` but Windows-only and the path parameter is [WTF-16](https://simonsapin.github.io/wtf-8/#potentially-ill-formed-utf-16) encoded.","fields": [10918,10919,10920]},{"file": 48,"line": 1106,"col": 8,"docs": " Creates, opens, or overwrites a file with write access. Call `File.close` on the result when done. Asserts that the path parameter has no null bytes.","fields": [10921,10922,10923]},{"file": 48,"line": 1119,"col": 8,"docs": " Same as `createFile` but WASI only.","fields": [10924,10925,10926]},{"file": 48,"line": 1147,"col": 8,"docs": " Same as `createFile` but the path parameter is null-terminated.","fields": [10927,10928,10929]},{"file": 48,"line": 1218,"col": 8,"docs": " Same as `createFile` but Windows-only and the path parameter is [WTF-16](https://simonsapin.github.io/wtf-8/#potentially-ill-formed-utf-16) encoded.","fields": [10930,10931,10932]},{"file": 48,"line": 1259,"col": 8,"fields": [10933,10934]},{"file": 48,"line": 1263,"col": 8,"fields": [10935,10936]},{"file": 48,"line": 1267,"col": 8,"fields": [10937,10938]},{"file": 48,"line": 1275,"col": 8,"docs": " Calls makeDir recursively to make an entire path. Returns success if the path already exists and is a directory. This function is not atomic, and if it returns an error, the file system may have been modified regardless.","fields": [10939,10940]},{"file": 48,"line": 1308,"col": 8,"docs": " This function performs `makePath`, followed by `openDir`. If supported by the OS, this operation is atomic. It is not atomic on all operating systems.","fields": [10941,10942,10943]},{"file": 48,"line": 1321,"col": 8,"docs": "  This function returns the canonicalized absolute pathname of `pathname` relative to this `Dir`. If `pathname` is absolute, ignores this `Dir` handle and returns the canonicalized absolute pathname of `pathname` argument. This function is not universally supported by all platforms. Currently supported hosts are: Linux, macOS, and Windows. See also `Dir.realpathZ`, `Dir.realpathW`, and `Dir.realpathAlloc`.","fields": [10944,10945,10946]},{"file": 48,"line": 1335,"col": 8,"docs": " Same as `Dir.realpath` except `pathname` is null-terminated. See also `Dir.realpath`, `realpathZ`.","fields": [10947,10948,10949]},{"file": 48,"line": 1368,"col": 8,"docs": " Windows-only. Same as `Dir.realpath` except `pathname` is WTF16 encoded. See also `Dir.realpath`, `realpathW`.","fields": [10950,10951,10952]},{"file": 48,"line": 1420,"col": 8,"docs": " Same as `Dir.realpath` except caller must free the returned memory. See also `Dir.realpath`.","fields": [10953,10954,10955]},{"file": 48,"line": 1438,"col": 8,"docs": " Changes the current working directory to the open directory handle. This modifies global state and can have surprising effects in multi- threaded applications. Most applications and especially libraries should not call this function as a general rule, however it can have use cases in, for example, implementing a shell, or child process execution. Not all targets support this. For example, WASI does not have the concept of a current working directory.","fields": [10956]},{"file": 48,"line": 1445,"col": 8},{"file": 48,"line": 1463,"col": 8,"docs": " Opens a directory at the given path. The directory is a system resource that remains open until `close` is called on the result. Asserts that the path parameter has no null bytes.","fields": [10957,10958,10959]},{"file": 48,"line": 1476,"col": 8,"docs": " Same as `openDir` except only WASI.","fields": [10960,10961,10962]},{"file": 48,"line": 1515,"col": 8,"docs": " Same as `openDir` except the parameter is null-terminated.","fields": [10963,10964,10965]},{"file": 48,"line": 1531,"col": 8,"docs": " Same as `openDir` except the path parameter is WTF-16 encoded, NT-prefixed. This function asserts the target OS is Windows.","fields": [10966,10967,10968]},{"file": 48,"line": 1606,"col": 8},{"file": 48,"line": 1610,"col": 8,"docs": " Delete a file name and possibly the file it refers to, based on an open directory handle. Asserts that the path parameter has no null bytes.","fields": [10969,10970]},{"file": 48,"line": 1626,"col": 8,"docs": " Same as `deleteFile` except the parameter is null-terminated.","fields": [10971,10972]},{"file": 48,"line": 1645,"col": 8,"docs": " Same as `deleteFile` except the parameter is WTF-16 encoded.","fields": [10973,10974]},{"file": 48,"line": 1652,"col": 8},{"file": 48,"line": 1671,"col": 8,"docs": " Returns `error.DirNotEmpty` if the directory is not empty. To delete a directory recursively, see `deleteTree`. Asserts that the path parameter has no null bytes.","fields": [10975,10976]},{"file": 48,"line": 1687,"col": 8,"docs": " Same as `deleteDir` except the parameter is null-terminated.","fields": [10977,10978]},{"file": 48,"line": 1696,"col": 8,"docs": " Same as `deleteDir` except the parameter is UTF16LE, NT prefixed. This function is Windows-only.","fields": [10979,10980]},{"file": 48,"line": 1703,"col": 8},{"file": 48,"line": 1709,"col": 8,"docs": " Change the name or location of a file or directory. If new_sub_path already exists, it will be replaced. Renaming a file over an existing directory or a directory over an existing file will fail with `error.IsDir` or `error.NotDir`","fields": [10981,10982,10983]},{"file": 48,"line": 1714,"col": 8,"docs": " Same as `rename` except the parameters are null-terminated.","fields": [10984,10985,10986]},{"file": 48,"line": 1720,"col": 8,"docs": " Same as `rename` except the parameters are UTF16LE, NT prefixed. This function is Windows-only.","fields": [10987,10988,10989]},{"file": 48,"line": 1728,"col": 8,"docs": " Creates a symbolic link named `sym_link_path` which contains the string `target_path`. A symbolic link (also known as a soft link) may point to an existing file or to a nonexistent one; the latter case is known as a dangling link. If `sym_link_path` exists, it will not be overwritten.","fields": [10990,10991,10992,10993]},{"file": 48,"line": 1748,"col": 8,"docs": " WASI-only. Same as `symLink` except targeting WASI.","fields": [10994,10995,10996,10997]},{"file": 48,"line": 1758,"col": 8,"docs": " Same as `symLink`, except the pathname parameters are null-terminated.","fields": [10998,10999,11000,11001]},{"file": 48,"line": 1774,"col": 8,"docs": " Windows-only. Same as `symLink` except the pathname parameters are null-terminated, WTF16 encoded.","fields": [11002,11003,11004,11005]},{"file": 48,"line": 1786,"col": 8,"docs": " Read value of a symbolic link. The return value is a slice of `buffer`, from index `0`. Asserts that the path parameter has no null bytes.","fields": [11006,11007,11008]},{"file": 48,"line": 1799,"col": 8,"docs": " WASI-only. Same as `readLink` except targeting WASI.","fields": [11009,11010,11011]},{"file": 48,"line": 1804,"col": 8,"docs": " Same as `readLink`, except the `pathname` parameter is null-terminated.","fields": [11012,11013,11014]},{"file": 48,"line": 1814,"col": 8,"docs": " Windows-only. Same as `readLink` except the pathname parameter is null-terminated, WTF16 encoded.","fields": [11015,11016,11017]},{"file": 48,"line": 1823,"col": 8,"docs": " Read all of file contents using a preallocated buffer. The returned slice has the same pointer as `buffer`. If the length matches `buffer.len` the situation is ambiguous. It could either mean that the entire file was read, and it exactly fits the buffer, or it could mean the buffer was not big enough for the entire file.","fields": [11018,11019,11020]},{"file": 48,"line": 1833,"col": 8,"docs": " On success, caller owns returned buffer. If the file is larger than `max_bytes`, returns `error.FileTooBig`.","fields": [11021,11022,11023,11024]},{"file": 48,"line": 1842,"col": 8,"docs": " On success, caller owns returned buffer. If the file is larger than `max_bytes`, returns `error.FileTooBig`. If `size_hint` is specified the initial buffer size is calculated using that value, otherwise the effective file size is used instead. Allows specifying alignment and a sentinel value.","fields": [11025,11026,11027,11028,11029,11030,11031]},{"file": 48,"line": 1862,"col": 8},{"file": 48,"line": 1892,"col": 8,"docs": " Whether `full_path` describes a symlink, file, or directory, this function removes it. If it cannot be removed because it is a non-empty directory, this function recursively removes its entries and then tries again. This operation is not atomic on most file systems.","fields": [11032,11033]},{"file": 48,"line": 2041,"col": 8,"docs": " Writes content to the file system, creating a new file if it does not exist, truncating if it already exists.","fields": [11034,11035,11036]},{"file": 48,"line": 2047,"col": 8},{"file": 48,"line": 2054,"col": 8,"docs": " Test accessing `path`. `path` is UTF8-encoded. Be careful of Time-Of-Check-Time-Of-Use race conditions when using this function. For example, instead of testing if a file exists and then opening it, just open it and handle the error for file not found.","fields": [11037,11038,11039]},{"file": 48,"line": 2064,"col": 8,"docs": " Same as `access` except the path parameter is null-terminated.","fields": [11040,11041,11042]},{"file": 48,"line": 2087,"col": 8,"docs": " Same as `access` except asserts the target OS is Windows and the path parameter is * WTF-16 encoded * null-terminated * NtDll prefixed TODO currently this ignores `flags`.","fields": [11043,11044,11045]},{"file": 48,"line": 2097,"col": 8,"docs": " Check the file size, mtime, and mode of `source_path` and `dest_path`. If they are equal, does nothing. Otherwise, atomically copies `source_path` to `dest_path`. The destination file gains the mtime, atime, and mode of the source file so that the next call to `updateFile` will not need a copy. Returns the previous status of the file before updating. If any of the directories do not exist for dest_path, they are created.","fields": [11046,11047,11048,11049,11050]},{"file": 48,"line": 2145,"col": 8,"docs": " Guaranteed to be atomic. On Linux, until https://patchwork.kernel.org/patch/9636735/ is merged and readily available, there is a possibility of power loss or application termination leaving temporary files present in the same directory as dest_path.","fields": [11051,11052,11053,11054,11055]},{"file": 48,"line": 2169,"col": 8},{"file": 48,"line": 2177,"col": 8,"docs": " Directly access the `.file` field, and then call `AtomicFile.finish` to atomically replace `dest_path` with contents. Always call `AtomicFile.deinit` to clean up, regardless of whether `AtomicFile.finish` succeeded. `dest_path` must remain valid until `AtomicFile.deinit` is called.","fields": [11056,11057,11058]},{"file": 48,"line": 2186,"col": 8},{"file": 48,"line": 2187,"col": 8},{"file": 48,"line": 2189,"col": 8,"fields": [11059]},{"file": 48,"line": 2197,"col": 8},{"file": 48,"line": 2200,"col": 8,"fields": [11060,11061]},{"file": 48,"line": 2207,"col": 8},{"file": 48,"line": 2214,"col": 8,"docs": " Changes the mode of the directory. The process must have the correct privileges in order to do this successfully, or must have the effective user ID matching the owner of the directory. Additionally, the directory must have been opened with `OpenDirOptions{ .iterate = true }`.","fields": [11062,11063]},{"file": 48,"line": 2228,"col": 8,"docs": " Changes the owner and group of the directory. The process must have the correct privileges in order to do this successfully. The group may be changed by the owner of the directory to any group of which the owner is a member. Additionally, the directory must have been opened with `OpenDirOptions{ .iterate = true }`. If the owner or group is specified as `null`, the ID is not changed.","fields": [11064,11065,11066]},{"file": 48,"line": 2236,"col": 8},{"file": 48,"line": 293,"col": 4},{"file": 48,"line": 1541,"col": 4,"docs": " `flags` must contain `os.O.DIRECTORY`.","fields": [11067,11068,11069]},{"file": 48,"line": 1559,"col": 4,"fields": [11070,11071,11072,11073]},{"file": 16,"line": 778,"col": 16,"fields": [11074]},{"file": 16,"line": 744,"col": 12},{"file": 16,"line": 746,"col": 12},{"file": 16,"line": 747,"col": 12},{"file": 16,"line": 752,"col": 12},{"file": 16,"line": 753,"col": 12},{"file": 43,"line": 381,"col": 4},{"file": 43,"line": 392,"col": 4},{"file": 43,"line": 399,"col": 4},{"file": 43,"line": 1065,"col": 8,"fields": [11075]},{"file": 43,"line": 1082,"col": 4,"fields": [11076,11077]},{"file": 43,"line": 1139,"col": 4,"fields": [11078,11079]},{"file": 43,"line": 1287,"col": 4,"fields": [11080,11081]},{"file": 62,"line": 13,"col": 8,"docs": " Inner state of ArenaAllocator. Can be stored rather than the entire ArenaAllocator as a memory-saving optimization."},{"file": 62,"line": 29,"col": 4},{"file": 39,"line": 126,"col": 8,"docs": " Thread-safe. 0 means unknown.","fields": [11082,11083]},{"file": 39,"line": 131,"col": 8,"docs": " Thread-safe.","fields": [11084,11085]},{"file": 55,"line": 462,"col": 8},{"file": 55,"line": 465,"col": 8,"docs": " You must deinitialize iterator's internal buffers by calling `deinit` when done.","fields": [11086]},{"file": 55,"line": 473,"col": 8},{"file": 55,"line": 485,"col": 8,"docs": " If you only are targeting posix you can call this and not need an allocator.","fields": [11087]},{"file": 55,"line": 490,"col": 8,"docs": " If you only are targeting WASI, you can call this and not need an allocator.","fields": [11088]},{"file": 55,"line": 496,"col": 8,"docs": " Parse past 1 argument without capturing it. Returns `true` if skipped an arg, `false` if we are at the end.","fields": [11089]},{"file": 55,"line": 445,"col": 4},{"file": 58,"line": 149,"col": 8},{"file": 58,"line": 211,"col": 8,"docs": " Resets the timer value to 0/now.","fields": [11090]},{"file": 58,"line": 216,"col": 8,"docs": " Returns the current value of the timer in nanoseconds, then resets it","fields": [11091]},{"file": 58,"line": 154,"col": 4,"docs": " At some point we may change our minds on RAW, but for now we're sticking with posix standard MONOTONIC. For more information, see: https://github.com/ziglang/zig/pull/933"},{"file": 55,"line": 220,"col": 8,"fields": [11092]},{"file": 10,"line": 26,"col": 4},{"file": 10,"line": 1,"col": 0},{"file": 10,"line": 22,"col": 0},{"file": 10,"line": 23,"col": 0},{"file": 10,"line": 24,"col": 0},{"file": 11,"line": 15,"col": 4},{"file": 11,"line": 0,"col": 0},{"file": 11,"line": 2,"col": 0},{"file": 11,"line": 3,"col": 0},{"file": 11,"line": 4,"col": 0},{"file": 11,"line": 5,"col": 0},{"file": 11,"line": 6,"col": 0},{"file": 11,"line": 7,"col": 0},{"file": 11,"line": 8,"col": 0},{"file": 11,"line": 10,"col": 0},{"file": 11,"line": 11,"col": 0},{"file": 11,"line": 12,"col": 0},{"file": 11,"line": 13,"col": 0},{"file": 11,"line": 29,"col": 0},{"file": 11,"line": 34,"col": 0},{"file": 12,"line": 10,"col": 4},{"file": 12,"line": 2,"col": 0},{"file": 12,"line": 4,"col": 0},{"file": 12,"line": 5,"col": 0},{"file": 12,"line": 6,"col": 0},{"file": 12,"line": 7,"col": 0},{"file": 12,"line": 9,"col": 0},{"file": 64,"line": 4,"col": 8},{"file": 13,"line": 7,"col": 4,"docs": " TODO Nearly all the functions in this namespace would be better off if https://github.com/ziglang/zig/issues/425 was solved."},{"file": 13,"line": 0,"col": 0},{"file": 13,"line": 1,"col": 0},{"file": 13,"line": 2,"col": 0},{"file": 14,"line": 0,"col": 0},{"file": 14,"line": 1,"col": 0},{"file": 14,"line": 2,"col": 0},{"file": 15,"line": 12,"col": 4},{"file": 15,"line": 0,"col": 0},{"file": 15,"line": 1,"col": 0},{"file": 15,"line": 2,"col": 0},{"file": 15,"line": 3,"col": 0},{"file": 15,"line": 4,"col": 0},{"file": 15,"line": 5,"col": 0},{"file": 15,"line": 6,"col": 0},{"file": 15,"line": 7,"col": 0},{"file": 15,"line": 8,"col": 0},{"file": 15,"line": 9,"col": 0},{"file": 15,"line": 10,"col": 0},{"file": 22,"line": 413,"col": 12,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 16,"line": 70,"col": 4,"docs": " Key memory is managed by the caller.  Keys and values will not automatically be freed.","fields": [11093]},{"file": 16,"line": 74,"col": 4},{"file": 16,"line": 93,"col": 4},{"file": 16,"line": 107,"col": 4},{"file": 16,"line": 121,"col": 4},{"file": 16,"line": 123,"col": 4},{"file": 16,"line": 0,"col": 0},{"file": 16,"line": 1,"col": 0},{"file": 16,"line": 2,"col": 0},{"file": 16,"line": 3,"col": 0},{"file": 16,"line": 4,"col": 0},{"file": 16,"line": 5,"col": 0},{"file": 16,"line": 6,"col": 0},{"file": 16,"line": 7,"col": 0},{"file": 16,"line": 8,"col": 0},{"file": 16,"line": 9,"col": 0},{"file": 16,"line": 1544,"col": 0},{"file": 16,"line": 1545,"col": 0},{"file": 16,"line": 1546,"col": 0},{"file": 17,"line": 0,"col": 0},{"file": 17,"line": 1,"col": 0},{"file": 17,"line": 2,"col": 0},{"file": 17,"line": 3,"col": 0},{"file": 17,"line": 4,"col": 0},{"file": 17,"line": 5,"col": 0},{"file": 17,"line": 1181,"col": 0},{"file": 17,"line": 1186,"col": 0},{"file": 13,"line": 16,"col": 12},{"file": 13,"line": 93,"col": 12,"docs": " Based on NTDDI version constants from https://docs.microsoft.com/en-us/cpp/porting/modifying-winver-and-win32-winnt"},{"file": 13,"line": 181,"col": 12},{"file": 13,"line": 220,"col": 12,"docs": " The version ranges here represent the minimum OS version to be supported and the maximum OS version to be supported. The default values represent the range that the Zig Standard Library bases its abstractions on. The minimum version of the range is the main setting to tweak for a target. Usually, the maximum target OS version will remain the default, which is the latest released version of the OS. To test at compile time if the target is guaranteed to support a given OS feature, one should check that the minimum version of the range is greater than or equal to the version the feature was introduced in. To test at compile time if the target certainly will not support a given OS feature, one should check that the maximum version of the range is less than the version the feature was introduced in. If neither of these cases apply, a runtime check should be used to determine if the target supports a given OS feature. Binaries built with a given maximum version will continue to function on newer operating system versions. However, such a binary may not take full advantage of the newer operating system APIs. See `Os.isAtLeast`."},{"file": 13,"line": 347,"col": 12},{"file": 13,"line": 356,"col": 12,"docs": " Provides a tagged union. `Target` does not store the tag because it is redundant with the OS tag; this function abstracts that part away.","fields": [11094]},{"file": 13,"line": 378,"col": 12,"docs": " Checks if system is guaranteed to be at least `version` or older than `version`. Returns `null` if a runtime check is required.","fields": [11095,11096,11097]},{"file": 13,"line": 391,"col": 12,"docs": " On Darwin, we always link libSystem which contains libc. Similarly on FreeBSD and NetBSD we always link system libc since this is the stable syscall interface.","fields": [11098]},{"file": 18,"line": 6,"col": 4},{"file": 18,"line": 182,"col": 4},{"file": 18,"line": 183,"col": 4},{"file": 18,"line": 184,"col": 4},{"file": 18,"line": 185,"col": 4},{"file": 18,"line": 187,"col": 4},{"file": 18,"line": 1457,"col": 4},{"file": 18,"line": 2,"col": 0},{"file": 18,"line": 3,"col": 0},{"file": 18,"line": 4,"col": 0},{"file": 13,"line": 484,"col": 12,"fields": [11099,11100]},{"file": 13,"line": 537,"col": 12,"fields": [11101]},{"file": 13,"line": 544,"col": 12,"fields": [11102]},{"file": 13,"line": 551,"col": 12,"fields": [11103]},{"file": 13,"line": 582,"col": 12,"fields": [11104,11105]},{"file": 13,"line": 617,"col": 12},{"file": 13,"line": 759,"col": 12},{"file": 13,"line": 1247,"col": 12},{"file": 13,"line": 1315,"col": 12,"docs": " The \"default\" set of CPU features for cross-compiling. A conservative set of features that is expected to be supported on most available hardware.","fields": [11106]},{"file": 19,"line": 0,"col": 0},{"file": 19,"line": 1,"col": 0},{"file": 19,"line": 2,"col": 0},{"file": 19,"line": 3,"col": 0},{"file": 19,"line": 4,"col": 0},{"file": 20,"line": 0,"col": 0},{"file": 20,"line": 1,"col": 0},{"file": 20,"line": 2,"col": 0},{"file": 20,"line": 3,"col": 0},{"file": 20,"line": 4,"col": 0},{"file": 21,"line": 0,"col": 0},{"file": 22,"line": 4,"col": 4},{"file": 22,"line": 5,"col": 4},{"file": 22,"line": 6,"col": 4},{"file": 22,"line": 7,"col": 4},{"file": 22,"line": 8,"col": 4},{"file": 22,"line": 9,"col": 4},{"file": 22,"line": 10,"col": 4},{"file": 22,"line": 11,"col": 4},{"file": 22,"line": 12,"col": 4},{"file": 22,"line": 13,"col": 4},{"file": 22,"line": 14,"col": 4},{"file": 22,"line": 15,"col": 4},{"file": 22,"line": 16,"col": 4},{"file": 22,"line": 17,"col": 4},{"file": 22,"line": 18,"col": 4},{"file": 22,"line": 19,"col": 4},{"file": 22,"line": 20,"col": 4},{"file": 22,"line": 21,"col": 4},{"file": 22,"line": 22,"col": 4},{"file": 22,"line": 23,"col": 4},{"file": 22,"line": 29,"col": 4,"docs": " `explicit_subsystem` is missing when the subsystem is automatically detected, so Zig standard library has the subsystem detection logic here. This should generally be used rather than `explicit_subsystem`. On non-Windows targets, this is `null`."},{"file": 22,"line": 53,"col": 4,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 22,"line": 86,"col": 4,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 22,"line": 95,"col": 4,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 22,"line": 106,"col": 4,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 22,"line": 118,"col": 4,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 22,"line": 136,"col": 4,"docs": " The code model puts constraints on the location of symbols and the size of code and data. The selection of a code model is a trade off on speed and restrictions that needs to be selected on a per application basis to meet its requirements. A slightly more detailed explanation can be found in (for example) the [System V Application Binary Interface (x86_64)](https://github.com/hjl-tools/x86-psABI/wiki/x86-64-psABI-1.0.pdf) 3.5.1. This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 22,"line": 147,"col": 4,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 22,"line": 156,"col": 4,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 22,"line": 176,"col": 4,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 22,"line": 185,"col": 4,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 22,"line": 192,"col": 4},{"file": 22,"line": 196,"col": 4,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 22,"line": 436,"col": 4,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 22,"line": 443,"col": 4,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 22,"line": 450,"col": 4,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 22,"line": 457,"col": 4,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 22,"line": 465,"col": 4,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 22,"line": 472,"col": 4,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 22,"line": 479,"col": 4,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 22,"line": 566,"col": 4,"fields": []},{"file": 22,"line": 612,"col": 4,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 22,"line": 655,"col": 4,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 22,"line": 680,"col": 4,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 22,"line": 688,"col": 4,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 22,"line": 697,"col": 4,"docs": " This function type is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 22,"line": 705,"col": 4,"docs": " This function type is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 22,"line": 709,"col": 4,"docs": " This function is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 22,"line": 0,"col": 0},{"file": 22,"line": 748,"col": 0},{"file": 22,"line": 749,"col": 0},{"file": 22,"line": 255,"col": 12,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 23,"line": 0,"col": 0},{"file": 23,"line": 1,"col": 0},{"file": 23,"line": 2,"col": 0},{"file": 23,"line": 3,"col": 0},{"file": 23,"line": 4,"col": 0},{"file": 23,"line": 5,"col": 0},{"file": 23,"line": 23,"col": 16},{"file": 23,"line": 29,"col": 16,"docs": " Insert a new node after the current one. Arguments:     new_node: Pointer to the new node to insert.","fields": [11107,11108]},{"file": 23,"line": 40,"col": 16,"docs": " Remove a node from the list. Arguments:     node: Pointer to the node to be removed. Returns:     node removed","fields": [11109]},{"file": 23,"line": 48,"col": 16,"docs": " Iterate over the singly-linked list from this node, until the final node is found. This operation is O(N).","fields": [11110]},{"file": 23,"line": 57,"col": 16,"docs": " Iterate over each next node, returning the count of all nodes except the starting one. This operation is O(N).","fields": [11111]},{"file": 24,"line": 0,"col": 0},{"file": 24,"line": 1,"col": 0},{"file": 24,"line": 2,"col": 0},{"file": 24,"line": 3,"col": 0},{"file": 24,"line": 157,"col": 0},{"file": 24,"line": 171,"col": 0},{"file": 24,"line": 172,"col": 0},{"file": 24,"line": 242,"col": 0,"fields": [11112]},{"file": 24,"line": 261,"col": 0,"fields": [11113]},{"file": 25,"line": 59,"col": 4},{"file": 25,"line": 165,"col": 4},{"file": 25,"line": 202,"col": 4,"docs": " This has the sematics as `Mutex`, however it does not actually do any synchronization. Operations are safety-checked no-ops."},{"file": 25,"line": 232,"col": 4},{"file": 25,"line": 24,"col": 0},{"file": 25,"line": 25,"col": 0},{"file": 25,"line": 26,"col": 0},{"file": 25,"line": 27,"col": 0},{"file": 25,"line": 28,"col": 0},{"file": 25,"line": 29,"col": 0},{"file": 25,"line": 30,"col": 0},{"file": 25,"line": 31,"col": 0},{"file": 25,"line": 32,"col": 0},{"file": 25,"line": 50,"col": 0},{"file": 25,"line": 248,"col": 0},{"file": 25,"line": 279,"col": 0,"fields": [11114]},{"file": 26,"line": 0,"col": 0},{"file": 26,"line": 2,"col": 0},{"file": 26,"line": 3,"col": 0},{"file": 26,"line": 4,"col": 0},{"file": 26,"line": 262,"col": 0,"fields": []},{"file": 26,"line": 307,"col": 0},{"file": 26,"line": 339,"col": 0},{"file": 27,"line": 13,"col": 4},{"file": 27,"line": 0,"col": 0},{"file": 27,"line": 1,"col": 0},{"file": 27,"line": 2,"col": 0},{"file": 27,"line": 3,"col": 0},{"file": 27,"line": 4,"col": 0},{"file": 27,"line": 5,"col": 0},{"file": 27,"line": 6,"col": 0},{"file": 27,"line": 7,"col": 0},{"file": 27,"line": 8,"col": 0},{"file": 27,"line": 9,"col": 0},{"file": 27,"line": 11,"col": 0},{"file": 27,"line": 1713,"col": 0,"fields": []},{"file": 27,"line": 1717,"col": 0,"fields": [11115,11116]},{"file": 27,"line": 1723,"col": 0},{"file": 27,"line": 1749,"col": 0,"fields": []},{"file": 27,"line": 1772,"col": 0,"fields": [11117,11118]},{"file": 27,"line": 1593,"col": 16},{"file": 27,"line": 1601,"col": 16},{"file": 27,"line": 1609,"col": 16},{"file": 27,"line": 1617,"col": 16},{"file": 27,"line": 1625,"col": 16},{"file": 27,"line": 1634,"col": 16},{"file": 27,"line": 1643,"col": 16},{"file": 27,"line": 1652,"col": 16},{"file": 27,"line": 1661,"col": 16},{"file": 27,"line": 1670,"col": 16},{"file": 27,"line": 1680,"col": 16},{"file": 27,"line": 1684,"col": 16},{"file": 28,"line": 0,"col": 0},{"file": 28,"line": 1,"col": 0},{"file": 28,"line": 2,"col": 0},{"file": 28,"line": 3,"col": 0},{"file": 28,"line": 70,"col": 0},{"file": 28,"line": 83,"col": 0},{"file": 28,"line": 84,"col": 0},{"file": 28,"line": 147,"col": 0,"fields": [11119]},{"file": 28,"line": 165,"col": 0,"fields": [11120]},{"file": 27,"line": 47,"col": 12},{"file": 27,"line": 61,"col": 12},{"file": 27,"line": 63,"col": 12},{"file": 27,"line": 69,"col": 12},{"file": 27,"line": 88,"col": 12},{"file": 27,"line": 83,"col": 8},{"file": 27,"line": 99,"col": 8},{"file": 29,"line": 134,"col": 4},{"file": 29,"line": 94,"col": 0},{"file": 29,"line": 95,"col": 0},{"file": 29,"line": 96,"col": 0},{"file": 29,"line": 97,"col": 0},{"file": 29,"line": 98,"col": 0},{"file": 29,"line": 99,"col": 0},{"file": 29,"line": 100,"col": 0},{"file": 29,"line": 101,"col": 0},{"file": 29,"line": 102,"col": 0},{"file": 29,"line": 105,"col": 0,"docs": " Integer type for pointing to slots in a small allocation"},{"file": 29,"line": 107,"col": 0},{"file": 29,"line": 127,"col": 0},{"file": 29,"line": 128,"col": 0},{"file": 29,"line": 129,"col": 0},{"file": 29,"line": 931,"col": 0},{"file": 29,"line": 936,"col": 0},{"file": 29,"line": 273,"col": 12,"fields": [11121,11122,11123,11124,11125]},{"file": 30,"line": 64,"col": 4,"fields": [11126,11127,11128,11129,11130,11131]},{"file": 30,"line": 100,"col": 4,"docs": " This matches the libc clone function.","fields": [11132,11133,11134,11135,11136,11137,11138]},{"file": 30,"line": 126,"col": 4},{"file": 30,"line": 537,"col": 4},{"file": 30,"line": 539,"col": 4},{"file": 30,"line": 562,"col": 4},{"file": 30,"line": 588,"col": 4},{"file": 30,"line": 595,"col": 4},{"file": 30,"line": 608,"col": 4},{"file": 30,"line": 613,"col": 4},{"file": 30,"line": 639,"col": 4},{"file": 30,"line": 649,"col": 4},{"file": 30,"line": 659,"col": 4},{"file": 30,"line": 669,"col": 4},{"file": 30,"line": 670,"col": 4},{"file": 30,"line": 671,"col": 4},{"file": 30,"line": 672,"col": 4},{"file": 30,"line": 673,"col": 4},{"file": 30,"line": 674,"col": 4},{"file": 30,"line": 675,"col": 4},{"file": 30,"line": 676,"col": 4},{"file": 30,"line": 679,"col": 4},{"file": 30,"line": 710,"col": 4},{"file": 30,"line": 715,"col": 4},{"file": 30,"line": 720,"col": 4},{"file": 30,"line": 744,"col": 4},{"file": 30,"line": 753,"col": 4},{"file": 30,"line": 0,"col": 0},{"file": 30,"line": 1,"col": 0},{"file": 30,"line": 2,"col": 0},{"file": 30,"line": 3,"col": 0},{"file": 30,"line": 4,"col": 0},{"file": 30,"line": 5,"col": 0},{"file": 30,"line": 6,"col": 0},{"file": 30,"line": 7,"col": 0},{"file": 30,"line": 8,"col": 0},{"file": 30,"line": 9,"col": 0},{"file": 30,"line": 10,"col": 0},{"file": 30,"line": 11,"col": 0},{"file": 30,"line": 12,"col": 0},{"file": 31,"line": 11,"col": 4},{"file": 31,"line": 12,"col": 4},{"file": 31,"line": 13,"col": 4},{"file": 31,"line": 14,"col": 4},{"file": 31,"line": 15,"col": 4},{"file": 31,"line": 16,"col": 4},{"file": 31,"line": 17,"col": 4},{"file": 31,"line": 161,"col": 4,"docs": " Supports the full Allocator interface, including alignment, and exploiting `malloc_usable_size` if available. For an allocator that directly calls `malloc`/`free`, see `raw_c_allocator`."},{"file": 31,"line": 176,"col": 4,"docs": " Asserts allocations are within `@alignOf(std.c.max_align_t)` and directly calls `malloc`/`free`. Does not attempt to utilize `malloc_usable_size`. This allocator is safe to use as the backing allocator with `ArenaAllocator` for example and is more optimal in such a case than `c_allocator`."},{"file": 31,"line": 229,"col": 4,"docs": " This allocator makes a syscall directly for every allocation and free. Thread-safe and lock-free."},{"file": 31,"line": 250,"col": 4,"docs": " TODO Utilize this on Windows."},{"file": 31,"line": 610,"col": 4},{"file": 31,"line": 725,"col": 4},{"file": 31,"line": 849,"col": 4},{"file": 31,"line": 851,"col": 4,"fields": [11139,11140]},{"file": 31,"line": 859,"col": 4,"fields": [11141]},{"file": 31,"line": 1099,"col": 4,"docs": " This one should not try alignments that exceed what C malloc can handle.","fields": [11142]},{"file": 31,"line": 1145,"col": 4,"fields": [11143]},{"file": 31,"line": 1175,"col": 4,"fields": [11144]},{"file": 31,"line": 1207,"col": 4,"fields": [11145]},{"file": 31,"line": 0,"col": 0},{"file": 31,"line": 1,"col": 0},{"file": 31,"line": 2,"col": 0},{"file": 31,"line": 3,"col": 0},{"file": 31,"line": 4,"col": 0},{"file": 31,"line": 5,"col": 0},{"file": 31,"line": 6,"col": 0},{"file": 31,"line": 7,"col": 0},{"file": 31,"line": 8,"col": 0},{"file": 31,"line": 9,"col": 0},{"file": 31,"line": 19,"col": 0},{"file": 31,"line": 21,"col": 0},{"file": 31,"line": 165,"col": 0},{"file": 31,"line": 180,"col": 0},{"file": 31,"line": 186,"col": 0,"fields": [11146,11147,11148,11149,11150]},{"file": 31,"line": 200,"col": 0,"fields": [11151,11152,11153,11154,11155,11156]},{"file": 31,"line": 216,"col": 0,"fields": [11157,11158,11159,11160]},{"file": 31,"line": 252,"col": 0},{"file": 31,"line": 422,"col": 0},{"file": 31,"line": 715,"col": 0,"fields": [11161,11162]},{"file": 31,"line": 1016,"col": 0},{"file": 32,"line": 74,"col": 4},{"file": 32,"line": 103,"col": 4,"docs": " The default log level is based on build mode."},{"file": 32,"line": 111,"col": 4,"docs": " The current log level. This is set to root.log_level if present, otherwise log.default_level."},{"file": 32,"line": 116,"col": 4},{"file": 32,"line": 152,"col": 4,"docs": " The default implementation for root.log.  root.log may forward log messages to this function.","fields": [11163,11164,11165,11166]},{"file": 32,"line": 224,"col": 4,"docs": " The default scoped logging namespace."},{"file": 32,"line": 226,"col": 4},{"file": 32,"line": 227,"col": 4},{"file": 32,"line": 228,"col": 4},{"file": 32,"line": 233,"col": 4,"docs": " Log an error message using the default scope. This log level is intended to be used when something has gone wrong. This might be recoverable or might be followed by the program exiting."},{"file": 32,"line": 238,"col": 4,"docs": " Log a warning message using the default scope. This log level is intended to be used if it is uncertain whether something has gone wrong or not, but the circumstances would be worth investigating."},{"file": 32,"line": 240,"col": 4},{"file": 32,"line": 244,"col": 4,"docs": " Log an info message using the default scope. This log level is intended to be used for general messages about the state of the program."},{"file": 32,"line": 248,"col": 4,"docs": " Log a debug message using the default scope. This log level is intended to be used for messages which are only useful for debugging."},{"file": 32,"line": 70,"col": 0},{"file": 32,"line": 71,"col": 0},{"file": 32,"line": 72,"col": 0},{"file": 32,"line": 121,"col": 0},{"file": 33,"line": 0,"col": 0},{"file": 33,"line": 1,"col": 0},{"file": 34,"line": 11,"col": 4,"docs": " Returns a struct with a field matching each unique named enum element. If the enum is extern and has multiple names for the same value, only the first name is used.  Each field is of type Data and has the provided default, which may be undefined.","fields": [11167,11168,11169]},{"file": 34,"line": 34,"col": 4,"docs": " Looks up the supplied fields in the given enum type. Uses only the field names, field values are ignored. The result array is in the same order as the input.","fields": [11170,11171]},{"file": 34,"line": 46,"col": 4,"docs": " Returns the set of all named values in the given enum, in declaration order.","fields": [11172]},{"file": 34,"line": 97,"col": 4,"docs": " Initializes an array of Data which can be indexed by @intCast(usize, @enumToInt(enum_value)). If the enum is non-exhaustive, the resulting array will only be large enough to hold all explicit fields. If the enum contains any fields with values that cannot be represented by usize, a compile error is issued.  The max_unused_slots parameter limits the total number of items which have no matching enum key (holes in the enum numbering).  So for example, if an enum has values 1, 2, 5, and 6, max_unused_slots must be at least 3, to allow unused slots 0, 3, and 4. The init_values parameter must be a struct with field names that match the enum values. If the enum has multiple fields with the same value, the name of the first one must be used.","fields": [11173,11174,11175,11176]},{"file": 34,"line": 131,"col": 4,"docs": " Initializes an array of Data which can be indexed by @intCast(usize, @enumToInt(enum_value)).  The enum must be exhaustive. If the enum contains any fields with values that cannot be represented by usize, a compile error is issued.  The max_unused_slots parameter limits the total number of items which have no matching enum key (holes in the enum numbering).  So for example, if an enum has values 1, 2, 5, and 6, max_unused_slots must be at least 3, to allow unused slots 0, 3, and 4. The init_values parameter must be a struct with field names that match the enum values. If the enum has multiple fields with the same value, the name of the first one must be used.","fields": [11177,11178,11179,11180,11181]},{"file": 34,"line": 164,"col": 4,"docs": " Cast an enum literal, value, or string to the enum value of type E with the same name.","fields": [11182,11183]},{"file": 34,"line": 209,"col": 4,"docs": " A set of enum elements, backed by a bitfield.  If the enum is not dense, a mapping will be constructed from enum values to dense indices.  This type does no dynamic allocation and can be copied by value.","fields": [11184]},{"file": 34,"line": 296,"col": 4,"docs": " An array keyed by an enum, backed by a dense array. If the enum is not dense, a mapping will be constructed from enum values to dense indices.  This type does no dynamic allocation and can be copied by value.","fields": [11185,11186]},{"file": 34,"line": 329,"col": 4,"docs": " Pass this function as the Ext parameter to Indexed* if you do not want to attach any extensions.  This parameter was originally an optional, but optional generic functions seem to be broken at the moment. TODO: Once #8169 is fixed, consider switching this param back to an optional.","fields": [11187]},{"file": 34,"line": 338,"col": 4,"docs": " A set type with an Indexer mapping from keys to indices. Presence or absence is stored as a dense bitfield.  This type does no allocation and can be copied by value.","fields": [11188,11189]},{"file": 34,"line": 597,"col": 4,"docs": " A dense array of values, using an indexed lookup. This type does no allocation and can be copied by value.","fields": [11190,11191,11192]},{"file": 34,"line": 2,"col": 0},{"file": 34,"line": 3,"col": 0},{"file": 34,"line": 4,"col": 0},{"file": 34,"line": 5,"col": 0},{"file": 34,"line": 59,"col": 0,"docs": " Determines the length of a direct-mapped enum array, indexed by @intCast(usize, @enumToInt(enum_value)). If the enum is non-exhaustive, the resulting length will only be enough to hold all explicit fields. If the enum contains any fields with values that cannot be represented by usize, a compile error is issued.  The max_unused_slots parameter limits the total number of items which have no matching enum key (holes in the enum numbering).  So for example, if an enum has values 1, 2, 5, and 6, max_unused_slots must be at least 3, to allow unused slots 0, 3, and 4.","fields": [11193,11194]},{"file": 34,"line": 333,"col": 0},{"file": 35,"line": 228,"col": 4,"docs": " A bit set with static size, which is backed by an array of usize. This set is good for sets with a larger size, but may use more bytes than necessary if your set is small.","fields": [11195,11196]},{"file": 35,"line": 449,"col": 4,"docs": " A bit set with runtime known size, backed by an allocated slice of usize.  The allocator must be tracked externally by the user."},{"file": 35,"line": 734,"col": 4,"docs": " A bit set with runtime known size, backed by an allocated slice of usize.  Thin wrapper around DynamicBitSetUnmanaged which keeps track of the allocator instance."},{"file": 35,"line": 876,"col": 4,"docs": " Options for configuring an iterator over a bit set"},{"file": 35,"line": 32,"col": 0},{"file": 35,"line": 33,"col": 0},{"file": 35,"line": 34,"col": 0},{"file": 35,"line": 899,"col": 0,"fields": [11197,11198]},{"file": 35,"line": 994,"col": 0},{"file": 35,"line": 996,"col": 0,"fields": [11199,11200,11201]},{"file": 35,"line": 1148,"col": 0,"fields": [11202]},{"file": 36,"line": 14,"col": 4,"docs": " Compile time known minimum page size. https://github.com/ziglang/zig/issues/4082"},{"file": 36,"line": 30,"col": 4,"docs": " The standard library currently thoroughly depends on byte size being 8 bits.  (see the use of u8 throughout allocation code as the \"byte\" type.)  Code which depends on this can reference this declaration.  If we ever try to port the standard library to a non-8-bit-byte platform, this will allow us to search for things which need to be updated."},{"file": 36,"line": 32,"col": 4},{"file": 36,"line": 36,"col": 4,"docs": " Detects and asserts if the std.mem.Allocator interface is violated by the caller or the allocator.","fields": [11203]},{"file": 36,"line": 127,"col": 4,"fields": [11204]},{"file": 36,"line": 226,"col": 4,"docs": " Copy all of source into dest at position 0. dest.len must be >= source.len. If the slices overlap, dest.ptr must be >= src.ptr.","fields": [11205,11206,11207]},{"file": 36,"line": 424,"col": 4,"docs": " Initializes all fields of the struct with their default value, or zero values if no default value is present. If the field is present in the provided initial values, it will have that value instead. Structs are initialized recursively.","fields": [11208,11209]},{"file": 36,"line": 518,"col": 4,"docs": " Compares two slices of numbers lexicographically. O(n).","fields": [11210,11211,11212]},{"file": 36,"line": 540,"col": 4,"docs": " Returns true if lhs < rhs, false otherwise","fields": [11213,11214,11215]},{"file": 36,"line": 564,"col": 4,"docs": " Compares two slices and returns the index of the first inequality. Returns null if the slices are equal.","fields": [11216,11217,11218]},{"file": 36,"line": 669,"col": 4},{"file": 36,"line": 915,"col": 4},{"file": 36,"line": 926,"col": 4,"docs": " Returns true if all elements in a slice are equal to the scalar value provided","fields": [11219,11220,11221]},{"file": 36,"line": 933,"col": 4},{"file": 36,"line": 934,"col": 4},{"file": 36,"line": 944,"col": 4,"docs": " Remove values from the end of a slice.","fields": [11222,11223,11224]},{"file": 36,"line": 951,"col": 4,"docs": " Remove values from the beginning and end of a slice.","fields": [11225,11226,11227]},{"file": 36,"line": 972,"col": 4,"docs": " Linear search for the last index of a scalar value inside a slice.","fields": [11228,11229,11230]},{"file": 36,"line": 989,"col": 4,"fields": [11231,11232,11233]},{"file": 36,"line": 993,"col": 4,"fields": [11234,11235,11236]},{"file": 36,"line": 1004,"col": 4,"fields": [11237,11238,11239,11240]},{"file": 36,"line": 1014,"col": 4,"fields": [11241,11242,11243]},{"file": 36,"line": 1022,"col": 4,"docs": " Find the index in a slice of a sub-slice, searching from the end backwards. To start looking at a different index, slice the haystack first. Consider using `lastIndexOf` instead of this, which will automatically use a more sophisticated algorithm on larger inputs.","fields": [11244,11245,11246]},{"file": 36,"line": 1070,"col": 4,"docs": " Find the index in a slice of a sub-slice, searching from the end backwards. To start looking at a different index, slice the haystack first. Uses the Reverse boyer-moore-horspool algorithm on large inputs; `lastIndexOfLinear` on small inputs.","fields": [11247,11248,11249]},{"file": 36,"line": 1181,"col": 4,"docs": " Returns the number of needles inside the haystack needle.len must be > 0 does not count overlapping needles","fields": [11250,11251,11252]},{"file": 36,"line": 1280,"col": 4},{"file": 36,"line": 1285,"col": 4},{"file": 36,"line": 1295,"col": 4,"docs": " Asserts that bytes.len >= @typeInfo(T).Int.bits / 8. Reads the integer starting from index 0 and ignores extra bytes. The bit count of T must be evenly divisible by 8. Assumes the endianness of memory is native. This means the function can simply pointer cast memory.","fields": [11253,11254]},{"file": 36,"line": 1305,"col": 4,"docs": " Asserts that bytes.len >= @typeInfo(T).Int.bits / 8. Reads the integer starting from index 0 and ignores extra bytes. The bit count of T must be evenly divisible by 8. Assumes the endianness of memory is foreign, so it must byte-swap.","fields": [11255,11256]},{"file": 36,"line": 1309,"col": 4},{"file": 36,"line": 1314,"col": 4},{"file": 36,"line": 1333,"col": 4,"docs": " Asserts that bytes.len >= @typeInfo(T).Int.bits / 8. Reads the integer starting from index 0 and ignores extra bytes. The bit count of T must be evenly divisible by 8.","fields": [11257,11258,11259]},{"file": 36,"line": 1379,"col": 4,"docs": " Writes an integer to memory, storing it in twos-complement. This function always succeeds, has defined behavior for all inputs, and accepts any integer bit width. This function stores in native endian, which means it is implemented as a simple memory store.","fields": [11260,11261,11262]},{"file": 36,"line": 1387,"col": 4,"docs": " Writes an integer to memory, storing it in twos-complement. This function always succeeds, has defined behavior for all inputs, but the integer bit width must be divisible by 8. This function stores in foreign endian, which means it does a @byteSwap first.","fields": [11263,11264,11265]},{"file": 36,"line": 1391,"col": 4},{"file": 36,"line": 1396,"col": 4},{"file": 36,"line": 1404,"col": 4,"docs": " Writes an integer to memory, storing it in twos-complement. This function always succeeds, has defined behavior for all inputs, but the integer bit width must be divisible by 8.","fields": [11266,11267,11268,11269]},{"file": 36,"line": 1418,"col": 4,"docs": " Writes a twos-complement little-endian integer to memory. Asserts that buf.len >= @typeInfo(T).Int.bits / 8. The bit count of T must be divisible by 8. Any extra bytes in buffer after writing the integer are set to zero. To avoid the branch to check for extra buffer bytes, use writeIntLittle instead.","fields": [11270,11271,11272]},{"file": 36,"line": 1442,"col": 4,"docs": " Writes a twos-complement big-endian integer to memory. Asserts that buffer.len >= @typeInfo(T).Int.bits / 8. The bit count of T must be divisible by 8. Any extra bytes in buffer before writing the integer are set to zero. To avoid the branch to check for extra buffer bytes, use writeIntBig instead.","fields": [11273,11274,11275]},{"file": 36,"line": 1464,"col": 4},{"file": 36,"line": 1469,"col": 4},{"file": 36,"line": 1480,"col": 4,"docs": " Writes a twos-complement integer to memory, with the specified endianness. Asserts that buf.len >= @typeInfo(T).Int.bits / 8. The bit count of T must be evenly divisible by 8. Any extra bytes in buffer not part of the integer are set to zero, with respect to endianness. To avoid the branch to check for extra buffer bytes, use writeInt instead.","fields": [11276,11277,11278,11279]},{"file": 36,"line": 1527,"col": 4,"docs": " Swap the byte order of all the members of the fields of a struct (Changing their endianess)","fields": [11280,11281]},{"file": 36,"line": 1725,"col": 4,"fields": [11282,11283,11284]},{"file": 36,"line": 1814,"col": 4,"docs": " Naively combines a series of slices with a separator. Allocates memory for the result, which must be freed by the caller.","fields": [11285,11286,11287]},{"file": 36,"line": 1820,"col": 4,"docs": " Naively combines a series of slices with a separator and null terminator. Allocates memory for the result, which must be freed by the caller.","fields": [11288,11289,11290]},{"file": 36,"line": 1904,"col": 4,"docs": " Copies each T from slices into a new slice that exactly holds all the elements.","fields": [11291,11292,11293]},{"file": 36,"line": 2145,"col": 4,"docs": " Returns the smallest number in a slice. O(n). `slice` must not be empty.","fields": [11294,11295]},{"file": 36,"line": 2159,"col": 4,"docs": " Returns the largest number in a slice. O(n). `slice` must not be empty.","fields": [11296,11297]},{"file": 36,"line": 2178,"col": 4,"docs": " In-place order reversal of a slice","fields": [11298,11299]},{"file": 36,"line": 2195,"col": 4,"docs": " In-place rotation of the values in an array ([0 1 2 3] becomes [1 2 3 0] if we rotate by 1) Assumes 0 <= amount <= items.len","fields": [11300,11301,11302]},{"file": 36,"line": 2211,"col": 4,"docs": " Replace needle with replacement as many times as possible, writing to an output buffer which is assumed to be of appropriate size. Use replacementSize to calculate an appropriate buffer size. The needle must not be empty.","fields": [11303,11304,11305,11306,11307]},{"file": 36,"line": 2266,"col": 4,"docs": " Replace all occurences of `needle` with `replacement`.","fields": [11308,11309,11310,11311]},{"file": 36,"line": 2275,"col": 4,"docs": " Collapse consecutive duplicate elements into one entry.","fields": [11312,11313,11314]},{"file": 36,"line": 2289,"col": 4,"docs": " Collapse consecutive duplicate elements into one entry.","fields": [11315,11316,11317]},{"file": 36,"line": 2314,"col": 4,"docs": " Calculate the size needed in an output buffer to perform a replacement. The needle must not be empty.","fields": [11318,11319,11320,11321]},{"file": 36,"line": 2346,"col": 4,"docs": " Perform a replacement on an allocated buffer of pre-determined size. Caller must free returned memory.","fields": [11322,11323,11324,11325,11326]},{"file": 36,"line": 2365,"col": 4,"docs": " Converts a little-endian integer to host endianness.","fields": [11327,11328]},{"file": 36,"line": 2373,"col": 4,"docs": " Converts a big-endian integer to host endianness.","fields": [11329,11330]},{"file": 36,"line": 2381,"col": 4,"docs": " Converts an integer from specified endianness to host endianness.","fields": [11331,11332,11333]},{"file": 36,"line": 2389,"col": 4,"docs": " Converts an integer which has host endianness to the desired endianness.","fields": [11334,11335,11336]},{"file": 36,"line": 2397,"col": 4,"docs": " Converts an integer which has host endianness to little endian.","fields": [11337,11338]},{"file": 36,"line": 2405,"col": 4,"docs": " Converts an integer which has host endianness to big endian.","fields": [11339,11340]},{"file": 36,"line": 2556,"col": 4,"docs": " Given any value, returns a copy of its bytes in an array.","fields": [11341]},{"file": 36,"line": 2589,"col": 4,"docs": " Given a pointer to an array of bytes, returns a pointer to a value of the specified type backed by those bytes, preserving pointer attributes.","fields": [11342,11343]},{"file": 36,"line": 2646,"col": 4,"docs": " Given a pointer to an array of bytes, returns a value of the specified type backed by a copy of those bytes.","fields": [11344,11345]},{"file": 36,"line": 2871,"col": 4,"docs": " Force an evaluation of the expression; this tries to prevent the compiler from optimizing the computation away even if the result eventually gets discarded.","fields": [11346]},{"file": 36,"line": 2921,"col": 4,"docs": " Returns whether `alignment` is a valid alignment, meaning it is a positive power of 2.","fields": [11347]},{"file": 36,"line": 2925,"col": 4,"fields": [11348,11349]},{"file": 36,"line": 2983,"col": 4,"docs": " Returns the largest slice in the given bytes that conforms to the new alignment, or `null` if the given bytes contain no conforming address.","fields": [11350,11351]},{"file": 36,"line": 2997,"col": 4,"docs": " Returns the largest sub-slice within the given slice that conforms to the new alignment, or `null` if the given slice contains no conforming address.","fields": [11352,11353]},{"file": 36,"line": 0,"col": 0},{"file": 36,"line": 1,"col": 0},{"file": 36,"line": 2,"col": 0},{"file": 36,"line": 3,"col": 0},{"file": 36,"line": 4,"col": 0},{"file": 36,"line": 5,"col": 0},{"file": 36,"line": 6,"col": 0},{"file": 36,"line": 7,"col": 0},{"file": 36,"line": 8,"col": 0},{"file": 36,"line": 9,"col": 0},{"file": 36,"line": 10,"col": 0},{"file": 36,"line": 146,"col": 0},{"file": 36,"line": 151,"col": 0},{"file": 36,"line": 157,"col": 0,"fields": [11354,11355,11356,11357,11358]},{"file": 36,"line": 1041,"col": 0,"fields": [11359,11360]},{"file": 36,"line": 1825,"col": 0,"fields": [11361,11362,11363,11364]},{"file": 36,"line": 1956,"col": 0,"fields": []},{"file": 36,"line": 2007,"col": 0,"fields": []},{"file": 36,"line": 2293,"col": 0,"fields": [11365,11366,11367]},{"file": 36,"line": 2574,"col": 0,"fields": [11368,11369]},{"file": 36,"line": 2965,"col": 0,"docs": " Returns a slice with the given new alignment, all other pointer attributes copied from `AttributeSource`.","fields": [11370,11371]},{"file": 42,"line": 379,"col": 4},{"file": 37,"line": 0,"col": 0},{"file": 37,"line": 1,"col": 0},{"file": 38,"line": 11,"col": 4},{"file": 38,"line": 3,"col": 0},{"file": 38,"line": 4,"col": 0},{"file": 38,"line": 5,"col": 0},{"file": 38,"line": 6,"col": 0},{"file": 38,"line": 7,"col": 0},{"file": 38,"line": 8,"col": 0},{"file": 38,"line": 9,"col": 0},{"file": 39,"line": 66,"col": 4,"docs": " Represents one unit of progress. Each node can have children nodes, or one can use integers with `update`."},{"file": 39,"line": 8,"col": 0},{"file": 39,"line": 9,"col": 0},{"file": 39,"line": 10,"col": 0},{"file": 39,"line": 11,"col": 0},{"file": 39,"line": 12,"col": 0},{"file": 39,"line": 13,"col": 0},{"file": 40,"line": 11,"col": 4},{"file": 40,"line": 12,"col": 4},{"file": 40,"line": 13,"col": 4},{"file": 40,"line": 14,"col": 4},{"file": 40,"line": 15,"col": 4},{"file": 40,"line": 16,"col": 4},{"file": 40,"line": 17,"col": 4},{"file": 40,"line": 18,"col": 4},{"file": 40,"line": 20,"col": 4},{"file": 40,"line": 35,"col": 4},{"file": 40,"line": 47,"col": 4},{"file": 40,"line": 53,"col": 4,"fields": [11372,11373]},{"file": 40,"line": 147,"col": 4},{"file": 40,"line": 159,"col": 4,"fields": [11374,11375]},{"file": 40,"line": 244,"col": 4,"docs": " Represents a unique ID per thread."},{"file": 40,"line": 252,"col": 4},{"file": 40,"line": 259,"col": 4,"docs": " Returns the platforms view on the number of logical CPU cores available.","fields": []},{"file": 40,"line": 264,"col": 4,"docs": " Configuration options for hints on how to spawn threads."},{"file": 40,"line": 272,"col": 4},{"file": 40,"line": 306,"col": 4,"docs": " Spawns a new thread which executes `function` using `args` and returns a handle the spawned thread. `config` can be used as hints to the platform for now to spawn and execute the `function`. The caller must eventually either call `join()` to wait for the thread to finish and free its resources or call `detach()` to excuse the caller from calling `join()` and have the thread clean up its resources on completion`.","fields": [11376,11377,11378]},{"file": 40,"line": 317,"col": 4,"docs": " Represents a kernel thread handle. May be an integer or a pointer depending on the platform."},{"file": 40,"line": 320,"col": 4,"docs": " Retrns the handle of this thread","fields": [11379]},{"file": 40,"line": 326,"col": 4,"docs": " Release the obligation of the caller to call `join()` and have the thread clean up its own resources on completion. Once called, this consumes the Thread object and invoking any other functions on it is considered undefined behavior.","fields": [11380]},{"file": 40,"line": 332,"col": 4,"docs": " Waits for the thread to complete, then deallocates any resources created on `spawn()`. Once called, this consumes the Thread object and invoking any other functions on it is considered undefined behavior.","fields": [11381]},{"file": 40,"line": 4,"col": 0},{"file": 40,"line": 5,"col": 0},{"file": 40,"line": 6,"col": 0},{"file": 40,"line": 7,"col": 0},{"file": 40,"line": 8,"col": 0},{"file": 40,"line": 9,"col": 0},{"file": 40,"line": 21,"col": 0},{"file": 40,"line": 23,"col": 0},{"file": 40,"line": 24,"col": 0},{"file": 40,"line": 337,"col": 0,"docs": " State to synchronize detachment of spawner thread to spawned thread"},{"file": 40,"line": 344,"col": 0,"docs": " Used by the Thread implementations to call the spawned function with the arguments.","fields": [11382,11383]},{"file": 40,"line": 397,"col": 0,"docs": " We can't compile error in the `Impl` switch statement as its eagerly evaluated. So instead, we compile-error on the methods themselves for platforms which don't support threads."},{"file": 40,"line": 431,"col": 0},{"file": 40,"line": 534,"col": 0},{"file": 40,"line": 688,"col": 0},{"file": 40,"line": 1022,"col": 0,"fields": [11384]},{"file": 40,"line": 1121,"col": 0,"fields": [11385,11386]},{"file": 40,"line": 1155,"col": 0,"fields": [11387,11388]},{"file": 41,"line": 3,"col": 4},{"file": 41,"line": 5,"col": 4},{"file": 41,"line": 6,"col": 4},{"file": 41,"line": 7,"col": 4},{"file": 41,"line": 15,"col": 4,"fields": [11389]},{"file": 41,"line": 26,"col": 4,"fields": [11390]},{"file": 41,"line": 0,"col": 0},{"file": 41,"line": 1,"col": 0},{"file": 42,"line": 14,"col": 4},{"file": 42,"line": 72,"col": 4},{"file": 42,"line": 73,"col": 4},{"file": 42,"line": 74,"col": 4},{"file": 42,"line": 75,"col": 4},{"file": 42,"line": 76,"col": 4},{"file": 42,"line": 79,"col": 4},{"file": 42,"line": 80,"col": 4},{"file": 42,"line": 81,"col": 4},{"file": 42,"line": 82,"col": 4},{"file": 42,"line": 83,"col": 4},{"file": 42,"line": 89,"col": 4},{"file": 42,"line": 98,"col": 4},{"file": 42,"line": 374,"col": 4},{"file": 42,"line": 0,"col": 0},{"file": 42,"line": 1,"col": 0},{"file": 42,"line": 2,"col": 0},{"file": 42,"line": 3,"col": 0},{"file": 42,"line": 4,"col": 0},{"file": 42,"line": 6,"col": 0},{"file": 42,"line": 10,"col": 0},{"file": 42,"line": 11,"col": 0},{"file": 42,"line": 12,"col": 0},{"file": 42,"line": 68,"col": 0},{"file": 42,"line": 69,"col": 0},{"file": 42,"line": 85,"col": 0},{"file": 42,"line": 86,"col": 0},{"file": 42,"line": 87,"col": 0},{"file": 42,"line": 342,"col": 0},{"file": 42,"line": 352,"col": 0},{"file": 42,"line": 363,"col": 0},{"file": 42,"line": 378,"col": 0},{"file": 43,"line": 23,"col": 4},{"file": 43,"line": 28,"col": 4},{"file": 43,"line": 40,"col": 4},{"file": 43,"line": 58,"col": 4},{"file": 43,"line": 69,"col": 4,"fields": []},{"file": 43,"line": 151,"col": 4,"docs": " Returns a slice with the same pointer as addresses, with a potentially smaller len. On Windows, when first_address is not null, we ask for at least 32 stack frames, and then try to find the first address. If addresses.len is more than 32, we capture that many stack frames exactly, and then look for the first address, chopping off the irrelevant frames and shifting so that the returned addresses pointer equals the passed in addresses pointer.","fields": [11391,11392]},{"file": 43,"line": 227,"col": 4,"fields": [11393,11394]},{"file": 43,"line": 235,"col": 4,"docs": " `panicExtra` is useful when you want to print out an `@errorReturnTrace` and also print out some values.","fields": [11395,11396,11397]},{"file": 43,"line": 360,"col": 4},{"file": 43,"line": 468,"col": 4,"fields": [11398,11399,11400,11401]},{"file": 43,"line": 488,"col": 4},{"file": 43,"line": 685,"col": 4},{"file": 43,"line": 1054,"col": 4},{"file": 43,"line": 1294,"col": 4},{"file": 43,"line": 1602,"col": 4,"docs": " Whether or not the current target can print useful debug information when a segfault occurs."},{"file": 43,"line": 1613,"col": 4},{"file": 43,"line": 1786,"col": 4,"fields": [11402]},{"file": 43,"line": 0,"col": 0},{"file": 43,"line": 1,"col": 0},{"file": 43,"line": 2,"col": 0},{"file": 43,"line": 3,"col": 0},{"file": 43,"line": 4,"col": 0},{"file": 43,"line": 5,"col": 0},{"file": 43,"line": 6,"col": 0},{"file": 43,"line": 7,"col": 0},{"file": 43,"line": 8,"col": 0},{"file": 43,"line": 9,"col": 0},{"file": 43,"line": 10,"col": 0},{"file": 43,"line": 11,"col": 0},{"file": 43,"line": 12,"col": 0},{"file": 43,"line": 13,"col": 0},{"file": 43,"line": 14,"col": 0},{"file": 43,"line": 15,"col": 0},{"file": 43,"line": 16,"col": 0},{"file": 43,"line": 17,"col": 0},{"file": 43,"line": 18,"col": 0},{"file": 43,"line": 19,"col": 0},{"file": 43,"line": 20,"col": 0},{"file": 43,"line": 21,"col": 0},{"file": 43,"line": 51,"col": 0},{"file": 43,"line": 56,"col": 0},{"file": 43,"line": 74,"col": 0,"docs": " TODO multithreaded awareness"},{"file": 43,"line": 259,"col": 0,"docs": " Non-zero whenever the program triggered a panic. The counter is incremented/decremented atomically."},{"file": 43,"line": 262,"col": 0},{"file": 43,"line": 266,"col": 12,"docs": " Counts how many times the panic handler is invoked by this thread. This is used to catch and handle panics triggered by the panic handler."},{"file": 43,"line": 331,"col": 0},{"file": 43,"line": 332,"col": 0},{"file": 43,"line": 333,"col": 0},{"file": 43,"line": 334,"col": 0},{"file": 43,"line": 335,"col": 0},{"file": 43,"line": 336,"col": 0},{"file": 43,"line": 337,"col": 0},{"file": 43,"line": 560,"col": 0,"fields": [11403,11404]},{"file": 43,"line": 718,"col": 0,"docs": " This takes ownership of coff_file: users of this function should not close it themselves, even on error. TODO resources https://github.com/ziglang/zig/issues/4353 TODO it's weird to take ownership even on error, rework this code.","fields": [11405,11406]},{"file": 43,"line": 857,"col": 0,"docs": " TODO resources https://github.com/ziglang/zig/issues/4353 This takes ownership of macho_file: users of this function should not close it themselves, even on error. TODO it's weird to take ownership even on error, rework this code.","fields": [11407,11408]},{"file": 43,"line": 1015,"col": 0},{"file": 43,"line": 1590,"col": 0,"docs": " TODO multithreaded awareness"},{"file": 43,"line": 1591,"col": 0},{"file": 43,"line": 1624,"col": 0},{"file": 43,"line": 1743,"col": 0,"fields": [11409]},{"file": 43,"line": 1754,"col": 0,"fields": [11410,11411,11412]},{"file": 44,"line": 10,"col": 4},{"file": 44,"line": 11,"col": 4},{"file": 44,"line": 12,"col": 4},{"file": 44,"line": 14,"col": 4},{"file": 44,"line": 51,"col": 4},{"file": 44,"line": 96,"col": 4},{"file": 44,"line": 138,"col": 4},{"file": 44,"line": 143,"col": 4},{"file": 44,"line": 159,"col": 4},{"file": 44,"line": 168,"col": 4},{"file": 44,"line": 207,"col": 4},{"file": 44,"line": 218,"col": 4},{"file": 44,"line": 593,"col": 4},{"file": 44,"line": 0,"col": 0},{"file": 44,"line": 1,"col": 0},{"file": 44,"line": 2,"col": 0},{"file": 44,"line": 3,"col": 0},{"file": 44,"line": 4,"col": 0},{"file": 44,"line": 5,"col": 0},{"file": 44,"line": 6,"col": 0},{"file": 44,"line": 8,"col": 0},{"file": 44,"line": 228,"col": 0},{"file": 44,"line": 233,"col": 0},{"file": 44,"line": 238,"col": 0},{"file": 44,"line": 245,"col": 0},{"file": 44,"line": 247,"col": 0},{"file": 44,"line": 253,"col": 0},{"file": 44,"line": 260,"col": 0},{"file": 44,"line": 265,"col": 0},{"file": 44,"line": 278,"col": 0},{"file": 44,"line": 288,"col": 0},{"file": 44,"line": 348,"col": 0},{"file": 44,"line": 355,"col": 0},{"file": 45,"line": 9,"col": 4},{"file": 45,"line": 10,"col": 4},{"file": 45,"line": 11,"col": 4},{"file": 45,"line": 12,"col": 4},{"file": 45,"line": 13,"col": 4},{"file": 45,"line": 14,"col": 4},{"file": 45,"line": 15,"col": 4},{"file": 45,"line": 16,"col": 4},{"file": 45,"line": 17,"col": 4},{"file": 45,"line": 18,"col": 4},{"file": 45,"line": 19,"col": 4},{"file": 45,"line": 20,"col": 4},{"file": 45,"line": 21,"col": 4},{"file": 45,"line": 22,"col": 4},{"file": 45,"line": 23,"col": 4},{"file": 45,"line": 24,"col": 4},{"file": 45,"line": 25,"col": 4},{"file": 45,"line": 26,"col": 4},{"file": 45,"line": 27,"col": 4},{"file": 45,"line": 28,"col": 4},{"file": 45,"line": 29,"col": 4},{"file": 45,"line": 30,"col": 4},{"file": 45,"line": 31,"col": 4},{"file": 45,"line": 32,"col": 4},{"file": 45,"line": 33,"col": 4},{"file": 45,"line": 34,"col": 4},{"file": 45,"line": 35,"col": 4},{"file": 45,"line": 36,"col": 4},{"file": 45,"line": 37,"col": 4},{"file": 45,"line": 38,"col": 4},{"file": 45,"line": 39,"col": 4},{"file": 45,"line": 40,"col": 4},{"file": 45,"line": 41,"col": 4},{"file": 45,"line": 42,"col": 4},{"file": 45,"line": 43,"col": 4},{"file": 45,"line": 44,"col": 4},{"file": 45,"line": 45,"col": 4},{"file": 45,"line": 46,"col": 4},{"file": 45,"line": 47,"col": 4},{"file": 45,"line": 48,"col": 4},{"file": 45,"line": 49,"col": 4},{"file": 45,"line": 50,"col": 4},{"file": 45,"line": 52,"col": 4},{"file": 45,"line": 53,"col": 4},{"file": 45,"line": 54,"col": 4},{"file": 45,"line": 55,"col": 4},{"file": 45,"line": 56,"col": 4},{"file": 45,"line": 57,"col": 4},{"file": 45,"line": 58,"col": 4},{"file": 45,"line": 59,"col": 4},{"file": 45,"line": 60,"col": 4},{"file": 45,"line": 61,"col": 4},{"file": 45,"line": 62,"col": 4},{"file": 45,"line": 63,"col": 4},{"file": 45,"line": 64,"col": 4},{"file": 45,"line": 65,"col": 4},{"file": 45,"line": 66,"col": 4},{"file": 45,"line": 67,"col": 4},{"file": 45,"line": 68,"col": 4},{"file": 45,"line": 69,"col": 4},{"file": 45,"line": 70,"col": 4},{"file": 45,"line": 71,"col": 4},{"file": 45,"line": 72,"col": 4},{"file": 45,"line": 73,"col": 4},{"file": 45,"line": 74,"col": 4},{"file": 45,"line": 75,"col": 4},{"file": 45,"line": 76,"col": 4},{"file": 45,"line": 77,"col": 4},{"file": 45,"line": 78,"col": 4},{"file": 45,"line": 79,"col": 4},{"file": 45,"line": 80,"col": 4},{"file": 45,"line": 81,"col": 4},{"file": 45,"line": 82,"col": 4},{"file": 45,"line": 83,"col": 4},{"file": 45,"line": 84,"col": 4},{"file": 45,"line": 85,"col": 4},{"file": 45,"line": 86,"col": 4},{"file": 45,"line": 87,"col": 4},{"file": 45,"line": 88,"col": 4},{"file": 45,"line": 89,"col": 4},{"file": 45,"line": 90,"col": 4},{"file": 45,"line": 91,"col": 4},{"file": 45,"line": 92,"col": 4},{"file": 45,"line": 94,"col": 4},{"file": 45,"line": 95,"col": 4},{"file": 45,"line": 96,"col": 4},{"file": 45,"line": 97,"col": 4},{"file": 45,"line": 98,"col": 4},{"file": 45,"line": 99,"col": 4},{"file": 45,"line": 100,"col": 4},{"file": 45,"line": 101,"col": 4},{"file": 45,"line": 102,"col": 4},{"file": 45,"line": 103,"col": 4},{"file": 45,"line": 105,"col": 4},{"file": 45,"line": 106,"col": 4},{"file": 45,"line": 107,"col": 4},{"file": 45,"line": 108,"col": 4},{"file": 45,"line": 110,"col": 4},{"file": 45,"line": 111,"col": 4},{"file": 45,"line": 112,"col": 4},{"file": 45,"line": 113,"col": 4},{"file": 45,"line": 114,"col": 4},{"file": 45,"line": 115,"col": 4},{"file": 45,"line": 116,"col": 4},{"file": 45,"line": 117,"col": 4},{"file": 45,"line": 118,"col": 4},{"file": 45,"line": 119,"col": 4},{"file": 45,"line": 120,"col": 4},{"file": 45,"line": 121,"col": 4},{"file": 45,"line": 122,"col": 4},{"file": 45,"line": 123,"col": 4},{"file": 45,"line": 125,"col": 4},{"file": 45,"line": 127,"col": 4},{"file": 45,"line": 128,"col": 4},{"file": 45,"line": 130,"col": 4},{"file": 45,"line": 131,"col": 4},{"file": 45,"line": 133,"col": 4},{"file": 45,"line": 134,"col": 4},{"file": 45,"line": 136,"col": 4},{"file": 45,"line": 137,"col": 4},{"file": 45,"line": 139,"col": 4},{"file": 45,"line": 140,"col": 4},{"file": 45,"line": 141,"col": 4},{"file": 45,"line": 143,"col": 4},{"file": 45,"line": 144,"col": 4},{"file": 45,"line": 146,"col": 4},{"file": 45,"line": 147,"col": 4},{"file": 45,"line": 148,"col": 4},{"file": 45,"line": 149,"col": 4},{"file": 45,"line": 150,"col": 4},{"file": 45,"line": 151,"col": 4},{"file": 45,"line": 152,"col": 4},{"file": 45,"line": 153,"col": 4},{"file": 45,"line": 154,"col": 4},{"file": 45,"line": 155,"col": 4},{"file": 45,"line": 156,"col": 4},{"file": 45,"line": 157,"col": 4},{"file": 45,"line": 158,"col": 4},{"file": 45,"line": 159,"col": 4},{"file": 45,"line": 160,"col": 4},{"file": 45,"line": 161,"col": 4},{"file": 45,"line": 162,"col": 4},{"file": 45,"line": 163,"col": 4},{"file": 45,"line": 164,"col": 4},{"file": 45,"line": 166,"col": 4},{"file": 45,"line": 167,"col": 4},{"file": 45,"line": 169,"col": 4},{"file": 45,"line": 170,"col": 4},{"file": 45,"line": 172,"col": 4},{"file": 45,"line": 174,"col": 4},{"file": 45,"line": 176,"col": 4},{"file": 45,"line": 178,"col": 4},{"file": 45,"line": 180,"col": 4},{"file": 45,"line": 181,"col": 4},{"file": 45,"line": 182,"col": 4},{"file": 45,"line": 183,"col": 4},{"file": 45,"line": 184,"col": 4},{"file": 45,"line": 185,"col": 4},{"file": 45,"line": 186,"col": 4},{"file": 45,"line": 187,"col": 4},{"file": 45,"line": 188,"col": 4},{"file": 45,"line": 189,"col": 4},{"file": 45,"line": 190,"col": 4},{"file": 45,"line": 191,"col": 4},{"file": 45,"line": 193,"col": 4},{"file": 45,"line": 195,"col": 4},{"file": 45,"line": 196,"col": 4},{"file": 45,"line": 197,"col": 4},{"file": 45,"line": 199,"col": 4},{"file": 45,"line": 201,"col": 4},{"file": 45,"line": 202,"col": 4},{"file": 45,"line": 203,"col": 4},{"file": 45,"line": 205,"col": 4},{"file": 45,"line": 206,"col": 4},{"file": 45,"line": 208,"col": 4},{"file": 45,"line": 209,"col": 4},{"file": 45,"line": 210,"col": 4},{"file": 45,"line": 212,"col": 4},{"file": 45,"line": 213,"col": 4},{"file": 45,"line": 214,"col": 4},{"file": 45,"line": 215,"col": 4},{"file": 45,"line": 216,"col": 4},{"file": 45,"line": 218,"col": 4},{"file": 45,"line": 219,"col": 4},{"file": 45,"line": 221,"col": 4},{"file": 45,"line": 223,"col": 4},{"file": 45,"line": 224,"col": 4},{"file": 45,"line": 225,"col": 4},{"file": 45,"line": 226,"col": 4},{"file": 45,"line": 227,"col": 4},{"file": 45,"line": 228,"col": 4},{"file": 45,"line": 229,"col": 4},{"file": 45,"line": 230,"col": 4},{"file": 45,"line": 231,"col": 4},{"file": 45,"line": 232,"col": 4},{"file": 45,"line": 233,"col": 4},{"file": 45,"line": 234,"col": 4},{"file": 45,"line": 235,"col": 4},{"file": 45,"line": 236,"col": 4},{"file": 45,"line": 237,"col": 4},{"file": 45,"line": 238,"col": 4},{"file": 45,"line": 239,"col": 4},{"file": 45,"line": 240,"col": 4},{"file": 45,"line": 241,"col": 4},{"file": 45,"line": 242,"col": 4},{"file": 45,"line": 244,"col": 4},{"file": 45,"line": 245,"col": 4},{"file": 45,"line": 246,"col": 4},{"file": 45,"line": 247,"col": 4},{"file": 45,"line": 248,"col": 4},{"file": 45,"line": 249,"col": 4},{"file": 45,"line": 250,"col": 4},{"file": 45,"line": 251,"col": 4},{"file": 45,"line": 252,"col": 4},{"file": 45,"line": 253,"col": 4},{"file": 45,"line": 254,"col": 4},{"file": 45,"line": 255,"col": 4},{"file": 45,"line": 256,"col": 4},{"file": 45,"line": 257,"col": 4},{"file": 45,"line": 258,"col": 4},{"file": 45,"line": 259,"col": 4},{"file": 45,"line": 260,"col": 4},{"file": 45,"line": 261,"col": 4},{"file": 45,"line": 262,"col": 4},{"file": 45,"line": 263,"col": 4},{"file": 45,"line": 264,"col": 4},{"file": 45,"line": 265,"col": 4},{"file": 45,"line": 266,"col": 4},{"file": 45,"line": 268,"col": 4},{"file": 45,"line": 269,"col": 4},{"file": 45,"line": 270,"col": 4},{"file": 45,"line": 271,"col": 4},{"file": 45,"line": 272,"col": 4},{"file": 45,"line": 273,"col": 4},{"file": 45,"line": 274,"col": 4},{"file": 45,"line": 275,"col": 4},{"file": 45,"line": 276,"col": 4},{"file": 45,"line": 278,"col": 4},{"file": 45,"line": 280,"col": 4},{"file": 45,"line": 281,"col": 4},{"file": 45,"line": 282,"col": 4},{"file": 45,"line": 283,"col": 4},{"file": 45,"line": 284,"col": 4},{"file": 45,"line": 285,"col": 4},{"file": 45,"line": 286,"col": 4},{"file": 45,"line": 287,"col": 4},{"file": 45,"line": 288,"col": 4},{"file": 45,"line": 289,"col": 4},{"file": 45,"line": 290,"col": 4},{"file": 45,"line": 291,"col": 4},{"file": 45,"line": 292,"col": 4},{"file": 45,"line": 294,"col": 4},{"file": 45,"line": 296,"col": 4},{"file": 45,"line": 298,"col": 4},{"file": 45,"line": 299,"col": 4},{"file": 45,"line": 301,"col": 4},{"file": 45,"line": 302,"col": 4},{"file": 45,"line": 304,"col": 4},{"file": 45,"line": 305,"col": 4},{"file": 45,"line": 308,"col": 4,"docs": " File types"},{"file": 45,"line": 332,"col": 4,"docs": " All integers are native endian."},{"file": 45,"line": 406,"col": 4,"fields": [11413]},{"file": 45,"line": 456,"col": 4,"fields": [11414]},{"file": 45,"line": 508,"col": 4,"fields": [11415,11416,11417,11418]},{"file": 45,"line": 520,"col": 4,"fields": [11419,11420,11421]},{"file": 45,"line": 528,"col": 4},{"file": 45,"line": 530,"col": 4},{"file": 45,"line": 531,"col": 4},{"file": 45,"line": 532,"col": 4},{"file": 45,"line": 533,"col": 4},{"file": 45,"line": 534,"col": 4},{"file": 45,"line": 536,"col": 4},{"file": 45,"line": 537,"col": 4},{"file": 45,"line": 538,"col": 4},{"file": 45,"line": 539,"col": 4},{"file": 45,"line": 540,"col": 4},{"file": 45,"line": 542,"col": 4},{"file": 45,"line": 544,"col": 4},{"file": 45,"line": 545,"col": 4},{"file": 45,"line": 546,"col": 4},{"file": 45,"line": 547,"col": 4},{"file": 45,"line": 548,"col": 4},{"file": 45,"line": 549,"col": 4},{"file": 45,"line": 550,"col": 4},{"file": 45,"line": 551,"col": 4},{"file": 45,"line": 552,"col": 4},{"file": 45,"line": 553,"col": 4},{"file": 45,"line": 554,"col": 4},{"file": 45,"line": 555,"col": 4},{"file": 45,"line": 556,"col": 4},{"file": 45,"line": 557,"col": 4},{"file": 45,"line": 558,"col": 4},{"file": 45,"line": 559,"col": 4},{"file": 45,"line": 560,"col": 4},{"file": 45,"line": 561,"col": 4},{"file": 45,"line": 562,"col": 4},{"file": 45,"line": 578,"col": 4},{"file": 45,"line": 594,"col": 4},{"file": 45,"line": 604,"col": 4},{"file": 45,"line": 614,"col": 4},{"file": 45,"line": 626,"col": 4},{"file": 45,"line": 638,"col": 4},{"file": 45,"line": 643,"col": 4},{"file": 45,"line": 649,"col": 4},{"file": 45,"line": 657,"col": 4},{"file": 45,"line": 665,"col": 4},{"file": 45,"line": 669,"col": 4},{"file": 45,"line": 673,"col": 4},{"file": 45,"line": 684,"col": 4},{"file": 45,"line": 695,"col": 4},{"file": 45,"line": 707,"col": 4},{"file": 45,"line": 719,"col": 4},{"file": 45,"line": 723,"col": 4},{"file": 45,"line": 727,"col": 4},{"file": 45,"line": 736,"col": 4},{"file": 45,"line": 745,"col": 4},{"file": 45,"line": 749,"col": 4},{"file": 45,"line": 753,"col": 4},{"file": 45,"line": 760,"col": 4},{"file": 45,"line": 767,"col": 4},{"file": 45,"line": 774,"col": 4},{"file": 45,"line": 781,"col": 4},{"file": 45,"line": 787,"col": 4},{"file": 45,"line": 793,"col": 4},{"file": 45,"line": 798,"col": 4},{"file": 45,"line": 803,"col": 4},{"file": 45,"line": 810,"col": 4},{"file": 45,"line": 817,"col": 4},{"file": 45,"line": 827,"col": 4},{"file": 45,"line": 832,"col": 4},{"file": 45,"line": 838,"col": 4},{"file": 45,"line": 842,"col": 4},{"file": 45,"line": 849,"col": 4},{"file": 45,"line": 856,"col": 4},{"file": 45,"line": 857,"col": 4},{"file": 45,"line": 882,"col": 4},{"file": 45,"line": 887,"col": 4},{"file": 45,"line": 892,"col": 4},{"file": 45,"line": 897,"col": 4},{"file": 45,"line": 902,"col": 4},{"file": 45,"line": 907,"col": 4},{"file": 45,"line": 912,"col": 4},{"file": 45,"line": 917,"col": 4},{"file": 45,"line": 922,"col": 4},{"file": 45,"line": 927,"col": 4},{"file": 45,"line": 932,"col": 4},{"file": 45,"line": 937,"col": 4},{"file": 45,"line": 947,"col": 4,"docs": " Machine architectures See current registered ELF machine architectures at:    http://www.sco.com/developers/gabi/latest/ch4.eheader.html The underscore prefix is because many of these start with numbers."},{"file": 45,"line": 1486,"col": 4,"docs": " Section data should be writable during execution."},{"file": 45,"line": 1489,"col": 4,"docs": " Section occupies memory during program execution."},{"file": 45,"line": 1492,"col": 4,"docs": " Section contains executable machine instructions."},{"file": 45,"line": 1495,"col": 4,"docs": " The data in this section may be merged."},{"file": 45,"line": 1498,"col": 4,"docs": " The data in this section is null-terminated strings."},{"file": 45,"line": 1501,"col": 4,"docs": " A field in this section holds a section header table index."},{"file": 45,"line": 1504,"col": 4,"docs": " Adds special ordering requirements for link editors."},{"file": 45,"line": 1508,"col": 4,"docs": " This section requires special OS-specific processing to avoid incorrect behavior."},{"file": 45,"line": 1511,"col": 4,"docs": " This section is a member of a section group."},{"file": 45,"line": 1514,"col": 4,"docs": " This section holds Thread-Local Storage."},{"file": 45,"line": 1517,"col": 4,"docs": " Identifies a section containing compressed data."},{"file": 45,"line": 1520,"col": 4,"docs": " This section is excluded from the final executable or shared library."},{"file": 45,"line": 1523,"col": 4,"docs": " Start of target-specific flags."},{"file": 45,"line": 1526,"col": 4,"docs": " Bits indicating processor-specific flags."},{"file": 45,"line": 1531,"col": 4,"docs": " All sections with the \"d\" flag are grouped together by the linker to form the data section and the dp register is set to the start of the section by the boot code."},{"file": 45,"line": 1536,"col": 4,"docs": " All sections with the \"c\" flag are grouped together by the linker to form the constant pool and the cp register is set to the start of the constant pool by the boot code."},{"file": 45,"line": 1545,"col": 4,"docs": " If an object file section does not have this flag set, then it may not hold more than 2GB and can be freely referred to in objects using smaller code models. Otherwise, only objects using larger code models can refer to them. For example, a medium code model object can refer to data in a section that sets this flag besides being able to refer to data in a section that does not set it; likewise, a small code model object can refer only to code in a section that does not set this flag."},{"file": 45,"line": 1549,"col": 4,"docs": " All sections with the GPREL flag are grouped into a global data area for faster accesses"},{"file": 45,"line": 1553,"col": 4,"docs": " Section contains text/data which may be replicated in other sections. Linker must retain only one copy."},{"file": 45,"line": 1556,"col": 4,"docs": " Linker must generate implicit hidden weak names."},{"file": 45,"line": 1559,"col": 4,"docs": " Section data local to process."},{"file": 45,"line": 1562,"col": 4,"docs": " Do not strip this section."},{"file": 45,"line": 1565,"col": 4,"docs": " Section must be part of global data area."},{"file": 45,"line": 1568,"col": 4,"docs": " This section should be merged."},{"file": 45,"line": 1571,"col": 4,"docs": " Address size to be inferred from section entry size."},{"file": 45,"line": 1574,"col": 4,"docs": " Section data is string data by default."},{"file": 45,"line": 1577,"col": 4,"docs": " Make code section unreadable when in execute-only mode"},{"file": 45,"line": 1580,"col": 4,"docs": " Execute"},{"file": 45,"line": 1583,"col": 4,"docs": " Write"},{"file": 45,"line": 1586,"col": 4,"docs": " Read"},{"file": 45,"line": 1589,"col": 4,"docs": " Bits for operating system-specific semantics."},{"file": 45,"line": 1592,"col": 4,"docs": " Bits for processor-specific semantics."},{"file": 45,"line": 1595,"col": 4},{"file": 45,"line": 1596,"col": 4},{"file": 45,"line": 1597,"col": 4},{"file": 45,"line": 1598,"col": 4},{"file": 45,"line": 1599,"col": 4},{"file": 45,"line": 1600,"col": 4},{"file": 45,"line": 1601,"col": 4},{"file": 45,"line": 1602,"col": 4},{"file": 45,"line": 1606,"col": 4,"docs": " AMD x86-64 relocations. No reloc"},{"file": 45,"line": 1608,"col": 4,"docs": " Direct 64 bit"},{"file": 45,"line": 1610,"col": 4,"docs": " PC relative 32 bit signed"},{"file": 45,"line": 1612,"col": 4,"docs": " 32 bit GOT entry"},{"file": 45,"line": 1614,"col": 4,"docs": " 32 bit PLT address"},{"file": 45,"line": 1616,"col": 4,"docs": " Copy symbol at runtime"},{"file": 45,"line": 1618,"col": 4,"docs": " Create GOT entry"},{"file": 45,"line": 1620,"col": 4,"docs": " Create PLT entry"},{"file": 45,"line": 1622,"col": 4,"docs": " Adjust by program base"},{"file": 45,"line": 1624,"col": 4,"docs": " 32 bit signed PC relative offset to GOT"},{"file": 45,"line": 1626,"col": 4,"docs": " Direct 32 bit zero extended"},{"file": 45,"line": 1628,"col": 4,"docs": " Direct 32 bit sign extended"},{"file": 45,"line": 1630,"col": 4,"docs": " Direct 16 bit zero extended"},{"file": 45,"line": 1632,"col": 4,"docs": " 16 bit sign extended pc relative"},{"file": 45,"line": 1634,"col": 4,"docs": " Direct 8 bit sign extended"},{"file": 45,"line": 1636,"col": 4,"docs": " 8 bit sign extended pc relative"},{"file": 45,"line": 1638,"col": 4,"docs": " ID of module containing symbol"},{"file": 45,"line": 1640,"col": 4,"docs": " Offset in module's TLS block"},{"file": 45,"line": 1642,"col": 4,"docs": " Offset in initial TLS block"},{"file": 45,"line": 1644,"col": 4,"docs": " 32 bit signed PC relative offset to two GOT entries for GD symbol"},{"file": 45,"line": 1646,"col": 4,"docs": " 32 bit signed PC relative offset to two GOT entries for LD symbol"},{"file": 45,"line": 1648,"col": 4,"docs": " Offset in TLS block"},{"file": 45,"line": 1650,"col": 4,"docs": " 32 bit signed PC relative offset to GOT entry for IE symbol"},{"file": 45,"line": 1652,"col": 4,"docs": " Offset in initial TLS block"},{"file": 45,"line": 1654,"col": 4,"docs": " PC relative 64 bit"},{"file": 45,"line": 1656,"col": 4,"docs": " 64 bit offset to GOT"},{"file": 45,"line": 1658,"col": 4,"docs": " 32 bit signed pc relative offset to GOT"},{"file": 45,"line": 1660,"col": 4,"docs": " 64 bit GOT entry offset"},{"file": 45,"line": 1662,"col": 4,"docs": " 64 bit PC relative offset to GOT entry"},{"file": 45,"line": 1664,"col": 4,"docs": " 64 bit PC relative offset to GOT"},{"file": 45,"line": 1666,"col": 4,"docs": " Like GOT64, says PLT entry needed"},{"file": 45,"line": 1668,"col": 4,"docs": " 64-bit GOT relative offset to PLT entry"},{"file": 45,"line": 1670,"col": 4,"docs": " Size of symbol plus 32-bit addend"},{"file": 45,"line": 1672,"col": 4,"docs": " Size of symbol plus 64-bit addend"},{"file": 45,"line": 1674,"col": 4,"docs": " GOT offset for TLS descriptor"},{"file": 45,"line": 1676,"col": 4,"docs": " Marker for call through TLS descriptor"},{"file": 45,"line": 1678,"col": 4,"docs": " TLS descriptor"},{"file": 45,"line": 1680,"col": 4,"docs": " Adjust indirectly by program base"},{"file": 45,"line": 1682,"col": 4,"docs": " 64-bit adjust by program base"},{"file": 45,"line": 1686,"col": 4,"docs": " 39 Reserved was R_X86_64_PC32_BND  40 Reserved was R_X86_64_PLT32_BND Load from 32 bit signed pc relative offset to GOT entry without REX prefix, relaxable"},{"file": 45,"line": 1688,"col": 4,"docs": " Load from 32 bit signed PC relative offset to GOT entry with REX prefix, relaxable"},{"file": 45,"line": 1689,"col": 4},{"file": 45,"line": 1691,"col": 4},{"file": 45,"line": 0,"col": 0},{"file": 45,"line": 1,"col": 0},{"file": 45,"line": 2,"col": 0},{"file": 45,"line": 3,"col": 0},{"file": 45,"line": 4,"col": 0},{"file": 45,"line": 5,"col": 0},{"file": 45,"line": 6,"col": 0},{"file": 45,"line": 7,"col": 0},{"file": 46,"line": 0,"col": 4},{"file": 46,"line": 1,"col": 4},{"file": 46,"line": 2,"col": 4},{"file": 46,"line": 3,"col": 4},{"file": 46,"line": 4,"col": 4},{"file": 46,"line": 5,"col": 4},{"file": 46,"line": 6,"col": 4},{"file": 46,"line": 7,"col": 4},{"file": 46,"line": 8,"col": 4},{"file": 46,"line": 9,"col": 4},{"file": 47,"line": 11,"col": 4},{"file": 47,"line": 13,"col": 4},{"file": 47,"line": 19,"col": 4},{"file": 47,"line": 398,"col": 4,"fields": [11422,11423,11424]},{"file": 47,"line": 784,"col": 4},{"file": 47,"line": 814,"col": 4,"docs": " Return a Formatter for a []const u8 where every byte is formatted as a pair of lowercase hexadecimal digits.","fields": [11425]},{"file": 47,"line": 820,"col": 4,"docs": " Return a Formatter for a []const u8 where every byte is formatted as pair of uppercase hexadecimal digits.","fields": [11426]},{"file": 47,"line": 860,"col": 4,"docs": " Return a Formatter for a []const u8 where every non-printable ASCII character is escaped as \\xNN, where NN is the character in lowercase hexadecimal notation.","fields": [11427]},{"file": 47,"line": 867,"col": 4,"docs": " Return a Formatter for a []const u8 where every non-printable ASCII character is escaped as \\xNN, where NN is the character in uppercase hexadecimal notation.","fields": [11428]},{"file": 47,"line": 922,"col": 4,"docs": " Return a Formatter for a u64 value representing a file size. This formatter represents the number as multiple of 1000 and uses the SI measurement units (kB, MB, GB, ...).","fields": [11429]},{"file": 47,"line": 929,"col": 4,"docs": " Return a Formatter for a u64 value representing a file size. This formatter represents the number as multiple of 1024 and uses the IEC measurement units (KiB, MiB, GiB, ...).","fields": [11430]},{"file": 47,"line": 947,"col": 4,"fields": [11431,11432,11433,11434]},{"file": 47,"line": 966,"col": 4,"fields": [11435,11436,11437]},{"file": 47,"line": 1020,"col": 4,"docs": " Print a float in scientific notation to the specified precision. Null uses full precision. It should be the case that every full precision, printed value can be re-parsed back to the same type unambiguously.","fields": [11438,11439,11440]},{"file": 47,"line": 1111,"col": 4,"fields": [11441,11442,11443]},{"file": 47,"line": 1222,"col": 4,"docs": " Print a float of the format x.yyyyy where the number of y is specified by the precision argument. By default floats are printed at full precision (no rounding).","fields": [11444,11445,11446]},{"file": 47,"line": 1413,"col": 4,"fields": [11447,11448,11449,11450,11451]},{"file": 47,"line": 1470,"col": 4,"docs": " Return a Formatter for number of nanoseconds according to its magnitude: [#y][#w][#d][#h][#m]#[.###][n|u|m]s","fields": [11452]},{"file": 47,"line": 1523,"col": 4,"docs": " Return a Formatter for number of nanoseconds according to its signed magnitude: [#y][#w][#d][#h][#m]#[.###][n|u|m]s","fields": [11453]},{"file": 47,"line": 1593,"col": 4},{"file": 47,"line": 1612,"col": 4,"docs": " Creates a Formatter type from a format function. Wrapping data in Formatter(func) causes the data to be formatted using the given function `func`.  `func` must be of the following form:     fn formatExample(         data: T,         comptime fmt: []const u8,         options: std.fmt.FormatOptions,         writer: anytype,     ) !void;","fields": [11454]},{"file": 47,"line": 1638,"col": 4,"docs": " Parses the string `buf` as signed or unsigned representation in the specified radix of an integral value of type `T`. When `radix` is zero the string prefix is examined to detect the true radix:  * A prefix of \"0b\" implies radix=2,  * A prefix of \"0o\" implies radix=8,  * A prefix of \"0x\" implies radix=16,  * Otherwise radix=10 is assumed. Ignores '_' character in `buf`. See also `parseUnsigned`.","fields": [11455,11456,11457]},{"file": 47,"line": 1760,"col": 4,"docs": " Parses the string `buf` as  unsigned representation in the specified radix of an integral value of type `T`. When `radix` is zero the string prefix is examined to detect the true radix:  * A prefix of \"0b\" implies radix=2,  * A prefix of \"0o\" implies radix=8,  * A prefix of \"0x\" implies radix=16,  * Otherwise radix=10 is assumed. Ignores '_' character in `buf`. See also `parseInt`.","fields": [11458,11459,11460]},{"file": 47,"line": 1800,"col": 4},{"file": 47,"line": 1801,"col": 4},{"file": 47,"line": 1802,"col": 4},{"file": 47,"line": 1809,"col": 4,"fields": [11461,11462]},{"file": 47,"line": 1830,"col": 4},{"file": 47,"line": 1840,"col": 4,"fields": [11463,11464,11465]},{"file": 47,"line": 1846,"col": 4,"docs": " Count the characters needed for format. Useful for preallocating memory","fields": [11466,11467]},{"file": 47,"line": 1852,"col": 4},{"file": 47,"line": 1854,"col": 4,"fields": [11468,11469,11470]},{"file": 47,"line": 1865,"col": 4},{"file": 47,"line": 1867,"col": 4,"fields": [11471,11472,11473]},{"file": 47,"line": 1893,"col": 4,"fields": [11474,11475,11476,11477,11478]},{"file": 47,"line": 1897,"col": 4,"fields": [11479,11480]},{"file": 47,"line": 2421,"col": 4,"docs": " Decodes the sequence of bytes represented by the specified string of hexadecimal characters. Returns a slice of the output buffer containing the decoded bytes.","fields": [11481,11482]},{"file": 47,"line": 0,"col": 0},{"file": 47,"line": 1,"col": 0},{"file": 47,"line": 2,"col": 0},{"file": 47,"line": 3,"col": 0},{"file": 47,"line": 4,"col": 0},{"file": 47,"line": 5,"col": 0},{"file": 47,"line": 6,"col": 0},{"file": 47,"line": 7,"col": 0},{"file": 47,"line": 8,"col": 0},{"file": 47,"line": 9,"col": 0},{"file": 47,"line": 276,"col": 0},{"file": 47,"line": 285,"col": 0},{"file": 47,"line": 291,"col": 0},{"file": 47,"line": 369,"col": 0},{"file": 47,"line": 370,"col": 0},{"file": 47,"line": 372,"col": 0},{"file": 47,"line": 425,"col": 0},{"file": 47,"line": 427,"col": 0,"fields": [11483]},{"file": 47,"line": 752,"col": 0,"fields": [11484,11485,11486,11487]},{"file": 47,"line": 786,"col": 0,"fields": [11488]},{"file": 47,"line": 809,"col": 0},{"file": 47,"line": 810,"col": 0},{"file": 47,"line": 824,"col": 0,"fields": [11489]},{"file": 47,"line": 854,"col": 0},{"file": 47,"line": 855,"col": 0},{"file": 47,"line": 871,"col": 0,"fields": [11490]},{"file": 47,"line": 916,"col": 0},{"file": 47,"line": 917,"col": 0},{"file": 47,"line": 1419,"col": 0,"fields": [11491,11492,11493,11494]},{"file": 47,"line": 1512,"col": 0,"fields": [11495,11496,11497,11498]},{"file": 47,"line": 1696,"col": 0,"fields": [11499,11500,11501,11502]},{"file": 48,"line": 13,"col": 4},{"file": 48,"line": 14,"col": 4},{"file": 48,"line": 15,"col": 4},{"file": 48,"line": 19,"col": 4},{"file": 48,"line": 20,"col": 4},{"file": 48,"line": 21,"col": 4},{"file": 48,"line": 23,"col": 4},{"file": 48,"line": 24,"col": 4},{"file": 48,"line": 26,"col": 4},{"file": 48,"line": 35,"col": 4,"docs": " This represents the maximum size of a UTF-8 encoded file path that the operating system will accept. Paths, including those returned from file system operations, may be longer than this length, but such paths cannot be successfully passed back in other file system operations. However, all path components returned by file system operations are assumed to fit into a UTF-8 encoded array of this length. The byte count includes room for a null sentinel byte."},{"file": 48,"line": 50,"col": 4},{"file": 48,"line": 53,"col": 4,"docs": " Base64 encoder, replacing the standard `+/` with `-_` so that it can be used in a file name on any filesystem."},{"file": 48,"line": 56,"col": 4,"docs": " Base64 decoder, replacing the standard `+/` with `-_` so that it can be used in a file name on any filesystem."},{"file": 48,"line": 60,"col": 4,"docs": " Whether or not async file system syscalls need a dedicated thread because the operating system does not support non-blocking I/O on the file system."},{"file": 48,"line": 66,"col": 4,"docs": " TODO remove the allocator requirement from this API","fields": [11503,11504,11505]},{"file": 48,"line": 94,"col": 4},{"file": 48,"line": 99,"col": 4},{"file": 48,"line": 107,"col": 4,"docs": " Same as `Dir.updateFile`, except asserts that both `source_path` and `dest_path` are absolute. See `Dir.updateFile` for a function that operates on both absolute and relative paths.","fields": [11506,11507,11508]},{"file": 48,"line": 121,"col": 4,"docs": " Same as `Dir.copyFile`, except asserts that both `source_path` and `dest_path` are absolute. See `Dir.copyFile` for a function that operates on both absolute and relative paths.","fields": [11509,11510,11511]},{"file": 48,"line": 129,"col": 4,"docs": " TODO update this API to avoid a getrandom syscall for every operation."},{"file": 48,"line": 211,"col": 4,"docs": " Create a new directory, based on an absolute path. Asserts that the path is absolute. See `Dir.makeDir` for a function that operates on both absolute and relative paths.","fields": [11512]},{"file": 48,"line": 217,"col": 4,"docs": " Same as `makeDirAbsolute` except the parameter is a null-terminated UTF8-encoded string.","fields": [11513]},{"file": 48,"line": 223,"col": 4,"docs": " Same as `makeDirAbsolute` except the parameter is a null-terminated WTF-16 encoded string.","fields": [11514]},{"file": 48,"line": 229,"col": 4,"docs": " Same as `Dir.deleteDir` except the path is absolute.","fields": [11515]},{"file": 48,"line": 235,"col": 4,"docs": " Same as `deleteDirAbsolute` except the path parameter is null-terminated.","fields": [11516]},{"file": 48,"line": 241,"col": 4,"docs": " Same as `deleteDirAbsolute` except the path parameter is WTF-16 and target OS is assumed Windows.","fields": [11517]},{"file": 48,"line": 247,"col": 4,"docs": " Same as `Dir.rename` except the paths are absolute.","fields": [11518,11519]},{"file": 48,"line": 254,"col": 4,"docs": " Same as `renameAbsolute` except the path parameters are null-terminated.","fields": [11520,11521]},{"file": 48,"line": 261,"col": 4,"docs": " Same as `renameAbsolute` except the path parameters are WTF-16 and target OS is assumed Windows.","fields": [11522,11523]},{"file": 48,"line": 268,"col": 4,"docs": " Same as `Dir.rename`, except `new_sub_path` is relative to `new_dir`","fields": [11524,11525,11526,11527]},{"file": 48,"line": 273,"col": 4,"docs": " Same as `rename` except the parameters are null-terminated.","fields": [11528,11529,11530,11531]},{"file": 48,"line": 279,"col": 4,"docs": " Same as `rename` except the parameters are UTF16LE, NT prefixed. This function is Windows-only.","fields": [11532,11533,11534,11535]},{"file": 48,"line": 283,"col": 4},{"file": 48,"line": 2257,"col": 4,"docs": " Opens a directory at the given path. The directory is a system resource that remains open until `close` is called on the result. See `openDirAbsoluteZ` for a function that accepts a null-terminated path. Asserts that the path parameter has no null bytes.","fields": [11536,11537]},{"file": 48,"line": 2266,"col": 4,"docs": " Same as `openDirAbsolute` but the path parameter is null-terminated.","fields": [11538,11539]},{"file": 48,"line": 2274,"col": 4,"docs": " Same as `openDirAbsolute` but the path parameter is null-terminated.","fields": [11540,11541]},{"file": 48,"line": 2288,"col": 4,"docs": " Opens a file for reading or writing, without attempting to create a new file, based on an absolute path. Call `File.close` to release the resource. Asserts that the path is absolute. See `Dir.openFile` for a function that operates on both absolute and relative paths. Asserts that the path parameter has no null bytes. See `openFileAbsoluteZ` for a function that accepts a null-terminated path.","fields": [11542,11543]},{"file": 48,"line": 2300,"col": 4,"docs": " Same as `openFileAbsolute` but the path parameter is WTF-16 encoded.","fields": [11544,11545]},{"file": 48,"line": 2311,"col": 4,"docs": " Test accessing `path`. `path` is UTF8-encoded. Be careful of Time-Of-Check-Time-Of-Use race conditions when using this function. For example, instead of testing if a file exists and then opening it, just open it and handle the error for file not found. See `accessAbsoluteZ` for a function that accepts a null-terminated path.","fields": [11546,11547]},{"file": 48,"line": 2319,"col": 4,"docs": " Same as `accessAbsolute` but the path parameter is null-terminated.","fields": [11548,11549]},{"file": 48,"line": 2327,"col": 4,"docs": " Same as `accessAbsolute` but the path parameter is WTF-16 encoded.","fields": [11550,11551]},{"file": 48,"line": 2341,"col": 4,"docs": " Creates, opens, or overwrites a file with write access, based on an absolute path. Call `File.close` to release the resource. Asserts that the path is absolute. See `Dir.createFile` for a function that operates on both absolute and relative paths. Asserts that the path parameter has no null bytes. See `createFileAbsoluteC` for a function that accepts a null-terminated path.","fields": [11552,11553]},{"file": 48,"line": 2347,"col": 4,"docs": " Same as `createFileAbsolute` but the path parameter is null-terminated.","fields": [11554,11555]},{"file": 48,"line": 2353,"col": 4,"docs": " Same as `createFileAbsolute` but the path parameter is WTF-16 encoded.","fields": [11556,11557]},{"file": 48,"line": 2362,"col": 4,"docs": " Delete a file name and possibly the file it refers to, based on an absolute path. Asserts that the path is absolute. See `Dir.deleteFile` for a function that operates on both absolute and relative paths. Asserts that the path parameter has no null bytes.","fields": [11558]},{"file": 48,"line": 2368,"col": 4,"docs": " Same as `deleteFileAbsolute` except the parameter is null-terminated.","fields": [11559]},{"file": 48,"line": 2374,"col": 4,"docs": " Same as `deleteFileAbsolute` except the parameter is WTF-16 encoded.","fields": [11560]},{"file": 48,"line": 2384,"col": 4,"docs": " Removes a symlink, file, or directory. This is equivalent to `Dir.deleteTree` with the base directory. Asserts that the path is absolute. See `Dir.deleteTree` for a function that operates on both absolute and relative paths. Asserts that the path parameter has no null bytes.","fields": [11561]},{"file": 48,"line": 2399,"col": 4,"docs": " Same as `Dir.readLink`, except it asserts the path is absolute.","fields": [11562,11563]},{"file": 48,"line": 2406,"col": 4,"docs": " Windows-only. Same as `readlinkW`, except the path parameter is null-terminated, WTF16 encoded.","fields": [11564,11565]},{"file": 48,"line": 2412,"col": 4,"docs": " Same as `readLink`, except the path parameter is null-terminated.","fields": [11566,11567]},{"file": 48,"line": 2421,"col": 4,"docs": " Use with `Dir.symLink` and `symLinkAbsolute` to specify whether the symlink will point to a file or a directory. This value is ignored on all hosts except Windows where creating symlinks to different resource types, requires different flags. By default, `symLinkAbsolute` is assumed to point to a file."},{"file": 48,"line": 2430,"col": 4,"docs": " Creates a symbolic link named `sym_link_path` which contains the string `target_path`. A symbolic link (also known as a soft link) may point to an existing file or to a nonexistent one; the latter case is known as a dangling link. If `sym_link_path` exists, it will not be overwritten. See also `symLinkAbsoluteZ` and `symLinkAbsoluteW`.","fields": [11568,11569,11570]},{"file": 48,"line": 2448,"col": 4,"docs": " Windows-only. Same as `symLinkAbsolute` except the parameters are null-terminated, WTF16 encoded. Note that this function will by default try creating a symbolic link to a file. If you would like to create a symbolic link to a directory, specify this with `SymLinkFlags{ .is_directory = true }`. See also `symLinkAbsolute`, `symLinkAbsoluteZ`.","fields": [11571,11572,11573]},{"file": 48,"line": 2456,"col": 4,"docs": " Same as `symLinkAbsolute` except the parameters are null-terminated pointers. See also `symLinkAbsolute`.","fields": [11574,11575,11576]},{"file": 48,"line": 2467,"col": 4},{"file": 48,"line": 2499,"col": 4},{"file": 48,"line": 2503,"col": 4,"docs": " `selfExePath` except allocates the result on the heap. Caller owns returned memory.","fields": [11577]},{"file": 48,"line": 2525,"col": 4,"docs": " Get the path to the current executable. If you only need the directory, use selfExeDirPath. If you only want an open file handle, use openSelfExe. This function may return an error if the current executable was deleted after spawning. Returned value is a slice of out_buffer. On Linux, depends on procfs being mounted. If the currently executing binary has been deleted, the file path looks something like `/a/b/c/exe (deleted)`. TODO make the return type of this a null terminated pointer","fields": [11578]},{"file": 48,"line": 2605,"col": 4,"docs": " The result is UTF16LE-encoded.","fields": []},{"file": 48,"line": 2612,"col": 4,"docs": " `selfExeDirPath` except allocates the result on the heap. Caller owns returned memory.","fields": [11579]},{"file": 48,"line": 2626,"col": 4,"docs": " Get the directory path that contains the current executable. Returned value is a slice of out_buffer.","fields": [11580]},{"file": 48,"line": 2635,"col": 4,"docs": " `realpath`, except caller must free the returned memory. See also `Dir.realpath`.","fields": [11581,11582]},{"file": 48,"line": 0,"col": 0},{"file": 48,"line": 1,"col": 0},{"file": 48,"line": 2,"col": 0},{"file": 48,"line": 3,"col": 0},{"file": 48,"line": 4,"col": 0},{"file": 48,"line": 5,"col": 0},{"file": 48,"line": 6,"col": 0},{"file": 48,"line": 7,"col": 0},{"file": 48,"line": 8,"col": 0},{"file": 48,"line": 9,"col": 0},{"file": 48,"line": 11,"col": 0},{"file": 48,"line": 206,"col": 0},{"file": 48,"line": 2646,"col": 0},{"file": 48,"line": 2651,"col": 0,"fields": [11583,11584]},{"file": 49,"line": 1,"col": 4},{"file": 49,"line": 4,"col": 4},{"file": 49,"line": 5,"col": 4},{"file": 49,"line": 6,"col": 4},{"file": 49,"line": 9,"col": 4},{"file": 49,"line": 10,"col": 4},{"file": 49,"line": 13,"col": 4},{"file": 49,"line": 14,"col": 4},{"file": 49,"line": 15,"col": 4},{"file": 49,"line": 18,"col": 4},{"file": 49,"line": 19,"col": 4},{"file": 49,"line": 21,"col": 4},{"file": 49,"line": 22,"col": 4},{"file": 49,"line": 24,"col": 4},{"file": 49,"line": 25,"col": 4},{"file": 49,"line": 27,"col": 4},{"file": 49,"line": 28,"col": 4},{"file": 49,"line": 29,"col": 4},{"file": 49,"line": 32,"col": 4},{"file": 49,"line": 0,"col": 0},{"file": 49,"line": 3,"col": 0},{"file": 49,"line": 12,"col": 0},{"file": 49,"line": 17,"col": 0},{"file": 49,"line": 31,"col": 0},{"file": 50,"line": 14,"col": 4},{"file": 50,"line": 24,"col": 4,"docs": " The application's chosen I/O mode. This defaults to `Mode.blocking` but can be overridden by `root.event_loop`."},{"file": 50,"line": 30,"col": 4},{"file": 50,"line": 34,"col": 4,"docs": " This is an enum value to use for I/O mode at runtime, since it takes up zero bytes at runtime, and makes expressions comptime-known when `is_async` is `false`."},{"file": 50,"line": 35,"col": 4},{"file": 50,"line": 95,"col": 4,"docs": " TODO: async stdin on windows without a dedicated thread. https://github.com/ziglang/zig/pull/4816#issuecomment-604521023","fields": []},{"file": 50,"line": 103,"col": 4},{"file": 50,"line": 104,"col": 4},{"file": 50,"line": 105,"col": 4},{"file": 50,"line": 107,"col": 4},{"file": 50,"line": 108,"col": 4},{"file": 50,"line": 110,"col": 4},{"file": 50,"line": 111,"col": 4},{"file": 50,"line": 113,"col": 4},{"file": 50,"line": 114,"col": 4},{"file": 50,"line": 116,"col": 4},{"file": 50,"line": 117,"col": 4},{"file": 50,"line": 119,"col": 4},{"file": 50,"line": 120,"col": 4},{"file": 50,"line": 122,"col": 4},{"file": 50,"line": 123,"col": 4},{"file": 50,"line": 125,"col": 4},{"file": 50,"line": 126,"col": 4},{"file": 50,"line": 127,"col": 4},{"file": 50,"line": 128,"col": 4},{"file": 50,"line": 130,"col": 4},{"file": 50,"line": 131,"col": 4},{"file": 50,"line": 133,"col": 4},{"file": 50,"line": 134,"col": 4},{"file": 50,"line": 136,"col": 4},{"file": 50,"line": 137,"col": 4},{"file": 50,"line": 139,"col": 4},{"file": 50,"line": 140,"col": 4},{"file": 50,"line": 142,"col": 4},{"file": 50,"line": 143,"col": 4},{"file": 50,"line": 145,"col": 4},{"file": 50,"line": 146,"col": 4},{"file": 50,"line": 148,"col": 4},{"file": 50,"line": 150,"col": 4},{"file": 50,"line": 153,"col": 4,"docs": " A Writer that doesn't write to anything."},{"file": 50,"line": 0,"col": 0},{"file": 50,"line": 1,"col": 0},{"file": 50,"line": 2,"col": 0},{"file": 50,"line": 3,"col": 0},{"file": 50,"line": 5,"col": 0},{"file": 50,"line": 6,"col": 0},{"file": 50,"line": 7,"col": 0},{"file": 50,"line": 8,"col": 0},{"file": 50,"line": 9,"col": 0},{"file": 50,"line": 10,"col": 0},{"file": 50,"line": 11,"col": 0},{"file": 50,"line": 12,"col": 0},{"file": 50,"line": 81,"col": 0,"fields": []},{"file": 50,"line": 155,"col": 0},{"file": 50,"line": 156,"col": 0,"fields": [11585,11586]},{"file": 51,"line": 6,"col": 4,"docs": " Euler's number (e)"},{"file": 51,"line": 9,"col": 4,"docs": " Archimedes' constant (π)"},{"file": 51,"line": 12,"col": 4,"docs": " Phi or Golden ratio constant (Φ) = (1 + sqrt(5))/2"},{"file": 51,"line": 15,"col": 4,"docs": " Circle constant (τ)"},{"file": 51,"line": 18,"col": 4,"docs": " log2(e)"},{"file": 51,"line": 21,"col": 4,"docs": " log10(e)"},{"file": 51,"line": 24,"col": 4,"docs": " ln(2)"},{"file": 51,"line": 27,"col": 4,"docs": " ln(10)"},{"file": 51,"line": 30,"col": 4,"docs": " 2/sqrt(π)"},{"file": 51,"line": 33,"col": 4,"docs": " sqrt(2)"},{"file": 51,"line": 36,"col": 4,"docs": " 1/sqrt(2)"},{"file": 51,"line": 39,"col": 4},{"file": 51,"line": 40,"col": 4},{"file": 51,"line": 41,"col": 4},{"file": 51,"line": 42,"col": 4},{"file": 51,"line": 43,"col": 4},{"file": 51,"line": 46,"col": 4},{"file": 51,"line": 47,"col": 4},{"file": 51,"line": 48,"col": 4},{"file": 51,"line": 49,"col": 4},{"file": 51,"line": 50,"col": 4},{"file": 51,"line": 52,"col": 4},{"file": 51,"line": 53,"col": 4},{"file": 51,"line": 54,"col": 4},{"file": 51,"line": 55,"col": 4},{"file": 51,"line": 56,"col": 4},{"file": 51,"line": 58,"col": 4},{"file": 51,"line": 59,"col": 4},{"file": 51,"line": 60,"col": 4},{"file": 51,"line": 61,"col": 4},{"file": 51,"line": 62,"col": 4},{"file": 51,"line": 64,"col": 4},{"file": 51,"line": 66,"col": 4},{"file": 51,"line": 67,"col": 4},{"file": 51,"line": 69,"col": 4},{"file": 51,"line": 70,"col": 4},{"file": 51,"line": 72,"col": 4},{"file": 51,"line": 73,"col": 4},{"file": 51,"line": 75,"col": 4},{"file": 51,"line": 76,"col": 4},{"file": 51,"line": 78,"col": 4},{"file": 51,"line": 79,"col": 4},{"file": 51,"line": 81,"col": 4},{"file": 51,"line": 82,"col": 4},{"file": 51,"line": 84,"col": 4},{"file": 51,"line": 85,"col": 4},{"file": 51,"line": 87,"col": 4},{"file": 51,"line": 88,"col": 4},{"file": 51,"line": 90,"col": 4},{"file": 51,"line": 91,"col": 4},{"file": 51,"line": 93,"col": 4},{"file": 51,"line": 94,"col": 4},{"file": 51,"line": 96,"col": 4},{"file": 51,"line": 97,"col": 4},{"file": 51,"line": 99,"col": 4},{"file": 51,"line": 100,"col": 4},{"file": 51,"line": 102,"col": 4},{"file": 51,"line": 103,"col": 4},{"file": 51,"line": 104,"col": 4},{"file": 51,"line": 118,"col": 4,"docs": " Performs an approximate comparison of two floating point values `x` and `y`. Returns true if the absolute difference between them is less or equal than the specified tolerance. The `tolerance` parameter is the absolute tolerance used when determining if the two numbers are close enough; a good value for this parameter is a small multiple of `epsilon(T)`. Note that this function is recommended for comparing small numbers around zero; using `approxEqRel` is suggested otherwise. NaN values are never considered equal to any value.","fields": [11587,11588,11589,11590]},{"file": 51,"line": 146,"col": 4,"docs": " Performs an approximate comparison of two floating point values `x` and `y`. Returns true if the absolute difference between them is less or equal than `max(|x|, |y|) * tolerance`, where `tolerance` is a positive number greater than zero. The `tolerance` parameter is the relative tolerance used when determining if the two numbers are close enough; a good value for this parameter is usually `sqrt(epsilon(T))`, meaning that the two numbers are considered equal if at least half of the digits are equal. Note that for comparisons of small numbers around zero this function won't give meaningful results, use `approxEqAbs` instead. NaN values are never considered equal to any value.","fields": [11591,11592,11593,11594]},{"file": 51,"line": 160,"col": 4,"fields": [11595,11596,11597,11598]},{"file": 51,"line": 199,"col": 4,"fields": [11599]},{"file": 51,"line": 208,"col": 4,"fields": []},{"file": 51,"line": 212,"col": 4,"fields": []},{"file": 51,"line": 216,"col": 4,"fields": []},{"file": 51,"line": 220,"col": 4,"fields": []},{"file": 51,"line": 224,"col": 4,"fields": []},{"file": 51,"line": 228,"col": 4},{"file": 51,"line": 229,"col": 4},{"file": 51,"line": 230,"col": 4},{"file": 51,"line": 231,"col": 4},{"file": 51,"line": 232,"col": 4},{"file": 51,"line": 233,"col": 4},{"file": 51,"line": 234,"col": 4},{"file": 51,"line": 235,"col": 4},{"file": 51,"line": 236,"col": 4},{"file": 51,"line": 237,"col": 4},{"file": 51,"line": 238,"col": 4},{"file": 51,"line": 239,"col": 4},{"file": 51,"line": 240,"col": 4},{"file": 51,"line": 241,"col": 4},{"file": 51,"line": 242,"col": 4},{"file": 51,"line": 243,"col": 4},{"file": 51,"line": 244,"col": 4},{"file": 51,"line": 245,"col": 4},{"file": 51,"line": 246,"col": 4},{"file": 51,"line": 247,"col": 4},{"file": 51,"line": 248,"col": 4},{"file": 51,"line": 249,"col": 4},{"file": 51,"line": 250,"col": 4},{"file": 51,"line": 251,"col": 4},{"file": 51,"line": 252,"col": 4},{"file": 51,"line": 253,"col": 4},{"file": 51,"line": 254,"col": 4},{"file": 51,"line": 255,"col": 4},{"file": 51,"line": 256,"col": 4},{"file": 51,"line": 257,"col": 4},{"file": 51,"line": 258,"col": 4},{"file": 51,"line": 259,"col": 4},{"file": 51,"line": 260,"col": 4},{"file": 51,"line": 261,"col": 4},{"file": 51,"line": 262,"col": 4},{"file": 51,"line": 263,"col": 4},{"file": 51,"line": 264,"col": 4},{"file": 51,"line": 265,"col": 4},{"file": 51,"line": 266,"col": 4},{"file": 51,"line": 267,"col": 4},{"file": 51,"line": 268,"col": 4},{"file": 51,"line": 269,"col": 4},{"file": 51,"line": 270,"col": 4},{"file": 51,"line": 271,"col": 4},{"file": 51,"line": 272,"col": 4},{"file": 51,"line": 273,"col": 4},{"file": 51,"line": 274,"col": 4},{"file": 51,"line": 275,"col": 4},{"file": 51,"line": 276,"col": 4},{"file": 51,"line": 278,"col": 4},{"file": 51,"line": 279,"col": 4},{"file": 51,"line": 281,"col": 4},{"file": 51,"line": 289,"col": 4,"docs": " Returns the number of bits in the mantissa of floating point type T.","fields": [11600]},{"file": 51,"line": 304,"col": 4,"docs": " Returns the number of bits in the exponent of floating point type T.","fields": [11601]},{"file": 51,"line": 392,"col": 4,"docs": " Finds the minimum of three numbers.","fields": [11602,11603,11604]},{"file": 51,"line": 431,"col": 4,"docs": " Limit val to the inclusive range [lower, upper]. ","fields": [11605,11606,11607]},{"file": 51,"line": 471,"col": 4,"fields": [11608]},{"file": 51,"line": 477,"col": 4,"docs": " Shifts a left by shift_amt. Returns an error on overflow. shift_amt is unsigned.","fields": [11609,11610,11611]},{"file": 51,"line": 484,"col": 4,"docs": " Shifts left. Overflowed bits are truncated. A negative shift amount results in a right shift.","fields": [11612,11613,11614]},{"file": 51,"line": 524,"col": 4,"docs": " Shifts right. Overflowed bits are truncated. A negative shift amount results in a left shift.","fields": [11615,11616,11617]},{"file": 51,"line": 564,"col": 4,"docs": " Rotates right. Only unsigned values can be rotated.  Negative shift values result in shift modulo the bit count.","fields": [11618,11619,11620]},{"file": 51,"line": 592,"col": 4,"docs": " Rotates left. Only unsigned values can be rotated.  Negative shift values result in shift modulo the bit count.","fields": [11621,11622,11623]},{"file": 51,"line": 632,"col": 4,"docs": " Returns an unsigned int type that can hold the number of bits in T.","fields": [11624]},{"file": 51,"line": 644,"col": 4,"docs": " Returns the smallest integer type that can hold both from and to.","fields": [11625,11626]},{"file": 51,"line": 721,"col": 4,"docs": " Returns the absolute value of x, where x is a value of an integer type.","fields": [11627]},{"file": 51,"line": 743,"col": 4},{"file": 51,"line": 756,"col": 4,"docs": " Divide numerator by denominator, rounding toward zero. Returns an error on overflow or when denominator is zero.","fields": [11628,11629,11630]},{"file": 51,"line": 780,"col": 4,"docs": " Divide numerator by denominator, rounding toward negative infinity. Returns an error on overflow or when denominator is zero.","fields": [11631,11632,11633]},{"file": 51,"line": 804,"col": 4,"docs": " Divide numerator by denominator, rounding toward positive infinity. Returns an error on overflow or when denominator is zero.","fields": [11634,11635,11636]},{"file": 51,"line": 859,"col": 4,"docs": " Divide numerator by denominator. Return an error if quotient is not an integer, denominator is zero, or on overflow.","fields": [11637,11638,11639]},{"file": 51,"line": 887,"col": 4,"docs": " Returns numerator modulo denominator, or an error if denominator is zero or negative. Negative numerators never result in negative return values.","fields": [11640,11641,11642]},{"file": 51,"line": 913,"col": 4,"docs": " Returns the remainder when numerator is divided by denominator, or an error if denominator is zero or negative. Negative numerators can give negative results.","fields": [11643,11644,11645]},{"file": 51,"line": 973,"col": 4,"docs": " Returns the negation of the integer parameter. Result is a signed integer.","fields": [11646]},{"file": 51,"line": 1019,"col": 4},{"file": 51,"line": 1022,"col": 4,"docs": " Align cast a pointer but return an error if it's the wrong alignment","fields": [11647,11648]},{"file": 51,"line": 1037,"col": 4,"docs": " Returns the nearest power of two less than or equal to value, or zero if value is less than or equal to zero.","fields": [11649,11650]},{"file": 51,"line": 1093,"col": 4,"docs": " Returns the next power of two (if the value is not already a power of two). Only unsigned integers can be used. Zero is not an allowed input. Asserts that the value fits.","fields": [11651,11652]},{"file": 51,"line": 1133,"col": 4,"docs": " Return the log base 2 of integer value x, rounding down to the nearest integer.","fields": [11653,11654]},{"file": 51,"line": 1142,"col": 4,"docs": " Return the log base 2 of integer value x, rounding up to the nearest integer.","fields": [11655,11656]},{"file": 51,"line": 1167,"col": 4,"docs": " Cast a value to a different type. If the value doesn't fit in, or can't be perfectly represented by, the new type, it will be converted to the closest possible representation.","fields": [11657,11658]},{"file": 51,"line": 1296,"col": 4,"docs": " See also `CompareOperator`."},{"file": 51,"line": 1345,"col": 4,"docs": " Given two numbers, this function returns the order they are with respect to each other.","fields": [11659,11660]},{"file": 51,"line": 1358,"col": 4,"docs": " See also `Order`."},{"file": 51,"line": 1376,"col": 4,"docs": " This function does the same thing as comparison operators, however the operator is a runtime-known enum value. Works on any operands that support comparison operators.","fields": [11661,11662,11663]},{"file": 51,"line": 1438,"col": 4,"docs": " Returns a mask of all ones if value is true, and a mask of all zeroes if value is false. Compiles to one instruction for register sized integers.","fields": [11664,11665]},{"file": 51,"line": 1483,"col": 4,"docs": " Return the mod of `num` with the smallest integer type","fields": [11666,11667]},{"file": 51,"line": 0,"col": 0},{"file": 51,"line": 1,"col": 0},{"file": 51,"line": 2,"col": 0},{"file": 51,"line": 3,"col": 0},{"file": 51,"line": 712,"col": 0,"fields": []},{"file": 51,"line": 738,"col": 0,"fields": []},{"file": 51,"line": 749,"col": 0,"fields": []},{"file": 51,"line": 767,"col": 0,"fields": []},{"file": 51,"line": 791,"col": 0,"fields": []},{"file": 51,"line": 828,"col": 0,"fields": []},{"file": 51,"line": 872,"col": 0,"fields": []},{"file": 51,"line": 898,"col": 0,"fields": []},{"file": 51,"line": 924,"col": 0,"fields": []},{"file": 51,"line": 1053,"col": 0,"fields": []},{"file": 51,"line": 1102,"col": 0,"fields": []},{"file": 51,"line": 1119,"col": 0,"fields": []},{"file": 52,"line": 7,"col": 4},{"file": 52,"line": 8,"col": 4},{"file": 52,"line": 12,"col": 4,"fields": [11668]},{"file": 52,"line": 55,"col": 4,"fields": [11669,11670]},{"file": 52,"line": 99,"col": 4,"fields": [11671]},{"file": 52,"line": 118,"col": 4,"docs": " Returns the alignment of type T. Note that if T is a pointer or function type the result is different than the one returned by @alignOf(T). If T is a pointer type the alignment of the type it points to is returned. If T is a function type the alignment a target-dependent value is returned.","fields": [11672]},{"file": 52,"line": 404,"col": 4,"fields": [11673,11674]},{"file": 52,"line": 485,"col": 4,"fields": [11675,11676]},{"file": 52,"line": 520,"col": 4,"fields": [11677]},{"file": 52,"line": 559,"col": 4,"fields": [11678]},{"file": 52,"line": 596,"col": 4},{"file": 52,"line": 621,"col": 4,"docs": "Returns the active tag of a tagged union","fields": [11679]},{"file": 52,"line": 648,"col": 4,"docs": "Given a tagged union type, and an enum, return the type of the union field corresponding to the enum tag.","fields": [11680,11681]},{"file": 52,"line": 813,"col": 4},{"file": 52,"line": 815,"col": 4,"fields": [11682,11683]},{"file": 52,"line": 835,"col": 4},{"file": 52,"line": 838,"col": 4,"docs": " Returns a slice of pointers to public declarations of a namespace.","fields": [11684,11685]},{"file": 52,"line": 856,"col": 4},{"file": 52,"line": 867,"col": 4,"fields": [11686]},{"file": 52,"line": 880,"col": 4,"fields": [11687,11688]},{"file": 52,"line": 896,"col": 4,"docs": " For a given function type, returns a tuple type which fields will correspond to the argument types. Examples: - `ArgsTuple(fn() void)` ⇒ `tuple { }` - `ArgsTuple(fn(a: u32) u32)` ⇒ `tuple { u32 }` - `ArgsTuple(fn(a: u32, b: f16) noreturn)` ⇒ `tuple { u32, f16 }`","fields": [11689]},{"file": 52,"line": 1002,"col": 4,"docs": " TODO: https://github.com/ziglang/zig/issues/425","fields": [11690,11691]},{"file": 52,"line": 1009,"col": 4,"docs": " Returns whether `error_union` contains an error.","fields": [11692]},{"file": 52,"line": 0,"col": 0},{"file": 52,"line": 1,"col": 0},{"file": 52,"line": 2,"col": 0},{"file": 52,"line": 3,"col": 0},{"file": 52,"line": 4,"col": 0},{"file": 52,"line": 5,"col": 0},{"file": 52,"line": 10,"col": 0},{"file": 52,"line": 213,"col": 0,"fields": []},{"file": 52,"line": 580,"col": 0,"fields": [11693,11694]},{"file": 52,"line": 644,"col": 0},{"file": 52,"line": 962,"col": 0},{"file": 53,"line": 27,"col": 4},{"file": 53,"line": 28,"col": 4},{"file": 53,"line": 29,"col": 4},{"file": 53,"line": 30,"col": 4},{"file": 53,"line": 31,"col": 4},{"file": 53,"line": 32,"col": 4},{"file": 53,"line": 33,"col": 4},{"file": 53,"line": 34,"col": 4},{"file": 53,"line": 35,"col": 4},{"file": 53,"line": 36,"col": 4},{"file": 53,"line": 37,"col": 4},{"file": 53,"line": 38,"col": 4},{"file": 53,"line": 56,"col": 4,"docs": " Applications can override the `system` API layer in their root source file. Otherwise, when linking libc, this is the C API. When not linking libc, it is the OS-specific system interface."},{"file": 53,"line": 67,"col": 4},{"file": 53,"line": 68,"col": 4},{"file": 53,"line": 69,"col": 4},{"file": 53,"line": 70,"col": 4},{"file": 53,"line": 71,"col": 4},{"file": 53,"line": 72,"col": 4},{"file": 53,"line": 73,"col": 4},{"file": 53,"line": 74,"col": 4},{"file": 53,"line": 75,"col": 4},{"file": 53,"line": 76,"col": 4},{"file": 53,"line": 77,"col": 4},{"file": 53,"line": 78,"col": 4},{"file": 53,"line": 79,"col": 4},{"file": 53,"line": 80,"col": 4},{"file": 53,"line": 81,"col": 4},{"file": 53,"line": 82,"col": 4},{"file": 53,"line": 83,"col": 4},{"file": 53,"line": 84,"col": 4},{"file": 53,"line": 85,"col": 4},{"file": 53,"line": 86,"col": 4},{"file": 53,"line": 87,"col": 4},{"file": 53,"line": 88,"col": 4},{"file": 53,"line": 89,"col": 4},{"file": 53,"line": 90,"col": 4},{"file": 53,"line": 91,"col": 4},{"file": 53,"line": 92,"col": 4},{"file": 53,"line": 93,"col": 4},{"file": 53,"line": 94,"col": 4},{"file": 53,"line": 95,"col": 4},{"file": 53,"line": 96,"col": 4},{"file": 53,"line": 97,"col": 4},{"file": 53,"line": 98,"col": 4},{"file": 53,"line": 99,"col": 4},{"file": 53,"line": 100,"col": 4},{"file": 53,"line": 101,"col": 4},{"file": 53,"line": 102,"col": 4},{"file": 53,"line": 103,"col": 4},{"file": 53,"line": 104,"col": 4},{"file": 53,"line": 105,"col": 4},{"file": 53,"line": 106,"col": 4},{"file": 53,"line": 107,"col": 4},{"file": 53,"line": 108,"col": 4},{"file": 53,"line": 109,"col": 4},{"file": 53,"line": 110,"col": 4},{"file": 53,"line": 111,"col": 4},{"file": 53,"line": 112,"col": 4},{"file": 53,"line": 113,"col": 4},{"file": 53,"line": 114,"col": 4},{"file": 53,"line": 115,"col": 4},{"file": 53,"line": 116,"col": 4},{"file": 53,"line": 117,"col": 4},{"file": 53,"line": 118,"col": 4},{"file": 53,"line": 119,"col": 4},{"file": 53,"line": 120,"col": 4},{"file": 53,"line": 121,"col": 4},{"file": 53,"line": 122,"col": 4},{"file": 53,"line": 123,"col": 4},{"file": 53,"line": 124,"col": 4},{"file": 53,"line": 125,"col": 4},{"file": 53,"line": 126,"col": 4},{"file": 53,"line": 127,"col": 4},{"file": 53,"line": 128,"col": 4},{"file": 53,"line": 129,"col": 4},{"file": 53,"line": 130,"col": 4},{"file": 53,"line": 131,"col": 4},{"file": 53,"line": 132,"col": 4},{"file": 53,"line": 133,"col": 4},{"file": 53,"line": 134,"col": 4},{"file": 53,"line": 135,"col": 4},{"file": 53,"line": 136,"col": 4},{"file": 53,"line": 137,"col": 4},{"file": 53,"line": 138,"col": 4},{"file": 53,"line": 139,"col": 4},{"file": 53,"line": 140,"col": 4},{"file": 53,"line": 141,"col": 4},{"file": 53,"line": 142,"col": 4},{"file": 53,"line": 143,"col": 4},{"file": 53,"line": 144,"col": 4},{"file": 53,"line": 145,"col": 4},{"file": 53,"line": 146,"col": 4},{"file": 53,"line": 147,"col": 4},{"file": 53,"line": 148,"col": 4},{"file": 53,"line": 149,"col": 4},{"file": 53,"line": 150,"col": 4},{"file": 53,"line": 151,"col": 4},{"file": 53,"line": 152,"col": 4},{"file": 53,"line": 153,"col": 4},{"file": 53,"line": 154,"col": 4},{"file": 53,"line": 155,"col": 4},{"file": 53,"line": 156,"col": 4},{"file": 53,"line": 157,"col": 4},{"file": 53,"line": 158,"col": 4},{"file": 53,"line": 159,"col": 4},{"file": 53,"line": 160,"col": 4},{"file": 53,"line": 161,"col": 4},{"file": 53,"line": 162,"col": 4},{"file": 53,"line": 163,"col": 4},{"file": 53,"line": 164,"col": 4},{"file": 53,"line": 165,"col": 4},{"file": 53,"line": 166,"col": 4},{"file": 53,"line": 167,"col": 4},{"file": 53,"line": 168,"col": 4},{"file": 53,"line": 169,"col": 4},{"file": 53,"line": 170,"col": 4},{"file": 53,"line": 171,"col": 4},{"file": 53,"line": 172,"col": 4},{"file": 53,"line": 173,"col": 4},{"file": 53,"line": 174,"col": 4},{"file": 53,"line": 175,"col": 4},{"file": 53,"line": 177,"col": 4},{"file": 53,"line": 178,"col": 4},{"file": 53,"line": 179,"col": 4},{"file": 53,"line": 180,"col": 4},{"file": 53,"line": 182,"col": 4},{"file": 53,"line": 187,"col": 4},{"file": 53,"line": 192,"col": 4},{"file": 53,"line": 211,"col": 4},{"file": 53,"line": 216,"col": 4,"docs": " See also `getenv`. Populated by startup code before main(). TODO this is a footgun because the value will be undefined when using `zig build-lib`. https://github.com/ziglang/zig/issues/4524"},{"file": 53,"line": 221,"col": 4,"docs": " Populated by startup code before main(). Not available on Windows. See `std.process.args` for obtaining the process arguments."},{"file": 53,"line": 229,"col": 4,"docs": " To obtain errno, call this function with the return value of the system function call. For some systems this will obtain the value directly from the return code; for others it will use a thread-local errno variable. Therefore, this function only returns a well-defined value when it is called directly after the system function call which one wants to learn the errno value of."},{"file": 53,"line": 258,"col": 4},{"file": 53,"line": 271,"col": 4,"docs": " Changes the mode of the file referred to by the file descriptor. The process must have the correct privileges in order to do this successfully, or must have the effective user ID matching the owner of the file.","fields": [11695,11696]},{"file": 53,"line": 298,"col": 4},{"file": 53,"line": 312,"col": 4,"docs": " Changes the owner and group of the file referred to by the file descriptor. The process must have the correct privileges in order to do this successfully. The group may be changed by the owner of the directory to any group of which the owner is a member. If the owner or group is specified as `null`, the ID is not changed.","fields": [11697,11698,11699]},{"file": 53,"line": 339,"col": 4},{"file": 53,"line": 346,"col": 4,"docs": " Obtain a series of random bytes. These bytes can be used to seed user-space random number generators or for cryptographic purposes. When linking against libc, this calls the appropriate OS-specific library call. Otherwise it uses the zig standard library implementation.","fields": [11700]},{"file": 53,"line": 445,"col": 4},{"file": 53,"line": 475,"col": 4},{"file": 53,"line": 477,"col": 4,"fields": [11701,11702]},{"file": 53,"line": 513,"col": 4},{"file": 53,"line": 609,"col": 4,"docs": " Number of bytes read is returned. Upon reading end-of-file, zero is returned. For POSIX systems, if `fd` is opened in non blocking mode, the function will return error.WouldBlock when EAGAIN is received. On Windows, if the application has a global event loop enabled, I/O Completion Ports are used to perform the I/O. `error.WouldBlock` is not possible on Windows. This operation is non-atomic on the following systems: * Windows On these systems, the read races with concurrent writes to the same file descriptor.","fields": [11703,11704]},{"file": 53,"line": 653,"col": 4},{"file": 53,"line": 669,"col": 4,"docs": " Number of bytes read is returned. Upon reading end-of-file, zero is returned. Retries when interrupted by a signal. For POSIX systems, if `fd` is opened in non blocking mode, the function will return error.WouldBlock when EAGAIN is received. On Windows, if the application has a global event loop enabled, I/O Completion Ports are used to perform the I/O. `error.WouldBlock` is not possible on Windows. Linux has a limit on how many bytes may be transferred in one `pread` call, which is `0x7ffff000` on both 64-bit and 32-bit systems. This is due to using a signed C int as the return value, as well as stuffing the errno codes into the last `4096` values. This is noted on the `read` man page. The limit on Darwin is `0x7fffffff`, trying to read more than that returns EINVAL. The corresponding POSIX limit is `math.maxInt(isize)`.","fields": [11705,11706,11707]},{"file": 53,"line": 736,"col": 4},{"file": 53,"line": 746,"col": 4,"fields": [11708,11709]},{"file": 53,"line": 817,"col": 4,"docs": " Number of bytes read is returned. Upon reading end-of-file, zero is returned. Retries when interrupted by a signal. For POSIX systems, if `fd` is opened in non blocking mode, the function will return error.WouldBlock when EAGAIN is received. On Windows, if the application has a global event loop enabled, I/O Completion Ports are used to perform the I/O. `error.WouldBlock` is not possible on Windows. This operation is non-atomic on the following systems: * Darwin * Windows On these systems, the read races with concurrent writes to the same file descriptor.","fields": [11710,11711,11712]},{"file": 53,"line": 879,"col": 4},{"file": 53,"line": 1000,"col": 4,"docs": " Write multiple buffers to a file descriptor. Retries when interrupted by a signal. Returns the number of bytes written. If nonzero bytes were supplied, this will be nonzero. Note that a successful write() may transfer fewer bytes than supplied.  Such partial  writes  can occur  for  various reasons; for example, because there was insufficient space on the disk device to write all of the requested bytes, or because a blocked write() to a socket,  pipe,  or similar  was  interrupted by a signal handler after it had transferred some, but before it had transferred all of the requested bytes.  In the event of a partial write, the caller can  make another  write() call to transfer the remaining bytes.  The subsequent call will either transfer further bytes or may result in an error (e.g., if the disk is now full). For POSIX systems, if `fd` is opened in non blocking mode, the function will return error.WouldBlock when EAGAIN is received. On Windows, if the application has a global event loop enabled, I/O Completion Ports are used to perform the I/O. `error.WouldBlock` is not possible on Windows. If `iov.len` is larger than `IOV_MAX`, a partial write will occur.","fields": [11713,11714]},{"file": 53,"line": 1051,"col": 4},{"file": 53,"line": 1075,"col": 4,"docs": " Write to a file descriptor, with a position offset. Retries when interrupted by a signal. Returns the number of bytes written. If nonzero bytes were supplied, this will be nonzero. Note that a successful write() may transfer fewer bytes than supplied.  Such partial  writes  can occur  for  various reasons; for example, because there was insufficient space on the disk device to write all of the requested bytes, or because a blocked write() to a socket,  pipe,  or similar  was  interrupted by a signal handler after it had transferred some, but before it had transferred all of the requested bytes.  In the event of a partial write, the caller can  make another  write() call to transfer the remaining bytes.  The subsequent call will either transfer further bytes or may result in an error (e.g., if the disk is now full). For POSIX systems, if `fd` is opened in non blocking mode, the function will return error.WouldBlock when EAGAIN is received. On Windows, if the application has a global event loop enabled, I/O Completion Ports are used to perform the I/O. `error.WouldBlock` is not possible on Windows. Linux has a limit on how many bytes may be transferred in one `pwrite` call, which is `0x7ffff000` on both 64-bit and 32-bit systems. This is due to using a signed C int as the return value, as well as stuffing the errno codes into the last `4096` values. This is noted on the `write` man page. The limit on Darwin is `0x7fffffff`, trying to write more than that returns EINVAL. The corresponding POSIX limit is `math.maxInt(isize)`.","fields": [11715,11716,11717]},{"file": 53,"line": 1167,"col": 4,"docs": " Write multiple buffers to a file descriptor, with a position offset. Retries when interrupted by a signal. Returns the number of bytes written. If nonzero bytes were supplied, this will be nonzero. Note that a successful write() may transfer fewer than count bytes.  Such partial  writes  can occur  for  various reasons; for example, because there was insufficient space on the disk device to write all of the requested bytes, or because a blocked write() to a socket,  pipe,  or similar  was  interrupted by a signal handler after it had transferred some, but before it had transferred all of the requested bytes.  In the event of a partial write, the caller can  make another  write() call to transfer the remaining bytes.  The subsequent call will either transfer further bytes or may result in an error (e.g., if the disk is now full). If `fd` is opened in non blocking mode, the function will return error.WouldBlock when EAGAIN is received. The following systems do not have this syscall, and will return partial writes if more than one vector is provided: * Darwin * Windows If `iov.len` is larger than `IOV_MAX`, a partial write will occur.","fields": [11718,11719,11720]},{"file": 53,"line": 1235,"col": 4},{"file": 53,"line": 1293,"col": 4,"docs": " Open and possibly create a file. Keeps trying if it gets interrupted. See also `openZ`.","fields": [11721,11722,11723]},{"file": 53,"line": 1304,"col": 4,"docs": " Open and possibly create a file. Keeps trying if it gets interrupted. See also `open`.","fields": [11724,11725,11726]},{"file": 53,"line": 1382,"col": 4,"docs": " Windows-only. The path parameter is [WTF-16](https://simonsapin.github.io/wtf-8/#potentially-ill-formed-utf-16) encoded. Translates the POSIX open API call to a Windows API call. TODO currently, this function does not handle all flag combinations or makes use of perm argument.","fields": [11727,11728,11729]},{"file": 53,"line": 1396,"col": 4,"docs": " Open and possibly create a file. Keeps trying if it gets interrupted. `file_path` is relative to the open directory handle `dir_fd`. See also `openatZ`.","fields": [11730,11731,11732,11733]},{"file": 53,"line": 1409,"col": 4,"docs": " Open and possibly create a file in WASI.","fields": [11734,11735,11736,11737,11738,11739,11740]},{"file": 53,"line": 1491,"col": 4,"docs": " Windows-only. Similar to `openat` but with pathname argument null-terminated WTF16 encoded. TODO currently, this function does not handle all flag combinations or makes use of perm argument.","fields": [11741,11742,11743,11744]},{"file": 53,"line": 1502,"col": 4,"fields": [11745]},{"file": 53,"line": 1512,"col": 4,"fields": [11746,11747]},{"file": 53,"line": 1525,"col": 4},{"file": 53,"line": 1542,"col": 4,"docs": " Like `execve` except the parameters are null-terminated, matching the syscall API on all targets. This removes the need for an allocator. This function ignores PATH environment variable. See `execvpeZ` for that.","fields": [11748,11749,11750]},{"file": 53,"line": 1580,"col": 4},{"file": 53,"line": 1588,"col": 4,"docs": " Like `execvpeZ` except if `arg0_expand` is `.expand`, then `argv` is mutable, and `argv[0]` is expanded to be the same absolute path that is passed to the execve syscall. If this function returns with an error, `argv[0]` will be restored to the value it was when it was passed in.","fields": [11751,11752,11753,11754]},{"file": 53,"line": 1642,"col": 4,"docs": " Like `execvpe` except the parameters are null-terminated, matching the syscall API on all targets. This removes the need for an allocator. This function also uses the PATH environment variable to get the full path to the executable. If `file` is an absolute path, this is the same as `execveZ`.","fields": [11755,11756,11757]},{"file": 53,"line": 1714,"col": 4,"docs": " Windows-only. Get an environment variable with a null-terminated, WTF-16 encoded name. See also `getenv`. This function first attempts a case-sensitive lookup. If no match is found, and `key` is ASCII, then it attempts a second case-insensitive lookup.","fields": [11758]},{"file": 53,"line": 1752,"col": 4},{"file": 53,"line": 1758,"col": 4,"docs": " The result is a slice of out_buffer, indexed from 0.","fields": [11759]},{"file": 53,"line": 1782,"col": 4},{"file": 53,"line": 1805,"col": 4,"docs": " Creates a symbolic link named `sym_link_path` which contains the string `target_path`. A symbolic link (also known as a soft link) may point to an existing file or to a nonexistent one; the latter case is known as a dangling link. If `sym_link_path` exists, it will not be overwritten. See also `symlinkZ.","fields": [11760,11761]},{"file": 53,"line": 1819,"col": 4,"docs": " This is the same as `symlink` except the parameters are null-terminated pointers. See also `symlink`.","fields": [11762,11763]},{"file": 53,"line": 1849,"col": 4,"docs": " Similar to `symlink`, however, creates a symbolic link named `sym_link_path` which contains the string `target_path` **relative** to `newdirfd` directory handle. A symbolic link (also known as a soft link) may point to an existing file or to a nonexistent one; the latter case is known as a dangling link. If `sym_link_path` exists, it will not be overwritten. See also `symlinkatWasi`, `symlinkatZ` and `symlinkatW`.","fields": [11764,11765,11766]},{"file": 53,"line": 1863,"col": 4,"docs": " WASI-only. The same as `symlinkat` but targeting WASI. See also `symlinkat`.","fields": [11767,11768,11769]},{"file": 53,"line": 1887,"col": 4,"docs": " The same as `symlinkat` except the parameters are null-terminated pointers. See also `symlinkat`.","fields": [11770,11771,11772]},{"file": 53,"line": 1911,"col": 4},{"file": 53,"line": 1926,"col": 4,"fields": [11773,11774,11775]},{"file": 53,"line": 1948,"col": 4,"fields": [11776,11777,11778]},{"file": 53,"line": 1954,"col": 4},{"file": 53,"line": 1956,"col": 4,"fields": [11779,11780,11781,11782,11783]},{"file": 53,"line": 1985,"col": 4,"fields": [11784,11785,11786,11787,11788]},{"file": 53,"line": 1997,"col": 4},{"file": 53,"line": 2022,"col": 4,"docs": " Delete a name and possibly the file it refers to. See also `unlinkZ`.","fields": [11789]},{"file": 53,"line": 2035,"col": 4,"docs": " Same as `unlink` except the parameter is a null terminated UTF8-encoded string.","fields": [11790]},{"file": 53,"line": 2060,"col": 4,"docs": " Windows-only. Same as `unlink` except the parameter is null-terminated, WTF16 encoded.","fields": [11791]},{"file": 53,"line": 2064,"col": 4},{"file": 53,"line": 2071,"col": 4,"docs": " Delete a file name and possibly the file it refers to, based on an open directory handle. Asserts that the path parameter has no null bytes.","fields": [11792,11793,11794]},{"file": 53,"line": 2085,"col": 4,"docs": " WASI-only. Same as `unlinkat` but targeting WASI. See also `unlinkat`.","fields": [11795,11796,11797]},{"file": 53,"line": 2116,"col": 4,"docs": " Same as `unlinkat` but `file_path` is a null-terminated string.","fields": [11798,11799,11800]},{"file": 53,"line": 2146,"col": 4,"docs": " Same as `unlinkat` but `sub_path_w` is UTF16LE, NT prefixed. Windows only.","fields": [11801,11802,11803]},{"file": 53,"line": 2151,"col": 4},{"file": 53,"line": 2176,"col": 4,"docs": " Change the name or location of a file.","fields": [11804,11805]},{"file": 53,"line": 2191,"col": 4,"docs": " Same as `rename` except the parameters are null-terminated byte arrays.","fields": [11806,11807]},{"file": 53,"line": 2223,"col": 4,"docs": " Same as `rename` except the parameters are null-terminated UTF16LE encoded byte arrays. Assumes target is Windows.","fields": [11808,11809]},{"file": 53,"line": 2229,"col": 4,"docs": " Change the name or location of a file based on an open directory handle.","fields": [11810,11811,11812,11813]},{"file": 53,"line": 2250,"col": 4,"docs": " WASI-only. Same as `renameat` expect targeting WASI. See also `renameat`.","fields": [11814,11815,11816,11817]},{"file": 53,"line": 2277,"col": 4,"docs": " Same as `renameat` except the parameters are null-terminated byte arrays.","fields": [11818,11819,11820,11821]},{"file": 53,"line": 2315,"col": 4,"docs": " Same as `renameat` but Windows-only and the path parameters are [WTF-16](https://simonsapin.github.io/wtf-8/#potentially-ill-formed-utf-16) encoded.","fields": [11822,11823,11824,11825,11826]},{"file": 53,"line": 2371,"col": 4,"fields": [11827,11828,11829]},{"file": 53,"line": 2383,"col": 4,"fields": [11830,11831,11832]},{"file": 53,"line": 2406,"col": 4,"fields": [11833,11834,11835]},{"file": 53,"line": 2431,"col": 4,"fields": [11836,11837,11838]},{"file": 53,"line": 2448,"col": 4},{"file": 53,"line": 2469,"col": 4,"docs": " Create a directory. `mode` is ignored on Windows.","fields": [11839,11840]},{"file": 53,"line": 2482,"col": 4,"docs": " Same as `mkdir` but the parameter is a null-terminated UTF8-encoded string.","fields": [11841,11842]},{"file": 53,"line": 2507,"col": 4,"docs": " Windows-only. Same as `mkdir` but the parameters is  WTF16 encoded.","fields": [11843,11844]},{"file": 53,"line": 2524,"col": 4},{"file": 53,"line": 2539,"col": 4,"docs": " Deletes an empty directory.","fields": [11845]},{"file": 53,"line": 2552,"col": 4,"docs": " Same as `rmdir` except the parameter is null-terminated.","fields": [11846]},{"file": 53,"line": 2577,"col": 4,"docs": " Windows-only. Same as `rmdir` except the parameter is WTF16 encoded.","fields": [11847]},{"file": 53,"line": 2584,"col": 4},{"file": 53,"line": 2600,"col": 4,"docs": " Changes the current working directory of the calling process. `dir_path` is recommended to be a UTF-8 encoded string.","fields": [11848]},{"file": 53,"line": 2615,"col": 4,"docs": " Same as `chdir` except the parameter is null-terminated.","fields": [11849]},{"file": 53,"line": 2637,"col": 4,"docs": " Windows-only. Same as `chdir` except the paramter is WTF16 encoded.","fields": [11850]},{"file": 53,"line": 2644,"col": 4},{"file": 53,"line": 2650,"col": 4,"fields": [11851]},{"file": 53,"line": 2664,"col": 4},{"file": 53,"line": 2684,"col": 4,"docs": " Read value of a symbolic link. The return value is a slice of `out_buffer` from index 0.","fields": [11852,11853]},{"file": 53,"line": 2698,"col": 4,"docs": " Windows-only. Same as `readlink` except `file_path` is WTF16 encoded. See also `readlinkZ`.","fields": [11854,11855]},{"file": 53,"line": 2703,"col": 4,"docs": " Same as `readlink` except `file_path` is null-terminated.","fields": [11856,11857]},{"file": 53,"line": 2727,"col": 4,"docs": " Similar to `readlink` except reads value of a symbolink link **relative** to `dirfd` directory handle. The return value is a slice of `out_buffer` from index 0. See also `readlinkatWasi`, `realinkatZ` and `realinkatW`.","fields": [11858,11859,11860]},{"file": 53,"line": 2741,"col": 4,"docs": " WASI-only. Same as `readlinkat` but targets WASI. See also `readlinkat`.","fields": [11861,11862,11863]},{"file": 53,"line": 2761,"col": 4,"docs": " Windows-only. Same as `readlinkat` except `file_path` is null-terminated, WTF16 encoded. See also `readlinkat`.","fields": [11864,11865,11866]},{"file": 53,"line": 2767,"col": 4,"docs": " Same as `readlinkat` except `file_path` is null-terminated. See also `readlinkat`.","fields": [11867,11868,11869]},{"file": 53,"line": 2788,"col": 4},{"file": 53,"line": 2793,"col": 4},{"file": 53,"line": 2795,"col": 4,"fields": [11870]},{"file": 53,"line": 2805,"col": 4,"fields": [11871]},{"file": 53,"line": 2814,"col": 4,"fields": [11872,11873]},{"file": 53,"line": 2824,"col": 4,"fields": [11874]},{"file": 53,"line": 2834,"col": 4,"fields": [11875]},{"file": 53,"line": 2843,"col": 4,"fields": [11876,11877]},{"file": 53,"line": 2898,"col": 4,"fields": [11878]},{"file": 53,"line": 2920,"col": 4},{"file": 53,"line": 2948,"col": 4,"fields": [11879,11880,11881]},{"file": 53,"line": 3005,"col": 4},{"file": 53,"line": 3020,"col": 4},{"file": 53,"line": 3023,"col": 4,"docs": " Shutdown socket send/receive operations","fields": [11882,11883]},{"file": 53,"line": 3059,"col": 4,"fields": [11884]},{"file": 53,"line": 3067,"col": 4},{"file": 53,"line": 3110,"col": 4,"docs": " addr is `*const T` where T is one of the sockaddr","fields": [11885,11886,11887]},{"file": 53,"line": 3152,"col": 4},{"file": 53,"line": 3180,"col": 4,"fields": [11888,11889]},{"file": 53,"line": 3211,"col": 4},{"file": 53,"line": 3253,"col": 4,"docs": " Accept a connection on a socket. If `sockfd` is opened in non blocking mode, the function will return error.WouldBlock when EAGAIN is received.","fields": [11890,11891,11892,11893]},{"file": 53,"line": 3335,"col": 4},{"file": 53,"line": 3349,"col": 4,"fields": [11894]},{"file": 53,"line": 3362,"col": 4},{"file": 53,"line": 3388,"col": 4,"fields": [11895,11896,11897,11898]},{"file": 53,"line": 3408,"col": 4,"docs": " Waits for an I/O event on an epoll file descriptor. Returns the number of file descriptors ready for the requested I/O, or zero if no file descriptor became ready during the requested timeout milliseconds.","fields": [11899,11900,11901]},{"file": 53,"line": 3423,"col": 4},{"file": 53,"line": 3429,"col": 4,"fields": [11902,11903]},{"file": 53,"line": 3443,"col": 4},{"file": 53,"line": 3456,"col": 4,"fields": [11904,11905,11906]},{"file": 53,"line": 3485,"col": 4,"fields": [11907,11908,11909]},{"file": 53,"line": 3514,"col": 4},{"file": 53,"line": 3564,"col": 4,"docs": " Initiate a connection on a socket. If `sockfd` is opened in non blocking mode, the function will return error.WouldBlock when EAGAIN or EINPROGRESS is received.","fields": [11910,11911,11912]},{"file": 53,"line": 3616,"col": 4,"fields": [11913]},{"file": 53,"line": 3651,"col": 4},{"file": 53,"line": 3656,"col": 4,"fields": [11914,11915]},{"file": 53,"line": 3674,"col": 4},{"file": 53,"line": 3716,"col": 4},{"file": 53,"line": 3721,"col": 4,"docs": " Similar to `fstat`, but returns stat of a resource pointed to by `pathname` which is relative to `dirfd` handle. See also `fstatatZ` and `fstatatWasi`.","fields": [11916,11917,11918]},{"file": 53,"line": 3734,"col": 4,"docs": " WASI-only. Same as `fstatat` but targeting WASI. See also `fstatat`.","fields": [11919,11920,11921]},{"file": 53,"line": 3753,"col": 4,"docs": " Same as `fstatat` but `pathname` is null-terminated. See also `fstatat`.","fields": [11922,11923,11924]},{"file": 53,"line": 3776,"col": 4},{"file": 53,"line": 3784,"col": 4,"fields": []},{"file": 53,"line": 3794,"col": 4},{"file": 53,"line": 3812,"col": 4,"fields": [11925,11926,11927,11928]},{"file": 53,"line": 3842,"col": 4},{"file": 53,"line": 3849,"col": 4,"docs": " initialize an inotify instance","fields": [11929]},{"file": 53,"line": 3861,"col": 4},{"file": 53,"line": 3871,"col": 4,"docs": " add a watch to an initialized inotify instance","fields": [11930,11931,11932]},{"file": 53,"line": 3877,"col": 4,"docs": " Same as `inotify_add_watch` except pathname is null-terminated.","fields": [11933,11934,11935]},{"file": 53,"line": 3895,"col": 4,"docs": " remove an existing watch from an inotify instance","fields": [11936,11937]},{"file": 53,"line": 3904,"col": 4},{"file": 53,"line": 3919,"col": 4,"docs": " `memory.len` must be page-aligned.","fields": [11938,11939]},{"file": 53,"line": 3930,"col": 4},{"file": 53,"line": 3932,"col": 4,"fields": []},{"file": 53,"line": 3942,"col": 4},{"file": 53,"line": 4017,"col": 4},{"file": 53,"line": 4034,"col": 4,"docs": " check user's permissions for a file TODO currently this assumes `mode` is `F.OK` on Windows.","fields": [11940,11941]},{"file": 53,"line": 4045,"col": 4,"docs": " Same as `access` except `path` is null-terminated.","fields": [11942,11943]},{"file": 53,"line": 4071,"col": 4,"docs": " Call from Windows-specific code if you already have a UTF-16LE encoded, null terminated string. Otherwise use `access` or `accessC`. TODO currently this ignores `mode`.","fields": [11944,11945]},{"file": 53,"line": 4087,"col": 4,"docs": " Check user's permissions for a file, based on an open directory handle. TODO currently this ignores `mode` and `flags` on Windows.","fields": [11946,11947,11948,11949]},{"file": 53,"line": 4097,"col": 4,"docs": " Same as `faccessat` except the path parameter is null-terminated.","fields": [11950,11951,11952,11953]},{"file": 53,"line": 4122,"col": 4,"docs": " Same as `faccessat` except asserts the target is Windows and the path parameter is NtDll-prefixed, null-terminated, WTF-16 encoded. TODO currently this ignores `mode` and `flags`","fields": [11954,11955,11956,11957]},{"file": 53,"line": 4161,"col": 4},{"file": 53,"line": 4167,"col": 4,"docs": " Creates a unidirectional data channel that can be used for interprocess communication.","fields": []},{"file": 53,"line": 4179,"col": 4,"fields": [11958]},{"file": 53,"line": 4230,"col": 4},{"file": 53,"line": 4237,"col": 4,"fields": [11959,11960,11961,11962,11963]},{"file": 53,"line": 4262,"col": 4,"fields": [11964,11965,11966,11967,11968]},{"file": 53,"line": 4286,"col": 4,"fields": [11969,11970]},{"file": 53,"line": 4294,"col": 4},{"file": 53,"line": 4303,"col": 4,"docs": " Repositions read/write file offset relative to the beginning.","fields": [11971,11972]},{"file": 53,"line": 4351,"col": 4,"docs": " Repositions read/write file offset relative to the current offset.","fields": [11973,11974]},{"file": 53,"line": 4398,"col": 4,"docs": " Repositions read/write file offset relative to the end.","fields": [11975,11976]},{"file": 53,"line": 4445,"col": 4,"docs": " Returns the read/write file offset relative to the beginning.","fields": [11977]},{"file": 53,"line": 4491,"col": 4},{"file": 53,"line": 4498,"col": 4,"fields": [11978,11979,11980]},{"file": 53,"line": 4566,"col": 4},{"file": 53,"line": 4594,"col": 4},{"file": 53,"line": 4627,"col": 4,"docs": " Return the canonicalized absolute pathname. Expands all symbolic links and resolves references to `.`, `..`, and extra `/` characters in `pathname`. The return value is a slice of `out_buffer`, but not necessarily from the beginning. See also `realpathZ` and `realpathW`.","fields": [11981,11982]},{"file": 53,"line": 4640,"col": 4,"docs": " Same as `realpath` except `pathname` is null-terminated.","fields": [11983,11984]},{"file": 53,"line": 4675,"col": 4,"docs": " Same as `realpath` except `pathname` is UTF16LE-encoded.","fields": [11985,11986]},{"file": 53,"line": 4715,"col": 4,"docs": " Return canonical path of handle `fd`. This function is very host-specific and is not universally supported by all hosts. For example, while it generally works on Linux, macOS or Windows, it is unsupported on FreeBSD, or WASI.","fields": [11987,11988]},{"file": 53,"line": 4768,"col": 4,"docs": " Spurious wakeups are possible and no precision of timing is guaranteed.","fields": [11989,11990]},{"file": 53,"line": 4874,"col": 4},{"file": 53,"line": 4941,"col": 4},{"file": 53,"line": 4943,"col": 4,"fields": [11991]},{"file": 53,"line": 4971,"col": 4,"docs": " Whether or not error.Unexpected will print its value and a stack trace. if this happens the fix is to add the error code to the corresponding switch expression, possibly introduce a new error in the error set, and send a patch to Zig."},{"file": 53,"line": 4973,"col": 4},{"file": 53,"line": 4990,"col": 4},{"file": 53,"line": 4998,"col": 4,"fields": [11992,11993]},{"file": 53,"line": 5019,"col": 4},{"file": 53,"line": 5043,"col": 4,"fields": [11994,11995]},{"file": 53,"line": 5074,"col": 4},{"file": 53,"line": 5076,"col": 4,"fields": [11996]},{"file": 53,"line": 5096,"col": 4,"fields": []},{"file": 53,"line": 5105,"col": 4,"fields": [11997,11998,11999,12000,12001,12002,12003]},{"file": 53,"line": 5155,"col": 4},{"file": 53,"line": 5202,"col": 4},{"file": 53,"line": 5221,"col": 4,"fields": [12004,12005,12006]},{"file": 53,"line": 5292,"col": 4},{"file": 53,"line": 5319,"col": 4,"docs": " Transmit a message to another socket. The `sendto` call may be used only when the socket is in a connected state (so that the intended recipient  is  known). The  following call     send(sockfd, buf, len, flags); is equivalent to     sendto(sockfd, buf, len, flags, NULL, 0); If  sendto()  is used on a connection-mode (`SOCK.STREAM`, `SOCK.SEQPACKET`) socket, the arguments `dest_addr` and `addrlen` are asserted to be `null` and `0` respectively, and asserted that the socket was actually connected. Otherwise, the address of the target is given by `dest_addr` with `addrlen` specifying  its  size. If the message is too long to pass atomically through the underlying protocol, `SendError.MessageTooBig` is returned, and the message is not transmitted. There is no  indication  of  failure  to  deliver. When the message does not fit into the send buffer of  the  socket,  `sendto`  normally  blocks, unless  the socket has been placed in nonblocking I/O mode.  In nonblocking mode it would fail with `SendError.WouldBlock`.  The `select` call may be used  to  determine when it is possible to send more data.","fields": [12007,12008,12009,12010,12011]},{"file": 53,"line": 5411,"col": 4,"docs": " Transmit a message to another socket. The `send` call may be used only when the socket is in a connected state (so that the intended recipient  is  known).   The  only  difference  between `send` and `write` is the presence of flags.  With a zero flags argument, `send` is equivalent to  `write`.   Also,  the  following call     send(sockfd, buf, len, flags); is equivalent to     sendto(sockfd, buf, len, flags, NULL, 0); There is no  indication  of  failure  to  deliver. When the message does not fit into the send buffer of  the  socket,  `send`  normally  blocks, unless  the socket has been placed in nonblocking I/O mode.  In nonblocking mode it would fail with `SendError.WouldBlock`.  The `select` call may be used  to  determine when it is possible to send more data.","fields": [12012,12013,12014]},{"file": 53,"line": 5430,"col": 4},{"file": 53,"line": 5474,"col": 4,"docs": " Transfer data between file descriptors, with optional headers and trailers. Returns the number of bytes written, which can be zero. The `sendfile` call copies `in_len` bytes from one file descriptor to another. When possible, this is done within the operating system kernel, which can provide better performance characteristics than transferring data from kernel to user space and back, such as with `read` and `write` calls. When `in_len` is `0`, it means to copy until the end of the input file has been reached. Note, however, that partial writes are still possible in this case. `in_fd` must be a file descriptor opened for reading, and `out_fd` must be a file descriptor opened for writing. They may be any kind of file descriptor; however, if `in_fd` is not a regular file system file, it may cause this function to fall back to calling `read` and `write`, in which case atomicity guarantees no longer apply. Copying begins reading at `in_offset`. The input file descriptor seek position is ignored and not updated. If the output file descriptor has a seek position, it is updated as bytes are written. When `in_offset` is past the end of the input file, it successfully reads 0 bytes. `flags` has different meanings per operating system; refer to the respective man pages. These systems support atomically sending everything, including headers and trailers: * macOS * FreeBSD These systems support in-kernel data copying, but headers and trailers are not sent atomically: * Linux Other systems fall back to calling `read` / `write`. Linux has a limit on how many bytes may be transferred in one `sendfile` call, which is `0x7ffff000` on both 64-bit and 32-bit systems. This is due to using a signed C int as the return value, as well as stuffing the errno codes into the last `4096` values. This is noted on the `sendfile` man page. The limit on Darwin is `0x7fffffff`, trying to write more than that returns EINVAL. The corresponding POSIX limit on this is `math.maxInt(isize)`.","fields": [12015,12016,12017,12018,12019,12020,12021]},{"file": 53,"line": 5755,"col": 4},{"file": 53,"line": 5796,"col": 4,"docs": " Transfer data between file descriptors at specified offsets. Returns the number of bytes written, which can less than requested. The `copy_file_range` call copies `len` bytes from one file descriptor to another. When possible, this is done within the operating system kernel, which can provide better performance characteristics than transferring data from kernel to user space and back, such as with `pread` and `pwrite` calls. `fd_in` must be a file descriptor opened for reading, and `fd_out` must be a file descriptor opened for writing. They may be any kind of file descriptor; however, if `fd_in` is not a regular file system file, it may cause this function to fall back to calling `pread` and `pwrite`, in which case atomicity guarantees no longer apply. If `fd_in` and `fd_out` are the same, source and target ranges must not overlap. The file descriptor seek positions are ignored and not updated. When `off_in` is past the end of the input file, it successfully reads 0 bytes. `flags` has different meanings per operating system; refer to the respective man pages. These systems support in-kernel data copying: * Linux 4.5 (cross-filesystem 5.3) Other systems fall back to calling `pread` / `pwrite`. Maximum offsets on Linux are `math.maxInt(i64)`.","fields": [12022,12023,12024,12025,12026,12027]},{"file": 53,"line": 5842,"col": 4},{"file": 53,"line": 5850,"col": 4,"fields": [12028,12029]},{"file": 53,"line": 5880,"col": 4},{"file": 53,"line": 5888,"col": 4,"fields": [12030,12031,12032]},{"file": 53,"line": 5907,"col": 4},{"file": 53,"line": 5934,"col": 4,"fields": [12033,12034,12035]},{"file": 53,"line": 5940,"col": 4,"docs": " If `sockfd` is opened in non blocking mode, the function will return error.WouldBlock when EAGAIN is received.","fields": [12036,12037,12038,12039,12040]},{"file": 53,"line": 5984,"col": 4},{"file": 53,"line": 5986,"col": 4,"fields": [12041,12042,12043]},{"file": 53,"line": 6034,"col": 4},{"file": 53,"line": 6039,"col": 4,"fields": []},{"file": 53,"line": 6053,"col": 4},{"file": 53,"line": 6075,"col": 4,"docs": " Set a socket's options.","fields": [12044,12045,12046,12047]},{"file": 53,"line": 6107,"col": 4},{"file": 53,"line": 6117,"col": 4,"fields": [12048,12049]},{"file": 53,"line": 6135,"col": 4},{"file": 53,"line": 6136,"col": 4},{"file": 53,"line": 6146,"col": 4,"fields": [12050,12051]},{"file": 53,"line": 6151,"col": 4,"fields": [12052]},{"file": 53,"line": 6162,"col": 4},{"file": 53,"line": 6164,"col": 4,"fields": [12053]},{"file": 53,"line": 6177,"col": 4},{"file": 53,"line": 6179,"col": 4,"fields": [12054,12055,12056]},{"file": 53,"line": 6193,"col": 4},{"file": 53,"line": 6198,"col": 4,"fields": [12057,12058]},{"file": 53,"line": 6215,"col": 4,"fields": [12059,12060,12061]},{"file": 53,"line": 6229,"col": 4},{"file": 53,"line": 6237,"col": 4,"docs": " Write all pending file contents and metadata modifications to all filesystems.","fields": []},{"file": 53,"line": 6242,"col": 4,"docs": " Write all pending file contents and metadata modifications to the filesystem which contains the specified file.","fields": [12062]},{"file": 53,"line": 6255,"col": 4,"docs": " Write all pending file contents and metadata modifications for the specified file descriptor to the underlying filesystem.","fields": [12063]},{"file": 53,"line": 6279,"col": 4,"docs": " Write all pending file contents for the specified file descriptor to the underlying filesystem, but not necessarily the metadata.","fields": [12064]},{"file": 53,"line": 6297,"col": 4},{"file": 53,"line": 6312,"col": 4,"fields": [12065,12066]},{"file": 53,"line": 6339,"col": 4},{"file": 53,"line": 6341,"col": 4,"fields": [12067]},{"file": 53,"line": 6356,"col": 4},{"file": 53,"line": 6373,"col": 4},{"file": 53,"line": 6407,"col": 4,"docs": " Give advice about use of memory. This syscall is optional and is sometimes configured to be disabled.","fields": [12068,12069,12070]},{"file": 53,"line": 6421,"col": 4},{"file": 53,"line": 6475,"col": 4,"fields": [12071,12072,12073,12074,12075]},{"file": 53,"line": 16,"col": 0},{"file": 53,"line": 17,"col": 0},{"file": 53,"line": 18,"col": 0},{"file": 53,"line": 19,"col": 0},{"file": 53,"line": 20,"col": 0},{"file": 53,"line": 21,"col": 0},{"file": 53,"line": 22,"col": 0},{"file": 53,"line": 23,"col": 0},{"file": 53,"line": 24,"col": 0},{"file": 53,"line": 25,"col": 0},{"file": 53,"line": 394,"col": 0,"fields": [12076]},{"file": 53,"line": 1344,"col": 0,"fields": [12077]},{"file": 53,"line": 4516,"col": 0,"fields": [12078,12079]},{"file": 53,"line": 5432,"col": 0,"fields": [12080]},{"file": 53,"line": 5769,"col": 0},{"file": 53,"line": 6137,"col": 0,"fields": [12081]},{"file": 54,"line": 16,"col": 4},{"file": 54,"line": 39,"col": 4},{"file": 54,"line": 52,"col": 4},{"file": 54,"line": 70,"col": 4},{"file": 54,"line": 78,"col": 4},{"file": 54,"line": 102,"col": 4},{"file": 54,"line": 111,"col": 4,"docs": " Duplicate copy of SymbolRecordKind, but using the official CV names. Useful for reference purposes and when dealing with unknown record types."},{"file": 54,"line": 310,"col": 4},{"file": 54,"line": 312,"col": 4},{"file": 54,"line": 327,"col": 4},{"file": 54,"line": 338,"col": 4},{"file": 54,"line": 344,"col": 4},{"file": 54,"line": 356,"col": 4,"docs": " The following variable length array appears immediately after the header. The structure definition follows. LineBlockFragmentHeader Blocks[] Each `LineBlockFragmentHeader` as specified below."},{"file": 54,"line": 368,"col": 4},{"file": 54,"line": 378,"col": 4,"docs": " The following two variable length arrays appear immediately after the header.  The structure definitions follow. LineNumberEntry   Lines[NumLines]; ColumnNumberEntry Columns[NumLines];"},{"file": 54,"line": 390,"col": 4},{"file": 54,"line": 406,"col": 4},{"file": 54,"line": 412,"col": 4,"docs": " Checksum bytes follow."},{"file": 54,"line": 423,"col": 4},{"file": 54,"line": 443,"col": 4},{"file": 54,"line": 451,"col": 4},{"file": 54,"line": 480,"col": 4},{"file": 54,"line": 0,"col": 0},{"file": 54,"line": 1,"col": 0},{"file": 54,"line": 2,"col": 0},{"file": 54,"line": 3,"col": 0},{"file": 54,"line": 4,"col": 0},{"file": 54,"line": 5,"col": 0},{"file": 54,"line": 6,"col": 0},{"file": 54,"line": 7,"col": 0},{"file": 54,"line": 8,"col": 0},{"file": 54,"line": 10,"col": 0},{"file": 54,"line": 462,"col": 0,"fields": [12082,12083]},{"file": 54,"line": 856,"col": 0},{"file": 54,"line": 946,"col": 0,"fields": [12084,12085]},{"file": 54,"line": 951,"col": 0},{"file": 54,"line": 997,"col": 0},{"file": 55,"line": 12,"col": 4},{"file": 55,"line": 13,"col": 4},{"file": 55,"line": 14,"col": 4},{"file": 55,"line": 15,"col": 4},{"file": 55,"line": 18,"col": 4,"docs": " The result is a slice of `out_buffer`, from index `0`.","fields": [12086]},{"file": 55,"line": 23,"col": 4,"docs": " Caller must free the returned memory.","fields": [12087]},{"file": 55,"line": 56,"col": 4,"docs": " Caller owns resulting `BufMap`.","fields": [12088]},{"file": 55,"line": 147,"col": 4},{"file": 55,"line": 156,"col": 4,"docs": " Caller must free returned memory.","fields": [12089,12090]},{"file": 55,"line": 185,"col": 4,"fields": [12091,12092]},{"file": 55,"line": 201,"col": 4},{"file": 55,"line": 228,"col": 4},{"file": 55,"line": 301,"col": 4},{"file": 55,"line": 444,"col": 4},{"file": 55,"line": 515,"col": 4,"docs": " You must deinitialize iterator's internal buffers by calling `deinit` when done.","fields": [12093]},{"file": 55,"line": 618,"col": 4},{"file": 55,"line": 624,"col": 4,"docs": " POSIX function which gets a uid from username.","fields": [12094]},{"file": 55,"line": 633,"col": 4,"docs": " TODO this reads /etc/passwd. But sometimes the user/id mapping is in something else like NIS, AD, etc. See `man nss` or look at an strace for `id myuser`.","fields": [12095]},{"file": 55,"line": 742,"col": 4,"docs": " Caller owns the result value and each inner slice. TODO Remove the `Allocator` requirement from this API, which will remove the `Allocator` requirement from `std.zig.system.NativeTargetInfo.detect`. Most likely this will require introducing a new, lower-level function which takes a callback function, and then this function which takes an allocator can exist on top of it.","fields": [12096]},{"file": 55,"line": 819,"col": 4,"docs": " Tells whether calling the `execv` or `execve` functions will be a compile error."},{"file": 55,"line": 824,"col": 4},{"file": 55,"line": 834,"col": 4,"docs": " Replaces the current process image with the executed process. This function must allocate memory to add a null terminating bytes on path and each arg. It must also convert to KEY=VALUE\\0 format for environment variables, and include null pointers after the args and after the environment variables. `argv[0]` is the executable path. This function also uses the PATH environment variable to get the full path to the executable. Due to the heap-allocation, it is illegal to call this function in a fork() child. For that use case, use the `std.os` functions directly.","fields": [12097,12098]},{"file": 55,"line": 846,"col": 4,"docs": " Replaces the current process image with the executed process. This function must allocate memory to add a null terminating bytes on path and each arg. It must also convert to KEY=VALUE\\0 format for environment variables, and include null pointers after the args and after the environment variables. `argv[0]` is the executable path. This function also uses the PATH environment variable to get the full path to the executable. Due to the heap-allocation, it is illegal to call this function in a fork() child. For that use case, use the `std.os` functions directly.","fields": [12099,12100,12101]},{"file": 55,"line": 0,"col": 0},{"file": 55,"line": 1,"col": 0},{"file": 55,"line": 2,"col": 0},{"file": 55,"line": 3,"col": 0},{"file": 55,"line": 4,"col": 0},{"file": 55,"line": 5,"col": 0},{"file": 55,"line": 6,"col": 0},{"file": 55,"line": 7,"col": 0},{"file": 55,"line": 8,"col": 0},{"file": 55,"line": 9,"col": 0},{"file": 55,"line": 10,"col": 0},{"file": 55,"line": 608,"col": 0,"fields": [12102,12103]},{"file": 56,"line": 6,"col": 4,"fields": [12104,12105,12106,12107,12108]},{"file": 56,"line": 76,"col": 4,"docs": " Stable in-place sort. O(n) best case, O(pow(n, 2)) worst case. O(1) memory (no allocator required).","fields": [12109,12110,12111,12112]},{"file": 56,"line": 182,"col": 4,"docs": " Stable in-place sort. O(n) best case, O(n*log(n)) worst case and average case. O(1) memory (no allocator required). Currently implemented as block sort.","fields": [12113,12114,12115,12116]},{"file": 56,"line": 1128,"col": 4,"docs": " Use to generate a comparator function for a given type. e.g. `sort(u8, slice, {}, comptime asc(u8))`.","fields": [12117]},{"file": 56,"line": 1140,"col": 4,"docs": " Use to generate a comparator function for a given type. e.g. `sort(u8, slice, {}, comptime desc(u8))`.","fields": [12118]},{"file": 56,"line": 1361,"col": 4,"fields": [12119,12120,12121,12122]},{"file": 56,"line": 1393,"col": 4,"fields": [12123,12124,12125,12126]},{"file": 56,"line": 1413,"col": 4,"fields": [12127,12128,12129,12130]},{"file": 56,"line": 1445,"col": 4,"fields": [12131,12132,12133,12134]},{"file": 56,"line": 1465,"col": 4,"fields": [12135,12136,12137,12138]},{"file": 56,"line": 0,"col": 0},{"file": 56,"line": 1,"col": 0},{"file": 56,"line": 2,"col": 0},{"file": 56,"line": 3,"col": 0},{"file": 56,"line": 4,"col": 0},{"file": 56,"line": 93,"col": 0},{"file": 56,"line": 109,"col": 0},{"file": 56,"line": 173,"col": 0},{"file": 56,"line": 811,"col": 0,"fields": [12139,12140,12141,12142,12143,12144]},{"file": 56,"line": 860,"col": 0,"fields": [12145,12146,12147,12148,12149,12150,12151]},{"file": 56,"line": 895,"col": 0,"fields": [12152,12153,12154,12155,12156]},{"file": 56,"line": 904,"col": 0,"fields": [12157,12158,12159,12160,12161,12162,12163]},{"file": 56,"line": 926,"col": 0,"fields": [12164,12165,12166,12167,12168,12169,12170]},{"file": 56,"line": 948,"col": 0,"fields": [12171,12172,12173,12174,12175,12176,12177]},{"file": 56,"line": 970,"col": 0,"fields": [12178,12179,12180,12181,12182,12183,12184]},{"file": 56,"line": 992,"col": 0,"fields": [12185,12186,12187,12188,12189,12190]},{"file": 56,"line": 1015,"col": 0,"fields": [12191,12192,12193,12194,12195,12196]},{"file": 56,"line": 1038,"col": 0,"fields": [12197,12198,12199,12200,12201,12202,12203]},{"file": 56,"line": 1076,"col": 0,"fields": [12204,12205,12206,12207,12208,12209,12210]},{"file": 56,"line": 1112,"col": 0,"fields": [12211,12212,12213,12214,12215,12216,12217]},{"file": 56,"line": 1155,"col": 0,"fields": []},{"file": 56,"line": 1199,"col": 0},{"file": 56,"line": 1203,"col": 0,"fields": [12218,12219,12220]},{"file": 56,"line": 1207,"col": 0},{"file": 56,"line": 1208,"col": 0},{"file": 56,"line": 1209,"col": 0},{"file": 56,"line": 1210,"col": 0},{"file": 56,"line": 1338,"col": 0},{"file": 56,"line": 1340,"col": 0,"fields": [12221]},{"file": 57,"line": 6,"col": 4},{"file": 57,"line": 9,"col": 4,"docs": " This should only be used in temporary test programs."},{"file": 57,"line": 10,"col": 4},{"file": 57,"line": 12,"col": 4},{"file": 57,"line": 13,"col": 4},{"file": 57,"line": 15,"col": 4},{"file": 57,"line": 18,"col": 4,"docs": " TODO https://github.com/ziglang/zig/issues/5738"},{"file": 57,"line": 22,"col": 4,"docs": " This is available to any test that wants to execute Zig in a child process. It will be the same executable that is running `zig test`."},{"file": 57,"line": 26,"col": 4,"docs": " This function is intended to be used only in tests. It prints diagnostics to stderr and then aborts when actual_error_union is not expected_error.","fields": [12222,12223]},{"file": 57,"line": 197,"col": 4,"docs": " This function is intended to be used only in tests. When the formatted result of the template and its arguments does not equal the expected text, it prints diagnostics to stderr to show how they are not equal, then returns an error.","fields": [12224,12225,12226]},{"file": 57,"line": 215,"col": 4,"docs": " This function is intended to be used only in tests. When the actual value is not approximately equal to the expected value, prints diagnostics to stderr to show exactly how they are not equal, then aborts. See `math.approxEqAbs` for more informations on the tolerance parameter. The types must be floating point","fields": [12227,12228,12229]},{"file": 57,"line": 247,"col": 4,"docs": " This function is intended to be used only in tests. When the actual value is not approximately equal to the expected value, prints diagnostics to stderr to show exactly how they are not equal, then aborts. See `math.approxEqRel` for more informations on the tolerance parameter. The types must be floating point","fields": [12230,12231,12232]},{"file": 57,"line": 281,"col": 4,"docs": " This function is intended to be used only in tests. When the two slices are not equal, prints diagnostics to stderr to show exactly how they are not equal, then aborts. If your inputs are UTF-8 encoded strings, consider calling `expectEqualStrings` instead.","fields": [12233,12234,12235]},{"file": 57,"line": 305,"col": 4},{"file": 57,"line": 336,"col": 4,"fields": [12236]},{"file": 57,"line": 379,"col": 4,"fields": [12237,12238]},{"file": 57,"line": 403,"col": 4,"fields": [12239,12240]},{"file": 57,"line": 0,"col": 0},{"file": 57,"line": 1,"col": 0},{"file": 57,"line": 3,"col": 0},{"file": 57,"line": 4,"col": 0},{"file": 57,"line": 321,"col": 0,"fields": []},{"file": 57,"line": 423,"col": 0,"fields": [12241,12242]},{"file": 57,"line": 442,"col": 0,"fields": [12243]},{"file": 57,"line": 450,"col": 0,"fields": [12244]},{"file": 58,"line": 8,"col": 4},{"file": 58,"line": 11,"col": 4,"docs": " Spurious wakeups are possible and no precision of timing is guaranteed.","fields": [12245]},{"file": 58,"line": 57,"col": 4,"docs": " Get a calendar timestamp, in seconds, relative to UTC 1970-01-01. Precision of timing depends on the hardware and operating system. The return value is signed because it is possible to have a date that is before the epoch. See `std.os.clock_gettime` for a POSIX timestamp.","fields": []},{"file": 58,"line": 66,"col": 4,"docs": " Get a calendar timestamp, in milliseconds, relative to UTC 1970-01-01. Precision of timing depends on the hardware and operating system. The return value is signed because it is possible to have a date that is before the epoch. See `std.os.clock_gettime` for a POSIX timestamp.","fields": []},{"file": 58,"line": 76,"col": 4,"docs": " Get a calendar timestamp, in nanoseconds, relative to UTC 1970-01-01. Precision of timing depends on the hardware and operating system. On Windows this has a maximum granularity of 100 nanoseconds. The return value is signed because it is possible to have a date that is before the epoch. See `std.os.clock_gettime` for a POSIX timestamp.","fields": []},{"file": 58,"line": 100,"col": 4},{"file": 58,"line": 101,"col": 4},{"file": 58,"line": 102,"col": 4},{"file": 58,"line": 103,"col": 4},{"file": 58,"line": 104,"col": 4},{"file": 58,"line": 105,"col": 4},{"file": 58,"line": 106,"col": 4},{"file": 58,"line": 109,"col": 4},{"file": 58,"line": 110,"col": 4},{"file": 58,"line": 111,"col": 4},{"file": 58,"line": 112,"col": 4},{"file": 58,"line": 113,"col": 4},{"file": 58,"line": 114,"col": 4},{"file": 58,"line": 117,"col": 4},{"file": 58,"line": 118,"col": 4},{"file": 58,"line": 119,"col": 4},{"file": 58,"line": 120,"col": 4},{"file": 58,"line": 121,"col": 4},{"file": 58,"line": 124,"col": 4},{"file": 58,"line": 125,"col": 4},{"file": 58,"line": 126,"col": 4},{"file": 58,"line": 127,"col": 4},{"file": 58,"line": 137,"col": 4,"docs": " A monotonic high-performance timer. Timer.start() must be called to initialize the struct, which captures the counter frequency on windows and darwin, records the resolution, and gives the user an opportunity to check for the existnece of monotonic clocks without forcing them to check for error on each read. .resolution is in nanoseconds on all platforms but .start_time's meaning depends on the OS. On Windows and Darwin it is a hardware counter value that requires calculation to convert to a meaninful unit."},{"file": 58,"line": 0,"col": 0},{"file": 58,"line": 1,"col": 0},{"file": 58,"line": 2,"col": 0},{"file": 58,"line": 3,"col": 0},{"file": 58,"line": 4,"col": 0},{"file": 58,"line": 5,"col": 0},{"file": 58,"line": 6,"col": 0},{"file": 58,"line": 248,"col": 0,"fields": [12246,12247,12248]},{"file": 59,"line": 7,"col": 4,"docs": " Returns how many bytes the UTF-8 representation would require for the given codepoint.","fields": [12249]},{"file": 59,"line": 34,"col": 4,"docs": " Encodes the given codepoint into a UTF-8 byte sequence. c: the codepoint. out: the out buffer to write to. Must have a len >= utf8CodepointSequenceLength(c). Errors: if c cannot be encoded in UTF-8. Returns: the number of bytes written to out.","fields": [12250,12251]},{"file": 59,"line": 151,"col": 4,"docs": " Returns true if the given unicode codepoint can be encoded in UTF-8.","fields": [12252]},{"file": 59,"line": 194,"col": 4,"fields": [12253]},{"file": 59,"line": 221,"col": 4,"docs": " Utf8View iterates the code points of a utf-8 encoded string. ``` var utf8 = (try std.unicode.Utf8View.init(\"hi there\")).iterator(); while (utf8.nextCodepointSlice()) |codepoint| {   std.debug.print(\"got codepoint {}\\n\", .{codepoint}); } ```"},{"file": 59,"line": 255,"col": 4},{"file": 59,"line": 298,"col": 4},{"file": 59,"line": 552,"col": 4,"docs": " Caller must free returned memory.","fields": [12254,12255]},{"file": 59,"line": 569,"col": 4,"docs": " Caller must free returned memory.","fields": [12256,12257]},{"file": 59,"line": 591,"col": 4,"docs": " Asserts that the output buffer is big enough. Returns end byte index into utf8.","fields": [12258,12259]},{"file": 59,"line": 663,"col": 4,"fields": [12260,12261]},{"file": 59,"line": 691,"col": 4,"docs": " Returns index of next character. If exact fit, returned index equals output slice length. Assumes there is enough space for the output.","fields": [12262,12263]},{"file": 59,"line": 752,"col": 4,"docs": " Converts a UTF-8 string literal into a UTF-16LE string literal.","fields": [12264]},{"file": 59,"line": 804,"col": 4,"docs": " Return a Formatter for a Utf16le string","fields": [12265]},{"file": 59,"line": 0,"col": 0},{"file": 59,"line": 1,"col": 0},{"file": 59,"line": 2,"col": 0},{"file": 59,"line": 3,"col": 0},{"file": 59,"line": 64,"col": 0},{"file": 59,"line": 80,"col": 0},{"file": 59,"line": 98,"col": 0},{"file": 59,"line": 122,"col": 0},{"file": 59,"line": 333,"col": 0,"fields": []},{"file": 59,"line": 359,"col": 0,"fields": []},{"file": 59,"line": 367,"col": 0,"fields": [12266,12267,12268]},{"file": 59,"line": 375,"col": 0,"fields": []},{"file": 59,"line": 395,"col": 0,"fields": []},{"file": 59,"line": 405,"col": 0,"fields": []},{"file": 59,"line": 425,"col": 0,"fields": []},{"file": 59,"line": 436,"col": 0,"fields": []},{"file": 59,"line": 455,"col": 0,"fields": []},{"file": 59,"line": 487,"col": 0,"fields": []},{"file": 59,"line": 500,"col": 0,"fields": []},{"file": 59,"line": 516,"col": 0,"fields": []},{"file": 59,"line": 536,"col": 0,"fields": [12269,12270]},{"file": 59,"line": 540,"col": 0,"fields": [12271,12272]},{"file": 59,"line": 544,"col": 0,"fields": [12273]},{"file": 59,"line": 762,"col": 0,"fields": [12274]},{"file": 59,"line": 780,"col": 0,"docs": " Print the given `utf16le` string","fields": [12275,12276,12277,12278]},{"file": 59,"line": 874,"col": 0,"fields": []},{"file": 59,"line": 886,"col": 0,"fields": []},{"file": 60,"line": 582,"col": 4,"fields": []},{"file": 60,"line": 2,"col": 0},{"file": 60,"line": 3,"col": 0},{"file": 60,"line": 4,"col": 0},{"file": 60,"line": 5,"col": 0},{"file": 60,"line": 6,"col": 0},{"file": 60,"line": 7,"col": 0},{"file": 60,"line": 8,"col": 0},{"file": 60,"line": 9,"col": 0},{"file": 60,"line": 10,"col": 0},{"file": 60,"line": 12,"col": 0},{"file": 60,"line": 14,"col": 0},{"file": 60,"line": 87,"col": 0,"fields": []},{"file": 60,"line": 92,"col": 0,"fields": []},{"file": 60,"line": 96,"col": 0,"fields": []},{"file": 60,"line": 102,"col": 0,"fields": []},{"file": 60,"line": 118,"col": 0,"fields": []},{"file": 60,"line": 123,"col": 0,"fields": [12279]},{"file": 60,"line": 191,"col": 0,"fields": [12280]},{"file": 60,"line": 195,"col": 0,"fields": [12281,12282,12283]},{"file": 60,"line": 211,"col": 0,"fields": []},{"file": 60,"line": 217,"col": 0,"fields": []},{"file": 60,"line": 226,"col": 0,"fields": [12284,12285]},{"file": 60,"line": 324,"col": 0,"fields": []},{"file": 60,"line": 335,"col": 0,"fields": []},{"file": 60,"line": 447,"col": 0,"fields": [12286,12287,12288]},{"file": 60,"line": 462,"col": 0,"fields": [12289,12290]},{"file": 60,"line": 468,"col": 0},{"file": 60,"line": 501,"col": 0,"fields": []},{"file": 60,"line": 526,"col": 0,"fields": [12291]},{"file": 60,"line": 534,"col": 0,"fields": [12292]},{"file": 61,"line": 21,"col": 4},{"file": 61,"line": 30,"col": 4,"docs": " Sets the event if not already set and wakes up all the threads waiting on the event. It is safe to call `set` multiple times before calling `wait`. However it is illegal to call `set` after `wait` is called until the event is `reset`. This function is thread-safe.","fields": [12293]},{"file": 61,"line": 45,"col": 4,"docs": " Resets the event to its original, unset state. This function is *not* thread-safe. It is equivalent to calling `deinit` followed by `init` but without the possibility of failure.","fields": [12294]},{"file": 61,"line": 49,"col": 4},{"file": 61,"line": 58,"col": 4,"docs": " Wait for the event to be set by blocking the current thread. A timeout in nanoseconds can be provided as a hint for how long the thread should block on the unset event before returning `TimedWaitResult.timed_out`. Thread-safe. No precision of timing is guaranteed. Upon return from `timedWait`, the only function available to be called in `StaticResetEvent` is `reset`.","fields": [12295,12296]},{"file": 61,"line": 64,"col": 4,"docs": " For single-threaded builds, we use this to detect deadlocks. In unsafe modes this ends up being no-ops."},{"file": 61,"line": 115,"col": 4},{"file": 61,"line": 9,"col": 0},{"file": 61,"line": 10,"col": 0},{"file": 61,"line": 11,"col": 0},{"file": 61,"line": 12,"col": 0},{"file": 61,"line": 13,"col": 0},{"file": 61,"line": 14,"col": 0},{"file": 61,"line": 15,"col": 0},{"file": 61,"line": 16,"col": 0},{"file": 61,"line": 17,"col": 0},{"file": 25,"line": 62,"col": 4},{"file": 44,"line": 293,"col": 4},{"file": 44,"line": 322,"col": 4,"fields": [12297,12298]},{"file": 61,"line": 123,"col": 8,"docs": " This function is provided so that this type can be re-used inside `std.Thread.ResetEvent`.","fields": [12299]},{"file": 61,"line": 129,"col": 8,"docs": " This function is provided so that this type can be re-used inside `std.Thread.ResetEvent`.","fields": [12300]},{"file": 61,"line": 133,"col": 8,"fields": [12301]},{"file": 61,"line": 161,"col": 8,"fields": [12302]},{"file": 61,"line": 165,"col": 8},{"file": 61,"line": 171,"col": 8},{"file": 61,"line": 192,"col": 8},{"file": 61,"line": 228,"col": 8},{"file": 61,"line": 118,"col": 4},{"file": 61,"line": 119,"col": 4},{"file": 62,"line": 7,"col": 4,"docs": " This allocator takes an existing allocator, wraps it, and provides an interface where you can allocate without freeing, and then free it all together."},{"file": 62,"line": 0,"col": 0},{"file": 62,"line": 1,"col": 0},{"file": 62,"line": 2,"col": 0},{"file": 62,"line": 3,"col": 0},{"file": 63,"line": 130,"col": 4,"docs": " Fast non-cryptographic 64bit hash function. See https://github.com/wangyi-fudan/wyhash"},{"file": 63,"line": 0,"col": 0},{"file": 63,"line": 1,"col": 0},{"file": 63,"line": 3,"col": 0},{"file": 63,"line": 37,"col": 0},{"file": 63,"line": 173,"col": 0},{"file": 64,"line": 3,"col": 4},{"file": 64,"line": 64,"col": 4},{"file": 64,"line": 0,"col": 0},{"file": 64,"line": 1,"col": 0},{"file": 22,"line": 484,"col": 8},{"file": 22,"line": 503,"col": 8,"fields": [12303,12304]},{"file": 22,"line": 513,"col": 8,"fields": [12305]},{"file": 22,"line": 537,"col": 8,"fields": [12306,12307,12308,12309]},{"file": 22,"line": 420,"col": 16,"docs": " This data structure is used by the Zig language code generation and therefore must be kept in sync with the compiler implementation."},{"file": 65,"line": 7,"col": 4},{"file": 65,"line": 9,"col": 4,"fields": [12310]},{"file": 65,"line": 66,"col": 4,"fields": [12311]},{"file": 65,"line": 131,"col": 4,"fields": [12312]},{"file": 65,"line": 152,"col": 4,"fields": [12313]},{"file": 65,"line": 170,"col": 4,"fields": [12314]},{"file": 65,"line": 188,"col": 4,"fields": [12315]},{"file": 65,"line": 202,"col": 4,"fields": [12316]},{"file": 65,"line": 232,"col": 4,"fields": [12317]},{"file": 65,"line": 323,"col": 4,"fields": [12318]},{"file": 65,"line": 339,"col": 4,"fields": [12319]},{"file": 65,"line": 403,"col": 4,"docs": " Returns true if the passed type will coerce to []const u8. Any of the following are considered strings: ``` []const u8, [:S]const u8, *const [N]u8, *const [N:S]u8, []u8, [:S]u8, *[:S]u8, *[N:S]u8. ``` These types are not considered strings: ``` u8, [N]u8, [*]const u8, [*:0]const u8, [*]const [N]u8, []const u16, []const i8, *const u8, ?[]const u8, ?*const [N]u8. ```","fields": [12320]},{"file": 65,"line": 469,"col": 4,"fields": [12321,12322]},{"file": 65,"line": 495,"col": 4,"fields": [12323,12324]},{"file": 65,"line": 521,"col": 4,"fields": [12325,12326]},{"file": 65,"line": 0,"col": 0},{"file": 65,"line": 1,"col": 0},{"file": 65,"line": 2,"col": 0},{"file": 65,"line": 3,"col": 0},{"file": 65,"line": 5,"col": 0},{"file": 63,"line": 136,"col": 8,"fields": [12327]},{"file": 63,"line": 144,"col": 8,"fields": [12328,12329]},{"file": 63,"line": 162,"col": 8,"fields": [12330]},{"file": 13,"line": 116,"col": 16,"docs": " Latest Windows version that the Zig Standard Library is aware of"},{"file": 13,"line": 120,"col": 16,"docs": " Compared against build numbers reported by the runtime to distinguish win10 versions, where 0x0A000000 + index corresponds to the WindowsVersion u32 value."},{"file": 13,"line": 135,"col": 16,"docs": " Returns whether the first version `self` is newer (greater) than or equal to the second version `ver`.","fields": [12331,12332]},{"file": 13,"line": 139,"col": 16},{"file": 13,"line": 158,"col": 16,"docs": " This function is defined to serialize a Zig source code representation of this type, that, when parsed, will deserialize into the same data.","fields": [12333,12334,12335,12336]},{"file": 13,"line": 185,"col": 16,"fields": [12337,12338]},{"file": 13,"line": 191,"col": 16,"docs": " Checks if system is guaranteed to be at least `version` or older than `version`. Returns `null` if a runtime check is required.","fields": [12339,12340]},{"file": 13,"line": 228,"col": 16,"docs": " The default `VersionRange` represents the range that the Zig Standard Library bases its abstractions on.","fields": [12341,12342]},{"file": 18,"line": 1458,"col": 8},{"file": 18,"line": 1465,"col": 8},{"file": 18,"line": 1472,"col": 8},{"file": 18,"line": 1479,"col": 8},{"file": 18,"line": 1486,"col": 8},{"file": 18,"line": 1493,"col": 8},{"file": 18,"line": 1500,"col": 8},{"file": 18,"line": 1509,"col": 8},{"file": 18,"line": 1516,"col": 8},{"file": 18,"line": 1525,"col": 8},{"file": 18,"line": 1532,"col": 8},{"file": 18,"line": 1541,"col": 8},{"file": 18,"line": 1548,"col": 8},{"file": 18,"line": 1555,"col": 8},{"file": 18,"line": 1562,"col": 8},{"file": 18,"line": 1569,"col": 8},{"file": 18,"line": 1576,"col": 8},{"file": 18,"line": 1583,"col": 8},{"file": 18,"line": 1590,"col": 8},{"file": 18,"line": 1597,"col": 8},{"file": 18,"line": 1604,"col": 8},{"file": 18,"line": 1611,"col": 8},{"file": 18,"line": 1618,"col": 8},{"file": 18,"line": 1625,"col": 8},{"file": 18,"line": 1632,"col": 8},{"file": 18,"line": 1639,"col": 8},{"file": 18,"line": 1646,"col": 8},{"file": 18,"line": 1653,"col": 8},{"file": 18,"line": 1660,"col": 8},{"file": 18,"line": 1667,"col": 8},{"file": 18,"line": 1681,"col": 8},{"file": 18,"line": 1697,"col": 8},{"file": 18,"line": 1711,"col": 8},{"file": 18,"line": 1718,"col": 8},{"file": 18,"line": 1725,"col": 8},{"file": 18,"line": 1740,"col": 8},{"file": 18,"line": 1748,"col": 8},{"file": 18,"line": 1756,"col": 8},{"file": 18,"line": 1766,"col": 8},{"file": 18,"line": 1783,"col": 8},{"file": 18,"line": 1790,"col": 8},{"file": 18,"line": 1797,"col": 8},{"file": 18,"line": 1805,"col": 8},{"file": 18,"line": 1815,"col": 8},{"file": 18,"line": 1825,"col": 8},{"file": 18,"line": 1834,"col": 8},{"file": 18,"line": 1843,"col": 8},{"file": 18,"line": 1852,"col": 8},{"file": 18,"line": 1867,"col": 8},{"file": 18,"line": 1886,"col": 8},{"file": 18,"line": 1894,"col": 8},{"file": 18,"line": 1902,"col": 8},{"file": 18,"line": 1910,"col": 8},{"file": 18,"line": 1919,"col": 8},{"file": 18,"line": 1930,"col": 8},{"file": 18,"line": 1944,"col": 8},{"file": 18,"line": 1958,"col": 8},{"file": 18,"line": 1971,"col": 8},{"file": 18,"line": 1984,"col": 8},{"file": 18,"line": 1993,"col": 8},{"file": 18,"line": 2003,"col": 8},{"file": 18,"line": 2017,"col": 8},{"file": 18,"line": 2031,"col": 8},{"file": 18,"line": 2040,"col": 8},{"file": 18,"line": 2056,"col": 8},{"file": 18,"line": 2072,"col": 8},{"file": 18,"line": 2081,"col": 8},{"file": 18,"line": 2098,"col": 8},{"file": 18,"line": 2105,"col": 8},{"file": 18,"line": 2113,"col": 8},{"file": 18,"line": 2121,"col": 8},{"file": 18,"line": 2129,"col": 8},{"file": 18,"line": 2139,"col": 8},{"file": 18,"line": 2149,"col": 8},{"file": 18,"line": 2154,"col": 8},{"file": 18,"line": 2161,"col": 8},{"file": 18,"line": 2176,"col": 8},{"file": 18,"line": 2183,"col": 8},{"file": 18,"line": 2192,"col": 8},{"file": 18,"line": 2199,"col": 8},{"file": 18,"line": 2207,"col": 8},{"file": 18,"line": 2216,"col": 8},{"file": 18,"line": 2226,"col": 8},{"file": 18,"line": 2234,"col": 8},{"file": 18,"line": 2244,"col": 8},{"file": 18,"line": 2251,"col": 8},{"file": 18,"line": 2258,"col": 8},{"file": 18,"line": 2265,"col": 8},{"file": 18,"line": 2272,"col": 8},{"file": 18,"line": 2300,"col": 8},{"file": 13,"line": 637,"col": 16,"docs": " A bit set of all the features."},{"file": 13,"line": 1252,"col": 16,"fields": [12343,12344]},{"file": 13,"line": 1262,"col": 16,"fields": [12345]},{"file": 13,"line": 1299,"col": 16,"fields": [12346]},{"file": 22,"line": 618,"col": 8},{"file": 66,"line": 46,"col": 4},{"file": 66,"line": 47,"col": 4},{"file": 66,"line": 48,"col": 4},{"file": 66,"line": 49,"col": 4},{"file": 66,"line": 50,"col": 4},{"file": 66,"line": 51,"col": 4},{"file": 66,"line": 52,"col": 4},{"file": 66,"line": 53,"col": 4},{"file": 66,"line": 54,"col": 4},{"file": 66,"line": 55,"col": 4},{"file": 66,"line": 56,"col": 4},{"file": 66,"line": 57,"col": 4},{"file": 66,"line": 58,"col": 4},{"file": 66,"line": 60,"col": 4},{"file": 66,"line": 61,"col": 4},{"file": 66,"line": 62,"col": 4},{"file": 66,"line": 63,"col": 4},{"file": 66,"line": 64,"col": 4},{"file": 66,"line": 65,"col": 4},{"file": 66,"line": 66,"col": 4},{"file": 66,"line": 67,"col": 4},{"file": 66,"line": 68,"col": 4},{"file": 66,"line": 69,"col": 4},{"file": 66,"line": 70,"col": 4},{"file": 66,"line": 71,"col": 4},{"file": 66,"line": 72,"col": 4},{"file": 66,"line": 73,"col": 4},{"file": 66,"line": 74,"col": 4},{"file": 66,"line": 75,"col": 4},{"file": 66,"line": 76,"col": 4},{"file": 66,"line": 77,"col": 4},{"file": 66,"line": 78,"col": 4},{"file": 66,"line": 79,"col": 4},{"file": 66,"line": 80,"col": 4},{"file": 66,"line": 81,"col": 4},{"file": 66,"line": 82,"col": 4},{"file": 66,"line": 83,"col": 4},{"file": 66,"line": 84,"col": 4},{"file": 66,"line": 85,"col": 4},{"file": 66,"line": 86,"col": 4},{"file": 66,"line": 87,"col": 4},{"file": 66,"line": 89,"col": 4},{"file": 66,"line": 90,"col": 4},{"file": 66,"line": 91,"col": 4},{"file": 66,"line": 92,"col": 4},{"file": 66,"line": 94,"col": 4},{"file": 66,"line": 126,"col": 4},{"file": 66,"line": 137,"col": 4,"docs": " Set by startup code, used by `getauxval`."},{"file": 66,"line": 195,"col": 4,"fields": [12347]},{"file": 66,"line": 199,"col": 4,"fields": [12348,12349]},{"file": 66,"line": 215,"col": 4,"fields": [12350,12351,12352]},{"file": 66,"line": 219,"col": 4,"fields": [12353]},{"file": 66,"line": 223,"col": 4,"fields": [12354]},{"file": 66,"line": 227,"col": 4,"fields": [12355]},{"file": 66,"line": 231,"col": 4,"fields": [12356,12357,12358]},{"file": 66,"line": 235,"col": 4,"fields": []},{"file": 66,"line": 250,"col": 4,"docs": " This must be inline, and inline call the syscall function, because if the child does a return it will clobber the parent's stack. It is advised to avoid this function and use clone instead, because the compiler is not aware of how vfork affects control flow and you may see different results in optimized builds.","fields": []},{"file": 66,"line": 254,"col": 4,"fields": [12359,12360]},{"file": 66,"line": 258,"col": 4,"fields": [12361,12362,12363,12364]},{"file": 66,"line": 262,"col": 4,"fields": [12365,12366,12367,12368]},{"file": 66,"line": 294,"col": 4,"fields": [12369,12370]},{"file": 66,"line": 298,"col": 4,"fields": [12371,12372,12373]},{"file": 66,"line": 307,"col": 4,"fields": [12374,12375,12376]},{"file": 66,"line": 316,"col": 4,"fields": [12377]},{"file": 66,"line": 320,"col": 4,"fields": [12378,12379,12380]},{"file": 66,"line": 324,"col": 4,"fields": [12381,12382]},{"file": 66,"line": 328,"col": 4,"fields": [12383,12384,12385]},{"file": 66,"line": 336,"col": 4,"fields": [12386,12387,12388,12389]},{"file": 66,"line": 340,"col": 4,"fields": [12390,12391]},{"file": 66,"line": 348,"col": 4,"fields": [12392,12393,12394]},{"file": 66,"line": 352,"col": 4,"fields": [12395,12396,12397]},{"file": 66,"line": 360,"col": 4,"fields": [12398,12399,12400,12401]},{"file": 66,"line": 364,"col": 4,"fields": [12402,12403,12404,12405,12406]},{"file": 66,"line": 368,"col": 4,"fields": [12407]},{"file": 66,"line": 372,"col": 4,"fields": [12408,12409]},{"file": 66,"line": 404,"col": 4,"fields": [12410,12411,12412]},{"file": 66,"line": 412,"col": 4,"fields": [12413,12414,12415]},{"file": 66,"line": 433,"col": 4,"fields": [12416,12417,12418,12419]},{"file": 66,"line": 441,"col": 4,"fields": [12420,12421,12422,12423]},{"file": 66,"line": 456,"col": 4,"fields": [12424,12425,12426,12427,12428]},{"file": 66,"line": 470,"col": 4,"fields": [12429,12430,12431]},{"file": 66,"line": 474,"col": 4,"fields": [12432,12433,12434]},{"file": 66,"line": 478,"col": 4,"fields": [12435,12436,12437,12438]},{"file": 66,"line": 491,"col": 4,"fields": [12439,12440,12441,12442,12443]},{"file": 66,"line": 505,"col": 4,"fields": [12444]},{"file": 66,"line": 513,"col": 4,"fields": [12445,12446]},{"file": 66,"line": 521,"col": 4,"fields": [12447,12448,12449]},{"file": 66,"line": 525,"col": 4,"fields": [12450,12451,12452,12453]},{"file": 66,"line": 564,"col": 4,"fields": [12454,12455]},{"file": 66,"line": 572,"col": 4,"fields": [12456,12457,12458,12459]},{"file": 66,"line": 576,"col": 4,"fields": [12460]},{"file": 66,"line": 586,"col": 4,"fields": [12461,12462]},{"file": 66,"line": 594,"col": 4,"fields": [12463,12464]},{"file": 66,"line": 622,"col": 4,"fields": [12465,12466,12467,12468]},{"file": 66,"line": 662,"col": 4,"fields": [12469,12470]},{"file": 66,"line": 672,"col": 4,"fields": [12471,12472,12473,12474]},{"file": 66,"line": 693,"col": 4,"fields": [12475,12476,12477,12478,12479]},{"file": 66,"line": 704,"col": 4,"fields": [12480,12481,12482]},{"file": 66,"line": 718,"col": 4,"fields": [12483,12484]},{"file": 66,"line": 728,"col": 4,"docs": " See also `clone` (from the arch-specific include)","fields": [12485,12486,12487,12488,12489]},{"file": 66,"line": 733,"col": 4,"docs": " See also `clone` (from the arch-specific include)","fields": [12490,12491]},{"file": 66,"line": 741,"col": 4,"fields": [12492,12493]},{"file": 66,"line": 745,"col": 4,"fields": [12494,12495,12496]},{"file": 66,"line": 754,"col": 4,"docs": " Can only be called on 32 bit systems. For 64 bit see `lseek`.","fields": [12497,12498,12499,12500]},{"file": 66,"line": 768,"col": 4,"docs": " Can only be called on 64 bit systems. For 32 bit see `llseek`.","fields": [12501,12502,12503]},{"file": 66,"line": 772,"col": 4,"fields": [12504]},{"file": 66,"line": 782,"col": 4,"fields": [12505,12506,12507]},{"file": 66,"line": 786,"col": 4,"fields": [12508,12509]},{"file": 66,"line": 794,"col": 4,"fields": [12510,12511,12512]},{"file": 66,"line": 798,"col": 4,"fields": [12513,12514,12515]},{"file": 66,"line": 818,"col": 4,"fields": [12516,12517,12518,12519,12520]},{"file": 66,"line": 829,"col": 4,"fields": [12521]},{"file": 66,"line": 837,"col": 4,"fields": [12522,12523,12524]},{"file": 66,"line": 841,"col": 4,"fields": [12525,12526,12527]},{"file": 66,"line": 845,"col": 4,"fields": [12528,12529,12530,12531]},{"file": 66,"line": 849,"col": 4,"fields": [12532,12533,12534]},{"file": 66,"line": 894,"col": 4,"fields": [12535,12536]},{"file": 66,"line": 898,"col": 4,"fields": [12537,12538]},{"file": 66,"line": 902,"col": 4,"fields": [12539,12540]},{"file": 66,"line": 906,"col": 4,"fields": [12541,12542]},{"file": 66,"line": 910,"col": 4,"fields": [12543]},{"file": 66,"line": 918,"col": 4,"fields": [12544]},{"file": 66,"line": 926,"col": 4,"fields": [12545,12546]},{"file": 66,"line": 934,"col": 4,"fields": [12547,12548]},{"file": 66,"line": 942,"col": 4,"fields": []},{"file": 66,"line": 950,"col": 4,"fields": []},{"file": 66,"line": 958,"col": 4,"fields": []},{"file": 66,"line": 966,"col": 4,"fields": []},{"file": 66,"line": 974,"col": 4,"fields": [12549]},{"file": 66,"line": 985,"col": 4,"fields": [12550]},{"file": 66,"line": 996,"col": 4,"fields": [12551,12552,12553]},{"file": 66,"line": 1004,"col": 4,"fields": [12554,12555,12556]},{"file": 66,"line": 1012,"col": 4,"fields": [12557,12558,12559]},{"file": 66,"line": 1020,"col": 4,"fields": [12560,12561,12562]},{"file": 66,"line": 1028,"col": 4,"fields": [12563,12564]},{"file": 66,"line": 1036,"col": 4,"fields": [12565,12566]},{"file": 66,"line": 1044,"col": 4,"fields": []},{"file": 66,"line": 1097,"col": 4,"fields": [12567,12568]},{"file": 66,"line": 1105,"col": 4,"fields": [12569,12570]},{"file": 66,"line": 1110,"col": 4,"fields": [12571,12572,12573]},{"file": 66,"line": 1117,"col": 4,"fields": [12574,12575,12576]},{"file": 66,"line": 1124,"col": 4,"fields": [12577,12578,12579]},{"file": 66,"line": 1131,"col": 4,"fields": [12580,12581,12582,12583,12584]},{"file": 66,"line": 1138,"col": 4,"fields": [12585,12586,12587,12588,12589]},{"file": 66,"line": 1145,"col": 4,"fields": [12590,12591,12592]},{"file": 66,"line": 1152,"col": 4,"fields": [12593,12594,12595,12596]},{"file": 66,"line": 1192,"col": 4,"fields": [12597,12598,12599]},{"file": 66,"line": 1199,"col": 4,"fields": [12600,12601,12602]},{"file": 66,"line": 1206,"col": 4,"fields": [12603,12604,12605,12606,12607,12608]},{"file": 66,"line": 1213,"col": 4,"fields": [12609,12610]},{"file": 66,"line": 1220,"col": 4,"fields": [12611,12612,12613]},{"file": 66,"line": 1227,"col": 4,"fields": [12614,12615]},{"file": 66,"line": 1234,"col": 4,"fields": [12616,12617,12618,12619,12620,12621]},{"file": 66,"line": 1241,"col": 4,"fields": [12622,12623,12624,12625]},{"file": 66,"line": 1261,"col": 4,"fields": [12626,12627,12628,12629]},{"file": 66,"line": 1268,"col": 4,"fields": [12630,12631,12632]},{"file": 66,"line": 1275,"col": 4,"fields": [12633,12634,12635,12636]},{"file": 66,"line": 1290,"col": 4,"fields": [12637,12638]},{"file": 66,"line": 1298,"col": 4,"fields": [12639,12640]},{"file": 66,"line": 1306,"col": 4,"fields": [12641,12642,12643,12644]},{"file": 66,"line": 1314,"col": 4,"fields": [12645,12646,12647,12648,12649]},{"file": 66,"line": 1328,"col": 4,"fields": [12650,12651,12652]},{"file": 66,"line": 1332,"col": 4,"fields": [12653,12654,12655]},{"file": 66,"line": 1336,"col": 4,"fields": [12656,12657,12658]},{"file": 66,"line": 1340,"col": 4,"fields": [12659,12660,12661,12662]},{"file": 66,"line": 1344,"col": 4,"fields": [12663,12664,12665,12666]},{"file": 66,"line": 1348,"col": 4,"fields": [12667,12668,12669,12670]},{"file": 66,"line": 1352,"col": 4,"fields": [12671,12672,12673,12674,12675]},{"file": 66,"line": 1356,"col": 4,"fields": [12676,12677,12678,12679,12680]},{"file": 66,"line": 1360,"col": 4,"fields": [12681,12682,12683,12684,12685]},{"file": 66,"line": 1364,"col": 4,"fields": [12686,12687]},{"file": 66,"line": 1368,"col": 4,"fields": [12688,12689]},{"file": 66,"line": 1372,"col": 4,"fields": [12690,12691]},{"file": 66,"line": 1376,"col": 4,"fields": []},{"file": 66,"line": 1380,"col": 4,"fields": [12692,12693,12694]},{"file": 66,"line": 1387,"col": 4,"fields": []},{"file": 66,"line": 1391,"col": 4,"fields": [12695]},{"file": 66,"line": 1395,"col": 4,"fields": [12696,12697,12698,12699]},{"file": 66,"line": 1399,"col": 4,"fields": [12700,12701,12702,12703]},{"file": 66,"line": 1403,"col": 4,"fields": [12704,12705,12706,12707,12708]},{"file": 66,"line": 1415,"col": 4,"fields": [12709,12710]},{"file": 66,"line": 1419,"col": 4,"fields": [12711,12712]},{"file": 66,"line": 1423,"col": 4},{"file": 66,"line": 1428,"col": 4,"fields": [12713,12714]},{"file": 66,"line": 1432,"col": 4,"fields": [12715,12716,12717,12718]},{"file": 66,"line": 1436,"col": 4,"fields": [12719]},{"file": 66,"line": 1440,"col": 4,"fields": [12720,12721]},{"file": 66,"line": 1444,"col": 4,"fields": [12722,12723]},{"file": 66,"line": 1448,"col": 4,"fields": [12724,12725]},{"file": 66,"line": 1452,"col": 4,"fields": [12726]},{"file": 66,"line": 1456,"col": 4,"fields": [12727,12728]},{"file": 66,"line": 1460,"col": 4,"fields": [12729,12730,12731,12732,12733]},{"file": 66,"line": 1464,"col": 4,"fields": [12734,12735,12736,12737]},{"file": 66,"line": 1468,"col": 4,"fields": [12738,12739]},{"file": 66,"line": 1472,"col": 4,"fields": [12740,12741]},{"file": 66,"line": 1476,"col": 4,"fields": [12742,12743]},{"file": 66,"line": 1480,"col": 4,"fields": [12744,12745,12746]},{"file": 66,"line": 1484,"col": 4,"fields": [12747,12748,12749]},{"file": 66,"line": 1488,"col": 4,"fields": [12750,12751,12752]},{"file": 66,"line": 1492,"col": 4,"fields": [12753,12754,12755,12756,12757,12758]},{"file": 66,"line": 1504,"col": 4,"fields": [12759,12760,12761]},{"file": 66,"line": 1508,"col": 4,"fields": []},{"file": 66,"line": 1512,"col": 4,"fields": [12762]},{"file": 66,"line": 1516,"col": 4,"fields": [12763]},{"file": 66,"line": 1520,"col": 4,"fields": [12764]},{"file": 66,"line": 1524,"col": 4,"fields": [12765,12766,12767,12768,12769]},{"file": 66,"line": 1528,"col": 4,"fields": [12770,12771]},{"file": 66,"line": 1548,"col": 4,"fields": [12772,12773,12774]},{"file": 66,"line": 1552,"col": 4,"fields": [12775,12776]},{"file": 66,"line": 1556,"col": 4,"fields": [12777,12778,12779]},{"file": 66,"line": 1565,"col": 4,"fields": [12780,12781,12782,12783]},{"file": 66,"line": 1575,"col": 4,"fields": [12784,12785,12786,12787,12788,12789]},{"file": 66,"line": 1587,"col": 4,"fields": [12790,12791,12792,12793,12794,12795]},{"file": 66,"line": 1599,"col": 4,"fields": [12796,12797,12798,12799]},{"file": 66,"line": 1658,"col": 4,"fields": [12800,12801,12802,12803,12804]},{"file": 66,"line": 1675,"col": 4},{"file": 66,"line": 1681,"col": 4},{"file": 66,"line": 1682,"col": 4},{"file": 66,"line": 1683,"col": 4},{"file": 66,"line": 1684,"col": 4},{"file": 66,"line": 1685,"col": 4},{"file": 66,"line": 1687,"col": 4},{"file": 66,"line": 1688,"col": 4},{"file": 66,"line": 1689,"col": 4},{"file": 66,"line": 1693,"col": 4,"docs": " Largest hardware address length e.g. a mac address is a type of hardware address"},{"file": 66,"line": 1695,"col": 4},{"file": 66,"line": 1696,"col": 4},{"file": 66,"line": 1697,"col": 4},{"file": 66,"line": 1699,"col": 4},{"file": 66,"line": 1734,"col": 4},{"file": 66,"line": 1757,"col": 4},{"file": 66,"line": 1777,"col": 4},{"file": 66,"line": 1798,"col": 4},{"file": 66,"line": 1800,"col": 4},{"file": 66,"line": 1801,"col": 4},{"file": 66,"line": 1802,"col": 4},{"file": 66,"line": 1803,"col": 4},{"file": 66,"line": 1805,"col": 4},{"file": 66,"line": 1834,"col": 4},{"file": 66,"line": 1842,"col": 4},{"file": 66,"line": 1871,"col": 4},{"file": 66,"line": 2003,"col": 4},{"file": 66,"line": 2005,"col": 4},{"file": 66,"line": 2022,"col": 4},{"file": 66,"line": 2028,"col": 4},{"file": 66,"line": 2034,"col": 4},{"file": 66,"line": 2046,"col": 4},{"file": 66,"line": 2122,"col": 4},{"file": 66,"line": 2174,"col": 4},{"file": 66,"line": 2226,"col": 4},{"file": 66,"line": 2506,"col": 4},{"file": 66,"line": 2513,"col": 4},{"file": 66,"line": 2546,"col": 4},{"file": 66,"line": 2548,"col": 4},{"file": 66,"line": 2604,"col": 4,"docs": " IPv6 socket options"},{"file": 66,"line": 2690,"col": 4},{"file": 66,"line": 2714,"col": 4},{"file": 66,"line": 2726,"col": 4},{"file": 66,"line": 2784,"col": 4},{"file": 66,"line": 2808,"col": 4},{"file": 66,"line": 2823,"col": 4},{"file": 66,"line": 2825,"col": 4},{"file": 66,"line": 2864,"col": 4},{"file": 66,"line": 2870,"col": 4},{"file": 66,"line": 2907,"col": 4},{"file": 66,"line": 2913,"col": 4},{"file": 66,"line": 2915,"col": 4},{"file": 66,"line": 2948,"col": 4},{"file": 66,"line": 3004,"col": 4},{"file": 66,"line": 3009,"col": 4},{"file": 66,"line": 3017,"col": 4},{"file": 66,"line": 3026,"col": 4,"docs": " NSIG is the total number of signals defined. As signal numbers are sequential, NSIG is one greater than the largest defined signal number."},{"file": 66,"line": 3028,"col": 4},{"file": 66,"line": 3030,"col": 4},{"file": 66,"line": 3031,"col": 4},{"file": 66,"line": 3033,"col": 4},{"file": 66,"line": 3055,"col": 4,"docs": " Renamed from `sigaction` to `Sigaction` to avoid conflict with the syscall."},{"file": 66,"line": 3068,"col": 4},{"file": 66,"line": 3070,"col": 4},{"file": 66,"line": 3075,"col": 4},{"file": 66,"line": 3100,"col": 4},{"file": 66,"line": 3101,"col": 4},{"file": 66,"line": 3102,"col": 4},{"file": 66,"line": 3104,"col": 4},{"file": 66,"line": 3155,"col": 4},{"file": 66,"line": 3160,"col": 4},{"file": 66,"line": 3165,"col": 4},{"file": 66,"line": 3174,"col": 4},{"file": 66,"line": 3185,"col": 4},{"file": 66,"line": 3186,"col": 4},{"file": 66,"line": 3187,"col": 4},{"file": 66,"line": 3188,"col": 4},{"file": 66,"line": 3190,"col": 4},{"file": 66,"line": 3191,"col": 4},{"file": 66,"line": 3192,"col": 4},{"file": 66,"line": 3194,"col": 4},{"file": 66,"line": 3195,"col": 4},{"file": 66,"line": 3196,"col": 4},{"file": 66,"line": 3198,"col": 4},{"file": 66,"line": 3199,"col": 4},{"file": 66,"line": 3200,"col": 4},{"file": 66,"line": 3202,"col": 4},{"file": 66,"line": 3214,"col": 4},{"file": 66,"line": 3268,"col": 4},{"file": 66,"line": 3273,"col": 4},{"file": 66,"line": 3278,"col": 4},{"file": 66,"line": 3284,"col": 4},{"file": 66,"line": 3292,"col": 4},{"file": 66,"line": 3304,"col": 4},{"file": 66,"line": 3311,"col": 4},{"file": 66,"line": 3312,"col": 4},{"file": 66,"line": 3313,"col": 4},{"file": 66,"line": 3315,"col": 4,"fields": [12805]},{"file": 66,"line": 3323,"col": 4},{"file": 66,"line": 3328,"col": 4},{"file": 66,"line": 3334,"col": 4},{"file": 66,"line": 3335,"col": 4},{"file": 66,"line": 3336,"col": 4},{"file": 66,"line": 3338,"col": 4},{"file": 66,"line": 3352,"col": 4},{"file": 66,"line": 3401,"col": 4},{"file": 66,"line": 3416,"col": 4},{"file": 66,"line": 3431,"col": 4},{"file": 66,"line": 3432,"col": 4},{"file": 66,"line": 3433,"col": 4},{"file": 66,"line": 3434,"col": 4},{"file": 66,"line": 3435,"col": 4},{"file": 66,"line": 3436,"col": 4},{"file": 66,"line": 3437,"col": 4},{"file": 66,"line": 3442,"col": 4,"docs": " io_context is polled"},{"file": 66,"line": 3445,"col": 4,"docs": " SQ poll thread"},{"file": 66,"line": 3448,"col": 4,"docs": " sq_thread_cpu is valid"},{"file": 66,"line": 3451,"col": 4,"docs": " app defines CQ size"},{"file": 66,"line": 3454,"col": 4,"docs": " clamp SQ/CQ ring sizes"},{"file": 66,"line": 3457,"col": 4,"docs": " attach to existing wq"},{"file": 66,"line": 3460,"col": 4,"docs": " start with ring disabled"},{"file": 66,"line": 3462,"col": 4},{"file": 66,"line": 3491,"col": 4,"docs": " needs io_uring_enter wakeup"},{"file": 66,"line": 3494,"col": 4,"docs": " kernel has cqes waiting beyond the cq ring"},{"file": 66,"line": 3496,"col": 4},{"file": 66,"line": 3506,"col": 4},{"file": 66,"line": 3522,"col": 4},{"file": 66,"line": 3536,"col": 4,"docs": " use fixed fileset"},{"file": 66,"line": 3539,"col": 4,"docs": " issue after inflight IO"},{"file": 66,"line": 3542,"col": 4,"docs": " links next sqe"},{"file": 66,"line": 3545,"col": 4,"docs": " like LINK, but stronger"},{"file": 66,"line": 3548,"col": 4,"docs": " always go async"},{"file": 66,"line": 3551,"col": 4,"docs": " select buffer from buf_group"},{"file": 66,"line": 3553,"col": 4},{"file": 66,"line": 3599,"col": 4},{"file": 66,"line": 3602,"col": 4},{"file": 66,"line": 3605,"col": 4},{"file": 66,"line": 3624,"col": 4,"docs": " If set, the upper 16 bits are the buffer ID"},{"file": 66,"line": 3626,"col": 4},{"file": 66,"line": 3627,"col": 4},{"file": 66,"line": 3628,"col": 4},{"file": 66,"line": 3631,"col": 4},{"file": 66,"line": 3632,"col": 4},{"file": 66,"line": 3635,"col": 4},{"file": 66,"line": 3653,"col": 4},{"file": 66,"line": 3659,"col": 4},{"file": 66,"line": 3661,"col": 4},{"file": 66,"line": 3672,"col": 4},{"file": 66,"line": 3685,"col": 4},{"file": 66,"line": 3702,"col": 4,"docs": " io_uring_restriction->opcode values"},{"file": 66,"line": 3718,"col": 4},{"file": 66,"line": 3726,"col": 4},{"file": 66,"line": 3728,"col": 4},{"file": 66,"line": 3729,"col": 4},{"file": 66,"line": 3730,"col": 4},{"file": 66,"line": 3731,"col": 4},{"file": 66,"line": 3732,"col": 4},{"file": 66,"line": 3733,"col": 4},{"file": 66,"line": 3734,"col": 4},{"file": 66,"line": 3735,"col": 4},{"file": 66,"line": 3736,"col": 4},{"file": 66,"line": 3737,"col": 4},{"file": 66,"line": 3738,"col": 4},{"file": 66,"line": 3739,"col": 4},{"file": 66,"line": 3741,"col": 4},{"file": 66,"line": 3743,"col": 4},{"file": 66,"line": 3744,"col": 4},{"file": 66,"line": 3745,"col": 4},{"file": 66,"line": 3746,"col": 4},{"file": 66,"line": 3747,"col": 4},{"file": 66,"line": 3748,"col": 4},{"file": 66,"line": 3750,"col": 4},{"file": 66,"line": 3757,"col": 4,"docs": " Renamed to `Statx` to not conflict with the `statx` function."},{"file": 66,"line": 3819,"col": 4},{"file": 66,"line": 3830,"col": 4},{"file": 66,"line": 3832,"col": 4},{"file": 66,"line": 3868,"col": 4},{"file": 66,"line": 3874,"col": 4},{"file": 66,"line": 3879,"col": 4},{"file": 66,"line": 3887,"col": 4},{"file": 66,"line": 3895,"col": 4,"docs": " why fastopen failed from client perspective"},{"file": 66,"line": 3907,"col": 4,"docs": " for TCP_INFO socket option"},{"file": 66,"line": 3908,"col": 4},{"file": 66,"line": 3909,"col": 4},{"file": 66,"line": 3911,"col": 4,"docs": " ECN was negociated at TCP session init"},{"file": 66,"line": 3913,"col": 4,"docs": " we received at least one packet with ECT"},{"file": 66,"line": 3915,"col": 4,"docs": " SYN-ACK acked data in SYN sent or rcvd"},{"file": 66,"line": 3917,"col": 4},{"file": 66,"line": 3918,"col": 4},{"file": 66,"line": 3924,"col": 4},{"file": 66,"line": 3935,"col": 4},{"file": 66,"line": 3936,"col": 4},{"file": 66,"line": 3937,"col": 4},{"file": 66,"line": 3938,"col": 4},{"file": 66,"line": 3940,"col": 4},{"file": 66,"line": 3941,"col": 4},{"file": 66,"line": 3942,"col": 4},{"file": 66,"line": 3943,"col": 4},{"file": 66,"line": 3944,"col": 4},{"file": 66,"line": 3945,"col": 4},{"file": 66,"line": 3946,"col": 4},{"file": 66,"line": 3947,"col": 4},{"file": 66,"line": 3948,"col": 4},{"file": 66,"line": 3949,"col": 4},{"file": 66,"line": 3950,"col": 4},{"file": 66,"line": 3951,"col": 4},{"file": 66,"line": 3952,"col": 4},{"file": 66,"line": 3953,"col": 4},{"file": 66,"line": 3955,"col": 4},{"file": 66,"line": 3956,"col": 4},{"file": 66,"line": 3957,"col": 4},{"file": 66,"line": 3958,"col": 4},{"file": 66,"line": 3959,"col": 4},{"file": 66,"line": 3960,"col": 4},{"file": 66,"line": 3961,"col": 4},{"file": 66,"line": 3962,"col": 4},{"file": 66,"line": 3963,"col": 4},{"file": 66,"line": 3964,"col": 4},{"file": 66,"line": 3965,"col": 4},{"file": 66,"line": 3966,"col": 4},{"file": 66,"line": 3967,"col": 4},{"file": 66,"line": 3968,"col": 4},{"file": 66,"line": 3970,"col": 4},{"file": 66,"line": 3994,"col": 4},{"file": 66,"line": 3995,"col": 4},{"file": 66,"line": 3996,"col": 4},{"file": 66,"line": 3998,"col": 4},{"file": 66,"line": 4000,"col": 4},{"file": 66,"line": 4001,"col": 4},{"file": 66,"line": 4002,"col": 4},{"file": 66,"line": 4003,"col": 4},{"file": 66,"line": 4004,"col": 4},{"file": 66,"line": 4005,"col": 4},{"file": 66,"line": 4006,"col": 4},{"file": 66,"line": 4007,"col": 4},{"file": 66,"line": 4008,"col": 4},{"file": 66,"line": 4009,"col": 4},{"file": 66,"line": 4010,"col": 4},{"file": 66,"line": 4011,"col": 4},{"file": 66,"line": 4012,"col": 4},{"file": 66,"line": 4013,"col": 4},{"file": 66,"line": 4014,"col": 4},{"file": 66,"line": 4015,"col": 4},{"file": 66,"line": 4016,"col": 4},{"file": 66,"line": 4017,"col": 4},{"file": 66,"line": 4018,"col": 4},{"file": 66,"line": 4019,"col": 4},{"file": 66,"line": 4020,"col": 4},{"file": 66,"line": 4021,"col": 4},{"file": 66,"line": 4022,"col": 4},{"file": 66,"line": 4023,"col": 4},{"file": 66,"line": 4024,"col": 4},{"file": 66,"line": 4025,"col": 4},{"file": 66,"line": 4026,"col": 4},{"file": 66,"line": 4027,"col": 4},{"file": 66,"line": 4028,"col": 4},{"file": 66,"line": 4029,"col": 4},{"file": 66,"line": 4030,"col": 4},{"file": 66,"line": 4031,"col": 4},{"file": 66,"line": 4033,"col": 4},{"file": 66,"line": 4114,"col": 4},{"file": 66,"line": 4115,"col": 4},{"file": 66,"line": 4116,"col": 4},{"file": 66,"line": 4117,"col": 4},{"file": 66,"line": 4118,"col": 4},{"file": 66,"line": 4119,"col": 4},{"file": 66,"line": 4120,"col": 4},{"file": 66,"line": 4121,"col": 4},{"file": 66,"line": 4122,"col": 4},{"file": 66,"line": 4123,"col": 4},{"file": 66,"line": 4124,"col": 4},{"file": 66,"line": 4125,"col": 4},{"file": 66,"line": 4126,"col": 4},{"file": 66,"line": 4127,"col": 4},{"file": 66,"line": 4128,"col": 4},{"file": 66,"line": 4130,"col": 4},{"file": 66,"line": 4131,"col": 4},{"file": 66,"line": 4132,"col": 4},{"file": 66,"line": 4133,"col": 4},{"file": 66,"line": 4134,"col": 4},{"file": 66,"line": 4135,"col": 4},{"file": 66,"line": 4136,"col": 4},{"file": 66,"line": 4137,"col": 4},{"file": 66,"line": 4138,"col": 4},{"file": 66,"line": 4139,"col": 4},{"file": 66,"line": 4140,"col": 4},{"file": 66,"line": 4142,"col": 4},{"file": 66,"line": 4143,"col": 4},{"file": 66,"line": 4144,"col": 4},{"file": 66,"line": 4145,"col": 4},{"file": 66,"line": 4146,"col": 4},{"file": 66,"line": 4147,"col": 4},{"file": 66,"line": 4148,"col": 4},{"file": 66,"line": 4149,"col": 4},{"file": 66,"line": 4150,"col": 4},{"file": 66,"line": 4151,"col": 4},{"file": 66,"line": 4152,"col": 4},{"file": 66,"line": 4154,"col": 4},{"file": 66,"line": 4155,"col": 4},{"file": 66,"line": 4156,"col": 4},{"file": 66,"line": 4157,"col": 4},{"file": 66,"line": 4158,"col": 4},{"file": 66,"line": 4159,"col": 4},{"file": 66,"line": 4160,"col": 4},{"file": 66,"line": 4161,"col": 4},{"file": 66,"line": 4162,"col": 4},{"file": 66,"line": 4164,"col": 4},{"file": 66,"line": 4171,"col": 4},{"file": 66,"line": 4182,"col": 4},{"file": 66,"line": 4183,"col": 4},{"file": 66,"line": 4185,"col": 4},{"file": 66,"line": 4194,"col": 4},{"file": 66,"line": 4215,"col": 4},{"file": 66,"line": 4278,"col": 4},{"file": 66,"line": 4280,"col": 4},{"file": 66,"line": 4288,"col": 4},{"file": 66,"line": 4295,"col": 4},{"file": 66,"line": 4319,"col": 4},{"file": 66,"line": 4346,"col": 4,"docs": " The timespec struct used by the kernel."},{"file": 66,"line": 4351,"col": 4},{"file": 66,"line": 4356,"col": 4},{"file": 66,"line": 4380,"col": 4},{"file": 66,"line": 4387,"col": 4},{"file": 66,"line": 4394,"col": 4},{"file": 66,"line": 4402,"col": 4},{"file": 66,"line": 4411,"col": 4},{"file": 66,"line": 4415,"col": 4},{"file": 66,"line": 4416,"col": 4},{"file": 66,"line": 4418,"col": 4},{"file": 66,"line": 4428,"col": 4},{"file": 66,"line": 4430,"col": 4},{"file": 66,"line": 4431,"col": 4},{"file": 66,"line": 4433,"col": 4},{"file": 66,"line": 4434,"col": 4},{"file": 66,"line": 4436,"col": 4},{"file": 66,"line": 4437,"col": 4},{"file": 66,"line": 4439,"col": 4},{"file": 66,"line": 4440,"col": 4},{"file": 66,"line": 4442,"col": 4},{"file": 66,"line": 4443,"col": 4},{"file": 66,"line": 4445,"col": 4},{"file": 66,"line": 4446,"col": 4},{"file": 66,"line": 4448,"col": 4},{"file": 66,"line": 4449,"col": 4},{"file": 66,"line": 4451,"col": 4},{"file": 66,"line": 4452,"col": 4},{"file": 66,"line": 4454,"col": 4},{"file": 66,"line": 4458,"col": 4},{"file": 66,"line": 4460,"col": 4},{"file": 66,"line": 4613,"col": 4},{"file": 66,"line": 4630,"col": 4},{"file": 66,"line": 4698,"col": 4,"docs": " It is request message."},{"file": 66,"line": 4701,"col": 4,"docs": " Multipart message, terminated by NLMSG_DONE"},{"file": 66,"line": 4704,"col": 4,"docs": " Reply with ack, with zero or error code"},{"file": 66,"line": 4707,"col": 4,"docs": " Echo this request"},{"file": 66,"line": 4710,"col": 4,"docs": " Dump was inconsistent due to sequence change"},{"file": 66,"line": 4713,"col": 4,"docs": " Dump was filtered as requested"},{"file": 66,"line": 4718,"col": 4,"docs": " specify tree root"},{"file": 66,"line": 4721,"col": 4,"docs": " return all matching"},{"file": 66,"line": 4724,"col": 4,"docs": " atomic GET"},{"file": 66,"line": 4725,"col": 4},{"file": 66,"line": 4730,"col": 4,"docs": " Override existing"},{"file": 66,"line": 4733,"col": 4,"docs": " Do not touch, if it exists"},{"file": 66,"line": 4736,"col": 4,"docs": " Create, if it does not exist"},{"file": 66,"line": 4739,"col": 4,"docs": " Add to end of list"},{"file": 66,"line": 4744,"col": 4,"docs": " Do not delete recursively"},{"file": 66,"line": 4749,"col": 4,"docs": " request was capped"},{"file": 66,"line": 4752,"col": 4,"docs": " extended ACK TVLs were included"},{"file": 66,"line": 4754,"col": 4},{"file": 66,"line": 4858,"col": 4,"docs": " Netlink message header Specified in RFC 3549 Section 2.3.2"},{"file": 66,"line": 4875,"col": 4},{"file": 66,"line": 4892,"col": 4},{"file": 66,"line": 4902,"col": 4},{"file": 66,"line": 4979,"col": 4},{"file": 66,"line": 4988,"col": 4},{"file": 66,"line": 5053,"col": 4},{"file": 66,"line": 5118,"col": 4},{"file": 66,"line": 5243,"col": 4},{"file": 76,"line": 13,"col": 4},{"file": 76,"line": 979,"col": 4},{"file": 76,"line": 1056,"col": 4},{"file": 76,"line": 1089,"col": 4,"fields": [12806]},{"file": 76,"line": 1107,"col": 4,"fields": [12807,12808,12809]},{"file": 76,"line": 1125,"col": 4,"fields": [12810,12811,12812,12813,12814,12815]},{"file": 76,"line": 1150,"col": 4,"fields": [12816,12817,12818,12819]},{"file": 76,"line": 1154,"col": 4,"fields": [12820,12821,12822,12823]},{"file": 76,"line": 1158,"col": 4,"fields": [12824,12825,12826,12827]},{"file": 76,"line": 1167,"col": 4,"fields": [12828,12829,12830,12831]},{"file": 76,"line": 1176,"col": 4,"fields": [12832,12833,12834,12835,12836]},{"file": 76,"line": 1181,"col": 4,"fields": [12837,12838,12839,12840,12841]},{"file": 76,"line": 1192,"col": 4,"docs": " Poll masks previously used to comprise of 16 bits in the flags union of a SQE, but were then extended to comprise of 32 bits in order to make room for additional option flags. To ensure that the correct bits of poll masks are consistently and properly read across multiple kernel versions, poll masks are enforced to be little-endian. https://www.spinics.net/lists/io-uring/msg02848.html","fields": [12842]},{"file": 76,"line": 1196,"col": 4,"fields": [12843,12844,12845,12846,12847]},{"file": 76,"line": 1209,"col": 4,"fields": [12848,12849,12850,12851]},{"file": 76,"line": 1219,"col": 4,"fields": [12852,12853,12854,12855,12856]},{"file": 76,"line": 1229,"col": 4,"fields": [12857,12858,12859,12860]},{"file": 76,"line": 1234,"col": 4,"fields": [12861,12862,12863,12864]},{"file": 76,"line": 1239,"col": 4,"fields": [12865,12866,12867,12868,12869]},{"file": 76,"line": 1250,"col": 4,"fields": [12870,12871]},{"file": 76,"line": 1268,"col": 4,"fields": [12872,12873,12874,12875]},{"file": 76,"line": 1278,"col": 4,"fields": [12876,12877,12878]},{"file": 76,"line": 1296,"col": 4,"fields": [12879,12880,12881]},{"file": 76,"line": 1305,"col": 4,"fields": [12882,12883,12884]},{"file": 76,"line": 1314,"col": 4,"fields": [12885,12886]},{"file": 76,"line": 1321,"col": 4,"fields": [12887,12888,12889,12890,12891]},{"file": 76,"line": 1332,"col": 4,"fields": [12892,12893,12894,12895,12896]},{"file": 76,"line": 1356,"col": 4,"fields": [12897,12898,12899,12900,12901,12902]},{"file": 76,"line": 1368,"col": 4,"fields": [12903,12904,12905]},{"file": 76,"line": 1377,"col": 4,"fields": [12906,12907,12908]},{"file": 76,"line": 1385,"col": 4,"fields": [12909,12910,12911,12912,12913,12914]},{"file": 76,"line": 1405,"col": 4,"fields": [12915,12916,12917,12918]},{"file": 76,"line": 1415,"col": 4,"fields": [12919,12920,12921,12922]},{"file": 76,"line": 1424,"col": 4,"fields": [12923,12924,12925,12926]},{"file": 76,"line": 1440,"col": 4,"fields": [12927,12928,12929,12930,12931,12932]},{"file": 66,"line": 7,"col": 0},{"file": 66,"line": 8,"col": 0},{"file": 66,"line": 9,"col": 0},{"file": 66,"line": 10,"col": 0},{"file": 66,"line": 11,"col": 0},{"file": 66,"line": 12,"col": 0},{"file": 66,"line": 13,"col": 0},{"file": 66,"line": 14,"col": 0},{"file": 66,"line": 15,"col": 0},{"file": 66,"line": 16,"col": 0},{"file": 66,"line": 17,"col": 0},{"file": 66,"line": 18,"col": 0},{"file": 66,"line": 19,"col": 0},{"file": 66,"line": 20,"col": 0},{"file": 66,"line": 21,"col": 0},{"file": 66,"line": 29,"col": 0},{"file": 66,"line": 34,"col": 0},{"file": 66,"line": 152,"col": 0},{"file": 66,"line": 160,"col": 0,"fields": [12933]},{"file": 66,"line": 167,"col": 0,"fields": [12934]},{"file": 66,"line": 174,"col": 0,"fields": [12935]},{"file": 66,"line": 857,"col": 0},{"file": 66,"line": 860,"col": 0},{"file": 66,"line": 1095,"col": 0},{"file": 66,"line": 3357,"col": 0},{"file": 66,"line": 4424,"col": 0,"fields": [12936]},{"file": 27,"line": 40,"col": 8},{"file": 27,"line": 42,"col": 8},{"file": 27,"line": 110,"col": 8},{"file": 27,"line": 115,"col": 8,"docs": " TODO copy elision / named return values so that the threads referencing *Loop have the correct pointer value. https://github.com/ziglang/zig/issues/2761 and https://github.com/ziglang/zig/issues/2765","fields": [12937]},{"file": 27,"line": 129,"col": 8,"docs": " After initialization, call run(). TODO copy elision / named return values so that the threads referencing *Loop have the correct pointer value. https://github.com/ziglang/zig/issues/2761 and https://github.com/ziglang/zig/issues/2765","fields": [12938]},{"file": 27,"line": 139,"col": 8,"docs": " After initialization, call run(). This is the same as `initThreadPool` using `Thread.getCpuCount` to determine the thread pool size. TODO copy elision / named return values so that the threads referencing *Loop have the correct pointer value. https://github.com/ziglang/zig/issues/2761 and https://github.com/ziglang/zig/issues/2765","fields": [12939]},{"file": 27,"line": 148,"col": 8,"docs": " Thread count is the total thread count. The thread pool size will be max(thread_count - 1, 0)","fields": [12940,12941]},{"file": 27,"line": 197,"col": 8,"fields": [12942]},{"file": 27,"line": 468,"col": 8,"docs": " resume_node must live longer than the anyframe that it holds a reference to. flags must contain EPOLLET","fields": [12943,12944,12945,12946]},{"file": 27,"line": 480,"col": 8,"fields": [12947,12948,12949,12950,12951]},{"file": 27,"line": 489,"col": 8,"fields": [12952,12953]},{"file": 27,"line": 494,"col": 8,"fields": [12954,12955,12956]},{"file": 27,"line": 546,"col": 8,"fields": [12957,12958]},{"file": 27,"line": 558,"col": 8,"fields": [12959,12960]},{"file": 27,"line": 570,"col": 8,"fields": [12961,12962]},{"file": 27,"line": 583,"col": 8,"fields": [12963,12964,12965,12966]},{"file": 27,"line": 606,"col": 8,"docs": " resume_node must live longer than the anyframe that it holds a reference to.","fields": [12967,12968,12969,12970,12971]},{"file": 27,"line": 621,"col": 8,"fields": [12972,12973,12974]},{"file": 27,"line": 686,"col": 8,"docs": " Bring your own linked list node. This means it can't fail.","fields": [12975,12976]},{"file": 27,"line": 692,"col": 8,"fields": [12977,12978]},{"file": 27,"line": 698,"col": 8,"fields": [12979]},{"file": 27,"line": 729,"col": 8,"docs": " Runs the provided function asynchronously. The function's frame is allocated with `allocator` and freed when the function returns. `func` must return void and it can be an async function. Yields to the event loop, running the function on the next tick.","fields": [12980,12981,12982,12983]},{"file": 27,"line": 757,"col": 8,"docs": " Yielding lets the event loop run, starting any unstarted async operations. Note that async operations automatically start when a function yields for any other reason, for example, when async I/O is performed. This function is intended to be used only when CPU bound tasks would be waiting in the event loop but never get started because no async I/O is performed.","fields": [12984]},{"file": 27,"line": 770,"col": 8,"docs": " If the build is multi-threaded and there is an event loop, then it calls `yield`. Otherwise, does nothing.","fields": []},{"file": 27,"line": 779,"col": 8,"docs": " call finishOneEvent when done","fields": [12985]},{"file": 27,"line": 783,"col": 8,"fields": [12986]},{"file": 27,"line": 826,"col": 8,"fields": [12987,12988]},{"file": 27,"line": 950,"col": 8,"docs": " ------- I/0 APIs -------","fields": [12989,12990,12991,12992,12993]},{"file": 27,"line": 983,"col": 8,"fields": [12994,12995,12996,12997]},{"file": 27,"line": 994,"col": 8,"docs": " Performs an async `os.open` using a separate thread.","fields": [12998,12999,13000,13001]},{"file": 27,"line": 1015,"col": 8,"docs": " Performs an async `os.opent` using a separate thread.","fields": [13002,13003,13004,13005,13006]},{"file": 27,"line": 1037,"col": 8,"docs": " Performs an async `os.close` using a separate thread.","fields": [13007,13008]},{"file": 27,"line": 1051,"col": 8,"docs": " Performs an async `os.read` using a separate thread. `fd` must block and not return EAGAIN.","fields": [13009,13010,13011,13012]},{"file": 27,"line": 1084,"col": 8,"docs": " Performs an async `os.readv` using a separate thread. `fd` must block and not return EAGAIN.","fields": [13013,13014,13015,13016]},{"file": 27,"line": 1117,"col": 8,"docs": " Performs an async `os.pread` using a separate thread. `fd` must block and not return EAGAIN.","fields": [13017,13018,13019,13020,13021]},{"file": 27,"line": 1151,"col": 8,"docs": " Performs an async `os.preadv` using a separate thread. `fd` must block and not return EAGAIN.","fields": [13022,13023,13024,13025,13026]},{"file": 27,"line": 1185,"col": 8,"docs": " Performs an async `os.write` using a separate thread. `fd` must block and not return EAGAIN.","fields": [13027,13028,13029,13030]},{"file": 27,"line": 1218,"col": 8,"docs": " Performs an async `os.writev` using a separate thread. `fd` must block and not return EAGAIN.","fields": [13031,13032,13033,13034]},{"file": 27,"line": 1251,"col": 8,"docs": " Performs an async `os.pwrite` using a separate thread. `fd` must block and not return EAGAIN.","fields": [13035,13036,13037,13038,13039]},{"file": 27,"line": 1285,"col": 8,"docs": " Performs an async `os.pwritev` using a separate thread. `fd` must block and not return EAGAIN.","fields": [13040,13041,13042,13043,13044]},{"file": 27,"line": 1317,"col": 8,"fields": [13045,13046,13047,13048,13049,13050]},{"file": 27,"line": 1338,"col": 8,"fields": [13051,13052,13053,13054,13055,13056]},{"file": 27,"line": 1359,"col": 8,"docs": " Performs an async `os.faccessatZ` using a separate thread. `fd` must block and not return EAGAIN.","fields": [13057,13058,13059,13060,13061]},{"file": 27,"line": 1565,"col": 8},{"file": 27,"line": 105,"col": 4},{"file": 27,"line": 106,"col": 4},{"file": 27,"line": 204,"col": 4},{"file": 27,"line": 208,"col": 4},{"file": 27,"line": 210,"col": 4,"fields": [13062,13063]},{"file": 27,"line": 449,"col": 4,"fields": [13064]},{"file": 27,"line": 635,"col": 4,"fields": [13065]},{"file": 27,"line": 844,"col": 4},{"file": 27,"line": 1386,"col": 4,"fields": [13066]},{"file": 27,"line": 1479,"col": 4,"fields": [13067,13068]},{"file": 27,"line": 1485,"col": 4,"fields": [13069,13070]},{"file": 27,"line": 1491,"col": 4,"fields": [13071]},{"file": 27,"line": 1544,"col": 4},{"file": 27,"line": 1554,"col": 4},{"file": 27,"line": 1559,"col": 4},{"file": 67,"line": 20,"col": 4},{"file": 67,"line": 21,"col": 4},{"file": 67,"line": 22,"col": 4},{"file": 67,"line": 23,"col": 4},{"file": 67,"line": 24,"col": 4},{"file": 67,"line": 25,"col": 4},{"file": 67,"line": 26,"col": 4},{"file": 67,"line": 27,"col": 4},{"file": 67,"line": 28,"col": 4},{"file": 67,"line": 29,"col": 4},{"file": 67,"line": 31,"col": 4},{"file": 67,"line": 33,"col": 4},{"file": 67,"line": 46,"col": 4},{"file": 67,"line": 61,"col": 4,"fields": [13072,13073]},{"file": 67,"line": 129,"col": 4},{"file": 67,"line": 131,"col": 4,"fields": [13074,13075,13076]},{"file": 67,"line": 139,"col": 4,"fields": [13077,13078,13079,13080]},{"file": 67,"line": 144,"col": 4,"fields": [13081,13082,13083,13084]},{"file": 67,"line": 155,"col": 4},{"file": 67,"line": 161,"col": 4,"docs": " A Zig wrapper around `NtDeviceIoControlFile` and `NtFsControlFile` syscalls. It implements similar behavior to `DeviceIoControl` and is meant to serve as a direct substitute for that call. TODO work out if we need to expose other arguments to the underlying syscalls.","fields": [13085,13086,13087,13088]},{"file": 67,"line": 214,"col": 4,"fields": [13089,13090,13091]},{"file": 67,"line": 225,"col": 4},{"file": 67,"line": 227,"col": 4,"fields": [13092,13093,13094]},{"file": 67,"line": 235,"col": 4},{"file": 67,"line": 240,"col": 4,"docs": " Call RtlGenRandom() instead of CryptGetRandom() on Windows https://github.com/rust-lang-nursery/rand/issues/111 https://bugzilla.mozilla.org/show_bug.cgi?id=504270","fields": [13095]},{"file": 67,"line": 257,"col": 4},{"file": 67,"line": 263,"col": 4,"fields": [13096,13097]},{"file": 67,"line": 267,"col": 4,"fields": [13098,13099,13100]},{"file": 67,"line": 279,"col": 4,"fields": [13101,13102,13103,13104]},{"file": 67,"line": 307,"col": 4},{"file": 67,"line": 309,"col": 4,"fields": [13105,13106,13107,13108]},{"file": 67,"line": 324,"col": 4},{"file": 67,"line": 326,"col": 4,"fields": [13109,13110,13111,13112]},{"file": 67,"line": 339,"col": 4},{"file": 67,"line": 346,"col": 4,"fields": [13113,13114,13115,13116,13117]},{"file": 67,"line": 375,"col": 4},{"file": 67,"line": 382,"col": 4,"fields": [13118,13119,13120,13121]},{"file": 67,"line": 412,"col": 4,"fields": [13122]},{"file": 67,"line": 416,"col": 4,"fields": [13123]},{"file": 67,"line": 420,"col": 4},{"file": 67,"line": 428,"col": 4,"docs": " If buffer's length exceeds what a Windows DWORD integer can hold, it will be broken into multiple non-atomic reads.","fields": [13124,13125,13126,13127]},{"file": 67,"line": 503,"col": 4},{"file": 67,"line": 511,"col": 4,"fields": [13128,13129,13130,13131]},{"file": 67,"line": 595,"col": 4},{"file": 67,"line": 606,"col": 4,"fields": [13132]},{"file": 67,"line": 632,"col": 4},{"file": 67,"line": 638,"col": 4,"docs": " The result is a slice of `buffer`, indexed from 0.","fields": [13133]},{"file": 67,"line": 660,"col": 4},{"file": 67,"line": 675,"col": 4,"docs": " Needs either: - `SeCreateSymbolicLinkPrivilege` privilege or - Developer mode on Windows 10 otherwise fails with `error.AccessDenied`. In which case `sym_link_path` may still be created on the file system but will lack reparse processing data applied to it.","fields": [13134,13135,13136,13137]},{"file": 67,"line": 729,"col": 4},{"file": 67,"line": 737,"col": 4,"fields": [13138,13139,13140]},{"file": 67,"line": 831,"col": 4},{"file": 67,"line": 842,"col": 4},{"file": 67,"line": 847,"col": 4,"fields": [13141,13142]},{"file": 67,"line": 907,"col": 4},{"file": 67,"line": 909,"col": 4,"fields": [13143,13144,13145]},{"file": 67,"line": 915,"col": 4,"fields": [13146,13147,13148]},{"file": 67,"line": 925,"col": 4},{"file": 67,"line": 930,"col": 4,"fields": [13149]},{"file": 67,"line": 940,"col": 4},{"file": 67,"line": 943,"col": 4,"docs": " The SetFilePointerEx function with the `dwMoveMethod` parameter set to `FILE_BEGIN`.","fields": [13150,13151]},{"file": 67,"line": 958,"col": 4,"docs": " The SetFilePointerEx function with the `dwMoveMethod` parameter set to `FILE_CURRENT`.","fields": [13152,13153]},{"file": 67,"line": 969,"col": 4,"docs": " The SetFilePointerEx function with the `dwMoveMethod` parameter set to `FILE_END`.","fields": [13154,13155]},{"file": 67,"line": 980,"col": 4,"docs": " The SetFilePointerEx function with parameters to get the current offset.","fields": [13156]},{"file": 67,"line": 994,"col": 4,"fields": [13157,13158]},{"file": 67,"line": 1042,"col": 4},{"file": 67,"line": 1052,"col": 4,"docs": " Specifies how to format volume path in the result of `GetFinalPathNameByHandle`. Defaults to DOS volume names."},{"file": 67,"line": 1066,"col": 4,"docs": " Returns canonical (normalized) path of handle. Use `GetFinalPathNameByHandleFormat` to specify whether the path is meant to include NT or DOS volume name (e.g., `\\Device\\HarddiskVolume0\\foo.txt` versus `C:\\foo.txt`). If DOS volume name format is selected, note that this function does *not* prepend `\\\\?\\` prefix to the resultant path.","fields": [13159,13160,13161]},{"file": 67,"line": 1202,"col": 4},{"file": 67,"line": 1204,"col": 4,"fields": [13162,13163,13164]},{"file": 67,"line": 1219,"col": 4},{"file": 67,"line": 1221,"col": 4,"fields": [13165]},{"file": 67,"line": 1231,"col": 4},{"file": 67,"line": 1237,"col": 4,"fields": [13166]},{"file": 67,"line": 1242,"col": 4,"fields": [13167]},{"file": 67,"line": 1255,"col": 4,"fields": [13168,13169]},{"file": 67,"line": 1269,"col": 4,"fields": []},{"file": 67,"line": 1306,"col": 4,"docs": " Microsoft requires WSAStartup to be called to initialize, or else WSASocketW will return WSANOTINITIALISED. Since this is a standard library, we do not have the luxury of putting initialization code anywhere, because we would not want to pay the cost of calling WSAStartup if there ended up being no networking. Also, if Zig code is used as a library, Zig is not in charge of the start code, and we couldn't put in any initialization code even if we wanted to. The documentation for WSAStartup mentions that there must be a matching WSACleanup call. It is not possible for the Zig Standard Library to honor this for the same reason - there is nowhere to put deinitialization code. So, API users of the zig std lib have two options:  * (recommended) The simple, cross-platform way: just call `WSASocketW`    and don't worry about it. Zig will call WSAStartup() in a thread-safe    manner and never deinitialize networking. This is ideal for an    application which has the capability to do networking.  * The getting-your-hands-dirty way: call `WSAStartup()` before doing    networking, so that the error handling code for WSANOTINITIALISED never    gets run, which then allows the application or library to call `WSACleanup()`.    This could make sense for a library, which has init and deinit    functions for the whole library's lifetime.","fields": [13170,13171,13172,13173,13174,13175]},{"file": 67,"line": 1350,"col": 4,"fields": [13176,13177,13178]},{"file": 67,"line": 1354,"col": 4,"fields": [13179,13180]},{"file": 67,"line": 1358,"col": 4,"fields": [13181]},{"file": 67,"line": 1368,"col": 4,"fields": [13182,13183,13184]},{"file": 67,"line": 1373,"col": 4,"fields": [13185,13186,13187]},{"file": 67,"line": 1377,"col": 4,"fields": [13188,13189,13190]},{"file": 67,"line": 1381,"col": 4,"fields": [13191,13192,13193]},{"file": 67,"line": 1394,"col": 4,"fields": [13194,13195,13196,13197,13198,13199]},{"file": 67,"line": 1404,"col": 4,"fields": [13200,13201,13202,13203,13204,13205]},{"file": 67,"line": 1415,"col": 4,"fields": [13206,13207,13208]},{"file": 67,"line": 1419,"col": 4,"fields": [13209,13210,13211,13212,13213,13214]},{"file": 67,"line": 1450,"col": 4,"fields": [13215,13216,13217]},{"file": 67,"line": 1460,"col": 4},{"file": 67,"line": 1462,"col": 4,"fields": [13218,13219]},{"file": 67,"line": 1470,"col": 4},{"file": 67,"line": 1472,"col": 4,"fields": [13220,13221,13222,13223]},{"file": 67,"line": 1480,"col": 4,"fields": [13224,13225,13226]},{"file": 67,"line": 1484,"col": 4},{"file": 67,"line": 1486,"col": 4,"fields": [13227,13228]},{"file": 67,"line": 1494,"col": 4,"fields": [13229,13230]},{"file": 67,"line": 1507,"col": 4,"fields": [13231,13232]},{"file": 67,"line": 1516,"col": 4},{"file": 67,"line": 1518,"col": 4,"fields": []},{"file": 67,"line": 1522,"col": 4,"fields": [13233]},{"file": 67,"line": 1526,"col": 4},{"file": 67,"line": 1531,"col": 4,"fields": [13234,13235,13236]},{"file": 67,"line": 1542,"col": 4},{"file": 67,"line": 1549,"col": 4,"fields": [13237,13238,13239,13240,13241,13242,13243,13244,13245,13246]},{"file": 67,"line": 1584,"col": 4},{"file": 67,"line": 1589,"col": 4,"fields": [13247]},{"file": 67,"line": 1600,"col": 4,"fields": [13248]},{"file": 67,"line": 1604,"col": 4,"fields": []},{"file": 67,"line": 1613,"col": 4,"fields": []},{"file": 67,"line": 1622,"col": 4,"fields": [13249,13250,13251,13252]},{"file": 67,"line": 1626,"col": 4,"fields": [13253,13254,13255]},{"file": 67,"line": 1630,"col": 4,"fields": [13256]},{"file": 67,"line": 1634,"col": 4,"fields": [13257]},{"file": 67,"line": 1638,"col": 4},{"file": 67,"line": 1640,"col": 4,"fields": [13258]},{"file": 67,"line": 1653,"col": 4},{"file": 67,"line": 1655,"col": 4,"fields": [13259,13260,13261,13262]},{"file": 67,"line": 1669,"col": 4},{"file": 67,"line": 1674,"col": 4,"fields": [13263,13264,13265,13266,13267,13268,13269,13270,13271,13272]},{"file": 67,"line": 1707,"col": 4},{"file": 67,"line": 1711,"col": 4,"fields": [13273,13274,13275,13276,13277]},{"file": 67,"line": 1727,"col": 4,"fields": []},{"file": 67,"line": 1745,"col": 4,"fields": []},{"file": 67,"line": 1754,"col": 4,"docs": " A file time is a 64-bit value that represents the number of 100-nanosecond intervals that have elapsed since 12:00 A.M. January 1, 1601 Coordinated Universal Time (UTC). This function returns the number of nanoseconds since the canonical epoch, which is the POSIX one (Jan 01, 1970 AD).","fields": [13278]},{"file": 67,"line": 1759,"col": 4,"fields": [13279]},{"file": 67,"line": 1764,"col": 4,"fields": [13280]},{"file": 67,"line": 1770,"col": 4,"docs": " Converts a number of nanoseconds since the POSIX epoch to a Windows FILETIME.","fields": [13281]},{"file": 67,"line": 1778,"col": 4},{"file": 67,"line": 1788,"col": 4,"docs": " The error type for `removeDotDirsSanitized`"},{"file": 67,"line": 1795,"col": 4,"docs": " Removes '.' and '..' path components from a \"sanitized relative path\". A \"sanitized path\" is one where:    1) all forward slashes have been replaced with back slashes    2) all repeating back slashes have been collapsed    3) the path is a relative one (does not start with a back slash)","fields": [13282,13283]},{"file": 67,"line": 1848,"col": 4,"docs": " Normalizes a Windows path with the following steps:     1) convert all forward slashes to back slashes     2) collapse duplicate back slashes     3) remove '.' and '..' directory parts Returns the length of the new path.","fields": [13284,13285]},{"file": 67,"line": 1864,"col": 4,"docs": " Same as `sliceToPrefixedFileW` but accepts a pointer to a null-terminated path.","fields": [13286]},{"file": 67,"line": 1870,"col": 4,"docs": " Converts the path `s` to WTF16, null-terminated. If the path is absolute, it will get NT-style prefix `\\??\\` prepended automatically.","fields": [13287]},{"file": 67,"line": 1918,"col": 4,"docs": " Assumes an absolute path.","fields": [13288]},{"file": 67,"line": 1950,"col": 4,"docs": " Loads a Winsock extension function in runtime specified by a GUID.","fields": [13289,13290,13291]},{"file": 67,"line": 1983,"col": 4,"docs": " Call this when you made a windows DLL call or something that does SetLastError and you get an unexpected error.","fields": [13292]},{"file": 67,"line": 2004,"col": 4,"fields": [13293]},{"file": 67,"line": 2010,"col": 4,"docs": " Call this when you made a windows NtDll call and you get an unexpected status.","fields": [13294]},{"file": 67,"line": 2018,"col": 4,"fields": [13295,13296]},{"file": 67,"line": 2025,"col": 4,"fields": [13297,13298]},{"file": 67,"line": 2033,"col": 4},{"file": 67,"line": 2034,"col": 4},{"file": 67,"line": 2035,"col": 4},{"file": 67,"line": 2036,"col": 4},{"file": 67,"line": 2039,"col": 4,"docs": " The standard input device. Initially, this is the console input buffer, CONIN$."},{"file": 67,"line": 2042,"col": 4,"docs": " The standard output device. Initially, this is the active console screen buffer, CONOUT$."},{"file": 67,"line": 2045,"col": 4,"docs": " The standard error device. Initially, this is the active console screen buffer, CONOUT$."},{"file": 67,"line": 2047,"col": 4},{"file": 67,"line": 2052,"col": 4},{"file": 67,"line": 2053,"col": 4},{"file": 67,"line": 2054,"col": 4},{"file": 67,"line": 2055,"col": 4},{"file": 67,"line": 2056,"col": 4},{"file": 67,"line": 2057,"col": 4},{"file": 67,"line": 2058,"col": 4},{"file": 67,"line": 2059,"col": 4},{"file": 67,"line": 2060,"col": 4},{"file": 67,"line": 2061,"col": 4},{"file": 67,"line": 2062,"col": 4},{"file": 67,"line": 2063,"col": 4},{"file": 67,"line": 2064,"col": 4},{"file": 67,"line": 2065,"col": 4},{"file": 67,"line": 2066,"col": 4},{"file": 67,"line": 2067,"col": 4},{"file": 67,"line": 2068,"col": 4},{"file": 67,"line": 2069,"col": 4},{"file": 67,"line": 2070,"col": 4},{"file": 67,"line": 2071,"col": 4},{"file": 67,"line": 2072,"col": 4},{"file": 67,"line": 2073,"col": 4},{"file": 67,"line": 2074,"col": 4},{"file": 67,"line": 2075,"col": 4},{"file": 67,"line": 2076,"col": 4},{"file": 67,"line": 2077,"col": 4},{"file": 67,"line": 2078,"col": 4},{"file": 67,"line": 2079,"col": 4},{"file": 67,"line": 2080,"col": 4},{"file": 67,"line": 2081,"col": 4},{"file": 67,"line": 2082,"col": 4},{"file": 67,"line": 2083,"col": 4},{"file": 67,"line": 2084,"col": 4},{"file": 67,"line": 2085,"col": 4},{"file": 67,"line": 2086,"col": 4},{"file": 67,"line": 2087,"col": 4},{"file": 67,"line": 2088,"col": 4},{"file": 67,"line": 2089,"col": 4},{"file": 67,"line": 2090,"col": 4},{"file": 67,"line": 2091,"col": 4},{"file": 67,"line": 2092,"col": 4},{"file": 67,"line": 2093,"col": 4},{"file": 67,"line": 2094,"col": 4},{"file": 67,"line": 2095,"col": 4},{"file": 67,"line": 2096,"col": 4},{"file": 67,"line": 2097,"col": 4},{"file": 67,"line": 2098,"col": 4},{"file": 67,"line": 2100,"col": 4},{"file": 67,"line": 2101,"col": 4},{"file": 67,"line": 2102,"col": 4},{"file": 67,"line": 2104,"col": 4},{"file": 67,"line": 2106,"col": 4},{"file": 67,"line": 2107,"col": 4},{"file": 67,"line": 2109,"col": 4},{"file": 67,"line": 2110,"col": 4},{"file": 67,"line": 2111,"col": 4},{"file": 67,"line": 2112,"col": 4},{"file": 67,"line": 2113,"col": 4},{"file": 67,"line": 2114,"col": 4},{"file": 67,"line": 2115,"col": 4},{"file": 67,"line": 2116,"col": 4},{"file": 67,"line": 2117,"col": 4},{"file": 67,"line": 2118,"col": 4},{"file": 67,"line": 2119,"col": 4},{"file": 67,"line": 2120,"col": 4},{"file": 67,"line": 2121,"col": 4},{"file": 67,"line": 2122,"col": 4},{"file": 67,"line": 2123,"col": 4},{"file": 67,"line": 2124,"col": 4},{"file": 67,"line": 2125,"col": 4},{"file": 67,"line": 2126,"col": 4},{"file": 67,"line": 2127,"col": 4},{"file": 67,"line": 2128,"col": 4},{"file": 67,"line": 2129,"col": 4},{"file": 67,"line": 2130,"col": 4},{"file": 67,"line": 2131,"col": 4},{"file": 67,"line": 2132,"col": 4},{"file": 67,"line": 2133,"col": 4},{"file": 67,"line": 2134,"col": 4},{"file": 67,"line": 2135,"col": 4},{"file": 67,"line": 2136,"col": 4},{"file": 67,"line": 2137,"col": 4},{"file": 67,"line": 2138,"col": 4},{"file": 67,"line": 2139,"col": 4},{"file": 67,"line": 2140,"col": 4},{"file": 67,"line": 2141,"col": 4},{"file": 67,"line": 2142,"col": 4},{"file": 67,"line": 2143,"col": 4},{"file": 67,"line": 2144,"col": 4},{"file": 67,"line": 2145,"col": 4},{"file": 67,"line": 2146,"col": 4},{"file": 67,"line": 2147,"col": 4},{"file": 67,"line": 2148,"col": 4},{"file": 67,"line": 2149,"col": 4},{"file": 67,"line": 2150,"col": 4},{"file": 67,"line": 2151,"col": 4},{"file": 67,"line": 2152,"col": 4},{"file": 67,"line": 2153,"col": 4},{"file": 67,"line": 2154,"col": 4},{"file": 67,"line": 2155,"col": 4},{"file": 67,"line": 2156,"col": 4},{"file": 67,"line": 2157,"col": 4},{"file": 67,"line": 2158,"col": 4},{"file": 67,"line": 2159,"col": 4},{"file": 67,"line": 2160,"col": 4},{"file": 67,"line": 2161,"col": 4},{"file": 67,"line": 2162,"col": 4},{"file": 67,"line": 2163,"col": 4},{"file": 67,"line": 2164,"col": 4},{"file": 67,"line": 2165,"col": 4},{"file": 67,"line": 2166,"col": 4},{"file": 67,"line": 2167,"col": 4},{"file": 67,"line": 2168,"col": 4},{"file": 67,"line": 2170,"col": 4},{"file": 67,"line": 2171,"col": 4},{"file": 67,"line": 2172,"col": 4},{"file": 67,"line": 2173,"col": 4},{"file": 67,"line": 2174,"col": 4},{"file": 67,"line": 2175,"col": 4},{"file": 67,"line": 2176,"col": 4},{"file": 67,"line": 2177,"col": 4},{"file": 67,"line": 2178,"col": 4},{"file": 67,"line": 2179,"col": 4},{"file": 67,"line": 2180,"col": 4},{"file": 67,"line": 2181,"col": 4},{"file": 67,"line": 2182,"col": 4},{"file": 67,"line": 2183,"col": 4},{"file": 67,"line": 2184,"col": 4},{"file": 67,"line": 2185,"col": 4},{"file": 67,"line": 2186,"col": 4},{"file": 67,"line": 2187,"col": 4},{"file": 67,"line": 2188,"col": 4},{"file": 67,"line": 2189,"col": 4},{"file": 67,"line": 2190,"col": 4},{"file": 67,"line": 2191,"col": 4},{"file": 67,"line": 2192,"col": 4},{"file": 67,"line": 2193,"col": 4},{"file": 67,"line": 2194,"col": 4},{"file": 67,"line": 2197,"col": 4,"docs": " https://docs.microsoft.com/en-us/windows-hardware/drivers/kernel/buffer-descriptions-for-i-o-control-codes"},{"file": 67,"line": 2204,"col": 4},{"file": 67,"line": 2205,"col": 4},{"file": 67,"line": 2206,"col": 4},{"file": 67,"line": 2209,"col": 4,"docs": " https://docs.microsoft.com/en-us/windows-hardware/drivers/kernel/defining-i-o-control-codes","fields": [13299,13300,13301,13302]},{"file": 67,"line": 2216,"col": 4},{"file": 67,"line": 2218,"col": 4},{"file": 67,"line": 2220,"col": 4},{"file": 67,"line": 2232,"col": 4},{"file": 67,"line": 2240,"col": 4},{"file": 67,"line": 2248,"col": 4},{"file": 67,"line": 2252,"col": 4},{"file": 67,"line": 2256,"col": 4},{"file": 67,"line": 2260,"col": 4},{"file": 67,"line": 2264,"col": 4},{"file": 67,"line": 2268,"col": 4},{"file": 67,"line": 2272,"col": 4},{"file": 67,"line": 2276,"col": 4},{"file": 67,"line": 2281,"col": 4},{"file": 67,"line": 2288,"col": 4},{"file": 67,"line": 2297,"col": 4},{"file": 67,"line": 2376,"col": 4},{"file": 67,"line": 2389,"col": 4},{"file": 67,"line": 2396,"col": 4},{"file": 67,"line": 2399,"col": 4},{"file": 67,"line": 2400,"col": 4},{"file": 67,"line": 2401,"col": 4},{"file": 67,"line": 2402,"col": 4},{"file": 67,"line": 2403,"col": 4},{"file": 67,"line": 2404,"col": 4},{"file": 67,"line": 2405,"col": 4},{"file": 67,"line": 2406,"col": 4},{"file": 67,"line": 2407,"col": 4},{"file": 67,"line": 2408,"col": 4},{"file": 67,"line": 2409,"col": 4},{"file": 67,"line": 2410,"col": 4},{"file": 67,"line": 2411,"col": 4},{"file": 67,"line": 2412,"col": 4},{"file": 67,"line": 2413,"col": 4},{"file": 67,"line": 2414,"col": 4},{"file": 67,"line": 2415,"col": 4},{"file": 67,"line": 2416,"col": 4},{"file": 67,"line": 2417,"col": 4},{"file": 67,"line": 2418,"col": 4},{"file": 67,"line": 2419,"col": 4},{"file": 67,"line": 2420,"col": 4},{"file": 67,"line": 2422,"col": 4},{"file": 67,"line": 2435,"col": 4},{"file": 67,"line": 2441,"col": 4,"docs": " Return the normalized drive name. This is the default."},{"file": 67,"line": 2444,"col": 4,"docs": " Return the opened file name (not normalized)."},{"file": 67,"line": 2447,"col": 4,"docs": " Return the path with the drive letter. This is the default."},{"file": 67,"line": 2450,"col": 4,"docs": " Return the path with a volume GUID path instead of the drive name."},{"file": 67,"line": 2453,"col": 4,"docs": " Return the path with no drive information."},{"file": 67,"line": 2456,"col": 4,"docs": " Return the path with the volume device path."},{"file": 67,"line": 2458,"col": 4},{"file": 67,"line": 2464,"col": 4},{"file": 67,"line": 2465,"col": 4},{"file": 67,"line": 2466,"col": 4},{"file": 67,"line": 2468,"col": 4},{"file": 67,"line": 2469,"col": 4},{"file": 67,"line": 2471,"col": 4},{"file": 67,"line": 2472,"col": 4},{"file": 67,"line": 2474,"col": 4},{"file": 67,"line": 2475,"col": 4},{"file": 67,"line": 2477,"col": 4},{"file": 67,"line": 2478,"col": 4},{"file": 67,"line": 2479,"col": 4},{"file": 67,"line": 2480,"col": 4},{"file": 67,"line": 2482,"col": 4},{"file": 67,"line": 2483,"col": 4},{"file": 67,"line": 2484,"col": 4},{"file": 67,"line": 2486,"col": 4},{"file": 67,"line": 2487,"col": 4},{"file": 67,"line": 2488,"col": 4},{"file": 67,"line": 2489,"col": 4},{"file": 67,"line": 2490,"col": 4},{"file": 67,"line": 2491,"col": 4},{"file": 67,"line": 2492,"col": 4},{"file": 67,"line": 2493,"col": 4},{"file": 67,"line": 2494,"col": 4},{"file": 67,"line": 2497,"col": 4},{"file": 67,"line": 2498,"col": 4},{"file": 67,"line": 2499,"col": 4},{"file": 67,"line": 2500,"col": 4},{"file": 67,"line": 2501,"col": 4},{"file": 67,"line": 2502,"col": 4},{"file": 67,"line": 2503,"col": 4},{"file": 67,"line": 2506,"col": 4},{"file": 67,"line": 2507,"col": 4},{"file": 67,"line": 2508,"col": 4},{"file": 67,"line": 2509,"col": 4},{"file": 67,"line": 2510,"col": 4},{"file": 67,"line": 2511,"col": 4},{"file": 67,"line": 2512,"col": 4},{"file": 67,"line": 2513,"col": 4},{"file": 67,"line": 2514,"col": 4},{"file": 67,"line": 2515,"col": 4},{"file": 67,"line": 2516,"col": 4},{"file": 67,"line": 2517,"col": 4},{"file": 67,"line": 2518,"col": 4},{"file": 67,"line": 2519,"col": 4},{"file": 67,"line": 2521,"col": 4},{"file": 67,"line": 2522,"col": 4},{"file": 67,"line": 2523,"col": 4},{"file": 67,"line": 2524,"col": 4},{"file": 67,"line": 2525,"col": 4},{"file": 67,"line": 2526,"col": 4},{"file": 67,"line": 2527,"col": 4},{"file": 67,"line": 2528,"col": 4},{"file": 67,"line": 2529,"col": 4},{"file": 67,"line": 2530,"col": 4},{"file": 67,"line": 2531,"col": 4},{"file": 67,"line": 2532,"col": 4},{"file": 67,"line": 2533,"col": 4},{"file": 67,"line": 2534,"col": 4},{"file": 67,"line": 2535,"col": 4},{"file": 67,"line": 2536,"col": 4},{"file": 67,"line": 2537,"col": 4},{"file": 67,"line": 2538,"col": 4},{"file": 67,"line": 2539,"col": 4},{"file": 67,"line": 2540,"col": 4},{"file": 67,"line": 2542,"col": 4},{"file": 67,"line": 2543,"col": 4},{"file": 67,"line": 2544,"col": 4},{"file": 67,"line": 2545,"col": 4},{"file": 67,"line": 2546,"col": 4},{"file": 67,"line": 2548,"col": 4},{"file": 67,"line": 2549,"col": 4},{"file": 67,"line": 2550,"col": 4},{"file": 67,"line": 2551,"col": 4},{"file": 67,"line": 2552,"col": 4},{"file": 67,"line": 2553,"col": 4},{"file": 67,"line": 2554,"col": 4},{"file": 67,"line": 2555,"col": 4},{"file": 67,"line": 2556,"col": 4},{"file": 67,"line": 2557,"col": 4},{"file": 67,"line": 2558,"col": 4},{"file": 67,"line": 2559,"col": 4},{"file": 67,"line": 2560,"col": 4},{"file": 67,"line": 2561,"col": 4},{"file": 67,"line": 2562,"col": 4},{"file": 67,"line": 2563,"col": 4},{"file": 67,"line": 2564,"col": 4},{"file": 67,"line": 2565,"col": 4},{"file": 67,"line": 2566,"col": 4},{"file": 67,"line": 2569,"col": 4},{"file": 67,"line": 2570,"col": 4},{"file": 67,"line": 2572,"col": 4},{"file": 67,"line": 2573,"col": 4},{"file": 67,"line": 2575,"col": 4},{"file": 67,"line": 2582,"col": 4},{"file": 67,"line": 2603,"col": 4},{"file": 67,"line": 2604,"col": 4},{"file": 67,"line": 2605,"col": 4},{"file": 67,"line": 2606,"col": 4},{"file": 67,"line": 2607,"col": 4},{"file": 67,"line": 2608,"col": 4},{"file": 67,"line": 2609,"col": 4},{"file": 67,"line": 2610,"col": 4},{"file": 67,"line": 2611,"col": 4},{"file": 67,"line": 2612,"col": 4},{"file": 67,"line": 2613,"col": 4},{"file": 67,"line": 2614,"col": 4},{"file": 67,"line": 2615,"col": 4},{"file": 67,"line": 2616,"col": 4},{"file": 67,"line": 2618,"col": 4},{"file": 67,"line": 2620,"col": 4},{"file": 67,"line": 2622,"col": 4},{"file": 67,"line": 2623,"col": 4},{"file": 67,"line": 2624,"col": 4},{"file": 67,"line": 2625,"col": 4},{"file": 67,"line": 2626,"col": 4},{"file": 67,"line": 2628,"col": 4},{"file": 67,"line": 2629,"col": 4},{"file": 67,"line": 2631,"col": 4},{"file": 67,"line": 2632,"col": 4},{"file": 67,"line": 2633,"col": 4},{"file": 67,"line": 2634,"col": 4},{"file": 67,"line": 2635,"col": 4},{"file": 67,"line": 2636,"col": 4},{"file": 67,"line": 2638,"col": 4},{"file": 67,"line": 2639,"col": 4},{"file": 67,"line": 2640,"col": 4},{"file": 67,"line": 2642,"col": 4},{"file": 67,"line": 2643,"col": 4},{"file": 67,"line": 2644,"col": 4},{"file": 67,"line": 2645,"col": 4},{"file": 67,"line": 2648,"col": 4},{"file": 67,"line": 2649,"col": 4},{"file": 67,"line": 2650,"col": 4},{"file": 67,"line": 2651,"col": 4},{"file": 67,"line": 2652,"col": 4},{"file": 67,"line": 2653,"col": 4},{"file": 67,"line": 2654,"col": 4},{"file": 67,"line": 2655,"col": 4},{"file": 67,"line": 2658,"col": 4},{"file": 67,"line": 2659,"col": 4},{"file": 67,"line": 2660,"col": 4},{"file": 67,"line": 2661,"col": 4},{"file": 67,"line": 2662,"col": 4},{"file": 67,"line": 2663,"col": 4},{"file": 67,"line": 2664,"col": 4},{"file": 67,"line": 2665,"col": 4},{"file": 67,"line": 2666,"col": 4},{"file": 67,"line": 2667,"col": 4},{"file": 67,"line": 2668,"col": 4},{"file": 67,"line": 2669,"col": 4},{"file": 67,"line": 2670,"col": 4},{"file": 67,"line": 2673,"col": 4},{"file": 67,"line": 2674,"col": 4},{"file": 67,"line": 2675,"col": 4},{"file": 67,"line": 2676,"col": 4},{"file": 67,"line": 2678,"col": 4},{"file": 67,"line": 2679,"col": 4},{"file": 67,"line": 2681,"col": 4},{"file": 67,"line": 2694,"col": 4},{"file": 67,"line": 2699,"col": 4},{"file": 67,"line": 2718,"col": 4},{"file": 67,"line": 2720,"col": 4},{"file": 67,"line": 2721,"col": 4},{"file": 67,"line": 2771,"col": 4},{"file": 67,"line": 2773,"col": 4},{"file": 67,"line": 2774,"col": 4},{"file": 67,"line": 2775,"col": 4},{"file": 67,"line": 2776,"col": 4},{"file": 67,"line": 2777,"col": 4},{"file": 67,"line": 2778,"col": 4},{"file": 67,"line": 2779,"col": 4},{"file": 67,"line": 2780,"col": 4},{"file": 67,"line": 2781,"col": 4},{"file": 67,"line": 2782,"col": 4},{"file": 67,"line": 2783,"col": 4},{"file": 67,"line": 2785,"col": 4},{"file": 67,"line": 2786,"col": 4},{"file": 67,"line": 2787,"col": 4},{"file": 67,"line": 2788,"col": 4},{"file": 67,"line": 2789,"col": 4},{"file": 67,"line": 2790,"col": 4},{"file": 67,"line": 2791,"col": 4},{"file": 67,"line": 2792,"col": 4},{"file": 67,"line": 2793,"col": 4},{"file": 67,"line": 2794,"col": 4},{"file": 67,"line": 2795,"col": 4},{"file": 67,"line": 2797,"col": 4},{"file": 67,"line": 2798,"col": 4},{"file": 67,"line": 2799,"col": 4},{"file": 67,"line": 2800,"col": 4},{"file": 67,"line": 2801,"col": 4},{"file": 67,"line": 2802,"col": 4},{"file": 67,"line": 2803,"col": 4},{"file": 67,"line": 2804,"col": 4},{"file": 67,"line": 2805,"col": 4},{"file": 67,"line": 2806,"col": 4},{"file": 67,"line": 2807,"col": 4},{"file": 67,"line": 2809,"col": 4},{"file": 67,"line": 2816,"col": 4},{"file": 67,"line": 2823,"col": 4},{"file": 67,"line": 2828,"col": 4},{"file": 67,"line": 2833,"col": 4},{"file": 67,"line": 2835,"col": 4},{"file": 67,"line": 2836,"col": 4},{"file": 67,"line": 2844,"col": 4},{"file": 67,"line": 2845,"col": 4},{"file": 67,"line": 2847,"col": 4},{"file": 67,"line": 2849,"col": 4},{"file": 67,"line": 2851,"col": 4},{"file": 67,"line": 2852,"col": 4},{"file": 67,"line": 2853,"col": 4},{"file": 67,"line": 2854,"col": 4},{"file": 67,"line": 2857,"col": 4},{"file": 67,"line": 2859,"col": 4},{"file": 67,"line": 2867,"col": 4},{"file": 67,"line": 2868,"col": 4},{"file": 67,"line": 2869,"col": 4},{"file": 67,"line": 2870,"col": 4},{"file": 67,"line": 2871,"col": 4},{"file": 67,"line": 2873,"col": 4},{"file": 67,"line": 2875,"col": 4},{"file": 67,"line": 2876,"col": 4},{"file": 67,"line": 2877,"col": 4},{"file": 67,"line": 2878,"col": 4},{"file": 67,"line": 2879,"col": 4},{"file": 67,"line": 2880,"col": 4},{"file": 67,"line": 2881,"col": 4},{"file": 67,"line": 2882,"col": 4},{"file": 67,"line": 2884,"col": 4},{"file": 67,"line": 2892,"col": 4},{"file": 67,"line": 2893,"col": 4},{"file": 67,"line": 2894,"col": 4},{"file": 67,"line": 2895,"col": 4},{"file": 67,"line": 2897,"col": 4},{"file": 67,"line": 2902,"col": 4},{"file": 67,"line": 2914,"col": 4},{"file": 67,"line": 2923,"col": 4},{"file": 67,"line": 2924,"col": 4},{"file": 67,"line": 2925,"col": 4},{"file": 67,"line": 2926,"col": 4},{"file": 67,"line": 2928,"col": 4},{"file": 67,"line": 2932,"col": 4},{"file": 67,"line": 2934,"col": 4},{"file": 67,"line": 2935,"col": 4},{"file": 67,"line": 2936,"col": 4},{"file": 67,"line": 2937,"col": 4},{"file": 67,"line": 2938,"col": 4},{"file": 67,"line": 2949,"col": 4,"docs": " > The maximum path of 32,767 characters is approximate, because the \"\\\\?\\\" > prefix may be expanded to a longer string by the system at run time, and > this expansion applies to the total length. from https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file#maximum-path-length-limitation"},{"file": 67,"line": 2951,"col": 4},{"file": 67,"line": 2952,"col": 4},{"file": 67,"line": 2953,"col": 4},{"file": 67,"line": 2954,"col": 4},{"file": 67,"line": 2955,"col": 4},{"file": 67,"line": 2956,"col": 4},{"file": 67,"line": 2957,"col": 4},{"file": 67,"line": 2959,"col": 4},{"file": 67,"line": 2960,"col": 4},{"file": 67,"line": 2961,"col": 4},{"file": 67,"line": 2962,"col": 4},{"file": 67,"line": 2963,"col": 4},{"file": 67,"line": 2965,"col": 4},{"file": 67,"line": 3193,"col": 4},{"file": 67,"line": 3198,"col": 4},{"file": 67,"line": 3200,"col": 4},{"file": 67,"line": 3209,"col": 4},{"file": 67,"line": 3210,"col": 4},{"file": 67,"line": 3211,"col": 4},{"file": 67,"line": 3212,"col": 4},{"file": 67,"line": 3213,"col": 4},{"file": 67,"line": 3214,"col": 4},{"file": 67,"line": 3215,"col": 4},{"file": 67,"line": 3216,"col": 4},{"file": 67,"line": 3218,"col": 4},{"file": 67,"line": 3224,"col": 4},{"file": 67,"line": 3225,"col": 4},{"file": 67,"line": 3226,"col": 4},{"file": 67,"line": 3227,"col": 4},{"file": 67,"line": 3228,"col": 4},{"file": 67,"line": 3230,"col": 4},{"file": 67,"line": 3247,"col": 4,"docs": " Process Environment Block Microsoft documentation of this is incomplete, the fields here are taken from various resources including:  - https://github.com/wine-mirror/wine/blob/1aff1e6a370ee8c0213a0fd4b220d121da8527aa/include/winternl.h#L269  - https://www.geoffchappell.com/studies/windows/win32/ntdll/structs/peb/index.htm"},{"file": 67,"line": 3408,"col": 4,"docs": " The `PEB_LDR_DATA` structure is the main record of what modules are loaded in a process. It is essentially the head of three double-linked lists of `LDR_DATA_TABLE_ENTRY` structures which each represent one loaded module. Microsoft documentation of this is incomplete, the fields here are taken from various resources including:  - https://www.geoffchappell.com/studies/windows/win32/ntdll/structs/peb_ldr_data.htm"},{"file": 67,"line": 3436,"col": 4},{"file": 67,"line": 3467,"col": 4},{"file": 67,"line": 3474,"col": 4},{"file": 67,"line": 3476,"col": 4},{"file": 67,"line": 3492,"col": 4},{"file": 67,"line": 3494,"col": 4},{"file": 67,"line": 3496,"col": 4},{"file": 67,"line": 3501,"col": 4},{"file": 67,"line": 3503,"col": 4},{"file": 67,"line": 3509,"col": 4},{"file": 67,"line": 3514,"col": 4},{"file": 67,"line": 3527,"col": 4},{"file": 67,"line": 3541,"col": 4},{"file": 67,"line": 3558,"col": 4},{"file": 67,"line": 3566,"col": 4},{"file": 67,"line": 3567,"col": 4},{"file": 67,"line": 3569,"col": 4},{"file": 67,"line": 3575,"col": 4},{"file": 67,"line": 3583,"col": 4},{"file": 67,"line": 3585,"col": 4},{"file": 67,"line": 3591,"col": 4},{"file": 67,"line": 3599,"col": 4},{"file": 67,"line": 3606,"col": 4},{"file": 67,"line": 3607,"col": 4},{"file": 67,"line": 3608,"col": 4},{"file": 67,"line": 3609,"col": 4},{"file": 67,"line": 3610,"col": 4},{"file": 67,"line": 3611,"col": 4},{"file": 67,"line": 3613,"col": 4},{"file": 67,"line": 3614,"col": 4},{"file": 67,"line": 3616,"col": 4},{"file": 67,"line": 3627,"col": 4},{"file": 67,"line": 3632,"col": 4},{"file": 67,"line": 3634,"col": 4},{"file": 67,"line": 3644,"col": 4},{"file": 67,"line": 3648,"col": 4},{"file": 67,"line": 3649,"col": 4},{"file": 67,"line": 3650,"col": 4},{"file": 67,"line": 3651,"col": 4},{"file": 67,"line": 3653,"col": 4},{"file": 67,"line": 3654,"col": 4},{"file": 67,"line": 3656,"col": 4},{"file": 67,"line": 3657,"col": 4},{"file": 67,"line": 3658,"col": 4},{"file": 67,"line": 3659,"col": 4},{"file": 67,"line": 3660,"col": 4},{"file": 67,"line": 3662,"col": 4},{"file": 67,"line": 6,"col": 0},{"file": 67,"line": 7,"col": 0},{"file": 67,"line": 8,"col": 0},{"file": 67,"line": 9,"col": 0},{"file": 67,"line": 10,"col": 0},{"file": 67,"line": 11,"col": 0},{"file": 67,"line": 12,"col": 0},{"file": 67,"line": 821,"col": 0,"fields": [13303,13304,13305]},{"file": 67,"line": 1282,"col": 0},{"file": 67,"line": 1448,"col": 0},{"file": 67,"line": 1907,"col": 0,"fields": [13306,13307]},{"file": 67,"line": 1945,"col": 0,"fields": [13308,13309]},{"file": 27,"line": 1598,"col": 20},{"file": 27,"line": 1606,"col": 20},{"file": 27,"line": 1614,"col": 20},{"file": 27,"line": 1622,"col": 20},{"file": 27,"line": 1631,"col": 20},{"file": 27,"line": 1640,"col": 20},{"file": 27,"line": 1649,"col": 20},{"file": 27,"line": 1658,"col": 20},{"file": 27,"line": 1667,"col": 20},{"file": 27,"line": 1677,"col": 20},{"file": 27,"line": 1691,"col": 20},{"file": 30,"line": 540,"col": 8},{"file": 30,"line": 541,"col": 8},{"file": 30,"line": 542,"col": 8},{"file": 30,"line": 543,"col": 8},{"file": 30,"line": 544,"col": 8},{"file": 30,"line": 545,"col": 8},{"file": 30,"line": 546,"col": 8},{"file": 30,"line": 547,"col": 8},{"file": 30,"line": 548,"col": 8},{"file": 30,"line": 549,"col": 8},{"file": 30,"line": 550,"col": 8},{"file": 30,"line": 551,"col": 8},{"file": 30,"line": 553,"col": 8},{"file": 30,"line": 554,"col": 8},{"file": 30,"line": 555,"col": 8},{"file": 30,"line": 556,"col": 8},{"file": 30,"line": 557,"col": 8},{"file": 30,"line": 558,"col": 8},{"file": 30,"line": 559,"col": 8},{"file": 30,"line": 589,"col": 8},{"file": 30,"line": 590,"col": 8},{"file": 30,"line": 591,"col": 8},{"file": 30,"line": 592,"col": 8},{"file": 30,"line": 597,"col": 8,"docs": " stack-like segment"},{"file": 30,"line": 599,"col": 8,"docs": " ETXTBSY"},{"file": 30,"line": 601,"col": 8,"docs": " mark it as an executable"},{"file": 30,"line": 603,"col": 8,"docs": " pages are locked"},{"file": 30,"line": 605,"col": 8,"docs": " don't check for reservations"},{"file": 30,"line": 609,"col": 8},{"file": 30,"line": 610,"col": 8},{"file": 30,"line": 614,"col": 8},{"file": 30,"line": 615,"col": 8},{"file": 30,"line": 616,"col": 8},{"file": 30,"line": 617,"col": 8},{"file": 30,"line": 618,"col": 8},{"file": 30,"line": 619,"col": 8},{"file": 30,"line": 620,"col": 8},{"file": 30,"line": 621,"col": 8},{"file": 30,"line": 622,"col": 8},{"file": 30,"line": 623,"col": 8},{"file": 30,"line": 624,"col": 8},{"file": 30,"line": 625,"col": 8},{"file": 30,"line": 626,"col": 8},{"file": 30,"line": 627,"col": 8},{"file": 30,"line": 628,"col": 8},{"file": 30,"line": 629,"col": 8},{"file": 30,"line": 630,"col": 8},{"file": 30,"line": 631,"col": 8},{"file": 30,"line": 632,"col": 8},{"file": 30,"line": 633,"col": 8},{"file": 30,"line": 634,"col": 8},{"file": 30,"line": 635,"col": 8},{"file": 30,"line": 636,"col": 8},{"file": 31,"line": 253,"col": 4},{"file": 32,"line": 87,"col": 8,"docs": " Returns a string literal of the given level in full text form.","fields": [13310]},{"file": 68,"line": 40,"col": 4,"fields": [13311]},{"file": 68,"line": 44,"col": 4,"fields": [13312,13313]},{"file": 68,"line": 125,"col": 4,"fields": [13314]},{"file": 68,"line": 27,"col": 0},{"file": 68,"line": 28,"col": 0},{"file": 68,"line": 29,"col": 0},{"file": 68,"line": 30,"col": 0},{"file": 68,"line": 31,"col": 0},{"file": 68,"line": 32,"col": 0},{"file": 68,"line": 34,"col": 0},{"file": 68,"line": 35,"col": 0},{"file": 68,"line": 38,"col": 0,"docs": " the minimum alignment for the `*StaticResetEvent` created by wait*()"},{"file": 68,"line": 48,"col": 0,"fields": [13315,13316]},{"file": 69,"line": 19,"col": 4},{"file": 69,"line": 28,"col": 4},{"file": 69,"line": 31,"col": 4,"docs": " After `init`, it is legal to call any other function.","fields": [13317]},{"file": 69,"line": 37,"col": 4,"docs": " This function is not thread-safe. After `deinit`, the only legal function to call is `init`.","fields": [13318]},{"file": 69,"line": 45,"col": 4,"docs": " Sets the event if not already set and wakes up all the threads waiting on the event. It is safe to call `set` multiple times before calling `wait`. However it is illegal to call `set` after `wait` is called until the event is `reset`. This function is thread-safe.","fields": [13319]},{"file": 69,"line": 52,"col": 4,"docs": " Resets the event to its original, unset state. This function is *not* thread-safe. It is equivalent to calling `deinit` followed by `init` but without the possibility of failure.","fields": [13320]},{"file": 69,"line": 60,"col": 4,"docs": " Wait for the event to be set by blocking the current thread. Thread-safe. No spurious wakeups. Upon return from `wait`, the only functions available to be called in `ResetEvent` are `reset` and `deinit`.","fields": [13321]},{"file": 69,"line": 64,"col": 4},{"file": 69,"line": 73,"col": 4,"docs": " Wait for the event to be set by blocking the current thread. A timeout in nanoseconds can be provided as a hint for how long the thread should block on the unset event before returning `TimedWaitResult.timed_out`. Thread-safe. No precision of timing is guaranteed. Upon return from `wait`, the only functions available to be called in `ResetEvent` are `reset` and `deinit`.","fields": [13322,13323]},{"file": 69,"line": 80,"col": 4,"docs": " Apple has decided to not support POSIX semaphores, so we go with a different approach using Grand Central Dispatch. This API is exposed by libSystem so it is guaranteed to be available on all Darwin platforms."},{"file": 69,"line": 121,"col": 4,"docs": " POSIX semaphores must be initialized at runtime because they are allowed to be implemented as file descriptors, in which case initialization would require a syscall to open the fd."},{"file": 69,"line": 8,"col": 0},{"file": 69,"line": 9,"col": 0},{"file": 69,"line": 10,"col": 0},{"file": 69,"line": 11,"col": 0},{"file": 69,"line": 12,"col": 0},{"file": 69,"line": 13,"col": 0},{"file": 69,"line": 14,"col": 0},{"file": 69,"line": 15,"col": 0},{"file": 40,"line": 691,"col": 8},{"file": 40,"line": 689,"col": 4},{"file": 40,"line": 693,"col": 16},{"file": 40,"line": 703,"col": 4,"fields": []},{"file": 40,"line": 711,"col": 4},{"file": 40,"line": 861,"col": 4,"fields": [13324,13325,13326]},{"file": 40,"line": 979,"col": 4,"fields": [13327]},{"file": 40,"line": 983,"col": 4,"fields": [13328]},{"file": 40,"line": 991,"col": 4,"fields": [13329]},{"file": 42,"line": 109,"col": 8,"fields": [13330,13331]},{"file": 42,"line": 121,"col": 8,"fields": [13332]},{"file": 42,"line": 213,"col": 8,"fields": [13333,13334]},{"file": 42,"line": 274,"col": 8,"fields": [13335]},{"file": 42,"line": 316,"col": 8,"fields": [13336,13337]},{"file": 42,"line": 326,"col": 8,"fields": [13338,13339,13340]},{"file": 42,"line": 159,"col": 4,"fields": [13341,13342,13343]},{"file": 42,"line": 178,"col": 4,"fields": [13344]},{"file": 42,"line": 353,"col": 4},{"file": 43,"line": 489,"col": 8},{"file": 43,"line": 499,"col": 8},{"file": 43,"line": 1022,"col": 4,"docs": " Returns the address from the macho file","fields": [13345]},{"file": 43,"line": 1026,"col": 4,"fields": [13346,13347,13348]},{"file": 70,"line": 0,"col": 4},{"file": 70,"line": 1,"col": 4},{"file": 70,"line": 2,"col": 4},{"file": 70,"line": 3,"col": 4},{"file": 70,"line": 4,"col": 4},{"file": 70,"line": 5,"col": 4},{"file": 70,"line": 6,"col": 4},{"file": 70,"line": 7,"col": 4},{"file": 70,"line": 8,"col": 4},{"file": 70,"line": 9,"col": 4},{"file": 70,"line": 10,"col": 4},{"file": 70,"line": 11,"col": 4},{"file": 70,"line": 12,"col": 4},{"file": 70,"line": 13,"col": 4},{"file": 70,"line": 14,"col": 4},{"file": 70,"line": 15,"col": 4},{"file": 70,"line": 16,"col": 4},{"file": 70,"line": 17,"col": 4},{"file": 70,"line": 18,"col": 4},{"file": 70,"line": 19,"col": 4},{"file": 70,"line": 20,"col": 4},{"file": 70,"line": 21,"col": 4},{"file": 70,"line": 22,"col": 4},{"file": 70,"line": 23,"col": 4},{"file": 70,"line": 24,"col": 4},{"file": 70,"line": 25,"col": 4},{"file": 70,"line": 26,"col": 4},{"file": 70,"line": 27,"col": 4},{"file": 70,"line": 28,"col": 4},{"file": 70,"line": 29,"col": 4},{"file": 70,"line": 30,"col": 4},{"file": 70,"line": 31,"col": 4},{"file": 70,"line": 32,"col": 4},{"file": 70,"line": 33,"col": 4},{"file": 70,"line": 34,"col": 4},{"file": 70,"line": 35,"col": 4},{"file": 70,"line": 36,"col": 4},{"file": 70,"line": 37,"col": 4},{"file": 70,"line": 38,"col": 4},{"file": 70,"line": 39,"col": 4},{"file": 70,"line": 40,"col": 4},{"file": 70,"line": 41,"col": 4},{"file": 70,"line": 42,"col": 4},{"file": 70,"line": 43,"col": 4},{"file": 70,"line": 44,"col": 4},{"file": 70,"line": 45,"col": 4},{"file": 70,"line": 46,"col": 4},{"file": 70,"line": 47,"col": 4},{"file": 70,"line": 48,"col": 4},{"file": 70,"line": 51,"col": 4},{"file": 70,"line": 52,"col": 4},{"file": 70,"line": 53,"col": 4},{"file": 70,"line": 54,"col": 4},{"file": 70,"line": 55,"col": 4},{"file": 70,"line": 56,"col": 4},{"file": 70,"line": 57,"col": 4},{"file": 70,"line": 58,"col": 4},{"file": 70,"line": 59,"col": 4},{"file": 70,"line": 60,"col": 4},{"file": 70,"line": 63,"col": 4},{"file": 70,"line": 64,"col": 4},{"file": 70,"line": 65,"col": 4},{"file": 70,"line": 67,"col": 4},{"file": 70,"line": 68,"col": 4},{"file": 70,"line": 71,"col": 4},{"file": 70,"line": 74,"col": 4},{"file": 70,"line": 75,"col": 4},{"file": 70,"line": 76,"col": 4},{"file": 70,"line": 79,"col": 4},{"file": 70,"line": 80,"col": 4},{"file": 70,"line": 81,"col": 4},{"file": 70,"line": 82,"col": 4},{"file": 70,"line": 83,"col": 4},{"file": 70,"line": 87,"col": 4},{"file": 70,"line": 93,"col": 4},{"file": 70,"line": 94,"col": 4},{"file": 70,"line": 99,"col": 4},{"file": 70,"line": 100,"col": 4},{"file": 70,"line": 102,"col": 4},{"file": 70,"line": 103,"col": 4},{"file": 70,"line": 104,"col": 4},{"file": 70,"line": 106,"col": 4},{"file": 70,"line": 107,"col": 4},{"file": 71,"line": 0,"col": 4},{"file": 71,"line": 1,"col": 4},{"file": 71,"line": 2,"col": 4},{"file": 71,"line": 3,"col": 4},{"file": 71,"line": 4,"col": 4},{"file": 71,"line": 5,"col": 4},{"file": 71,"line": 6,"col": 4},{"file": 71,"line": 7,"col": 4},{"file": 71,"line": 8,"col": 4},{"file": 71,"line": 9,"col": 4},{"file": 71,"line": 10,"col": 4},{"file": 71,"line": 11,"col": 4},{"file": 71,"line": 12,"col": 4},{"file": 71,"line": 13,"col": 4},{"file": 71,"line": 14,"col": 4},{"file": 71,"line": 15,"col": 4},{"file": 71,"line": 16,"col": 4},{"file": 71,"line": 17,"col": 4},{"file": 71,"line": 18,"col": 4},{"file": 71,"line": 19,"col": 4},{"file": 71,"line": 20,"col": 4},{"file": 71,"line": 21,"col": 4},{"file": 71,"line": 22,"col": 4},{"file": 71,"line": 23,"col": 4},{"file": 71,"line": 24,"col": 4},{"file": 71,"line": 25,"col": 4},{"file": 71,"line": 26,"col": 4},{"file": 71,"line": 27,"col": 4},{"file": 71,"line": 28,"col": 4},{"file": 71,"line": 29,"col": 4},{"file": 71,"line": 30,"col": 4},{"file": 71,"line": 31,"col": 4},{"file": 71,"line": 32,"col": 4},{"file": 71,"line": 33,"col": 4},{"file": 71,"line": 34,"col": 4},{"file": 71,"line": 35,"col": 4},{"file": 71,"line": 36,"col": 4},{"file": 71,"line": 37,"col": 4},{"file": 71,"line": 38,"col": 4},{"file": 71,"line": 39,"col": 4},{"file": 71,"line": 40,"col": 4},{"file": 71,"line": 41,"col": 4},{"file": 71,"line": 42,"col": 4},{"file": 71,"line": 43,"col": 4},{"file": 71,"line": 44,"col": 4},{"file": 71,"line": 45,"col": 4},{"file": 71,"line": 46,"col": 4},{"file": 71,"line": 47,"col": 4},{"file": 71,"line": 48,"col": 4},{"file": 71,"line": 49,"col": 4},{"file": 71,"line": 50,"col": 4},{"file": 71,"line": 51,"col": 4},{"file": 71,"line": 52,"col": 4},{"file": 71,"line": 53,"col": 4},{"file": 71,"line": 54,"col": 4},{"file": 71,"line": 55,"col": 4},{"file": 71,"line": 56,"col": 4},{"file": 71,"line": 57,"col": 4},{"file": 71,"line": 58,"col": 4},{"file": 71,"line": 59,"col": 4},{"file": 71,"line": 60,"col": 4},{"file": 71,"line": 61,"col": 4},{"file": 71,"line": 64,"col": 4},{"file": 71,"line": 65,"col": 4},{"file": 71,"line": 66,"col": 4},{"file": 71,"line": 67,"col": 4},{"file": 71,"line": 68,"col": 4},{"file": 71,"line": 69,"col": 4},{"file": 71,"line": 70,"col": 4},{"file": 71,"line": 71,"col": 4},{"file": 71,"line": 72,"col": 4},{"file": 71,"line": 73,"col": 4},{"file": 71,"line": 74,"col": 4},{"file": 71,"line": 75,"col": 4},{"file": 71,"line": 76,"col": 4},{"file": 71,"line": 77,"col": 4},{"file": 71,"line": 78,"col": 4},{"file": 71,"line": 79,"col": 4},{"file": 71,"line": 80,"col": 4},{"file": 71,"line": 81,"col": 4},{"file": 71,"line": 82,"col": 4},{"file": 71,"line": 83,"col": 4},{"file": 71,"line": 84,"col": 4},{"file": 71,"line": 85,"col": 4},{"file": 71,"line": 86,"col": 4},{"file": 71,"line": 87,"col": 4},{"file": 71,"line": 88,"col": 4},{"file": 71,"line": 89,"col": 4},{"file": 71,"line": 90,"col": 4},{"file": 71,"line": 93,"col": 4},{"file": 71,"line": 94,"col": 4},{"file": 71,"line": 95,"col": 4},{"file": 71,"line": 96,"col": 4},{"file": 71,"line": 97,"col": 4},{"file": 71,"line": 98,"col": 4},{"file": 71,"line": 101,"col": 4},{"file": 71,"line": 103,"col": 4},{"file": 71,"line": 104,"col": 4},{"file": 71,"line": 107,"col": 4},{"file": 71,"line": 108,"col": 4},{"file": 71,"line": 109,"col": 4},{"file": 71,"line": 110,"col": 4},{"file": 71,"line": 111,"col": 4},{"file": 71,"line": 112,"col": 4},{"file": 71,"line": 113,"col": 4},{"file": 71,"line": 114,"col": 4},{"file": 71,"line": 115,"col": 4},{"file": 71,"line": 116,"col": 4},{"file": 71,"line": 117,"col": 4},{"file": 71,"line": 120,"col": 4},{"file": 71,"line": 121,"col": 4},{"file": 71,"line": 122,"col": 4},{"file": 71,"line": 123,"col": 4},{"file": 71,"line": 124,"col": 4},{"file": 71,"line": 125,"col": 4},{"file": 71,"line": 126,"col": 4},{"file": 71,"line": 127,"col": 4},{"file": 71,"line": 128,"col": 4},{"file": 71,"line": 129,"col": 4},{"file": 71,"line": 130,"col": 4},{"file": 71,"line": 131,"col": 4},{"file": 71,"line": 132,"col": 4},{"file": 71,"line": 133,"col": 4},{"file": 71,"line": 134,"col": 4},{"file": 71,"line": 135,"col": 4},{"file": 71,"line": 136,"col": 4},{"file": 71,"line": 137,"col": 4},{"file": 71,"line": 138,"col": 4},{"file": 71,"line": 139,"col": 4},{"file": 71,"line": 140,"col": 4},{"file": 71,"line": 141,"col": 4},{"file": 71,"line": 144,"col": 4},{"file": 71,"line": 145,"col": 4},{"file": 71,"line": 146,"col": 4},{"file": 71,"line": 147,"col": 4},{"file": 71,"line": 148,"col": 4},{"file": 71,"line": 149,"col": 4},{"file": 71,"line": 150,"col": 4},{"file": 71,"line": 153,"col": 4},{"file": 71,"line": 154,"col": 4},{"file": 71,"line": 155,"col": 4},{"file": 71,"line": 156,"col": 4},{"file": 71,"line": 157,"col": 4},{"file": 71,"line": 158,"col": 4},{"file": 71,"line": 159,"col": 4},{"file": 71,"line": 162,"col": 4},{"file": 71,"line": 165,"col": 4},{"file": 71,"line": 168,"col": 4},{"file": 71,"line": 169,"col": 4},{"file": 71,"line": 170,"col": 4},{"file": 71,"line": 171,"col": 4},{"file": 71,"line": 172,"col": 4},{"file": 71,"line": 173,"col": 4},{"file": 71,"line": 174,"col": 4},{"file": 71,"line": 175,"col": 4},{"file": 71,"line": 177,"col": 4},{"file": 71,"line": 179,"col": 4},{"file": 71,"line": 180,"col": 4},{"file": 71,"line": 181,"col": 4},{"file": 71,"line": 182,"col": 4},{"file": 71,"line": 183,"col": 4},{"file": 71,"line": 184,"col": 4},{"file": 71,"line": 186,"col": 4},{"file": 71,"line": 190,"col": 4},{"file": 71,"line": 191,"col": 4},{"file": 71,"line": 193,"col": 4},{"file": 71,"line": 195,"col": 4},{"file": 71,"line": 196,"col": 4},{"file": 71,"line": 197,"col": 4},{"file": 44,"line": 15,"col": 8},{"file": 44,"line": 16,"col": 8},{"file": 44,"line": 17,"col": 8},{"file": 44,"line": 18,"col": 8},{"file": 44,"line": 19,"col": 8},{"file": 44,"line": 20,"col": 8},{"file": 44,"line": 21,"col": 8},{"file": 44,"line": 22,"col": 8},{"file": 44,"line": 23,"col": 8},{"file": 44,"line": 24,"col": 8},{"file": 44,"line": 25,"col": 8},{"file": 44,"line": 26,"col": 8},{"file": 44,"line": 27,"col": 8},{"file": 44,"line": 28,"col": 8},{"file": 44,"line": 29,"col": 8},{"file": 44,"line": 30,"col": 8},{"file": 44,"line": 31,"col": 8},{"file": 44,"line": 32,"col": 8},{"file": 44,"line": 33,"col": 8},{"file": 44,"line": 34,"col": 8},{"file": 44,"line": 35,"col": 8},{"file": 44,"line": 36,"col": 8},{"file": 44,"line": 37,"col": 8},{"file": 44,"line": 38,"col": 8},{"file": 44,"line": 39,"col": 8},{"file": 44,"line": 42,"col": 8},{"file": 44,"line": 43,"col": 8},{"file": 44,"line": 47,"col": 8},{"file": 44,"line": 48,"col": 8},{"file": 44,"line": 139,"col": 8},{"file": 44,"line": 140,"col": 8},{"file": 44,"line": 144,"col": 8},{"file": 44,"line": 145,"col": 8},{"file": 44,"line": 146,"col": 8},{"file": 44,"line": 147,"col": 8},{"file": 44,"line": 148,"col": 8},{"file": 44,"line": 149,"col": 8},{"file": 44,"line": 150,"col": 8},{"file": 44,"line": 151,"col": 8},{"file": 44,"line": 152,"col": 8},{"file": 44,"line": 153,"col": 8},{"file": 44,"line": 154,"col": 8},{"file": 44,"line": 155,"col": 8},{"file": 44,"line": 156,"col": 8},{"file": 44,"line": 160,"col": 8},{"file": 44,"line": 161,"col": 8},{"file": 44,"line": 162,"col": 8},{"file": 44,"line": 163,"col": 8},{"file": 44,"line": 164,"col": 8},{"file": 44,"line": 165,"col": 8},{"file": 72,"line": 35,"col": 4,"docs": " Write a single unsigned integer as unsigned LEB128 to the given writer.","fields": [13349,13350]},{"file": 72,"line": 111,"col": 4,"docs": " Write a single signed integer as signed LEB128 to the given writer.","fields": [13351,13352]},{"file": 72,"line": 139,"col": 4,"docs": " This is an \"advanced\" function. It allows one to use a fixed amount of memory to store a ULEB128. This defeats the entire purpose of using this data encoding; it will no longer use fewer bytes to store smaller numbers. The advantage of using a fixed width is that it makes fields have a predictable size and so depending on the use case this tradeoff can be worthwhile. An example use case of this is in emitting DWARF info where one wants to make a ULEB128 field \"relocatable\", meaning that it becomes possible to later go back and patch the number to be a different value without shifting all the following code.","fields": [13353,13354,13355]},{"file": 72,"line": 0,"col": 0},{"file": 72,"line": 1,"col": 0},{"file": 72,"line": 177,"col": 0,"fields": [13356,13357]},{"file": 72,"line": 182,"col": 0,"fields": [13358,13359]},{"file": 72,"line": 187,"col": 0,"fields": [13360,13361]},{"file": 72,"line": 193,"col": 0,"fields": [13362,13363]},{"file": 72,"line": 199,"col": 0,"fields": [13364,13365,13366]},{"file": 72,"line": 207,"col": 0,"fields": [13367,13368,13369]},{"file": 72,"line": 302,"col": 0,"fields": [13370]},{"file": 45,"line": 325,"col": 8,"docs": " Beginning of processor-specific codes"},{"file": 45,"line": 328,"col": 8,"docs": " Processor-specific"},{"file": 73,"line": 14,"col": 4},{"file": 73,"line": 15,"col": 4},{"file": 73,"line": 16,"col": 4},{"file": 73,"line": 21,"col": 4},{"file": 73,"line": 22,"col": 4},{"file": 73,"line": 23,"col": 4},{"file": 73,"line": 28,"col": 4},{"file": 73,"line": 29,"col": 4},{"file": 73,"line": 30,"col": 4},{"file": 73,"line": 113,"col": 4,"docs": " Naively combines a series of paths with the native path seperator and null terminator. Allocates memory for the result, which must be freed by the caller.","fields": [13371,13372]},{"file": 73,"line": 219,"col": 4,"fields": [13373]},{"file": 73,"line": 250,"col": 4,"fields": [13374]},{"file": 73,"line": 254,"col": 4,"fields": [13375]},{"file": 73,"line": 258,"col": 4,"fields": [13376]},{"file": 73,"line": 262,"col": 4,"fields": [13377]},{"file": 73,"line": 313,"col": 4},{"file": 73,"line": 325,"col": 4,"fields": [13378]},{"file": 73,"line": 404,"col": 4,"fields": [13379]},{"file": 73,"line": 412,"col": 4,"fields": [13380]},{"file": 73,"line": 469,"col": 4,"docs": " On Windows, this calls `resolveWindows` and on POSIX it calls `resolvePosix`.","fields": [13381,13382]},{"file": 73,"line": 485,"col": 4,"docs": " This function is like a series of `cd` statements executed one after another. It resolves \".\" and \"..\". The result does not have a trailing path separator. If all paths are relative it uses the current working directory as a starting point. Each drive has its own current working directory. Path separators are canonicalized to '\\\\' and drives are canonicalized to capital letters. Note: all usage of this function should be audited due to the existence of symlinks. Without performing actual syscalls, resolving `..` could be incorrect.","fields": [13383,13384]},{"file": 73,"line": 671,"col": 4,"docs": " This function is like a series of `cd` statements executed one after another. It resolves \".\" and \"..\". The result does not have a trailing path separator. If all paths are relative it uses the current working directory as a starting point. Note: all usage of this function should be audited due to the existence of symlinks. Without performing actual syscalls, resolving `..` could be incorrect.","fields": [13385,13386]},{"file": 73,"line": 832,"col": 4,"docs": " Strip the last component from a file path. If the path is a file in the current directory (no directory component) then returns null. If the path is the root directory, returns null.","fields": [13387]},{"file": 73,"line": 840,"col": 4,"fields": [13388]},{"file": 73,"line": 874,"col": 4,"fields": [13389]},{"file": 73,"line": 966,"col": 4,"fields": [13390]},{"file": 73,"line": 974,"col": 4,"fields": [13391]},{"file": 73,"line": 995,"col": 4,"fields": [13392]},{"file": 73,"line": 1082,"col": 4,"docs": " Returns the relative path from `from` to `to`. If `from` and `to` each resolve to the same path (after calling `resolve` on each), a zero-length string is returned. On Windows this canonicalizes the drive to a capital letter and paths to `\\\\`.","fields": [13393,13394,13395]},{"file": 73,"line": 1090,"col": 4,"fields": [13396,13397,13398]},{"file": 73,"line": 1163,"col": 4,"fields": [13399,13400,13401]},{"file": 73,"line": 1279,"col": 4,"docs": " Returns the extension of the file name (if any). This function will search for the file extension (separated by a `.`) and will return the text after the `.`. Files that end with `.` are considered to have no extension, files that start with `.` Examples: - `\"main.zig\"`     ⇒ `\".zig\"` - `\"src/main.zig\"` ⇒ `\".zig\"` - `\".gitignore\"`   ⇒ `\"\"` - `\"keep.\"`        ⇒ `\".\"` - `\"src.keep.me\"`  ⇒ `\".me\"` - `\"/src/keep.me\"`  ⇒ `\".me\"` - `\"/src/keep.me/\"`  ⇒ `\".me\"` The returned slice is guaranteed to have its pointer within the start and end pointer address range of `path`, even if it is length zero.","fields": [13402]},{"file": 73,"line": 0,"col": 0},{"file": 73,"line": 1,"col": 0},{"file": 73,"line": 2,"col": 0},{"file": 73,"line": 3,"col": 0},{"file": 73,"line": 4,"col": 0},{"file": 73,"line": 5,"col": 0},{"file": 73,"line": 6,"col": 0},{"file": 73,"line": 7,"col": 0},{"file": 73,"line": 8,"col": 0},{"file": 73,"line": 9,"col": 0},{"file": 73,"line": 10,"col": 0},{"file": 73,"line": 11,"col": 0},{"file": 73,"line": 12,"col": 0},{"file": 73,"line": 118,"col": 0,"fields": [13403,13404,13405]},{"file": 73,"line": 129,"col": 0,"fields": [13406,13407,13408]},{"file": 73,"line": 140,"col": 0,"fields": [13409,13410,13411]},{"file": 73,"line": 227,"col": 0,"fields": [13412,13413]},{"file": 73,"line": 305,"col": 0,"fields": [13414,13415]},{"file": 73,"line": 309,"col": 0,"fields": [13416,13417]},{"file": 73,"line": 416,"col": 0,"fields": [13418,13419]},{"file": 73,"line": 427,"col": 0,"fields": [13420,13421,13422]},{"file": 73,"line": 450,"col": 0,"fields": [13423]},{"file": 73,"line": 457,"col": 0,"fields": [13424,13425]},{"file": 73,"line": 814,"col": 0,"fields": [13426,13427]},{"file": 73,"line": 820,"col": 0,"fields": [13428,13429]},{"file": 73,"line": 950,"col": 0,"fields": [13430,13431]},{"file": 73,"line": 958,"col": 0,"fields": [13432,13433]},{"file": 73,"line": 1066,"col": 0,"fields": [13434,13435]},{"file": 73,"line": 1070,"col": 0,"fields": [13436,13437]},{"file": 73,"line": 1074,"col": 0,"fields": [13438,13439]},{"file": 73,"line": 1254,"col": 0,"fields": [13440,13441,13442]},{"file": 73,"line": 1260,"col": 0,"fields": [13443,13444,13445]},{"file": 73,"line": 1286,"col": 0,"fields": [13446,13447]},{"file": 66,"line": 1701,"col": 8,"docs": " Special value used to indicate openat should use the current working directory"},{"file": 66,"line": 1704,"col": 8,"docs": " Do not follow symbolic links"},{"file": 66,"line": 1707,"col": 8,"docs": " Remove directory instead of unlinking file"},{"file": 66,"line": 1710,"col": 8,"docs": " Follow symbolic links."},{"file": 66,"line": 1713,"col": 8,"docs": " Suppress terminal automount traversal"},{"file": 66,"line": 1716,"col": 8,"docs": " Allow empty relative pathname"},{"file": 66,"line": 1719,"col": 8,"docs": " Type of synchronisation required from statx()"},{"file": 66,"line": 1722,"col": 8,"docs": " - Do whatever stat() does"},{"file": 66,"line": 1725,"col": 8,"docs": " - Force the attributes to be sync'd with the server"},{"file": 66,"line": 1728,"col": 8,"docs": " - Don't sync attributes with the server"},{"file": 66,"line": 1731,"col": 8,"docs": " Apply to the entire subtree"},{"file": 66,"line": 2809,"col": 8},{"file": 66,"line": 2810,"col": 8},{"file": 66,"line": 2811,"col": 8},{"file": 66,"line": 2812,"col": 8},{"file": 66,"line": 2813,"col": 8},{"file": 66,"line": 2814,"col": 8},{"file": 66,"line": 2815,"col": 8},{"file": 66,"line": 2816,"col": 8},{"file": 66,"line": 2817,"col": 8},{"file": 66,"line": 2818,"col": 8},{"file": 66,"line": 2819,"col": 8},{"file": 66,"line": 2820,"col": 8},{"file": 66,"line": 98,"col": 8,"docs": " Share changes"},{"file": 66,"line": 100,"col": 8,"docs": " Changes are private"},{"file": 66,"line": 102,"col": 8,"docs": " share + validate extension flags"},{"file": 66,"line": 104,"col": 8,"docs": " Mask for type of mapping"},{"file": 66,"line": 106,"col": 8,"docs": " Interpret addr exactly"},{"file": 66,"line": 108,"col": 8,"docs": " don't use a file"},{"file": 66,"line": 111,"col": 8,"docs": " populate (prefault) pagetables"},{"file": 66,"line": 113,"col": 8,"docs": " do not block on IO"},{"file": 66,"line": 115,"col": 8,"docs": " give out an address that is best suited for process/thread stacks"},{"file": 66,"line": 117,"col": 8,"docs": " create a huge page mapping"},{"file": 66,"line": 119,"col": 8,"docs": " perform synchronous page faults for the mapping"},{"file": 66,"line": 121,"col": 8,"docs": " MAP_FIXED which doesn't unmap underlying mapping"},{"file": 66,"line": 123,"col": 8,"docs": " For anonymous mmap, memory could be uninitialized"},{"file": 66,"line": 129,"col": 8},{"file": 66,"line": 130,"col": 8},{"file": 66,"line": 131,"col": 8},{"file": 66,"line": 1779,"col": 8,"docs": " page can not be accessed"},{"file": 66,"line": 1781,"col": 8,"docs": " page can be read"},{"file": 66,"line": 1783,"col": 8,"docs": " page can be written"},{"file": 66,"line": 1785,"col": 8,"docs": " page can be executed"},{"file": 66,"line": 1787,"col": 8,"docs": " page may be used for atomic ops"},{"file": 66,"line": 1793,"col": 8,"docs": " mprotect flag: extend change to start of growsdown vma"},{"file": 66,"line": 1795,"col": 8,"docs": " mprotect flag: extend change to end of growsup vma"},{"file": 66,"line": 2949,"col": 8},{"file": 66,"line": 2951,"col": 8},{"file": 66,"line": 2952,"col": 8},{"file": 66,"line": 2953,"col": 8},{"file": 66,"line": 2954,"col": 8},{"file": 66,"line": 2955,"col": 8},{"file": 66,"line": 2956,"col": 8},{"file": 66,"line": 2957,"col": 8},{"file": 66,"line": 2959,"col": 8},{"file": 66,"line": 2960,"col": 8},{"file": 66,"line": 2961,"col": 8},{"file": 66,"line": 2962,"col": 8},{"file": 66,"line": 2963,"col": 8},{"file": 66,"line": 2964,"col": 8},{"file": 66,"line": 2965,"col": 8},{"file": 66,"line": 2966,"col": 8},{"file": 66,"line": 2967,"col": 8},{"file": 66,"line": 2968,"col": 8},{"file": 66,"line": 2969,"col": 8},{"file": 66,"line": 2970,"col": 8},{"file": 66,"line": 2971,"col": 8},{"file": 66,"line": 2972,"col": 8},{"file": 66,"line": 2973,"col": 8},{"file": 66,"line": 2975,"col": 8,"fields": [13448]},{"file": 66,"line": 2979,"col": 8,"fields": [13449]},{"file": 66,"line": 2983,"col": 8,"fields": [13450]},{"file": 66,"line": 2987,"col": 8,"fields": [13451]},{"file": 66,"line": 2991,"col": 8,"fields": [13452]},{"file": 66,"line": 2995,"col": 8,"fields": [13453]},{"file": 66,"line": 2999,"col": 8,"fields": [13454]},{"file": 66,"line": 1861,"col": 8},{"file": 66,"line": 1862,"col": 8},{"file": 66,"line": 1863,"col": 8},{"file": 66,"line": 1864,"col": 8},{"file": 66,"line": 1865,"col": 8},{"file": 66,"line": 1866,"col": 8},{"file": 66,"line": 1867,"col": 8},{"file": 66,"line": 1868,"col": 8},{"file": 66,"line": 1959,"col": 8},{"file": 66,"line": 1960,"col": 8},{"file": 66,"line": 1961,"col": 8},{"file": 66,"line": 1963,"col": 8},{"file": 66,"line": 1964,"col": 8},{"file": 66,"line": 1965,"col": 8},{"file": 66,"line": 1966,"col": 8},{"file": 66,"line": 1967,"col": 8},{"file": 66,"line": 1968,"col": 8},{"file": 66,"line": 1969,"col": 8},{"file": 66,"line": 1970,"col": 8},{"file": 66,"line": 1971,"col": 8},{"file": 66,"line": 1972,"col": 8},{"file": 66,"line": 1973,"col": 8},{"file": 66,"line": 1974,"col": 8},{"file": 66,"line": 1975,"col": 8},{"file": 66,"line": 1976,"col": 8},{"file": 66,"line": 1977,"col": 8},{"file": 66,"line": 1978,"col": 8},{"file": 66,"line": 1979,"col": 8},{"file": 66,"line": 1980,"col": 8},{"file": 66,"line": 1981,"col": 8},{"file": 66,"line": 1982,"col": 8},{"file": 66,"line": 1983,"col": 8},{"file": 66,"line": 1984,"col": 8},{"file": 66,"line": 1985,"col": 8},{"file": 66,"line": 1986,"col": 8},{"file": 66,"line": 1987,"col": 8},{"file": 66,"line": 1988,"col": 8},{"file": 66,"line": 1989,"col": 8},{"file": 66,"line": 1990,"col": 8},{"file": 66,"line": 1991,"col": 8},{"file": 66,"line": 1992,"col": 8},{"file": 66,"line": 1993,"col": 8},{"file": 66,"line": 1994,"col": 8},{"file": 66,"line": 1995,"col": 8},{"file": 66,"line": 1996,"col": 8},{"file": 66,"line": 1998,"col": 8},{"file": 66,"line": 1999,"col": 8},{"file": 66,"line": 2000,"col": 8},{"file": 66,"line": 3056,"col": 8},{"file": 66,"line": 3057,"col": 8},{"file": 74,"line": 12,"col": 4},{"file": 74,"line": 97,"col": 4},{"file": 74,"line": 315,"col": 4},{"file": 74,"line": 356,"col": 4},{"file": 74,"line": 0,"col": 0},{"file": 74,"line": 1,"col": 0},{"file": 74,"line": 2,"col": 0},{"file": 74,"line": 3,"col": 0},{"file": 74,"line": 4,"col": 0},{"file": 74,"line": 5,"col": 0},{"file": 74,"line": 6,"col": 0},{"file": 74,"line": 7,"col": 0},{"file": 74,"line": 8,"col": 0},{"file": 74,"line": 9,"col": 0},{"file": 74,"line": 10,"col": 0},{"file": 74,"line": 24,"col": 0},{"file": 74,"line": 48,"col": 0},{"file": 74,"line": 301,"col": 0,"fields": [13455,13456,13457,13458]},{"file": 54,"line": 491,"col": 8},{"file": 54,"line": 502,"col": 8,"fields": [13459,13460]},{"file": 54,"line": 519,"col": 8,"fields": [13461]},{"file": 54,"line": 525,"col": 8,"fields": [13462]},{"file": 54,"line": 605,"col": 8,"fields": [13463]},{"file": 54,"line": 669,"col": 8,"fields": [13464,13465,13466]},{"file": 54,"line": 693,"col": 8,"fields": [13467,13468,13469]},{"file": 54,"line": 790,"col": 8,"fields": [13470,13471]},{"file": 54,"line": 843,"col": 8,"fields": [13472,13473]},{"file": 54,"line": 849,"col": 8,"fields": [13474,13475]},{"file": 54,"line": 860,"col": 4,"fields": [13476,13477]},{"file": 54,"line": 1003,"col": 8},{"file": 54,"line": 1047,"col": 8,"fields": [13478,13479]},{"file": 54,"line": 1053,"col": 8,"fields": [13480,13481]},{"file": 54,"line": 1071,"col": 8,"fields": [13482]},{"file": 54,"line": 1005,"col": 4,"fields": [13483,13484,13485]},{"file": 54,"line": 1016,"col": 4,"fields": [13486,13487]},{"file": 54,"line": 1059,"col": 4,"fields": [13488]},{"file": 54,"line": 1063,"col": 4,"fields": [13489]},{"file": 55,"line": 305,"col": 8},{"file": 55,"line": 307,"col": 8,"fields": []},{"file": 55,"line": 311,"col": 8,"fields": [13490]},{"file": 55,"line": 327,"col": 8,"docs": " You must free the returned memory when done.","fields": [13491,13492]},{"file": 55,"line": 341,"col": 8,"fields": [13493]},{"file": 55,"line": 318,"col": 4,"fields": [13494]},{"file": 55,"line": 381,"col": 4,"fields": [13495,13496]},{"file": 55,"line": 425,"col": 4,"fields": [13497,13498]},{"file": 55,"line": 435,"col": 4,"fields": [13499,13500,13501]},{"file": 61,"line": 193,"col": 8,"fields": [13502,13503]},{"file": 74,"line": 31,"col": 8},{"file": 22,"line": 488,"col": 12,"fields": [13504,13505]},{"file": 22,"line": 496,"col": 12,"docs": " Checks if system is guaranteed to be at least `version` or older than `version`. Returns `null` if a runtime check is required.","fields": [13506,13507]},{"file": 13,"line": 143,"col": 20,"fields": [13508,13509]},{"file": 13,"line": 149,"col": 20,"docs": " Checks if system is guaranteed to be at least `version` or older than `version`. Returns `null` if a runtime check is required.","fields": [13510,13511]},{"file": 75,"line": 108,"col": 4},{"file": 75,"line": 0,"col": 0},{"file": 75,"line": 1,"col": 0},{"file": 75,"line": 2,"col": 0},{"file": 75,"line": 3,"col": 0},{"file": 75,"line": 4,"col": 0},{"file": 75,"line": 5,"col": 0},{"file": 75,"line": 6,"col": 0},{"file": 75,"line": 44,"col": 0},{"file": 75,"line": 49,"col": 0},{"file": 75,"line": 56,"col": 0},{"file": 75,"line": 65,"col": 0},{"file": 75,"line": 73,"col": 0},{"file": 75,"line": 78,"col": 0},{"file": 75,"line": 85,"col": 0},{"file": 75,"line": 90,"col": 0},{"file": 75,"line": 96,"col": 0},{"file": 75,"line": 306,"col": 0},{"file": 66,"line": 1758,"col": 8},{"file": 66,"line": 1759,"col": 8},{"file": 66,"line": 1760,"col": 8},{"file": 66,"line": 1761,"col": 8},{"file": 66,"line": 1762,"col": 8},{"file": 66,"line": 1763,"col": 8},{"file": 66,"line": 1764,"col": 8},{"file": 66,"line": 1765,"col": 8},{"file": 66,"line": 1766,"col": 8},{"file": 66,"line": 1767,"col": 8},{"file": 66,"line": 1768,"col": 8},{"file": 66,"line": 1769,"col": 8},{"file": 66,"line": 1770,"col": 8},{"file": 66,"line": 1772,"col": 8},{"file": 66,"line": 1774,"col": 8},{"file": 66,"line": 2727,"col": 8},{"file": 66,"line": 2728,"col": 8},{"file": 66,"line": 2729,"col": 8},{"file": 66,"line": 2730,"col": 8},{"file": 66,"line": 2731,"col": 8},{"file": 66,"line": 2732,"col": 8},{"file": 66,"line": 2733,"col": 8},{"file": 66,"line": 2734,"col": 8},{"file": 66,"line": 2735,"col": 8},{"file": 66,"line": 2736,"col": 8},{"file": 66,"line": 2737,"col": 8},{"file": 66,"line": 2738,"col": 8},{"file": 66,"line": 2739,"col": 8},{"file": 66,"line": 2740,"col": 8},{"file": 66,"line": 2741,"col": 8},{"file": 66,"line": 2742,"col": 8},{"file": 66,"line": 2743,"col": 8},{"file": 66,"line": 2744,"col": 8},{"file": 66,"line": 2745,"col": 8},{"file": 66,"line": 2746,"col": 8},{"file": 66,"line": 2747,"col": 8},{"file": 66,"line": 2748,"col": 8},{"file": 66,"line": 2749,"col": 8},{"file": 66,"line": 2750,"col": 8},{"file": 66,"line": 2751,"col": 8},{"file": 66,"line": 2752,"col": 8},{"file": 66,"line": 2753,"col": 8},{"file": 66,"line": 2754,"col": 8},{"file": 66,"line": 2755,"col": 8},{"file": 66,"line": 2756,"col": 8},{"file": 66,"line": 2757,"col": 8},{"file": 66,"line": 2758,"col": 8},{"file": 66,"line": 2759,"col": 8},{"file": 66,"line": 2760,"col": 8},{"file": 66,"line": 2761,"col": 8},{"file": 66,"line": 2762,"col": 8},{"file": 66,"line": 2763,"col": 8},{"file": 66,"line": 2764,"col": 8},{"file": 66,"line": 2765,"col": 8},{"file": 66,"line": 2766,"col": 8},{"file": 66,"line": 2767,"col": 8},{"file": 66,"line": 2768,"col": 8},{"file": 66,"line": 2769,"col": 8},{"file": 66,"line": 2770,"col": 8},{"file": 66,"line": 2771,"col": 8},{"file": 66,"line": 2772,"col": 8},{"file": 66,"line": 2773,"col": 8},{"file": 66,"line": 2774,"col": 8},{"file": 66,"line": 2775,"col": 8},{"file": 66,"line": 2776,"col": 8},{"file": 66,"line": 2777,"col": 8},{"file": 66,"line": 2778,"col": 8},{"file": 66,"line": 2779,"col": 8},{"file": 66,"line": 2780,"col": 8},{"file": 66,"line": 2781,"col": 8},{"file": 76,"line": 0,"col": 0},{"file": 76,"line": 1,"col": 0},{"file": 76,"line": 2,"col": 0},{"file": 76,"line": 3,"col": 0},{"file": 76,"line": 4,"col": 0},{"file": 76,"line": 5,"col": 0},{"file": 76,"line": 6,"col": 0},{"file": 76,"line": 7,"col": 0},{"file": 76,"line": 9,"col": 0},{"file": 76,"line": 10,"col": 0},{"file": 76,"line": 11,"col": 0},{"file": 77,"line": 0,"col": 0},{"file": 77,"line": 1,"col": 0},{"file": 77,"line": 2,"col": 0},{"file": 77,"line": 3,"col": 0},{"file": 77,"line": 4,"col": 0},{"file": 27,"line": 853,"col": 8,"docs": " Initialize the delay queue by spawning the timer thread and starting any timer resources.","fields": [13512]},{"file": 27,"line": 868,"col": 8,"docs": " Entry point for the timer thread which waits for timer entries to expire and reschedules them.","fields": [13513]},{"file": 27,"line": 891,"col": 8},{"file": 40,"line": 720,"col": 8,"docs": " Calls `munmap(mapped.ptr, mapped.len)` then `exit(1)` without touching the stack (which lives in `mapped.ptr`). Ported over from musl libc's pthread detached implementation: https://github.com/ifduyue/musl/search?q=__unmapself","fields": [13514]},{"file": 27,"line": 894,"col": 12},{"file": 27,"line": 905,"col": 12,"docs": " Registers the entry into the queue of waiting frames","fields": [13515,13516]},{"file": 27,"line": 910,"col": 12,"docs": " Dequeues one expired event relative to `now`","fields": [13517,13518]},{"file": 27,"line": 921,"col": 12,"docs": " Returns an estimate for the amount of time to wait until the next waiting entry expires.","fields": [13519]},{"file": 27,"line": 926,"col": 12,"fields": [13520]},{"file": 53,"line": 880,"col": 4},{"file": 53,"line": 881,"col": 4},{"file": 53,"line": 882,"col": 4},{"file": 53,"line": 883,"col": 4},{"file": 53,"line": 885,"col": 4,"docs": " In WASI, this error may occur when the file descriptor does not hold the required rights to write to it."},{"file": 53,"line": 888,"col": 4},{"file": 53,"line": 889,"col": 4},{"file": 53,"line": 890,"col": 4},{"file": 53,"line": 891,"col": 4},{"file": 53,"line": 893,"col": 4,"docs": " This error occurs when no global event loop is configured, and reading from the file descriptor would block."},{"file": 53,"line": 897,"col": 4,"docs": " Connection reset by peer."},{"file": 53,"line": 4974,"col": 4,"docs": " The Operating System returned an undocumented error code. This error is in theory not possible, but it would be better to handle this error than to invoke undefined behavior."},{"file": 19,"line": 15,"col": 37},{"file": 11,"line": 16,"col": 4},{"file": 11,"line": 17,"col": 4},{"file": 11,"line": 18,"col": 4},{"file": 11,"line": 19,"col": 4},{"file": 11,"line": 20,"col": 4},{"file": 11,"line": 21,"col": 4},{"file": 11,"line": 22,"col": 4},{"file": 11,"line": 23,"col": 4},{"file": 11,"line": 24,"col": 4},{"file": 11,"line": 25,"col": 4},{"file": 11,"line": 26,"col": 4},{"file": 9,"line": 9,"col": 24},{"file": 15,"line": 57,"col": 8},{"file": 15,"line": 58,"col": 8},{"file": 15,"line": 59,"col": 8},{"file": 15,"line": 60,"col": 8},{"file": 15,"line": 61,"col": 8},{"file": 15,"line": 62,"col": 8},{"file": 15,"line": 63,"col": 8,"docs": " On Windows, file paths must be valid Unicode."},{"file": 15,"line": 65,"col": 8,"docs": " On Windows, file paths cannot contain these characters: '/', '*', '?', '\"', '<', '>', '|'"},{"file": 15,"line": 68,"col": 8},{"file": 53,"line": 1239,"col": 4},{"file": 53,"line": 1240,"col": 4},{"file": 53,"line": 1241,"col": 4},{"file": 53,"line": 1242,"col": 4},{"file": 53,"line": 1248,"col": 4,"docs": " Insufficient kernel memory was available, or the named file is a FIFO and per-user hard limit on memory allocation for pipes has been reached."},{"file": 53,"line": 1253,"col": 4,"docs": " The file is too large to be opened. This error is unreachable for 64-bit targets, as well as when opening directories."},{"file": 53,"line": 1257,"col": 4,"docs": " The path refers to directory but the `O.DIRECTORY` flag was not provided."},{"file": 53,"line": 1260,"col": 4,"docs": " A new path cannot be created because the device has no room for the new file. This error is only reachable when the `O.CREAT` flag is provided."},{"file": 53,"line": 1264,"col": 4,"docs": " A component used as a directory in the path was not, in fact, a directory, or `O.DIRECTORY` was specified and the path was not a directory."},{"file": 53,"line": 1270,"col": 4},{"file": 53,"line": 1272,"col": 4,"docs": " The underlying filesystem does not support file locks"},{"file": 53,"line": 1278,"col": 4,"docs": " One of these three things: * pathname  refers to an executable image which is currently being   executed and write access was requested. * pathname refers to a file that is currently in  use  as  a  swap   file, and the O_TRUNC flag was specified. * pathname  refers  to  a file that is currently being read by the   kernel (e.g., for module/firmware loading), and write access was   requested."},{"file": 53,"line": 1288,"col": 4},{"file": 53,"line": 4295,"col": 4},{"file": 53,"line": 4297,"col": 4,"docs": " In WASI, this error may occur when the file descriptor does not hold the required rights to seek on it."},{"file": 53,"line": 3675,"col": 4},{"file": 53,"line": 3677,"col": 4,"docs": " In WASI, this error may occur when the file descriptor does not hold the required rights to get its filestat information."},{"file": 53,"line": 514,"col": 4},{"file": 53,"line": 515,"col": 4},{"file": 53,"line": 516,"col": 4},{"file": 53,"line": 517,"col": 4},{"file": 53,"line": 518,"col": 4},{"file": 53,"line": 519,"col": 4},{"file": 53,"line": 520,"col": 4},{"file": 53,"line": 521,"col": 4},{"file": 53,"line": 523,"col": 4,"docs": " This error occurs when no global event loop is configured, and reading from the file descriptor would block."},{"file": 53,"line": 527,"col": 4,"docs": " In WASI, this error occurs when the file descriptor does not hold the required rights to read from it."},{"file": 8,"line": 13,"col": 4},{"file": 8,"line": 14,"col": 4},{"file": 47,"line": 353,"col": 23},{"file": 43,"line": 1257,"col": 17},{"file": 48,"line": 2468,"col": 4},{"file": 48,"line": 2469,"col": 4},{"file": 48,"line": 2470,"col": 4},{"file": 48,"line": 2471,"col": 4},{"file": 48,"line": 2472,"col": 4},{"file": 48,"line": 2473,"col": 4},{"file": 48,"line": 2474,"col": 4,"docs": " On Windows, file paths must be valid Unicode."},{"file": 48,"line": 2476,"col": 4,"docs": " On Windows, file paths cannot contain these characters: '/', '*', '?', '\"', '<', '>', '|'"},{"file": 48,"line": 2479,"col": 4},{"file": 53,"line": 2668,"col": 4},{"file": 53,"line": 2673,"col": 4},{"file": 53,"line": 2677,"col": 4,"docs": " Windows-only. This error may occur if the opened reparse point is of unsupported type."},{"file": 53,"line": 4231,"col": 4},{"file": 53,"line": 4234,"col": 4},{"file": 53,"line": 4598,"col": 4},{"file": 53,"line": 4601,"col": 4},{"file": 53,"line": 3943,"col": 4,"docs": " The underlying filesystem of the specified file does not support memory mapping."},{"file": 53,"line": 3946,"col": 4,"docs": " A file descriptor refers to a non-regular file. Or a file mapping was requested, but the file descriptor is not open for reading. Or `MAP.SHARED` was requested and `PROT_WRITE` is set, but the file descriptor is not open in `O.RDWR` mode. Or `PROT_WRITE` is set, but the file is append-only."},{"file": 53,"line": 3952,"col": 4,"docs": " The `prot` argument asks for `PROT_EXEC` but the mapped area belongs to a file on a filesystem that was mounted no-exec."},{"file": 53,"line": 3955,"col": 4},{"file": 53,"line": 3956,"col": 4},{"file": 51,"line": 997,"col": 49},{"file": 20,"line": 44,"col": 48},{"file": 44,"line": 461,"col": 53},{"file": 43,"line": 1255,"col": 24},{"file": 44,"line": 471,"col": 64},{"file": 20,"line": 110,"col": 32},{"file": 53,"line": 6356,"col": 34},{"file": 53,"line": 6356,"col": 52},{"file": 59,"line": 81,"col": 4},{"file": 59,"line": 82,"col": 4},{"file": 59,"line": 101,"col": 4},{"file": 59,"line": 125,"col": 4},{"file": 59,"line": 179,"col": 43},{"file": 59,"line": 25,"col": 21},{"file": 31,"line": 259,"col": 87},{"file": 74,"line": 76,"col": 64},{"file": 51,"line": 459,"col": 48},{"file": 51,"line": 1077,"col": 57},{"file": 59,"line": 99,"col": 4},{"file": 59,"line": 100,"col": 4},{"file": 59,"line": 123,"col": 4},{"file": 59,"line": 124,"col": 4},{"file": 51,"line": 453,"col": 48},{"file": 53,"line": 1236,"col": 4,"docs": " In WASI, this error may occur when the file descriptor does not hold the required rights to open a new resource relative to it."},{"file": 53,"line": 1243,"col": 4},{"file": 53,"line": 1245,"col": 4,"docs": " The path exceeded `MAX_PATH_BYTES` bytes."},{"file": 53,"line": 1268,"col": 4,"docs": " The path already exists and the `O.CREAT` and `O.EXCL` flags were provided."},{"file": 53,"line": 1275,"col": 4},{"file": 53,"line": 1276,"col": 4},{"file": 53,"line": 4567,"col": 4},{"file": 53,"line": 4569,"col": 4,"docs": " The kernel ran out of memory for allocating file locks"},{"file": 53,"line": 4572,"col": 4,"docs": " The underlying filesystem does not support file locks"},{"file": 51,"line": 466,"col": 48},{"file": 61,"line": 219,"col": 45},{"file": 58,"line": 149,"col": 28},{"file": 55,"line": 305,"col": 33},{"file": 55,"line": 305,"col": 46},{"file": 53,"line": 4874,"col": 36},{"file": 47,"line": 1831,"col": 4,"docs": " As much as possible was written to the buffer, but it was too small to fit all the printed bytes."},{"file": 57,"line": 78,"col": 28},{"file": 11,"line": 30,"col": 4},{"file": 11,"line": 31,"col": 4},{"file": 57,"line": 302,"col": 25},{"file": 53,"line": 2665,"col": 4,"docs": " In WASI, this error may occur when the file descriptor does not hold the required rights to read value of a symbolic link relative to it."},{"file": 53,"line": 2669,"col": 4},{"file": 53,"line": 2670,"col": 4},{"file": 53,"line": 2671,"col": 4},{"file": 53,"line": 2672,"col": 4},{"file": 53,"line": 2674,"col": 4},{"file": 53,"line": 2675,"col": 4},{"file": 53,"line": 2676,"col": 4},{"file": 53,"line": 4602,"col": 4},{"file": 53,"line": 4603,"col": 4},{"file": 53,"line": 4604,"col": 4},{"file": 53,"line": 4605,"col": 4},{"file": 53,"line": 4606,"col": 4},{"file": 53,"line": 4608,"col": 4},{"file": 53,"line": 4611,"col": 4},{"file": 53,"line": 4613,"col": 4},{"file": 53,"line": 4614,"col": 4},{"file": 53,"line": 4619,"col": 4},{"file": 53,"line": 653,"col": 42},{"file": 53,"line": 1051,"col": 44},{"file": 53,"line": 4018,"col": 4},{"file": 53,"line": 4019,"col": 4},{"file": 53,"line": 4020,"col": 4},{"file": 53,"line": 4021,"col": 4},{"file": 53,"line": 4022,"col": 4},{"file": 53,"line": 4023,"col": 4},{"file": 53,"line": 4024,"col": 4},{"file": 53,"line": 4025,"col": 4},{"file": 53,"line": 4026,"col": 4},{"file": 53,"line": 4028,"col": 4,"docs": " On Windows, file paths must be valid Unicode."},{"file": 53,"line": 4232,"col": 4},{"file": 53,"line": 4233,"col": 4},{"file": 53,"line": 4595,"col": 4},{"file": 53,"line": 4596,"col": 4},{"file": 53,"line": 4597,"col": 4},{"file": 53,"line": 4599,"col": 4},{"file": 53,"line": 4600,"col": 4},{"file": 53,"line": 4607,"col": 4},{"file": 53,"line": 4609,"col": 4},{"file": 53,"line": 4610,"col": 4},{"file": 53,"line": 4616,"col": 4,"docs": " On Windows, file paths must be valid Unicode."},{"file": 22,"line": 718,"col": 21,"name": "msg"},{"file": 22,"line": 718,"col": 38,"name": "error_return_trace"},{"file": 13,"line": 725,"col": 38,"name": "features"},{"file": 13,"line": 664,"col": 34,"name": "set"},{"file": 13,"line": 664,"col": 45,"name": "arch_feature_index"},{"file": 13,"line": 848,"col": 26,"name": "arch"},{"file": 13,"line": 862,"col": 26,"name": "arch"},{"file": 43,"line": 270,"col": 17,"name": "trace"},{"file": 43,"line": 270,"col": 56,"name": "first_trace_addr"},{"file": 43,"line": 270,"col": 82,"name": "msg"},{"file": 57,"line": 463,"col": 19,"name": "T","comptime": true},{"file": 25,"line": 42,"col": 12,"name": "m"},{"file": 15,"line": 604,"col": 17,"name": "self"},{"file": 15,"line": 604,"col": 29,"name": "bytes"},{"file": 15,"line": 868,"col": 18,"name": "file"},{"file": 14,"line": 26,"col": 21,"name": "self"},{"file": 14,"line": 26,"col": 33,"name": "format","comptime": true},{"file": 14,"line": 26,"col": 62,"name": "args"},{"file": 43,"line": 195,"col": 22,"name": "stack_trace"},{"file": 43,"line": 104,"col": 29,"name": "start_addr"},{"file": 25,"line": 46,"col": 14,"name": "m"},{"file": 61,"line": 38,"col": 12,"name": "ev"},{"file": 13,"line": 827,"col": 25,"name": "arch"},{"file": 75,"line": 308,"col": 21,"name": "phdrs"},{"file": 60,"line": 411,"col": 19,"name": "phdrs"},{"file": 53,"line": 488,"col": 12,"name": "status"},{"file": 60,"line": 438,"col": 20,"name": "argc"},{"file": 60,"line": 438,"col": 33,"name": "argv"},{"file": 60,"line": 438,"col": 51,"name": "envp"},{"file": 13,"line": 883,"col": 27,"name": "arch"},{"file": 53,"line": 5010,"col": 17,"name": "sig"},{"file": 53,"line": 5010,"col": 26,"name": "act"},{"file": 53,"line": 5010,"col": 50,"name": "oact"},{"file": 25,"line": 79,"col": 16,"name": "m"},{"file": 53,"line": 923,"col": 13,"name": "fd"},{"file": 53,"line": 923,"col": 23,"name": "bytes"},{"file": 47,"line": 73,"col": 4,"name": "writer"},{"file": 47,"line": 74,"col": 4,"name": "fmt","comptime": true},{"file": 47,"line": 75,"col": 4,"name": "args"},{"file": 14,"line": 19,"col": 24,"name": "self"},{"file": 14,"line": 19,"col": 36,"name": "bytes"},{"file": 43,"line": 223,"col": 14,"name": "ok"},{"file": 47,"line": 348,"col": 17,"name": "self"},{"file": 47,"line": 338,"col": 13,"name": "self"},{"file": 47,"line": 338,"col": 29,"name": "val"},{"file": 47,"line": 297,"col": 14,"name": "self"},{"file": 47,"line": 316,"col": 13,"name": "self"},{"file": 47,"line": 316,"col": 29,"name": "ch"},{"file": 47,"line": 329,"col": 12,"name": "self"},{"file": 47,"line": 364,"col": 12,"name": "self"},{"file": 47,"line": 364,"col": 28,"name": "n"},{"file": 47,"line": 381,"col": 15,"name": "self"},{"file": 47,"line": 381,"col": 31,"name": "arg_index"},{"file": 47,"line": 445,"col": 4,"name": "value"},{"file": 47,"line": 446,"col": 4,"name": "fmt","comptime": true},{"file": 47,"line": 447,"col": 4,"name": "options"},{"file": 47,"line": 448,"col": 4,"name": "writer"},{"file": 47,"line": 449,"col": 4,"name": "max_depth"},{"file": 47,"line": 377,"col": 21,"name": "self"},{"file": 53,"line": 447,"col": 13,"name": "sig"},{"file": 16,"line": 24,"col": 16,"name": "ctx"},{"file": 16,"line": 24,"col": 30,"name": "key"},{"file": 16,"line": 39,"col": 15,"name": "ctx"},{"file": 16,"line": 39,"col": 29,"name": "a"},{"file": 16,"line": 39,"col": 35,"name": "b"},{"file": 43,"line": 692,"col": 25,"name": "allocator"},{"file": 43,"line": 340,"col": 4,"name": "stack_trace"},{"file": 43,"line": 341,"col": 4,"name": "out_stream"},{"file": 43,"line": 342,"col": 4,"name": "allocator"},{"file": 43,"line": 343,"col": 4,"name": "debug_info"},{"file": 43,"line": 344,"col": 4,"name": "tty_config"},{"file": 51,"line": 338,"col": 11,"name": "x"},{"file": 51,"line": 338,"col": 23,"name": "y"},{"file": 43,"line": 606,"col": 28,"name": "debug_info"},{"file": 43,"line": 606,"col": 52,"name": "out_stream"},{"file": 43,"line": 606,"col": 73,"name": "address"},{"file": 43,"line": 606,"col": 89,"name": "tty_config"},{"file": 43,"line": 1070,"col": 31,"name": "self"},{"file": 43,"line": 1070,"col": 49,"name": "address"},{"file": 13,"line": 1422,"col": 20,"name": "self"},{"file": 13,"line": 59,"col": 28,"name": "tag"},{"file": 43,"line": 1220,"col": 22,"name": "self"},{"file": 43,"line": 1220,"col": 40,"name": "address"},{"file": 43,"line": 1231,"col": 24,"name": "info"},{"file": 43,"line": 1231,"col": 48,"name": "size"},{"file": 43,"line": 1231,"col": 61,"name": "context"},{"file": 53,"line": 4793,"col": 4,"name": "context"},{"file": 53,"line": 4794,"col": 4,"name": "Error","comptime": true},{"file": 53,"line": 4795,"col": 4,"name": "callback","comptime": true},{"file": 16,"line": 574,"col": 19,"name": "self"},{"file": 16,"line": 574,"col": 31,"name": "key"},{"file": 9,"line": 168,"col": 14,"name": "self"},{"file": 9,"line": 168,"col": 31,"name": "T","comptime": true},{"file": 48,"line": 948,"col": 20,"name": "self"},{"file": 48,"line": 948,"col": 31,"name": "sub_path"},{"file": 48,"line": 948,"col": 53,"name": "flags"},{"file": 48,"line": 2482,"col": 19,"name": "flags"},{"file": 9,"line": 176,"col": 15,"name": "self"},{"file": 9,"line": 176,"col": 32,"name": "ptr"},{"file": 43,"line": 785,"col": 24,"name": "allocator"},{"file": 43,"line": 785,"col": 50,"name": "elf_file"},{"file": 43,"line": 1035,"col": 16,"name": "file"},{"file": 15,"line": 257,"col": 21,"name": "self"},{"file": 15,"line": 181,"col": 17,"name": "self"},{"file": 51,"line": 997,"col": 12,"name": "T","comptime": true},{"file": 51,"line": 997,"col": 30,"name": "x"},{"file": 53,"line": 3965,"col": 4,"name": "ptr"},{"file": 53,"line": 3966,"col": 4,"name": "length"},{"file": 53,"line": 3967,"col": 4,"name": "prot"},{"file": 53,"line": 3968,"col": 4,"name": "flags"},{"file": 53,"line": 3969,"col": 4,"name": "fd"},{"file": 53,"line": 3970,"col": 4,"name": "offset"},{"file": 36,"line": 553,"col": 11,"name": "T","comptime": true},{"file": 36,"line": 553,"col": 29,"name": "a"},{"file": 36,"line": 553,"col": 43,"name": "b"},{"file": 13,"line": 1035,"col": 26,"name": "arch"},{"file": 52,"line": 293,"col": 22,"name": "p"},{"file": 52,"line": 293,"col": 34,"name": "sentinel_val","comptime": true},{"file": 36,"line": 644,"col": 12,"name": "ptr"},{"file": 43,"line": 775,"col": 13,"name": "ptr"},{"file": 43,"line": 775,"col": 30,"name": "offset"},{"file": 43,"line": 775,"col": 43,"name": "size"},{"file": 44,"line": 1094,"col": 26,"name": "di"},{"file": 44,"line": 1094,"col": 42,"name": "allocator"},{"file": 17,"line": 49,"col": 20,"name": "allocator"},{"file": 44,"line": 622,"col": 24,"name": "di"},{"file": 19,"line": 115,"col": 25,"name": "buffer"},{"file": 19,"line": 46,"col": 20,"name": "self"},{"file": 19,"line": 46,"col": 33,"name": "dest"},{"file": 19,"line": 34,"col": 22,"name": "self"},{"file": 19,"line": 77,"col": 22,"name": "self"},{"file": 19,"line": 77,"col": 35,"name": "pos"},{"file": 19,"line": 81,"col": 22,"name": "self"},{"file": 19,"line": 81,"col": 35,"name": "amt"},{"file": 19,"line": 101,"col": 22,"name": "self"},{"file": 19,"line": 97,"col": 25,"name": "self"},{"file": 19,"line": 42,"col": 30,"name": "self"},{"file": 21,"line": 26,"col": 25,"name": "self"},{"file": 21,"line": 18,"col": 22,"name": "self"},{"file": 21,"line": 18,"col": 34,"name": "pos"},{"file": 44,"line": 455,"col": 18,"name": "in_stream"},{"file": 44,"line": 455,"col": 38,"name": "endian"},{"file": 44,"line": 455,"col": 66,"name": "is_64"},{"file": 20,"line": 271,"col": 23,"name": "self"},{"file": 20,"line": 271,"col": 35,"name": "T","comptime": true},{"file": 20,"line": 271,"col": 53,"name": "endian"},{"file": 20,"line": 243,"col": 30,"name": "self"},{"file": 20,"line": 243,"col": 42,"name": "num_bytes","comptime": true},{"file": 20,"line": 42,"col": 25,"name": "self"},{"file": 20,"line": 42,"col": 37,"name": "buf"},{"file": 20,"line": 31,"col": 23,"name": "self"},{"file": 20,"line": 31,"col": 35,"name": "buffer"},{"file": 36,"line": 1322,"col": 15,"name": "T","comptime": true},{"file": 36,"line": 1322,"col": 33,"name": "bytes"},{"file": 36,"line": 1322,"col": 88,"name": "endian"},{"file": 20,"line": 229,"col": 24,"name": "self"},{"file": 20,"line": 24,"col": 20,"name": "self"},{"file": 20,"line": 24,"col": 32,"name": "buffer"},{"file": 21,"line": 30,"col": 22,"name": "self"},{"file": 44,"line": 841,"col": 22,"name": "di"},{"file": 44,"line": 841,"col": 38,"name": "abbrev_offset"},{"file": 17,"line": 159,"col": 22,"name": "self"},{"file": 17,"line": 159,"col": 35,"name": "item"},{"file": 44,"line": 854,"col": 24,"name": "di"},{"file": 44,"line": 854,"col": 40,"name": "offset"},{"file": 44,"line": 606,"col": 21,"name": "self"},{"file": 72,"line": 5,"col": 19,"name": "T","comptime": true},{"file": 72,"line": 5,"col": 37,"name": "reader"},{"file": 17,"line": 67,"col": 22,"name": "self"},{"file": 17,"line": 346,"col": 22,"name": "self"},{"file": 17,"line": 299,"col": 35,"name": "self"},{"file": 17,"line": 299,"col": 48,"name": "new_capacity"},{"file": 17,"line": 319,"col": 42,"name": "self"},{"file": 17,"line": 319,"col": 55,"name": "new_capacity"},{"file": 17,"line": 404,"col": 30,"name": "self"},{"file": 9,"line": 349,"col": 22,"name": "self"},{"file": 9,"line": 349,"col": 39,"name": "old_mem"},{"file": 9,"line": 349,"col": 57,"name": "new_n"},{"file": 17,"line": 356,"col": 36,"name": "self"},{"file": 44,"line": 885,"col": 16,"name": "di"},{"file": 44,"line": 885,"col": 32,"name": "in_stream"},{"file": 44,"line": 885,"col": 52,"name": "abbrev_table"},{"file": 44,"line": 885,"col": 86,"name": "is_64"},{"file": 44,"line": 586,"col": 23,"name": "abbrev_table"},{"file": 44,"line": 586,"col": 57,"name": "abbrev_code"},{"file": 17,"line": 253,"col": 22,"name": "self"},{"file": 17,"line": 253,"col": 35,"name": "new_len"},{"file": 44,"line": 537,"col": 18,"name": "allocator"},{"file": 44,"line": 537,"col": 44,"name": "in_stream"},{"file": 44,"line": 537,"col": 64,"name": "form_id"},{"file": 44,"line": 537,"col": 78,"name": "endian"},{"file": 44,"line": 537,"col": 106,"name": "is_64"},{"file": 44,"line": 298,"col": 15,"name": "self"},{"file": 44,"line": 298,"col": 33,"name": "id"},{"file": 44,"line": 338,"col": 25,"name": "self"},{"file": 44,"line": 338,"col": 43,"name": "di"},{"file": 44,"line": 338,"col": 59,"name": "id"},{"file": 44,"line": 1075,"col": 17,"name": "di"},{"file": 44,"line": 1075,"col": 33,"name": "offset"},{"file": 44,"line": 330,"col": 18,"name": "self"},{"file": 44,"line": 330,"col": 36,"name": "id"},{"file": 44,"line": 305,"col": 19,"name": "self"},{"file": 44,"line": 305,"col": 37,"name": "id"},{"file": 44,"line": 282,"col": 20,"name": "self"},{"file": 44,"line": 726,"col": 27,"name": "di"},{"file": 16,"line": 535,"col": 28,"name": "self"},{"file": 16,"line": 535,"col": 41,"name": "key"},{"file": 16,"line": 535,"col": 49,"name": "value"},{"file": 16,"line": 976,"col": 35,"name": "self"},{"file": 16,"line": 976,"col": 48,"name": "allocator"},{"file": 16,"line": 976,"col": 70,"name": "key"},{"file": 16,"line": 976,"col": 78,"name": "value"},{"file": 16,"line": 976,"col": 88,"name": "ctx"},{"file": 16,"line": 1372,"col": 31,"name": "self"},{"file": 16,"line": 1372,"col": 50,"name": "key"},{"file": 16,"line": 1372,"col": 58,"name": "ctx"},{"file": 16,"line": 1415,"col": 24,"name": "self"},{"file": 16,"line": 1415,"col": 37,"name": "allocator"},{"file": 16,"line": 1415,"col": 59,"name": "new_count"},{"file": 16,"line": 1415,"col": 76,"name": "ctx"},{"file": 16,"line": 1451,"col": 16,"name": "self"},{"file": 16,"line": 1451,"col": 29,"name": "allocator"},{"file": 16,"line": 1451,"col": 51,"name": "new_capacity"},{"file": 16,"line": 1451,"col": 71,"name": "ctx"},{"file": 16,"line": 873,"col": 27,"name": "size"},{"file": 16,"line": 1409,"col": 16,"name": "self"},{"file": 51,"line": 407,"col": 11,"name": "x"},{"file": 51,"line": 407,"col": 23,"name": "y"},{"file": 16,"line": 928,"col": 24,"name": "self"},{"file": 51,"line": 1030,"col": 20,"name": "v"},{"file": 16,"line": 1482,"col": 20,"name": "self"},{"file": 16,"line": 1482,"col": 33,"name": "allocator"},{"file": 16,"line": 1482,"col": 55,"name": "new_capacity"},{"file": 36,"line": 2858,"col": 20,"name": "addr"},{"file": 36,"line": 2858,"col": 33,"name": "alignment"},{"file": 9,"line": 251,"col": 4,"name": "self"},{"file": 9,"line": 252,"col": 4,"name": "T","comptime": true},{"file": 9,"line": 254,"col": 4,"docs": " null means naturally aligned","name": "alignment","comptime": true},{"file": 9,"line": 255,"col": 4,"name": "n"},{"file": 16,"line": 868,"col": 22,"name": "self"},{"file": 16,"line": 868,"col": 35,"name": "allocator"},{"file": 16,"line": 1403,"col": 25,"name": "self"},{"file": 16,"line": 920,"col": 16,"name": "self"},{"file": 16,"line": 924,"col": 18,"name": "self"},{"file": 16,"line": 755,"col": 26,"name": "self"},{"file": 16,"line": 1003,"col": 49,"name": "self"},{"file": 16,"line": 1003,"col": 62,"name": "key"},{"file": 16,"line": 1003,"col": 70,"name": "value"},{"file": 16,"line": 1003,"col": 80,"name": "ctx"},{"file": 36,"line": 2171,"col": 12,"name": "T","comptime": true},{"file": 36,"line": 2171,"col": 30,"name": "a"},{"file": 36,"line": 2171,"col": 37,"name": "b"},{"file": 43,"line": 637,"col": 4,"name": "out_stream"},{"file": 43,"line": 638,"col": 4,"name": "line_info"},{"file": 43,"line": 639,"col": 4,"name": "address"},{"file": 43,"line": 640,"col": 4,"name": "symbol_name"},{"file": 43,"line": 641,"col": 4,"name": "compile_unit_name"},{"file": 43,"line": 642,"col": 4,"name": "tty_config"},{"file": 43,"line": 643,"col": 4,"name": "printLineFromFile","comptime": true},{"file": 43,"line": 1559,"col": 34,"name": "self"},{"file": 43,"line": 1559,"col": 50,"name": "address"},{"file": 43,"line": 1568,"col": 22,"name": "address"},{"file": 43,"line": 1568,"col": 36,"name": "di"},{"file": 44,"line": 793,"col": 27,"name": "di"},{"file": 44,"line": 793,"col": 43,"name": "target_address"},{"file": 44,"line": 313,"col": 24,"name": "self"},{"file": 44,"line": 313,"col": 42,"name": "id"},{"file": 44,"line": 610,"col": 25,"name": "di"},{"file": 44,"line": 610,"col": 41,"name": "address"},{"file": 44,"line": 905,"col": 29,"name": "di"},{"file": 44,"line": 905,"col": 45,"name": "compile_unit"},{"file": 44,"line": 905,"col": 72,"name": "target_address"},{"file": 20,"line": 237,"col": 30,"name": "self"},{"file": 9,"line": 192,"col": 13,"name": "self"},{"file": 9,"line": 192,"col": 30,"name": "T","comptime": true},{"file": 9,"line": 192,"col": 48,"name": "n"},{"file": 9,"line": 483,"col": 12,"name": "self"},{"file": 9,"line": 483,"col": 29,"name": "memory"},{"file": 20,"line": 128,"col": 12,"name": "self"},{"file": 20,"line": 129,"col": 12,"name": "allocator"},{"file": 20,"line": 130,"col": 12,"name": "delimiter"},{"file": 20,"line": 131,"col": 12,"name": "max_size"},{"file": 20,"line": 102,"col": 12,"name": "self"},{"file": 20,"line": 103,"col": 12,"name": "array_list"},{"file": 20,"line": 104,"col": 12,"name": "delimiter"},{"file": 20,"line": 105,"col": 12,"name": "max_size"},{"file": 17,"line": 278,"col": 39,"name": "self"},{"file": 17,"line": 278,"col": 52,"name": "new_len"},{"file": 17,"line": 96,"col": 28,"name": "self"},{"file": 44,"line": 398,"col": 16,"name": "is_stmt"},{"file": 44,"line": 398,"col": 31,"name": "include_dirs"},{"file": 44,"line": 398,"col": 65,"name": "file_entries"},{"file": 44,"line": 398,"col": 102,"name": "target_address"},{"file": 21,"line": 22,"col": 22,"name": "self"},{"file": 21,"line": 22,"col": 34,"name": "amt"},{"file": 44,"line": 422,"col": 26,"name": "self"},{"file": 73,"line": 107,"col": 12,"name": "allocator"},{"file": 73,"line": 107,"col": 34,"name": "paths"},{"file": 73,"line": 43,"col": 17,"name": "allocator"},{"file": 73,"line": 43,"col": 39,"name": "separator"},{"file": 73,"line": 43,"col": 54,"name": "sepPredicate"},{"file": 73,"line": 43,"col": 82,"name": "paths"},{"file": 73,"line": 43,"col": 109,"name": "zero"},{"file": 73,"line": 33,"col": 13,"name": "byte"},{"file": 9,"line": 495,"col": 12,"name": "allocator"},{"file": 9,"line": 495,"col": 34,"name": "T","comptime": true},{"file": 9,"line": 495,"col": 52,"name": "m"},{"file": 36,"line": 213,"col": 12,"name": "T","comptime": true},{"file": 36,"line": 213,"col": 30,"name": "dest"},{"file": 36,"line": 213,"col": 41,"name": "source"},{"file": 44,"line": 379,"col": 17,"name": "self"},{"file": 72,"line": 54,"col": 19,"name": "T","comptime": true},{"file": 72,"line": 54,"col": 37,"name": "reader"},{"file": 43,"line": 45,"col": 18,"name": "self"},{"file": 43,"line": 449,"col": 4,"name": "out_stream"},{"file": 43,"line": 450,"col": 4,"name": "debug_info"},{"file": 43,"line": 451,"col": 4,"name": "tty_config"},{"file": 43,"line": 452,"col": 4,"name": "start_addr"},{"file": 43,"line": 366,"col": 16,"name": "first_address"},{"file": 43,"line": 366,"col": 39,"name": "fp"},{"file": 43,"line": 404,"col": 16,"name": "self"},{"file": 25,"line": 86,"col": 18,"name": "m"},{"file": 61,"line": 140,"col": 16,"name": "ev"},{"file": 75,"line": 187,"col": 11,"name": "phdrs"},{"file": 75,"line": 275,"col": 18,"name": "area"},{"file": 75,"line": 110,"col": 24,"name": "addr"},{"file": 53,"line": 6358,"col": 17,"name": "resource"},{"file": 53,"line": 6358,"col": 44,"name": "limits"},{"file": 66,"line": 777,"col": 18,"name": "status"},{"file": 66,"line": 189,"col": 16,"name": "r"},{"file": 66,"line": 1056,"col": 17,"name": "sig"},{"file": 66,"line": 1056,"col": 26,"name": "act","noalias": true},{"file": 66,"line": 1056,"col": 58,"name": "oact","noalias": true},{"file": 25,"line": 94,"col": 16,"name": "m"},{"file": 25,"line": 94,"col": 33,"name": "current_state"},{"file": 66,"line": 590,"col": 13,"name": "fd"},{"file": 66,"line": 590,"col": 22,"name": "buf"},{"file": 66,"line": 590,"col": 40,"name": "count"},{"file": 53,"line": 4982,"col": 23,"name": "err"},{"file": 14,"line": 15,"col": 21,"name": "self"},{"file": 14,"line": 15,"col": 33,"name": "bytes"},{"file": 47,"line": 684,"col": 4,"name": "value"},{"file": 47,"line": 685,"col": 4,"name": "fmt","comptime": true},{"file": 47,"line": 686,"col": 4,"name": "options"},{"file": 47,"line": 687,"col": 4,"name": "writer"},{"file": 47,"line": 705,"col": 4,"name": "value"},{"file": 47,"line": 706,"col": 4,"name": "fmt","comptime": true},{"file": 47,"line": 707,"col": 4,"name": "options"},{"file": 47,"line": 708,"col": 4,"name": "writer"},{"file": 47,"line": 1362,"col": 4,"name": "value"},{"file": 47,"line": 1363,"col": 4,"name": "base"},{"file": 47,"line": 1364,"col": 4,"name": "case"},{"file": 47,"line": 1365,"col": 4,"name": "options"},{"file": 47,"line": 1366,"col": 4,"name": "writer"},{"file": 51,"line": 938,"col": 15,"name": "x"},{"file": 47,"line": 1822,"col": 19,"name": "digit"},{"file": 47,"line": 1822,"col": 30,"name": "case"},{"file": 47,"line": 982,"col": 4,"name": "buf"},{"file": 47,"line": 983,"col": 4,"name": "options"},{"file": 47,"line": 984,"col": 4,"name": "writer"},{"file": 59,"line": 162,"col": 27,"name": "s"},{"file": 36,"line": 1268,"col": 21,"name": "T","comptime": true},{"file": 36,"line": 1268,"col": 39,"name": "bytes"},{"file": 59,"line": 18,"col": 30,"name": "first_byte"},{"file": 59,"line": 70,"col": 18,"name": "bytes"},{"file": 14,"line": 35,"col": 31,"name": "self"},{"file": 14,"line": 35,"col": 43,"name": "byte"},{"file": 14,"line": 35,"col": 53,"name": "n"},{"file": 66,"line": 1052,"col": 19,"name": "flags"},{"file": 66,"line": 1052,"col": 31,"name": "set","noalias": true},{"file": 66,"line": 1052,"col": 62,"name": "oldset","noalias": true},{"file": 66,"line": 790,"col": 13,"name": "tid"},{"file": 66,"line": 790,"col": 25,"name": "sig"},{"file": 63,"line": 168,"col": 16,"name": "seed"},{"file": 63,"line": 168,"col": 27,"name": "input"},{"file": 36,"line": 2502,"col": 15,"name": "ptr"},{"file": 52,"line": 675,"col": 11,"name": "a"},{"file": 52,"line": 675,"col": 23,"name": "b"},{"file": 43,"line": 1058,"col": 16,"name": "allocator"},{"file": 62,"line": 31,"col": 16,"name": "child_allocator"},{"file": 13,"line": 1418,"col": 18,"name": "self"},{"file": 31,"line": 259,"col": 13,"name": "_"},{"file": 31,"line": 259,"col": 28,"name": "n"},{"file": 31,"line": 259,"col": 38,"name": "alignment"},{"file": 31,"line": 259,"col": 54,"name": "len_align"},{"file": 31,"line": 259,"col": 70,"name": "ra"},{"file": 31,"line": 357,"col": 8,"name": "_"},{"file": 31,"line": 358,"col": 8,"name": "buf_unaligned"},{"file": 31,"line": 359,"col": 8,"name": "buf_align"},{"file": 31,"line": 360,"col": 8,"name": "new_size"},{"file": 31,"line": 361,"col": 8,"name": "len_align"},{"file": 31,"line": 362,"col": 8,"name": "return_address"},{"file": 31,"line": 408,"col": 12,"name": "_"},{"file": 31,"line": 408,"col": 27,"name": "buf_unaligned"},{"file": 31,"line": 408,"col": 48,"name": "buf_align"},{"file": 31,"line": 408,"col": 64,"name": "return_address"},{"file": 62,"line": 25,"col": 21,"name": "self"},{"file": 55,"line": 176,"col": 25,"name": "key","comptime": true},{"file": 15,"line": 198,"col": 35,"name": "self"},{"file": 36,"line": 730,"col": 15,"name": "ptr"},{"file": 36,"line": 730,"col": 29,"name": "end","comptime": true},{"file": 74,"line": 61,"col": 24,"name": "phdrs"},{"file": 74,"line": 34,"col": 19,"name": "self"},{"file": 74,"line": 38,"col": 20,"name": "self"},{"file": 16,"line": 1231,"col": 26,"name": "self"},{"file": 16,"line": 1231,"col": 38,"name": "key"},{"file": 16,"line": 1231,"col": 46,"name": "ctx"},{"file": 9,"line": 274,"col": 4,"name": "self"},{"file": 9,"line": 275,"col": 4,"name": "T","comptime": true},{"file": 9,"line": 277,"col": 4,"docs": " null means naturally aligned","name": "alignment","comptime": true},{"file": 9,"line": 278,"col": 4,"name": "n"},{"file": 9,"line": 279,"col": 4,"name": "exact"},{"file": 9,"line": 280,"col": 4,"name": "return_address"},{"file": 53,"line": 4957,"col": 19,"name": "file_path"},{"file": 36,"line": 967,"col": 21,"name": "T","comptime": true},{"file": 36,"line": 967,"col": 39,"name": "slice"},{"file": 36,"line": 967,"col": 57,"name": "value"},{"file": 48,"line": 986,"col": 21,"name": "self"},{"file": 48,"line": 986,"col": 32,"name": "sub_path"},{"file": 48,"line": 986,"col": 57,"name": "flags"},{"file": 48,"line": 2294,"col": 25,"name": "absolute_path_c"},{"file": 48,"line": 2294,"col": 57,"name": "flags"},{"file": 9,"line": 162,"col": 22,"name": "self"},{"file": 9,"line": 162,"col": 39,"name": "buf"},{"file": 9,"line": 162,"col": 50,"name": "buf_align"},{"file": 9,"line": 162,"col": 66,"name": "ret_addr"},{"file": 15,"line": 299,"col": 16,"name": "self"},{"file": 53,"line": 236,"col": 13,"name": "fd"},{"file": 66,"line": 376,"col": 12,"name": "address"},{"file": 66,"line": 376,"col": 29,"name": "length"},{"file": 66,"line": 376,"col": 44,"name": "prot"},{"file": 66,"line": 376,"col": 57,"name": "flags"},{"file": 66,"line": 376,"col": 69,"name": "fd"},{"file": 66,"line": 376,"col": 78,"name": "offset"},{"file": 36,"line": 861,"col": 11,"name": "value"},{"file": 51,"line": 459,"col": 11,"name": "T","comptime": true},{"file": 51,"line": 459,"col": 29,"name": "a"},{"file": 51,"line": 459,"col": 35,"name": "b"},{"file": 36,"line": 1276,"col": 22,"name": "T","comptime": true},{"file": 36,"line": 1276,"col": 40,"name": "bytes"},{"file": 9,"line": 371,"col": 4,"name": "self"},{"file": 9,"line": 372,"col": 4,"name": "old_mem"},{"file": 9,"line": 373,"col": 4,"name": "new_alignment","comptime": true},{"file": 9,"line": 374,"col": 4,"name": "new_n"},{"file": 9,"line": 375,"col": 4,"name": "exact"},{"file": 9,"line": 376,"col": 4,"name": "return_address"},{"file": 44,"line": 476,"col": 15,"name": "in_stream"},{"file": 44,"line": 476,"col": 35,"name": "endian"},{"file": 44,"line": 476,"col": 63,"name": "is_64"},{"file": 44,"line": 489,"col": 23,"name": "allocator"},{"file": 44,"line": 489,"col": 49,"name": "in_stream"},{"file": 44,"line": 489,"col": 69,"name": "endian"},{"file": 44,"line": 489,"col": 97,"name": "size"},{"file": 44,"line": 483,"col": 26,"name": "allocator"},{"file": 44,"line": 483,"col": 52,"name": "in_stream"},{"file": 44,"line": 483,"col": 72,"name": "size"},{"file": 44,"line": 494,"col": 26,"name": "allocator"},{"file": 44,"line": 494,"col": 52,"name": "in_stream"},{"file": 44,"line": 494,"col": 72,"name": "signed"},{"file": 44,"line": 494,"col": 86,"name": "endian"},{"file": 44,"line": 494,"col": 114,"name": "size","comptime": true},{"file": 44,"line": 468,"col": 18,"name": "allocator"},{"file": 44,"line": 468,"col": 44,"name": "in_stream"},{"file": 44,"line": 468,"col": 64,"name": "size"},{"file": 44,"line": 522,"col": 21,"name": "allocator"},{"file": 44,"line": 522,"col": 47,"name": "in_stream"},{"file": 44,"line": 522,"col": 67,"name": "endian"},{"file": 44,"line": 522,"col": 95,"name": "size"},{"file": 36,"line": 981,"col": 24,"name": "T","comptime": true},{"file": 36,"line": 981,"col": 42,"name": "slice"},{"file": 36,"line": 981,"col": 60,"name": "start_index"},{"file": 36,"line": 981,"col": 80,"name": "value"},{"file": 16,"line": 1375,"col": 31,"name": "self"},{"file": 16,"line": 1375,"col": 50,"name": "key"},{"file": 16,"line": 1375,"col": 64,"name": "ctx"},{"file": 51,"line": 1077,"col": 22,"name": "T","comptime": true},{"file": 51,"line": 1077,"col": 40,"name": "value"},{"file": 16,"line": 916,"col": 18,"name": "self"},{"file": 36,"line": 2864,"col": 27,"name": "T","comptime": true},{"file": 36,"line": 2864,"col": 45,"name": "addr"},{"file": 36,"line": 2864,"col": 54,"name": "alignment"},{"file": 16,"line": 1515,"col": 22,"name": "self"},{"file": 16,"line": 1515,"col": 35,"name": "allocator"},{"file": 16,"line": 767,"col": 35,"name": "hash"},{"file": 16,"line": 773,"col": 24,"name": "self"},{"file": 16,"line": 773,"col": 41,"name": "fp"},{"file": 43,"line": 505,"col": 24,"name": "conf"},{"file": 43,"line": 505,"col": 38,"name": "out_stream"},{"file": 43,"line": 505,"col": 59,"name": "color"},{"file": 43,"line": 982,"col": 26,"name": "out_stream"},{"file": 43,"line": 982,"col": 47,"name": "line_info"},{"file": 15,"line": 467,"col": 16,"name": "self"},{"file": 15,"line": 467,"col": 28,"name": "buffer"},{"file": 14,"line": 30,"col": 25,"name": "self"},{"file": 14,"line": 30,"col": 37,"name": "byte"},{"file": 36,"line": 2761,"col": 20,"name": "slice"},{"file": 9,"line": 427,"col": 14,"name": "self"},{"file": 9,"line": 427,"col": 31,"name": "old_mem"},{"file": 9,"line": 427,"col": 49,"name": "new_n"},{"file": 43,"line": 34,"col": 18,"name": "self"},{"file": 43,"line": 417,"col": 21,"name": "self"},{"file": 25,"line": 145,"col": 18,"name": "m"},{"file": 61,"line": 147,"col": 21,"name": "ev"},{"file": 61,"line": 147,"col": 39,"name": "timeout"},{"file": 36,"line": 240,"col": 11,"name": "T","comptime": true},{"file": 36,"line": 240,"col": 29,"name": "dest"},{"file": 36,"line": 240,"col": 40,"name": "value"},{"file": 75,"line": 269,"col": 23,"name": "T","comptime": true},{"file": 75,"line": 269,"col": 41,"name": "ptr"},{"file": 30,"line": 22,"col": 16,"name": "number"},{"file": 30,"line": 22,"col": 29,"name": "arg1"},{"file": 66,"line": 1533,"col": 17,"name": "resource"},{"file": 66,"line": 1533,"col": 44,"name": "rlim"},{"file": 30,"line": 52,"col": 16,"name": "number"},{"file": 30,"line": 52,"col": 29,"name": "arg1"},{"file": 30,"line": 52,"col": 42,"name": "arg2"},{"file": 30,"line": 52,"col": 55,"name": "arg3"},{"file": 30,"line": 52,"col": 68,"name": "arg4"},{"file": 66,"line": 286,"col": 18,"name": "uaddr"},{"file": 66,"line": 286,"col": 37,"name": "futex_op"},{"file": 66,"line": 286,"col": 52,"name": "val"},{"file": 66,"line": 286,"col": 62,"name": "timeout"},{"file": 30,"line": 41,"col": 16,"name": "number"},{"file": 30,"line": 41,"col": 29,"name": "arg1"},{"file": 30,"line": 41,"col": 42,"name": "arg2"},{"file": 30,"line": 41,"col": 55,"name": "arg3"},{"file": 43,"line": 62,"col": 13,"name": "fmt","comptime": true},{"file": 43,"line": 62,"col": 39,"name": "args"},{"file": 30,"line": 14,"col": 16,"name": "number"},{"file": 59,"line": 84,"col": 19,"name": "bytes"},{"file": 59,"line": 103,"col": 19,"name": "bytes"},{"file": 59,"line": 127,"col": 19,"name": "bytes"},{"file": 30,"line": 31,"col": 16,"name": "number"},{"file": 30,"line": 31,"col": 29,"name": "arg1"},{"file": 30,"line": 31,"col": 42,"name": "arg2"},{"file": 63,"line": 119,"col": 16,"name": "seed"},{"file": 63,"line": 119,"col": 27,"name": "input"},{"file": 16,"line": 392,"col": 20,"name": "allocator"},{"file": 62,"line": 17,"col": 23,"name": "self"},{"file": 62,"line": 17,"col": 36,"name": "child_allocator"},{"file": 36,"line": 2934,"col": 17,"name": "addr"},{"file": 36,"line": 2934,"col": 30,"name": "alignment"},{"file": 36,"line": 2450,"col": 20,"name": "ptr"},{"file": 36,"line": 2450,"col": 34,"name": "align_to"},{"file": 53,"line": 4008,"col": 14,"name": "memory"},{"file": 31,"line": 243,"col": 25,"name": "full_len"},{"file": 31,"line": 243,"col": 42,"name": "len"},{"file": 31,"line": 243,"col": 54,"name": "len_align"},{"file": 62,"line": 60,"col": 13,"name": "self"},{"file": 62,"line": 60,"col": 36,"name": "n"},{"file": 62,"line": 60,"col": 46,"name": "ptr_align"},{"file": 62,"line": 60,"col": 62,"name": "len_align"},{"file": 62,"line": 60,"col": 78,"name": "ra"},{"file": 62,"line": 88,"col": 14,"name": "self"},{"file": 62,"line": 88,"col": 37,"name": "buf"},{"file": 62,"line": 88,"col": 48,"name": "buf_align"},{"file": 62,"line": 88,"col": 64,"name": "new_len"},{"file": 62,"line": 88,"col": 80,"name": "len_align"},{"file": 62,"line": 88,"col": 96,"name": "ret_addr"},{"file": 62,"line": 111,"col": 12,"name": "self"},{"file": 62,"line": 111,"col": 35,"name": "buf"},{"file": 62,"line": 111,"col": 46,"name": "buf_align"},{"file": 62,"line": 111,"col": 62,"name": "ret_addr"},{"file": 62,"line": 45,"col": 18,"name": "self"},{"file": 62,"line": 45,"col": 41,"name": "prev_len"},{"file": 62,"line": 45,"col": 58,"name": "minimum_size"},{"file": 9,"line": 152,"col": 23,"name": "self"},{"file": 9,"line": 152,"col": 40,"name": "len"},{"file": 9,"line": 152,"col": 52,"name": "ptr_align"},{"file": 9,"line": 152,"col": 68,"name": "len_align"},{"file": 9,"line": 152,"col": 84,"name": "ret_addr"},{"file": 23,"line": 73,"col": 23,"name": "list"},{"file": 23,"line": 73,"col": 36,"name": "new_node"},{"file": 9,"line": 316,"col": 14,"name": "self"},{"file": 9,"line": 316,"col": 31,"name": "old_mem"},{"file": 9,"line": 316,"col": 49,"name": "new_n"},{"file": 9,"line": 55,"col": 4,"name": "pointer"},{"file": 9,"line": 56,"col": 4,"name": "allocFn","comptime": true},{"file": 9,"line": 57,"col": 4,"name": "resizeFn","comptime": true},{"file": 9,"line": 58,"col": 4,"name": "freeFn","comptime": true},{"file": 53,"line": 1652,"col": 14,"name": "key"},{"file": 15,"line": 193,"col": 17,"name": "self"},{"file": 53,"line": 1699,"col": 15,"name": "key"},{"file": 66,"line": 140,"col": 17,"name": "index"},{"file": 16,"line": 1234,"col": 26,"name": "self"},{"file": 16,"line": 1234,"col": 38,"name": "key"},{"file": 16,"line": 1234,"col": 52,"name": "ctx"},{"file": 51,"line": 453,"col": 11,"name": "T","comptime": true},{"file": 51,"line": 453,"col": 29,"name": "a"},{"file": 51,"line": 453,"col": 35,"name": "b"},{"file": 53,"line": 1443,"col": 15,"name": "dir_fd"},{"file": 53,"line": 1443,"col": 29,"name": "file_path"},{"file": 53,"line": 1443,"col": 55,"name": "flags"},{"file": 53,"line": 1443,"col": 67,"name": "mode"},{"file": 53,"line": 4578,"col": 13,"name": "fd"},{"file": 53,"line": 4578,"col": 23,"name": "operation"},{"file": 73,"line": 211,"col": 19,"name": "path_c"},{"file": 53,"line": 3683,"col": 13,"name": "fd"},{"file": 30,"line": 697,"col": 17,"name": "self"},{"file": 30,"line": 701,"col": 17,"name": "self"},{"file": 30,"line": 705,"col": 17,"name": "self"},{"file": 66,"line": 737,"col": 13,"name": "fd"},{"file": 30,"line": 78,"col": 4,"name": "number"},{"file": 30,"line": 79,"col": 4,"name": "arg1"},{"file": 30,"line": 80,"col": 4,"name": "arg2"},{"file": 30,"line": 81,"col": 4,"name": "arg3"},{"file": 30,"line": 82,"col": 4,"name": "arg4"},{"file": 30,"line": 83,"col": 4,"name": "arg5"},{"file": 30,"line": 84,"col": 4,"name": "arg6"},{"file": 36,"line": 917,"col": 23,"name": "Elem","comptime": true},{"file": 36,"line": 917,"col": 44,"name": "sentinel","comptime": true},{"file": 36,"line": 917,"col": 69,"name": "ptr"},{"file": 9,"line": 714,"col": 4,"name": "self"},{"file": 9,"line": 716,"col": 4,"docs": " Must be the same as what was returned from most recent call to `allocFn` or `resizeFn`.","name": "buf"},{"file": 9,"line": 720,"col": 4,"docs": " Must be the same as what was passed to `allocFn`. Must be >= 1. Must be a power of 2.","name": "buf_align"},{"file": 9,"line": 722,"col": 4,"docs": " Must be >= 1.","name": "new_len"},{"file": 9,"line": 726,"col": 4,"docs": " 0 indicates the length of the slice returned MUST match `new_len` exactly non-zero means the length of the returned slice must be aligned by `len_align` `new_len` must be aligned by `len_align`","name": "len_align"},{"file": 9,"line": 727,"col": 4,"name": "return_address"},{"file": 36,"line": 2673,"col": 20,"name": "T","comptime": true},{"file": 36,"line": 2673,"col": 38,"name": "bytes"},{"file": 9,"line": 157,"col": 24,"name": "self"},{"file": 9,"line": 157,"col": 41,"name": "buf"},{"file": 9,"line": 157,"col": 52,"name": "buf_align"},{"file": 9,"line": 157,"col": 68,"name": "new_len"},{"file": 9,"line": 157,"col": 84,"name": "len_align"},{"file": 9,"line": 157,"col": 100,"name": "ret_addr"},{"file": 20,"line": 276,"col": 26,"name": "self"},{"file": 20,"line": 276,"col": 38,"name": "ReturnType","comptime": true},{"file": 20,"line": 276,"col": 65,"name": "endian"},{"file": 20,"line": 276,"col": 93,"name": "size"},{"file": 36,"line": 1245,"col": 18,"name": "ReturnType","comptime": true},{"file": 36,"line": 1245,"col": 45,"name": "bytes"},{"file": 36,"line": 1245,"col": 64,"name": "endian"},{"file": 16,"line": 1102,"col": 27,"name": "self"},{"file": 16,"line": 1102,"col": 39,"name": "key"},{"file": 16,"line": 1102,"col": 53,"name": "ctx"},{"file": 51,"line": 1065,"col": 29,"name": "T","comptime": true},{"file": 51,"line": 1065,"col": 47,"name": "value"},{"file": 36,"line": 2911,"col": 28,"name": "T","comptime": true},{"file": 36,"line": 2911,"col": 46,"name": "addr"},{"file": 36,"line": 2911,"col": 55,"name": "alignment"},{"file": 53,"line": 542,"col": 12,"name": "fd"},{"file": 53,"line": 542,"col": 22,"name": "buf"},{"file": 9,"line": 451,"col": 4,"name": "self"},{"file": 9,"line": 452,"col": 4,"name": "old_mem"},{"file": 9,"line": 453,"col": 4,"name": "new_alignment","comptime": true},{"file": 9,"line": 454,"col": 4,"name": "new_n"},{"file": 9,"line": 455,"col": 4,"name": "return_address"},{"file": 13,"line": 855,"col": 27,"name": "arch"},{"file": 51,"line": 466,"col": 11,"name": "T","comptime": true},{"file": 51,"line": 466,"col": 29,"name": "a"},{"file": 51,"line": 466,"col": 35,"name": "b"},{"file": 66,"line": 290,"col": 18,"name": "uaddr"},{"file": 66,"line": 290,"col": 37,"name": "futex_op"},{"file": 66,"line": 290,"col": 52,"name": "val"},{"file": 61,"line": 201,"col": 16,"name": "waiters"},{"file": 61,"line": 201,"col": 31,"name": "timeout"},{"file": 66,"line": 1538,"col": 15,"name": "pid"},{"file": 66,"line": 1538,"col": 27,"name": "resource"},{"file": 66,"line": 1538,"col": 54,"name": "new_limit"},{"file": 66,"line": 1538,"col": 81,"name": "old_limit"},{"file": 43,"line": 1664,"col": 23,"name": "sig"},{"file": 43,"line": 1664,"col": 33,"name": "info"},{"file": 43,"line": 1664,"col": 60,"name": "ctx_ptr"},{"file": 13,"line": 657,"col": 33,"name": "set"},{"file": 13,"line": 657,"col": 43,"name": "arch_feature_index"},{"file": 63,"line": 41,"col": 16,"name": "seed"},{"file": 63,"line": 62,"col": 18,"name": "self"},{"file": 63,"line": 62,"col": 42,"name": "b"},{"file": 63,"line": 73,"col": 17,"name": "self"},{"file": 63,"line": 73,"col": 41,"name": "b"},{"file": 36,"line": 2938,"col": 24,"name": "T","comptime": true},{"file": 36,"line": 2938,"col": 42,"name": "addr"},{"file": 36,"line": 2938,"col": 51,"name": "alignment"},{"file": 36,"line": 2418,"col": 26,"name": "ptr"},{"file": 36,"line": 2418,"col": 40,"name": "align_to"},{"file": 66,"line": 408,"col": 14,"name": "address"},{"file": 66,"line": 408,"col": 36,"name": "length"},{"file": 36,"line": 135,"col": 21,"name": "full_len"},{"file": 36,"line": 135,"col": 38,"name": "alloc_len"},{"file": 36,"line": 135,"col": 56,"name": "len_align"},{"file": 9,"line": 69,"col": 21,"name": "ptr"},{"file": 9,"line": 69,"col": 38,"name": "len"},{"file": 9,"line": 69,"col": 50,"name": "ptr_align"},{"file": 9,"line": 69,"col": 66,"name": "len_align"},{"file": 9,"line": 69,"col": 82,"name": "ret_addr"},{"file": 9,"line": 73,"col": 22,"name": "ptr"},{"file": 9,"line": 73,"col": 39,"name": "buf"},{"file": 9,"line": 73,"col": 50,"name": "buf_align"},{"file": 9,"line": 73,"col": 66,"name": "new_len"},{"file": 9,"line": 73,"col": 82,"name": "len_align"},{"file": 9,"line": 73,"col": 98,"name": "ret_addr"},{"file": 9,"line": 78,"col": 20,"name": "ptr"},{"file": 9,"line": 78,"col": 37,"name": "buf"},{"file": 9,"line": 78,"col": 48,"name": "buf_align"},{"file": 9,"line": 78,"col": 64,"name": "ret_addr"},{"file": 53,"line": 2854,"col": 14,"name": "handle"},{"file": 36,"line": 784,"col": 14,"name": "ptr"},{"file": 36,"line": 784,"col": 28,"name": "end","comptime": true},{"file": 66,"line": 722,"col": 14,"name": "dirfd"},{"file": 66,"line": 722,"col": 26,"name": "path"},{"file": 66,"line": 722,"col": 47,"name": "flags"},{"file": 66,"line": 722,"col": 59,"name": "mode"},{"file": 66,"line": 853,"col": 13,"name": "fd"},{"file": 66,"line": 853,"col": 23,"name": "operation"},{"file": 73,"line": 270,"col": 24,"name": "path_c"},{"file": 66,"line": 1282,"col": 13,"name": "fd"},{"file": 66,"line": 1282,"col": 22,"name": "stat_buf"},{"file": 36,"line": 251,"col": 14,"name": "T","comptime": true},{"file": 16,"line": 763,"col": 26,"name": "self"},{"file": 66,"line": 437,"col": 12,"name": "fd"},{"file": 66,"line": 437,"col": 21,"name": "buf"},{"file": 66,"line": 437,"col": 33,"name": "count"},{"file": 43,"line": 125,"col": 30,"name": "bp"},{"file": 43,"line": 125,"col": 41,"name": "ip"},{"file": 39,"line": 141,"col": 13,"name": "self"},{"file": 39,"line": 141,"col": 30,"name": "name"},{"file": 39,"line": 141,"col": 48,"name": "estimated_total_items"},{"file": 39,"line": 83,"col": 17,"name": "self"},{"file": 39,"line": 83,"col": 30,"name": "name"},{"file": 39,"line": 83,"col": 48,"name": "estimated_total_items"},{"file": 39,"line": 119,"col": 20,"name": "self"},{"file": 39,"line": 182,"col": 15,"name": "self"},{"file": 39,"line": 101,"col": 15,"name": "self"},{"file": 39,"line": 290,"col": 11,"name": "self"},{"file": 39,"line": 290,"col": 28,"name": "format","comptime": true},{"file": 39,"line": 290,"col": 57,"name": "args"},{"file": 29,"line": 432,"col": 22,"name": "self"},{"file": 63,"line": 48,"col": 13,"name": "self"},{"file": 63,"line": 48,"col": 37,"name": "b"},{"file": 63,"line": 26,"col": 8,"name": "a"},{"file": 63,"line": 26,"col": 16,"name": "b"},{"file": 63,"line": 26,"col": 24,"name": "seed"},{"file": 63,"line": 11,"col": 14,"name": "bytes","comptime": true},{"file": 63,"line": 11,"col": 34,"name": "data"},{"file": 63,"line": 16,"col": 23,"name": "data"},{"file": 63,"line": 30,"col": 8,"name": "a"},{"file": 63,"line": 30,"col": 16,"name": "b"},{"file": 63,"line": 30,"col": 24,"name": "seed"},{"file": 63,"line": 20,"col": 7,"name": "a"},{"file": 63,"line": 20,"col": 15,"name": "b"},{"file": 36,"line": 2896,"col": 29,"name": "i"},{"file": 36,"line": 2896,"col": 39,"name": "alignment"},{"file": 13,"line": 876,"col": 27,"name": "arch"},{"file": 73,"line": 266,"col": 23,"name": "path"},{"file": 55,"line": 541,"col": 17,"name": "allocator"},{"file": 31,"line": 729,"col": 16,"name": "buffer"},{"file": 31,"line": 737,"col": 21,"name": "self"},{"file": 55,"line": 476,"col": 16,"name": "self"},{"file": 55,"line": 476,"col": 36,"name": "allocator"},{"file": 55,"line": 502,"col": 18,"name": "self"},{"file": 17,"line": 201,"col": 27,"name": "self"},{"file": 17,"line": 201,"col": 40,"name": "items"},{"file": 17,"line": 334,"col": 36,"name": "self"},{"file": 17,"line": 334,"col": 49,"name": "additional_count"},{"file": 17,"line": 208,"col": 41,"name": "self"},{"file": 17,"line": 208,"col": 54,"name": "items"},{"file": 53,"line": 4919,"col": 20,"name": "clk_id"},{"file": 53,"line": 4919,"col": 33,"name": "res"},{"file": 53,"line": 4878,"col": 21,"name": "clk_id"},{"file": 53,"line": 4878,"col": 34,"name": "tp"},{"file": 25,"line": 36,"col": 15,"name": "m"},{"file": 39,"line": 189,"col": 23,"name": "self"},{"file": 39,"line": 169,"col": 20,"name": "self"},{"file": 39,"line": 94,"col": 23,"name": "self"},{"file": 29,"line": 357,"col": 27,"name": "self"},{"file": 51,"line": 1278,"col": 15,"name": "T","comptime": true},{"file": 51,"line": 1278,"col": 33,"name": "a"},{"file": 51,"line": 1278,"col": 39,"name": "b"},{"file": 36,"line": 2905,"col": 21,"name": "addr"},{"file": 36,"line": 2905,"col": 34,"name": "alignment"},{"file": 31,"line": 767,"col": 13,"name": "self"},{"file": 31,"line": 767,"col": 42,"name": "n"},{"file": 31,"line": 767,"col": 52,"name": "ptr_align"},{"file": 31,"line": 767,"col": 68,"name": "len_align"},{"file": 31,"line": 767,"col": 84,"name": "ra"},{"file": 31,"line": 784,"col": 8,"name": "self"},{"file": 31,"line": 785,"col": 8,"name": "buf"},{"file": 31,"line": 786,"col": 8,"name": "buf_align"},{"file": 31,"line": 787,"col": 8,"name": "new_size"},{"file": 31,"line": 788,"col": 8,"name": "len_align"},{"file": 31,"line": 789,"col": 8,"name": "return_address"},{"file": 31,"line": 814,"col": 8,"name": "self"},{"file": 31,"line": 815,"col": 8,"name": "buf"},{"file": 31,"line": 816,"col": 8,"name": "buf_align"},{"file": 31,"line": 817,"col": 8,"name": "return_address"},{"file": 55,"line": 212,"col": 16,"name": "self"},{"file": 9,"line": 502,"col": 13,"name": "allocator"},{"file": 9,"line": 502,"col": 35,"name": "T","comptime": true},{"file": 9,"line": 502,"col": 53,"name": "m"},{"file": 66,"line": 890,"col": 20,"name": "clk_id"},{"file": 66,"line": 890,"col": 33,"name": "tp"},{"file": 66,"line": 862,"col": 21,"name": "clk_id"},{"file": 66,"line": 862,"col": 34,"name": "tp"},{"file": 25,"line": 68,"col": 19,"name": "m"},{"file": 47,"line": 1834,"col": 16,"name": "buf"},{"file": 47,"line": 1834,"col": 27,"name": "fmt","comptime": true},{"file": 47,"line": 1834,"col": 53,"name": "args"},{"file": 39,"line": 300,"col": 12,"name": "self"},{"file": 39,"line": 300,"col": 29,"name": "end"},{"file": 39,"line": 300,"col": 42,"name": "format","comptime": true},{"file": 39,"line": 300,"col": 71,"name": "args"},{"file": 58,"line": 205,"col": 16,"name": "self"},{"file": 29,"line": 320,"col": 25,"name": "size_class"},{"file": 29,"line": 327,"col": 12,"name": "bucket"},{"file": 29,"line": 328,"col": 12,"name": "size_class"},{"file": 29,"line": 329,"col": 12,"name": "used_bits_count"},{"file": 16,"line": 954,"col": 29,"name": "self"},{"file": 16,"line": 826,"col": 28,"name": "self"},{"file": 29,"line": 224,"col": 29,"name": "self"},{"file": 29,"line": 224,"col": 48,"name": "trace_kind"},{"file": 32,"line": 184,"col": 12,"name": "format","comptime": true},{"file": 32,"line": 185,"col": 12,"name": "args"},{"file": 31,"line": 756,"col": 21,"name": "self"},{"file": 31,"line": 756,"col": 50,"name": "slice"},{"file": 31,"line": 763,"col": 28,"name": "self"},{"file": 31,"line": 763,"col": 57,"name": "buf"},{"file": 66,"line": 877,"col": 27,"name": "clk"},{"file": 66,"line": 877,"col": 37,"name": "ts"},{"file": 19,"line": 60,"col": 21,"name": "self"},{"file": 19,"line": 60,"col": 34,"name": "bytes"},{"file": 19,"line": 38,"col": 22,"name": "self"},{"file": 19,"line": 105,"col": 26,"name": "self"},{"file": 58,"line": 235,"col": 29,"name": "self"},{"file": 58,"line": 235,"col": 42,"name": "duration"},{"file": 29,"line": 257,"col": 24,"name": "bucket"},{"file": 29,"line": 257,"col": 47,"name": "index"},{"file": 29,"line": 292,"col": 12,"name": "bucket"},{"file": 29,"line": 293,"col": 12,"name": "size_class"},{"file": 29,"line": 294,"col": 12,"name": "slot_index"},{"file": 29,"line": 295,"col": 12,"name": "trace_kind"},{"file": 32,"line": 127,"col": 4,"name": "message_level","comptime": true},{"file": 32,"line": 128,"col": 4,"name": "scope","comptime": true},{"file": 32,"line": 129,"col": 4,"name": "format","comptime": true},{"file": 32,"line": 130,"col": 4,"name": "args"},{"file": 31,"line": 720,"col": 22,"name": "container"},{"file": 31,"line": 720,"col": 39,"name": "slice"},{"file": 77,"line": 6,"col": 14,"name": "vername"},{"file": 77,"line": 6,"col": 35,"name": "name"},{"file": 29,"line": 262,"col": 16,"name": "bucket"},{"file": 29,"line": 263,"col": 16,"name": "size_class"},{"file": 29,"line": 264,"col": 16,"name": "slot_index"},{"file": 29,"line": 265,"col": 16,"name": "trace_kind"},{"file": 3,"line": 120,"col": 4,"name": "message_level","comptime": true},{"file": 3,"line": 121,"col": 4,"name": "scope","comptime": true},{"file": 3,"line": 122,"col": 4,"name": "format","comptime": true},{"file": 3,"line": 123,"col": 4,"name": "args"},{"file": 77,"line": 82,"col": 12,"name": "def_arg"},{"file": 77,"line": 82,"col": 34,"name": "vsym_arg"},{"file": 77,"line": 82,"col": 49,"name": "vername"},{"file": 77,"line": 82,"col": 70,"name": "strings"},{"file": 29,"line": 308,"col": 34,"name": "size_class"},{"file": 22,"line": 58,"col": 8,"name": "self"},{"file": 22,"line": 59,"col": 8,"name": "fmt","comptime": true},{"file": 22,"line": 60,"col": 8,"name": "options"},{"file": 22,"line": 61,"col": 8,"name": "writer"},{"file": 62,"line": 35,"col": 18,"name": "self"},{"file": 34,"line": 758,"col": 27,"name": "e"},{"file": 34,"line": 761,"col": 31,"name": "i"},{"file": 16,"line": 75,"col": 16,"name": "self"},{"file": 16,"line": 75,"col": 31,"name": "s"},{"file": 16,"line": 79,"col": 15,"name": "self"},{"file": 16,"line": 79,"col": 30,"name": "a"},{"file": 16,"line": 79,"col": 45,"name": "b"},{"file": 16,"line": 89,"col": 18,"name": "s"},{"file": 16,"line": 85,"col": 17,"name": "a"},{"file": 16,"line": 85,"col": 32,"name": "b"},{"file": 33,"line": 18,"col": 25,"name": "self"},{"file": 33,"line": 18,"col": 44,"name": "opt"},{"file": 57,"line": 45,"col": 19,"name": "expected"},{"file": 57,"line": 45,"col": 38,"name": "actual"},{"file": 33,"line": 10,"col": 21,"name": "self"},{"file": 33,"line": 10,"col": 34,"name": "opt"},{"file": 6,"line": 6,"col": 15,"name": "name"},{"file": 6,"line": 6,"col": 33,"name": "short_name"},{"file": 6,"line": 6,"col": 50,"name": "description"},{"file": 6,"line": 17,"col": 14,"name": "name"},{"file": 6,"line": 17,"col": 32,"name": "short_name"},{"file": 6,"line": 17,"col": 49,"name": "description"},{"file": 6,"line": 23,"col": 4,"name": "name"},{"file": 6,"line": 24,"col": 4,"name": "short_name"},{"file": 6,"line": 25,"col": 4,"name": "max_values"},{"file": 6,"line": 26,"col": 4,"name": "description"},{"file": 6,"line": 42,"col": 4,"name": "name"},{"file": 6,"line": 43,"col": 4,"name": "short_name"},{"file": 6,"line": 44,"col": 4,"name": "options"},{"file": 6,"line": 45,"col": 4,"name": "description"},{"file": 4,"line": 23,"col": 11,"name": "name"},{"file": 4,"line": 36,"col": 17,"name": "self"},{"file": 4,"line": 36,"col": 29,"name": "short_name"},{"file": 4,"line": 41,"col": 28,"name": "self"},{"file": 4,"line": 46,"col": 16,"name": "self"},{"file": 4,"line": 46,"col": 28,"name": "long_name"},{"file": 4,"line": 50,"col": 29,"name": "self"},{"file": 4,"line": 54,"col": 22,"name": "self"},{"file": 4,"line": 54,"col": 34,"name": "description"},{"file": 4,"line": 60,"col": 17,"name": "self"},{"file": 4,"line": 60,"col": 29,"name": "num"},{"file": 4,"line": 69,"col": 17,"name": "self"},{"file": 4,"line": 69,"col": 29,"name": "num"},{"file": 4,"line": 77,"col": 21,"name": "self"},{"file": 4,"line": 77,"col": 33,"name": "values"},{"file": 4,"line": 84,"col": 23,"name": "self"},{"file": 4,"line": 84,"col": 35,"name": "delimiter"},{"file": 4,"line": 89,"col": 34,"name": "self"},{"file": 4,"line": 89,"col": 52,"name": "value_to_check"},{"file": 4,"line": 100,"col": 20,"name": "self"},{"file": 4,"line": 100,"col": 32,"name": "option"},{"file": 4,"line": 104,"col": 21,"name": "self"},{"file": 4,"line": 104,"col": 33,"name": "option"},{"file": 4,"line": 108,"col": 24,"name": "self"},{"file": 4,"line": 108,"col": 42,"name": "option"},{"file": 5,"line": 25,"col": 11,"name": "allocator"},{"file": 5,"line": 25,"col": 33,"name": "name"},{"file": 5,"line": 29,"col": 26,"name": "allocator"},{"file": 5,"line": 29,"col": 48,"name": "name"},{"file": 5,"line": 29,"col": 66,"name": "description"},{"file": 5,"line": 36,"col": 14,"name": "self"},{"file": 5,"line": 47,"col": 14,"name": "self"},{"file": 5,"line": 47,"col": 30,"name": "new_arg"},{"file": 5,"line": 56,"col": 15,"name": "self"},{"file": 5,"line": 56,"col": 31,"name": "args"},{"file": 5,"line": 61,"col": 21,"name": "self"},{"file": 5,"line": 61,"col": 37,"name": "new_subcommand"},{"file": 5,"line": 66,"col": 22,"name": "self"},{"file": 5,"line": 66,"col": 38,"name": "subcommands"},{"file": 5,"line": 71,"col": 24,"name": "self"},{"file": 5,"line": 71,"col": 40,"name": "arg_name"},{"file": 5,"line": 76,"col": 20,"name": "self"},{"file": 5,"line": 76,"col": 36,"name": "arg_name"},{"file": 5,"line": 76,"col": 58,"name": "n"},{"file": 5,"line": 86,"col": 17,"name": "self"},{"file": 5,"line": 90,"col": 20,"name": "self"},{"file": 5,"line": 94,"col": 24,"name": "self"},{"file": 5,"line": 100,"col": 23,"name": "self"},{"file": 5,"line": 100,"col": 45,"name": "short_name"},{"file": 5,"line": 111,"col": 22,"name": "self"},{"file": 5,"line": 111,"col": 44,"name": "long_name"},{"file": 5,"line": 122,"col": 22,"name": "self"},{"file": 5,"line": 122,"col": 44,"name": "provided_subcmd"},{"file": 5,"line": 132,"col": 20,"name": "self"},{"file": 5,"line": 132,"col": 36,"name": "option"},{"file": 5,"line": 136,"col": 21,"name": "self"},{"file": 5,"line": 136,"col": 37,"name": "option"},{"file": 5,"line": 140,"col": 24,"name": "self"},{"file": 5,"line": 140,"col": 46,"name": "option"},{"file": 5,"line": 144,"col": 12,"name": "self"},{"file": 7,"line": 64,"col": 12,"name": "allocator"},{"file": 7,"line": 72,"col": 14,"name": "self"},{"file": 7,"line": 86,"col": 21,"name": "self"},{"file": 7,"line": 86,"col": 41,"name": "arg"},{"file": 7,"line": 86,"col": 58,"name": "value"},{"file": 7,"line": 133,"col": 21,"name": "self"},{"file": 7,"line": 133,"col": 41,"name": "subcommand"},{"file": 7,"line": 142,"col": 17,"name": "self"},{"file": 7,"line": 142,"col": 43,"name": "name_to_lookup"},{"file": 7,"line": 154,"col": 15,"name": "self"},{"file": 7,"line": 159,"col": 15,"name": "self"},{"file": 7,"line": 159,"col": 41,"name": "arg_name"},{"file": 7,"line": 172,"col": 16,"name": "self"},{"file": 7,"line": 172,"col": 42,"name": "name_to_lookup"},{"file": 7,"line": 180,"col": 25,"name": "self"},{"file": 7,"line": 180,"col": 51,"name": "subcmd_name"},{"file": 8,"line": 24,"col": 4,"name": "allocator"},{"file": 8,"line": 25,"col": 4,"name": "cmd_name"},{"file": 8,"line": 26,"col": 4,"name": "description"},{"file": 8,"line": 39,"col": 14,"name": "self"},{"file": 8,"line": 46,"col": 21,"name": "self"},{"file": 8,"line": 46,"col": 35,"name": "cmd_name"},{"file": 8,"line": 46,"col": 57,"name": "cmd_description"},{"file": 8,"line": 53,"col": 19,"name": "self"},{"file": 8,"line": 58,"col": 20,"name": "self"},{"file": 8,"line": 64,"col": 17,"name": "self"},{"file": 8,"line": 64,"col": 31,"name": "argv"},{"file": 8,"line": 78,"col": 19,"name": "self"},{"file": 8,"line": 84,"col": 29,"name": "self"},{"file": 8,"line": 88,"col": 21,"name": "self"},{"file": 8,"line": 92,"col": 22,"name": "self"},{"file": 8,"line": 92,"col": 36,"name": "ctx"},{"file": 8,"line": 104,"col": 29,"name": "self"},{"file": 34,"line": 467,"col": 24,"name": "self"},{"file": 34,"line": 467,"col": 36,"name": "key"},{"file": 34,"line": 510,"col": 19,"name": "self"},{"file": 34,"line": 510,"col": 32,"name": "key"},{"file": 34,"line": 510,"col": 42,"name": "value"},{"file": 33,"line": 14,"col": 22,"name": "self"},{"file": 33,"line": 14,"col": 35,"name": "opt"},{"file": 17,"line": 466,"col": 22,"name": "self"},{"file": 17,"line": 466,"col": 35,"name": "allocator"},{"file": 17,"line": 524,"col": 22,"name": "self"},{"file": 17,"line": 524,"col": 35,"name": "allocator"},{"file": 17,"line": 524,"col": 57,"name": "item"},{"file": 17,"line": 708,"col": 22,"name": "self"},{"file": 17,"line": 708,"col": 35,"name": "allocator"},{"file": 17,"line": 665,"col": 35,"name": "self"},{"file": 17,"line": 665,"col": 48,"name": "allocator"},{"file": 17,"line": 665,"col": 70,"name": "new_capacity"},{"file": 17,"line": 681,"col": 42,"name": "self"},{"file": 17,"line": 681,"col": 55,"name": "allocator"},{"file": 17,"line": 681,"col": 77,"name": "new_capacity"},{"file": 17,"line": 765,"col": 30,"name": "self"},{"file": 17,"line": 718,"col": 36,"name": "self"},{"file": 10,"line": 36,"col": 12,"name": "cmd"},{"file": 10,"line": 36,"col": 33,"name": "options"},{"file": 16,"line": 456,"col": 29,"name": "self"},{"file": 7,"line": 33,"col": 18,"name": "self"},{"file": 16,"line": 416,"col": 22,"name": "self"},{"file": 7,"line": 55,"col": 18,"name": "self"},{"file": 7,"line": 15,"col": 17,"name": "val"},{"file": 16,"line": 581,"col": 22,"name": "self"},{"file": 16,"line": 581,"col": 34,"name": "key"},{"file": 7,"line": 25,"col": 18,"name": "self"},{"file": 16,"line": 529,"col": 19,"name": "self"},{"file": 16,"line": 529,"col": 32,"name": "key"},{"file": 16,"line": 529,"col": 40,"name": "value"},{"file": 7,"line": 29,"col": 20,"name": "self"},{"file": 16,"line": 1172,"col": 26,"name": "self"},{"file": 16,"line": 1172,"col": 39,"name": "allocator"},{"file": 16,"line": 1172,"col": 61,"name": "key"},{"file": 16,"line": 1172,"col": 69,"name": "value"},{"file": 16,"line": 1172,"col": 79,"name": "ctx"},{"file": 16,"line": 1246,"col": 31,"name": "self"},{"file": 16,"line": 1246,"col": 44,"name": "allocator"},{"file": 16,"line": 1246,"col": 66,"name": "key"},{"file": 16,"line": 1246,"col": 74,"name": "ctx"},{"file": 16,"line": 1258,"col": 38,"name": "self"},{"file": 16,"line": 1258,"col": 51,"name": "allocator"},{"file": 16,"line": 1258,"col": 73,"name": "key"},{"file": 16,"line": 1258,"col": 87,"name": "key_ctx"},{"file": 16,"line": 1258,"col": 105,"name": "ctx"},{"file": 16,"line": 1285,"col": 45,"name": "self"},{"file": 16,"line": 1285,"col": 58,"name": "key"},{"file": 16,"line": 1285,"col": 72,"name": "ctx"},{"file": 16,"line": 613,"col": 24,"name": "self"},{"file": 16,"line": 613,"col": 36,"name": "key"},{"file": 16,"line": 438,"col": 21,"name": "self"},{"file": 55,"line": 580,"col": 16,"name": "allocator"},{"file": 55,"line": 580,"col": 42,"name": "args_alloc"},{"file": 11,"line": 99,"col": 4,"name": "allocator"},{"file": 11,"line": 100,"col": 4,"name": "tokenizer"},{"file": 11,"line": 101,"col": 4,"name": "command"},{"file": 64,"line": 68,"col": 16,"name": "args"},{"file": 11,"line": 114,"col": 13,"name": "self"},{"file": 12,"line": 41,"col": 16,"name": "err_builder"},{"file": 10,"line": 40,"col": 16,"name": "self"},{"file": 10,"line": 40,"col": 29,"name": "stream"},{"file": 37,"line": 38,"col": 22,"name": "underlying_stream"},{"file": 37,"line": 27,"col": 21,"name": "self"},{"file": 37,"line": 27,"col": 34,"name": "bytes"},{"file": 37,"line": 23,"col": 22,"name": "self"},{"file": 10,"line": 53,"col": 20,"name": "self"},{"file": 10,"line": 53,"col": 33,"name": "writer"},{"file": 10,"line": 167,"col": 23,"name": "writer"},{"file": 10,"line": 61,"col": 15,"name": "self"},{"file": 10,"line": 61,"col": 28,"name": "writer"},{"file": 10,"line": 163,"col": 20,"name": "required"},{"file": 10,"line": 88,"col": 17,"name": "self"},{"file": 10,"line": 88,"col": 30,"name": "writer"},{"file": 10,"line": 102,"col": 16,"name": "self"},{"file": 10,"line": 102,"col": 29,"name": "writer"},{"file": 10,"line": 152,"col": 15,"name": "self"},{"file": 10,"line": 152,"col": 28,"name": "writer"},{"file": 37,"line": 14,"col": 21,"name": "self"},{"file": 38,"line": 162,"col": 29,"name": "self"},{"file": 38,"line": 162,"col": 49,"name": "offset"},{"file": 38,"line": 167,"col": 23,"name": "self"},{"file": 38,"line": 167,"col": 36,"name": "count"},{"file": 35,"line": 86,"col": 21,"name": "self"},{"file": 35,"line": 86,"col": 33,"name": "index"},{"file": 35,"line": 107,"col": 19,"name": "self"},{"file": 35,"line": 107,"col": 32,"name": "index"},{"file": 34,"line": 540,"col": 22,"name": "self"},{"file": 34,"line": 540,"col": 35,"name": "key"},{"file": 16,"line": 1215,"col": 29,"name": "self"},{"file": 16,"line": 1215,"col": 41,"name": "key"},{"file": 16,"line": 1215,"col": 49,"name": "ctx"},{"file": 16,"line": 759,"col": 31,"name": "self"},{"file": 16,"line": 912,"col": 21,"name": "self"},{"file": 12,"line": 33,"col": 21,"name": "self"},{"file": 12,"line": 33,"col": 42,"name": "cmd"},{"file": 64,"line": 72,"col": 21,"name": "self"},{"file": 12,"line": 37,"col": 29,"name": "self"},{"file": 12,"line": 37,"col": 50,"name": "provided_arg"},{"file": 64,"line": 59,"col": 24,"name": "self"},{"file": 11,"line": 172,"col": 21,"name": "self"},{"file": 11,"line": 172,"col": 36,"name": "token"},{"file": 64,"line": 36,"col": 25,"name": "self"},{"file": 64,"line": 49,"col": 24,"name": "self"},{"file": 12,"line": 25,"col": 21,"name": "self"},{"file": 12,"line": 25,"col": 42,"name": "err"},{"file": 11,"line": 203,"col": 15,"name": "self"},{"file": 11,"line": 203,"col": 30,"name": "token"},{"file": 11,"line": 420,"col": 19,"name": "self"},{"file": 11,"line": 420,"col": 34,"name": "provided_subcmd"},{"file": 38,"line": 234,"col": 30,"name": "self"},{"file": 38,"line": 273,"col": 35,"name": "self"},{"file": 38,"line": 273,"col": 48,"name": "src"},{"file": 38,"line": 148,"col": 28,"name": "self"},{"file": 38,"line": 148,"col": 48,"name": "offset"},{"file": 35,"line": 214,"col": 19,"name": "index"},{"file": 35,"line": 113,"col": 21,"name": "self"},{"file": 35,"line": 113,"col": 34,"name": "index"},{"file": 16,"line": 1218,"col": 29,"name": "self"},{"file": 16,"line": 1218,"col": 41,"name": "key"},{"file": 16,"line": 1218,"col": 55,"name": "ctx"},{"file": 64,"line": 96,"col": 22,"name": "self"},{"file": 36,"line": 1716,"col": 18,"name": "T","comptime": true},{"file": 36,"line": 1716,"col": 36,"name": "haystack"},{"file": 36,"line": 1716,"col": 57,"name": "needle"},{"file": 64,"line": 122,"col": 25,"name": "arg"},{"file": 64,"line": 144,"col": 26,"name": "arg"},{"file": 64,"line": 32,"col": 16,"name": "value"},{"file": 64,"line": 32,"col": 35,"name": "tag"},{"file": 11,"line": 311,"col": 4,"name": "self"},{"file": 11,"line": 312,"col": 4,"name": "arg"},{"file": 11,"line": 313,"col": 4,"name": "value"},{"file": 11,"line": 314,"col": 4,"name": "is_attached_value"},{"file": 11,"line": 211,"col": 20,"name": "self"},{"file": 11,"line": 211,"col": 35,"name": "token"},{"file": 11,"line": 249,"col": 19,"name": "self"},{"file": 11,"line": 249,"col": 34,"name": "token"},{"file": 64,"line": 115,"col": 19,"name": "self"},{"file": 7,"line": 49,"col": 23,"name": "name"},{"file": 7,"line": 49,"col": 41,"name": "args_ctx"},{"file": 7,"line": 42,"col": 26,"name": "name"},{"file": 38,"line": 240,"col": 29,"name": "self"},{"file": 38,"line": 240,"col": 49,"name": "offset"},{"file": 38,"line": 266,"col": 22,"name": "self"},{"file": 38,"line": 266,"col": 35,"name": "count"},{"file": 47,"line": 958,"col": 4,"name": "c"},{"file": 47,"line": 959,"col": 4,"name": "options"},{"file": 47,"line": 960,"col": 4,"name": "writer"},{"file": 36,"line": 937,"col": 16,"name": "T","comptime": true},{"file": 36,"line": 937,"col": 34,"name": "slice"},{"file": 36,"line": 937,"col": 52,"name": "values_to_strip"},{"file": 36,"line": 1211,"col": 23,"name": "T","comptime": true},{"file": 36,"line": 1211,"col": 41,"name": "haystack"},{"file": 36,"line": 1211,"col": 62,"name": "expected_count"},{"file": 36,"line": 1211,"col": 85,"name": "needle"},{"file": 36,"line": 1655,"col": 13,"name": "T","comptime": true},{"file": 36,"line": 1655,"col": 31,"name": "buffer"},{"file": 36,"line": 1655,"col": 50,"name": "delimiter"},{"file": 36,"line": 1791,"col": 20,"name": "self"},{"file": 11,"line": 405,"col": 4,"name": "self"},{"file": 11,"line": 406,"col": 4,"name": "arg"},{"file": 11,"line": 407,"col": 4,"name": "list"},{"file": 11,"line": 408,"col": 4,"name": "value"},{"file": 11,"line": 382,"col": 4,"name": "self"},{"file": 11,"line": 383,"col": 4,"name": "arg"},{"file": 11,"line": 384,"col": 4,"name": "list"},{"file": 11,"line": 385,"col": 4,"name": "num"},{"file": 11,"line": 395,"col": 4,"name": "self"},{"file": 11,"line": 396,"col": 4,"name": "arg"},{"file": 11,"line": 397,"col": 4,"name": "list"},{"file": 11,"line": 273,"col": 28,"name": "token"},{"file": 11,"line": 39,"col": 16,"name": "name"},{"file": 11,"line": 39,"col": 34,"name": "value"},{"file": 11,"line": 47,"col": 16,"name": "self"},{"file": 12,"line": 29,"col": 21,"name": "self"},{"file": 12,"line": 29,"col": 42,"name": "arg"},{"file": 11,"line": 65,"col": 20,"name": "self"},{"file": 11,"line": 73,"col": 25,"name": "self"},{"file": 11,"line": 54,"col": 20,"name": "self"},{"file": 11,"line": 81,"col": 19,"name": "self"},{"file": 11,"line": 58,"col": 25,"name": "self"},{"file": 11,"line": 295,"col": 4,"name": "self"},{"file": 11,"line": 296,"col": 4,"name": "arg"},{"file": 11,"line": 297,"col": 4,"name": "attached_value"},{"file": 36,"line": 1097,"col": 18,"name": "T","comptime": true},{"file": 36,"line": 1097,"col": 36,"name": "haystack"},{"file": 36,"line": 1097,"col": 57,"name": "start_index"},{"file": 36,"line": 1097,"col": 77,"name": "needle"},{"file": 64,"line": 104,"col": 28,"name": "self"},{"file": 36,"line": 1561,"col": 16,"name": "T","comptime": true},{"file": 36,"line": 1561,"col": 34,"name": "buffer"},{"file": 36,"line": 1561,"col": 53,"name": "delimiter_bytes"},{"file": 36,"line": 1743,"col": 20,"name": "self"},{"file": 36,"line": 1759,"col": 20,"name": "self"},{"file": 11,"line": 85,"col": 15,"name": "self"},{"file": 65,"line": 546,"col": 31,"name": "T","comptime": true},{"file": 36,"line": 1032,"col": 24,"name": "T","comptime": true},{"file": 36,"line": 1032,"col": 42,"name": "haystack"},{"file": 36,"line": 1032,"col": 63,"name": "start_index"},{"file": 36,"line": 1032,"col": 83,"name": "needle"},{"file": 36,"line": 1054,"col": 32,"name": "pattern"},{"file": 36,"line": 1054,"col": 53,"name": "table"},{"file": 36,"line": 1771,"col": 23,"name": "self"},{"file": 36,"line": 1771,"col": 35,"name": "byte"},{"file": 64,"line": 180,"col": 15,"name": "actual_token"},{"file": 64,"line": 180,"col": 36,"name": "expected_tag"},{"file": 57,"line": 301,"col": 14,"name": "ok"},{"file": 13,"line": 722,"col": 35,"name": "F","comptime": true},{"file": 52,"line": 858,"col": 11,"name": "signedness","comptime": true},{"file": 52,"line": 858,"col": 56,"name": "bit_count","comptime": true},{"file": 51,"line": 620,"col": 15,"name": "T","comptime": true},{"file": 14,"line": 5,"col": 4,"name": "Context","comptime": true},{"file": 14,"line": 6,"col": 4,"name": "WriteError","comptime": true},{"file": 14,"line": 7,"col": 4,"name": "writeFn","comptime": true},{"file": 52,"line": 363,"col": 20,"name": "T","comptime": true},{"file": 47,"line": 272,"col": 15,"name": "str"},{"file": 47,"line": 202,"col": 20,"name": "str","comptime": true},{"file": 16,"line": 54,"col": 19,"name": "K","comptime": true},{"file": 16,"line": 11,"col": 21,"name": "K","comptime": true},{"file": 16,"line": 11,"col": 39,"name": "Context","comptime": true},{"file": 16,"line": 37,"col": 20,"name": "K","comptime": true},{"file": 16,"line": 37,"col": 38,"name": "Context","comptime": true},{"file": 16,"line": 133,"col": 21,"name": "RawContext","comptime": true},{"file": 16,"line": 133,"col": 48,"name": "PseudoKey","comptime": true},{"file": 16,"line": 133,"col": 74,"name": "Key","comptime": true},{"file": 16,"line": 133,"col": 94,"name": "Hash","comptime": true},{"file": 16,"line": 357,"col": 4,"name": "K","comptime": true},{"file": 16,"line": 358,"col": 4,"name": "V","comptime": true},{"file": 16,"line": 359,"col": 4,"name": "Context","comptime": true},{"file": 16,"line": 360,"col": 4,"name": "max_load_percentage","comptime": true},{"file": 16,"line": 46,"col": 19,"name": "K","comptime": true},{"file": 16,"line": 46,"col": 37,"name": "V","comptime": true},{"file": 16,"line": 671,"col": 4,"name": "K","comptime": true},{"file": 16,"line": 672,"col": 4,"name": "V","comptime": true},{"file": 16,"line": 673,"col": 4,"name": "Context","comptime": true},{"file": 16,"line": 674,"col": 4,"name": "max_load_percentage","comptime": true},{"file": 51,"line": 319,"col": 11,"name": "A","comptime": true},{"file": 51,"line": 319,"col": 29,"name": "B","comptime": true},{"file": 17,"line": 23,"col": 24,"name": "T","comptime": true},{"file": 17,"line": 23,"col": 42,"name": "alignment","comptime": true},{"file": 17,"line": 12,"col": 17,"name": "T","comptime": true},{"file": 52,"line": 159,"col": 12,"name": "T","comptime": true},{"file": 52,"line": 226,"col": 16,"name": "T","comptime": true},{"file": 52,"line": 226,"col": 34,"name": "sentinel_val","comptime": true},{"file": 36,"line": 586,"col": 12,"name": "T","comptime": true},{"file": 19,"line": 119,"col": 19,"name": "T","comptime": true},{"file": 19,"line": 8,"col": 25,"name": "Buffer","comptime": true},{"file": 20,"line": 7,"col": 4,"name": "Context","comptime": true},{"file": 20,"line": 8,"col": 4,"name": "ReadError","comptime": true},{"file": 20,"line": 12,"col": 4,"docs": " Returns the number of bytes read. It may be less than buffer.len. If the number of bytes read is 0, it means end of stream. End of stream is not an error condition.","name": "readFn","comptime": true},{"file": 21,"line": 3,"col": 4,"name": "Context","comptime": true},{"file": 21,"line": 4,"col": 4,"name": "SeekErrorType","comptime": true},{"file": 21,"line": 5,"col": 4,"name": "GetSeekPosErrorType","comptime": true},{"file": 21,"line": 6,"col": 4,"name": "seekToFn","comptime": true},{"file": 21,"line": 7,"col": 4,"name": "seekByFn","comptime": true},{"file": 21,"line": 8,"col": 4,"name": "getPosFn","comptime": true},{"file": 21,"line": 9,"col": 4,"name": "getEndPosFn","comptime": true},{"file": 51,"line": 417,"col": 12,"name": "x"},{"file": 51,"line": 417,"col": 24,"name": "y"},{"file": 51,"line": 417,"col": 36,"name": "z"},{"file": 51,"line": 1218,"col": 14,"name": "T","comptime": true},{"file": 65,"line": 44,"col": 13,"name": "name","comptime": true},{"file": 65,"line": 46,"col": 21,"name": "T","comptime": true},{"file": 65,"line": 353,"col": 19,"name": "T","comptime": true},{"file": 47,"line": 933,"col": 16,"name": "fmt","comptime": true},{"file": 52,"line": 598,"col": 11,"name": "T","comptime": true},{"file": 65,"line": 98,"col": 10,"name": "id","comptime": true},{"file": 65,"line": 100,"col": 21,"name": "T","comptime": true},{"file": 65,"line": 217,"col": 23,"name": "T","comptime": true},{"file": 52,"line": 140,"col": 13,"name": "T","comptime": true},{"file": 36,"line": 2476,"col": 16,"name": "source","comptime": true},{"file": 36,"line": 2476,"col": 39,"name": "size","comptime": true},{"file": 36,"line": 2476,"col": 89,"name": "child","comptime": true},{"file": 36,"line": 2492,"col": 21,"name": "P","comptime": true},{"file": 23,"line": 14,"col": 24,"name": "T","comptime": true},{"file": 36,"line": 672,"col": 11,"name": "T","comptime": true},{"file": 36,"line": 672,"col": 29,"name": "end","comptime": true},{"file": 51,"line": 1226,"col": 14,"name": "T","comptime": true},{"file": 65,"line": 247,"col": 15,"name": "T","comptime": true},{"file": 36,"line": 2752,"col": 26,"name": "sliceType","comptime": true},{"file": 24,"line": 9,"col": 13,"name": "T","comptime": true},{"file": 23,"line": 161,"col": 17,"name": "T","comptime": true},{"file": 26,"line": 6,"col": 14,"name": "T","comptime": true},{"file": 28,"line": 8,"col": 13,"name": "T","comptime": true},{"file": 65,"line": 115,"col": 15,"name": "id","comptime": true},{"file": 65,"line": 117,"col": 21,"name": "T","comptime": true},{"file": 36,"line": 2659,"col": 26,"name": "T","comptime": true},{"file": 36,"line": 2659,"col": 44,"name": "bytesType","comptime": true},{"file": 52,"line": 190,"col": 16,"name": "T","comptime": true},{"file": 65,"line": 378,"col": 15,"name": "T","comptime": true},{"file": 65,"line": 262,"col": 19,"name": "T","comptime": true},{"file": 13,"line": 739,"col": 44,"name": "set"},{"file": 13,"line": 739,"col": 54,"name": "features"},{"file": 29,"line": 177,"col": 31,"name": "config","comptime": true},{"file": 78,"line": 18,"col": 12,"name": "x"},{"file": 16,"line": 50,"col": 28,"name": "K","comptime": true},{"file": 16,"line": 50,"col": 46,"name": "V","comptime": true},{"file": 52,"line": 328,"col": 23,"name": "T","comptime": true},{"file": 16,"line": 820,"col": 25,"name": "T","comptime": true},{"file": 32,"line": 174,"col": 14,"name": "scope","comptime": true},{"file": 33,"line": 3,"col": 20,"name": "options_name","comptime": true},{"file": 33,"line": 24,"col": 15,"name": "options_name","comptime": true},{"file": 52,"line": 440,"col": 14,"name": "T","comptime": true},{"file": 34,"line": 725,"col": 14,"name": "ctx"},{"file": 34,"line": 725,"col": 25,"name": "a","comptime": true},{"file": 34,"line": 725,"col": 48,"name": "b","comptime": true},{"file": 34,"line": 729,"col": 19,"name": "E","comptime": true},{"file": 34,"line": 699,"col": 21,"name": "T","comptime": true},{"file": 34,"line": 437,"col": 18,"name": "I","comptime": true},{"file": 34,"line": 437,"col": 36,"name": "V","comptime": true},{"file": 34,"line": 437,"col": 54,"name": "Ext","comptime": true},{"file": 34,"line": 239,"col": 22,"name": "Self","comptime": true},{"file": 34,"line": 237,"col": 15,"name": "E","comptime": true},{"file": 34,"line": 237,"col": 33,"name": "V","comptime": true},{"file": 35,"line": 51,"col": 21,"name": "size","comptime": true},{"file": 35,"line": 40,"col": 20,"name": "size","comptime": true},{"file": 17,"line": 432,"col": 33,"name": "T","comptime": true},{"file": 17,"line": 432,"col": 51,"name": "alignment","comptime": true},{"file": 17,"line": 424,"col": 26,"name": "T","comptime": true},{"file": 16,"line": 64,"col": 21,"name": "V","comptime": true},{"file": 65,"line": 307,"col": 18,"name": "T","comptime": true},{"file": 26,"line": 108,"col": 22,"name": "condition","comptime": true},{"file": 26,"line": 108,"col": 48,"name": "functions","comptime": true},{"file": 65,"line": 286,"col": 16,"name": "T","comptime": true},{"file": 37,"line": 3,"col": 22,"name": "buffer_size","comptime": true},{"file": 37,"line": 3,"col": 51,"name": "WriterType","comptime": true},{"file": 38,"line": 23,"col": 4,"name": "T","comptime": true},{"file": 38,"line": 24,"col": 4,"name": "buffer_type","comptime": true},{"file": 52,"line": 938,"col": 13,"name": "types","comptime": true},{"file": 52,"line": 827,"col": 18,"name": "T","comptime": true},{"file": 52,"line": 827,"col": 36,"name": "name","comptime": true},{"file": 36,"line": 1782,"col": 21,"name": "T","comptime": true},{"file": 36,"line": 1734,"col": 21,"name": "T","comptime": true},{"file": 18,"line": 7,"col": 4,"name": "32bit"},{"file": 18,"line": 8,"col": 4,"name": "8msecext"},{"file": 18,"line": 9,"col": 4,"name": "a76"},{"file": 18,"line": 10,"col": 4,"name": "aclass"},{"file": 18,"line": 11,"col": 4,"name": "acquire_release"},{"file": 18,"line": 12,"col": 4,"name": "aes"},{"file": 18,"line": 13,"col": 4,"name": "avoid_movs_shop"},{"file": 18,"line": 14,"col": 4,"name": "avoid_partial_cpsr"},{"file": 18,"line": 15,"col": 4,"name": "bf16"},{"file": 18,"line": 16,"col": 4,"name": "cde"},{"file": 18,"line": 17,"col": 4,"name": "cdecp0"},{"file": 18,"line": 18,"col": 4,"name": "cdecp1"},{"file": 18,"line": 19,"col": 4,"name": "cdecp2"},{"file": 18,"line": 20,"col": 4,"name": "cdecp3"},{"file": 18,"line": 21,"col": 4,"name": "cdecp4"},{"file": 18,"line": 22,"col": 4,"name": "cdecp5"},{"file": 18,"line": 23,"col": 4,"name": "cdecp6"},{"file": 18,"line": 24,"col": 4,"name": "cdecp7"},{"file": 18,"line": 25,"col": 4,"name": "cheap_predicable_cpsr"},{"file": 18,"line": 26,"col": 4,"name": "crc"},{"file": 18,"line": 27,"col": 4,"name": "crypto"},{"file": 18,"line": 28,"col": 4,"name": "d32"},{"file": 18,"line": 29,"col": 4,"name": "db"},{"file": 18,"line": 30,"col": 4,"name": "dfb"},{"file": 18,"line": 31,"col": 4,"name": "disable_postra_scheduler"},{"file": 18,"line": 32,"col": 4,"name": "dont_widen_vmovs"},{"file": 18,"line": 33,"col": 4,"name": "dotprod"},{"file": 18,"line": 34,"col": 4,"name": "dsp"},{"file": 18,"line": 35,"col": 4,"name": "execute_only"},{"file": 18,"line": 36,"col": 4,"name": "expand_fp_mlx"},{"file": 18,"line": 37,"col": 4,"name": "exynos"},{"file": 18,"line": 38,"col": 4,"name": "fp16"},{"file": 18,"line": 39,"col": 4,"name": "fp16fml"},{"file": 18,"line": 40,"col": 4,"name": "fp64"},{"file": 18,"line": 41,"col": 4,"name": "fp_armv8"},{"file": 18,"line": 42,"col": 4,"name": "fp_armv8d16"},{"file": 18,"line": 43,"col": 4,"name": "fp_armv8d16sp"},{"file": 18,"line": 44,"col": 4,"name": "fp_armv8sp"},{"file": 18,"line": 45,"col": 4,"name": "fpao"},{"file": 18,"line": 46,"col": 4,"name": "fpregs"},{"file": 18,"line": 47,"col": 4,"name": "fpregs16"},{"file": 18,"line": 48,"col": 4,"name": "fpregs64"},{"file": 18,"line": 49,"col": 4,"name": "fullfp16"},{"file": 18,"line": 50,"col": 4,"name": "fuse_aes"},{"file": 18,"line": 51,"col": 4,"name": "fuse_literals"},{"file": 18,"line": 52,"col": 4,"name": "harden_sls_blr"},{"file": 18,"line": 53,"col": 4,"name": "harden_sls_nocomdat"},{"file": 18,"line": 54,"col": 4,"name": "harden_sls_retbr"},{"file": 18,"line": 55,"col": 4,"name": "has_v4t"},{"file": 18,"line": 56,"col": 4,"name": "has_v5t"},{"file": 18,"line": 57,"col": 4,"name": "has_v5te"},{"file": 18,"line": 58,"col": 4,"name": "has_v6"},{"file": 18,"line": 59,"col": 4,"name": "has_v6k"},{"file": 18,"line": 60,"col": 4,"name": "has_v6m"},{"file": 18,"line": 61,"col": 4,"name": "has_v6t2"},{"file": 18,"line": 62,"col": 4,"name": "has_v7"},{"file": 18,"line": 63,"col": 4,"name": "has_v7clrex"},{"file": 18,"line": 64,"col": 4,"name": "has_v8"},{"file": 18,"line": 65,"col": 4,"name": "has_v8_1a"},{"file": 18,"line": 66,"col": 4,"name": "has_v8_1m_main"},{"file": 18,"line": 67,"col": 4,"name": "has_v8_2a"},{"file": 18,"line": 68,"col": 4,"name": "has_v8_3a"},{"file": 18,"line": 69,"col": 4,"name": "has_v8_4a"},{"file": 18,"line": 70,"col": 4,"name": "has_v8_5a"},{"file": 18,"line": 71,"col": 4,"name": "has_v8_6a"},{"file": 18,"line": 72,"col": 4,"name": "has_v8_7a"},{"file": 18,"line": 73,"col": 4,"name": "has_v8m"},{"file": 18,"line": 74,"col": 4,"name": "has_v8m_main"},{"file": 18,"line": 75,"col": 4,"name": "hwdiv"},{"file": 18,"line": 76,"col": 4,"name": "hwdiv_arm"},{"file": 18,"line": 77,"col": 4,"name": "i8mm"},{"file": 18,"line": 78,"col": 4,"name": "iwmmxt"},{"file": 18,"line": 79,"col": 4,"name": "iwmmxt2"},{"file": 18,"line": 80,"col": 4,"name": "lob"},{"file": 18,"line": 81,"col": 4,"name": "long_calls"},{"file": 18,"line": 82,"col": 4,"name": "loop_align"},{"file": 18,"line": 83,"col": 4,"name": "m3"},{"file": 18,"line": 84,"col": 4,"name": "mclass"},{"file": 18,"line": 85,"col": 4,"name": "mp"},{"file": 18,"line": 86,"col": 4,"name": "muxed_units"},{"file": 18,"line": 87,"col": 4,"name": "mve"},{"file": 18,"line": 88,"col": 4,"name": "mve1beat"},{"file": 18,"line": 89,"col": 4,"name": "mve2beat"},{"file": 18,"line": 90,"col": 4,"name": "mve4beat"},{"file": 18,"line": 91,"col": 4,"name": "mve_fp"},{"file": 18,"line": 92,"col": 4,"name": "nacl_trap"},{"file": 18,"line": 93,"col": 4,"name": "neon"},{"file": 18,"line": 94,"col": 4,"name": "neon_fpmovs"},{"file": 18,"line": 95,"col": 4,"name": "neonfp"},{"file": 18,"line": 96,"col": 4,"name": "no_branch_predictor"},{"file": 18,"line": 97,"col": 4,"name": "no_movt"},{"file": 18,"line": 98,"col": 4,"name": "no_neg_immediates"},{"file": 18,"line": 99,"col": 4,"name": "noarm"},{"file": 18,"line": 100,"col": 4,"name": "nonpipelined_vfp"},{"file": 18,"line": 101,"col": 4,"name": "perfmon"},{"file": 18,"line": 102,"col": 4,"name": "prefer_ishst"},{"file": 18,"line": 103,"col": 4,"name": "prefer_vmovsr"},{"file": 18,"line": 104,"col": 4,"name": "prof_unpr"},{"file": 18,"line": 105,"col": 4,"name": "r4"},{"file": 18,"line": 106,"col": 4,"name": "ras"},{"file": 18,"line": 107,"col": 4,"name": "rclass"},{"file": 18,"line": 108,"col": 4,"name": "read_tp_hard"},{"file": 18,"line": 109,"col": 4,"name": "reserve_r9"},{"file": 18,"line": 110,"col": 4,"name": "ret_addr_stack"},{"file": 18,"line": 111,"col": 4,"name": "sb"},{"file": 18,"line": 112,"col": 4,"name": "sha2"},{"file": 18,"line": 113,"col": 4,"name": "slow_fp_brcc"},{"file": 18,"line": 114,"col": 4,"name": "slow_load_D_subreg"},{"file": 18,"line": 115,"col": 4,"name": "slow_odd_reg"},{"file": 18,"line": 116,"col": 4,"name": "slow_vdup32"},{"file": 18,"line": 117,"col": 4,"name": "slow_vgetlni32"},{"file": 18,"line": 118,"col": 4,"name": "slowfpvfmx"},{"file": 18,"line": 119,"col": 4,"name": "slowfpvmlx"},{"file": 18,"line": 120,"col": 4,"name": "soft_float"},{"file": 18,"line": 121,"col": 4,"name": "splat_vfp_neon"},{"file": 18,"line": 122,"col": 4,"name": "strict_align"},{"file": 18,"line": 123,"col": 4,"name": "swift"},{"file": 18,"line": 124,"col": 4,"name": "thumb2"},{"file": 18,"line": 125,"col": 4,"name": "thumb_mode"},{"file": 18,"line": 126,"col": 4,"name": "trustzone"},{"file": 18,"line": 127,"col": 4,"name": "use_misched"},{"file": 18,"line": 128,"col": 4,"name": "v2"},{"file": 18,"line": 129,"col": 4,"name": "v2a"},{"file": 18,"line": 130,"col": 4,"name": "v3"},{"file": 18,"line": 131,"col": 4,"name": "v3m"},{"file": 18,"line": 132,"col": 4,"name": "v4"},{"file": 18,"line": 133,"col": 4,"name": "v4t"},{"file": 18,"line": 134,"col": 4,"name": "v5t"},{"file": 18,"line": 135,"col": 4,"name": "v5te"},{"file": 18,"line": 136,"col": 4,"name": "v5tej"},{"file": 18,"line": 137,"col": 4,"name": "v6"},{"file": 18,"line": 138,"col": 4,"name": "v6j"},{"file": 18,"line": 139,"col": 4,"name": "v6k"},{"file": 18,"line": 140,"col": 4,"name": "v6kz"},{"file": 18,"line": 141,"col": 4,"name": "v6m"},{"file": 18,"line": 142,"col": 4,"name": "v6sm"},{"file": 18,"line": 143,"col": 4,"name": "v6t2"},{"file": 18,"line": 144,"col": 4,"name": "v7a"},{"file": 18,"line": 145,"col": 4,"name": "v7em"},{"file": 18,"line": 146,"col": 4,"name": "v7k"},{"file": 18,"line": 147,"col": 4,"name": "v7m"},{"file": 18,"line": 148,"col": 4,"name": "v7r"},{"file": 18,"line": 149,"col": 4,"name": "v7s"},{"file": 18,"line": 150,"col": 4,"name": "v7ve"},{"file": 18,"line": 151,"col": 4,"name": "v8_1a"},{"file": 18,"line": 152,"col": 4,"name": "v8_1m_main"},{"file": 18,"line": 153,"col": 4,"name": "v8_2a"},{"file": 18,"line": 154,"col": 4,"name": "v8_3a"},{"file": 18,"line": 155,"col": 4,"name": "v8_4a"},{"file": 18,"line": 156,"col": 4,"name": "v8_5a"},{"file": 18,"line": 157,"col": 4,"name": "v8_6a"},{"file": 18,"line": 158,"col": 4,"name": "v8_7a"},{"file": 18,"line": 159,"col": 4,"name": "v8a"},{"file": 18,"line": 160,"col": 4,"name": "v8m"},{"file": 18,"line": 161,"col": 4,"name": "v8m_main"},{"file": 18,"line": 162,"col": 4,"name": "v8r"},{"file": 18,"line": 163,"col": 4,"name": "vfp2"},{"file": 18,"line": 164,"col": 4,"name": "vfp2sp"},{"file": 18,"line": 165,"col": 4,"name": "vfp3"},{"file": 18,"line": 166,"col": 4,"name": "vfp3d16"},{"file": 18,"line": 167,"col": 4,"name": "vfp3d16sp"},{"file": 18,"line": 168,"col": 4,"name": "vfp3sp"},{"file": 18,"line": 169,"col": 4,"name": "vfp4"},{"file": 18,"line": 170,"col": 4,"name": "vfp4d16"},{"file": 18,"line": 171,"col": 4,"name": "vfp4d16sp"},{"file": 18,"line": 172,"col": 4,"name": "vfp4sp"},{"file": 18,"line": 173,"col": 4,"name": "virtualization"},{"file": 18,"line": 174,"col": 4,"name": "vldn_align"},{"file": 18,"line": 175,"col": 4,"name": "vmlx_forwarding"},{"file": 18,"line": 176,"col": 4,"name": "vmlx_hazards"},{"file": 18,"line": 177,"col": 4,"name": "wide_stride_vfp"},{"file": 18,"line": 178,"col": 4,"name": "xscale"},{"file": 18,"line": 179,"col": 4,"name": "zcz"},{"file": 13,"line": 638,"col": 16,"name": "ints"},{"file": 22,"line": 451,"col": 4,"name": "signed"},{"file": 22,"line": 452,"col": 4,"name": "unsigned"},{"file": 13,"line": 760,"col": 12,"name": "arm"},{"file": 13,"line": 761,"col": 12,"name": "armeb"},{"file": 13,"line": 762,"col": 12,"name": "aarch64"},{"file": 13,"line": 763,"col": 12,"name": "aarch64_be"},{"file": 13,"line": 764,"col": 12,"name": "aarch64_32"},{"file": 13,"line": 765,"col": 12,"name": "arc"},{"file": 13,"line": 766,"col": 12,"name": "avr"},{"file": 13,"line": 767,"col": 12,"name": "bpfel"},{"file": 13,"line": 768,"col": 12,"name": "bpfeb"},{"file": 13,"line": 769,"col": 12,"name": "csky"},{"file": 13,"line": 770,"col": 12,"name": "hexagon"},{"file": 13,"line": 771,"col": 12,"name": "m68k"},{"file": 13,"line": 772,"col": 12,"name": "mips"},{"file": 13,"line": 773,"col": 12,"name": "mipsel"},{"file": 13,"line": 774,"col": 12,"name": "mips64"},{"file": 13,"line": 775,"col": 12,"name": "mips64el"},{"file": 13,"line": 776,"col": 12,"name": "msp430"},{"file": 13,"line": 777,"col": 12,"name": "powerpc"},{"file": 13,"line": 778,"col": 12,"name": "powerpcle"},{"file": 13,"line": 779,"col": 12,"name": "powerpc64"},{"file": 13,"line": 780,"col": 12,"name": "powerpc64le"},{"file": 13,"line": 781,"col": 12,"name": "r600"},{"file": 13,"line": 782,"col": 12,"name": "amdgcn"},{"file": 13,"line": 783,"col": 12,"name": "riscv32"},{"file": 13,"line": 784,"col": 12,"name": "riscv64"},{"file": 13,"line": 785,"col": 12,"name": "sparc"},{"file": 13,"line": 786,"col": 12,"name": "sparcv9"},{"file": 13,"line": 787,"col": 12,"name": "sparcel"},{"file": 13,"line": 788,"col": 12,"name": "s390x"},{"file": 13,"line": 789,"col": 12,"name": "tce"},{"file": 13,"line": 790,"col": 12,"name": "tcele"},{"file": 13,"line": 791,"col": 12,"name": "thumb"},{"file": 13,"line": 792,"col": 12,"name": "thumbeb"},{"file": 13,"line": 793,"col": 12,"name": "i386"},{"file": 13,"line": 794,"col": 12,"name": "x86_64"},{"file": 13,"line": 795,"col": 12,"name": "xcore"},{"file": 13,"line": 796,"col": 12,"name": "nvptx"},{"file": 13,"line": 797,"col": 12,"name": "nvptx64"},{"file": 13,"line": 798,"col": 12,"name": "le32"},{"file": 13,"line": 799,"col": 12,"name": "le64"},{"file": 13,"line": 800,"col": 12,"name": "amdil"},{"file": 13,"line": 801,"col": 12,"name": "amdil64"},{"file": 13,"line": 802,"col": 12,"name": "hsail"},{"file": 13,"line": 803,"col": 12,"name": "hsail64"},{"file": 13,"line": 804,"col": 12,"name": "spir"},{"file": 13,"line": 805,"col": 12,"name": "spir64"},{"file": 13,"line": 806,"col": 12,"name": "kalimba"},{"file": 13,"line": 807,"col": 12,"name": "shave"},{"file": 13,"line": 808,"col": 12,"name": "lanai"},{"file": 13,"line": 809,"col": 12,"name": "wasm32"},{"file": 13,"line": 810,"col": 12,"name": "wasm64"},{"file": 13,"line": 811,"col": 12,"name": "renderscript32"},{"file": 13,"line": 812,"col": 12,"name": "renderscript64"},{"file": 13,"line": 813,"col": 12,"name": "ve"},{"file": 13,"line": 816,"col": 12,"name": "spu_2"},{"file": 13,"line": 817,"col": 12,"name": "spirv32"},{"file": 13,"line": 818,"col": 12,"name": "spirv64"},{"file": 14,"line": 10,"col": 8,"name": "context"},{"file": 15,"line": 14,"col": 4,"docs": " The OS-specific file descriptor or file handle.","name": "handle"},{"file": 15,"line": 21,"col": 4,"docs": " On some systems, such as Linux, file system file descriptors are incapable of non-blocking I/O. This forces us to perform asynchronous I/O on a dedicated thread, to achieve non-blocking file-system I/O. To do this, `File` must be aware of whether it is a file system file descriptor, or, more specifically, whether the I/O is always blocking.","name": "capable_io_mode"},{"file": 15,"line": 28,"col": 4,"docs": " Furthermore, even when `std.io.mode` is async, it is still sometimes desirable to perform blocking I/O, although not by default. For example, when printing a stack trace to stderr. This field tracks both by acting as an overriding I/O mode. When not building in async I/O mode, the type only has the `.blocking` tag, making it a zero-bit type.","name": "intended_io_mode"},{"file": 47,"line": 277,"col": 4,"name": "specifier_arg"},{"file": 47,"line": 278,"col": 4,"name": "fill"},{"file": 47,"line": 279,"col": 4,"name": "alignment"},{"file": 47,"line": 280,"col": 4,"name": "arg"},{"file": 47,"line": 281,"col": 4,"name": "width"},{"file": 47,"line": 282,"col": 4,"name": "precision"},{"file": 16,"line": 364,"col": 8,"name": "unmanaged"},{"file": 16,"line": 365,"col": 8,"name": "allocator"},{"file": 16,"line": 366,"col": 8,"name": "ctx"},{"file": 16,"line": 691,"col": 8,"docs": " Pointer to the metadata.","name": "metadata"},{"file": 16,"line": 694,"col": 8,"docs": " Current number of elements in the hashmap.","name": "size"},{"file": 16,"line": 700,"col": 8,"docs": " Number of available slots before a grow is needed to satisfy the `max_load_percentage`.","name": "available"},{"file": 17,"line": 40,"col": 8,"docs": " Contents of the list. Pointers to elements in this slice are **invalid after resizing operations** on the ArrayList, unless the operation explicitly either: (1) states otherwise or (2) lists the invalidated pointers. The allocator used determines how element pointers are invalidated, so the behavior may vary between lists. To avoid illegal behavior, take into account the above paragraph plus the explicit statements given in each method.","name": "items"},{"file": 17,"line": 43,"col": 8,"docs": " How many T values this list can hold without allocating additional memory.","name": "capacity"},{"file": 17,"line": 44,"col": 8,"name": "allocator"},{"file": 44,"line": 249,"col": 4,"name": "offset"},{"file": 44,"line": 250,"col": 4,"name": "table"},{"file": 44,"line": 254,"col": 4,"name": "has_children"},{"file": 44,"line": 255,"col": 4,"name": "abbrev_code"},{"file": 44,"line": 256,"col": 4,"name": "tag_id"},{"file": 44,"line": 257,"col": 4,"name": "attrs"},{"file": 44,"line": 261,"col": 4,"name": "attr_id"},{"file": 44,"line": 262,"col": 4,"name": "form_id"},{"file": 44,"line": 239,"col": 4,"name": "version"},{"file": 44,"line": 240,"col": 4,"name": "is_64"},{"file": 44,"line": 241,"col": 4,"name": "die"},{"file": 44,"line": 242,"col": 4,"name": "pc_range"},{"file": 44,"line": 294,"col": 8,"name": "id"},{"file": 44,"line": 295,"col": 8,"name": "value"},{"file": 44,"line": 234,"col": 4,"name": "pc_range"},{"file": 44,"line": 235,"col": 4,"name": "name"},{"file": 13,"line": 17,"col": 12,"name": "freestanding"},{"file": 13,"line": 18,"col": 12,"name": "ananas"},{"file": 13,"line": 19,"col": 12,"name": "cloudabi"},{"file": 13,"line": 20,"col": 12,"name": "dragonfly"},{"file": 13,"line": 21,"col": 12,"name": "freebsd"},{"file": 13,"line": 22,"col": 12,"name": "fuchsia"},{"file": 13,"line": 23,"col": 12,"name": "ios"},{"file": 13,"line": 24,"col": 12,"name": "kfreebsd"},{"file": 13,"line": 25,"col": 12,"name": "linux"},{"file": 13,"line": 26,"col": 12,"name": "lv2"},{"file": 13,"line": 27,"col": 12,"name": "macos"},{"file": 13,"line": 28,"col": 12,"name": "netbsd"},{"file": 13,"line": 29,"col": 12,"name": "openbsd"},{"file": 13,"line": 30,"col": 12,"name": "solaris"},{"file": 13,"line": 31,"col": 12,"name": "windows"},{"file": 13,"line": 32,"col": 12,"name": "zos"},{"file": 13,"line": 33,"col": 12,"name": "haiku"},{"file": 13,"line": 34,"col": 12,"name": "minix"},{"file": 13,"line": 35,"col": 12,"name": "rtems"},{"file": 13,"line": 36,"col": 12,"name": "nacl"},{"file": 13,"line": 37,"col": 12,"name": "aix"},{"file": 13,"line": 38,"col": 12,"name": "cuda"},{"file": 13,"line": 39,"col": 12,"name": "nvcl"},{"file": 13,"line": 40,"col": 12,"name": "amdhsa"},{"file": 13,"line": 41,"col": 12,"name": "ps4"},{"file": 13,"line": 42,"col": 12,"name": "elfiamcu"},{"file": 13,"line": 43,"col": 12,"name": "tvos"},{"file": 13,"line": 44,"col": 12,"name": "watchos"},{"file": 13,"line": 45,"col": 12,"name": "mesa3d"},{"file": 13,"line": 46,"col": 12,"name": "contiki"},{"file": 13,"line": 47,"col": 12,"name": "amdpal"},{"file": 13,"line": 48,"col": 12,"name": "hermit"},{"file": 13,"line": 49,"col": 12,"name": "hurd"},{"file": 13,"line": 50,"col": 12,"name": "wasi"},{"file": 13,"line": 51,"col": 12,"name": "emscripten"},{"file": 13,"line": 52,"col": 12,"name": "uefi"},{"file": 13,"line": 53,"col": 12,"name": "opencl"},{"file": 13,"line": 54,"col": 12,"name": "glsl450"},{"file": 13,"line": 55,"col": 12,"name": "vulkan"},{"file": 13,"line": 56,"col": 12,"name": "plan9"},{"file": 13,"line": 57,"col": 12,"name": "other"},{"file": 13,"line": 8,"col": 4,"name": "cpu"},{"file": 13,"line": 9,"col": 4,"name": "os"},{"file": 13,"line": 10,"col": 4,"name": "abi"},{"file": 22,"line": 444,"col": 4,"name": "Big"},{"file": 22,"line": 445,"col": 4,"name": "Little"},{"file": 19,"line": 11,"col": 8,"docs": " `Buffer` is either a `[]u8` or `[]const u8`.","name": "buffer"},{"file": 19,"line": 12,"col": 8,"name": "pos"},{"file": 20,"line": 17,"col": 8,"name": "context"},{"file": 21,"line": 12,"col": 8,"name": "context"},{"file": 44,"line": 349,"col": 4,"name": "file_name"},{"file": 44,"line": 350,"col": 4,"name": "dir_index"},{"file": 44,"line": 351,"col": 4,"name": "mtime"},{"file": 44,"line": 352,"col": 4,"name": "len_bytes"},{"file": 22,"line": 197,"col": 4,"name": "Type"},{"file": 22,"line": 198,"col": 4,"name": "Void"},{"file": 22,"line": 199,"col": 4,"name": "Bool"},{"file": 22,"line": 200,"col": 4,"name": "NoReturn"},{"file": 22,"line": 201,"col": 4,"name": "Int"},{"file": 22,"line": 202,"col": 4,"name": "Float"},{"file": 22,"line": 203,"col": 4,"name": "Pointer"},{"file": 22,"line": 204,"col": 4,"name": "Array"},{"file": 22,"line": 205,"col": 4,"name": "Struct"},{"file": 22,"line": 206,"col": 4,"name": "ComptimeFloat"},{"file": 22,"line": 207,"col": 4,"name": "ComptimeInt"},{"file": 22,"line": 208,"col": 4,"name": "Undefined"},{"file": 22,"line": 209,"col": 4,"name": "Null"},{"file": 22,"line": 210,"col": 4,"name": "Optional"},{"file": 22,"line": 211,"col": 4,"name": "ErrorUnion"},{"file": 22,"line": 212,"col": 4,"name": "ErrorSet"},{"file": 22,"line": 213,"col": 4,"name": "Enum"},{"file": 22,"line": 214,"col": 4,"name": "Union"},{"file": 22,"line": 215,"col": 4,"name": "Fn"},{"file": 22,"line": 216,"col": 4,"name": "BoundFn"},{"file": 22,"line": 217,"col": 4,"name": "Opaque"},{"file": 22,"line": 218,"col": 4,"name": "Frame"},{"file": 22,"line": 219,"col": 4,"name": "AnyFrame"},{"file": 22,"line": 220,"col": 4,"name": "Vector"},{"file": 22,"line": 221,"col": 4,"name": "EnumLiteral"},{"file": 22,"line": 256,"col": 12,"name": "One"},{"file": 22,"line": 257,"col": 12,"name": "Many"},{"file": 22,"line": 258,"col": 12,"name": "Slice"},{"file": 22,"line": 259,"col": 12,"name": "C"},{"file": 23,"line": 67,"col": 8,"name": "first"},{"file": 24,"line": 11,"col": 8,"name": "head"},{"file": 24,"line": 12,"col": 8,"name": "tail"},{"file": 24,"line": 13,"col": 8,"name": "mutex"},{"file": 23,"line": 172,"col": 8,"name": "first"},{"file": 23,"line": 173,"col": 8,"name": "last"},{"file": 23,"line": 174,"col": 8,"name": "len"},{"file": 26,"line": 8,"col": 8,"name": "value"},{"file": 40,"line": 338,"col": 4,"name": "running"},{"file": 40,"line": 339,"col": 4,"name": "detached"},{"file": 40,"line": 340,"col": 4,"name": "completed"},{"file": 27,"line": 1566,"col": 8,"name": "msg"},{"file": 27,"line": 1567,"col": 8,"name": "finish"},{"file": 28,"line": 10,"col": 8,"name": "root"},{"file": 28,"line": 11,"col": 8,"name": "lock"},{"file": 27,"line": 72,"col": 16,"name": "base"},{"file": 27,"line": 73,"col": 16,"name": "epoll_op"},{"file": 27,"line": 74,"col": 16,"name": "eventfd"},{"file": 29,"line": 179,"col": 8,"name": "backing_allocator"},{"file": 29,"line": 180,"col": 8,"name": "buckets"},{"file": 29,"line": 181,"col": 8,"name": "large_allocations"},{"file": 29,"line": 182,"col": 8,"name": "empty_buckets"},{"file": 29,"line": 185,"col": 8,"name": "total_requested_bytes"},{"file": 29,"line": 186,"col": 8,"name": "requested_memory_limit"},{"file": 29,"line": 188,"col": 8,"name": "mutex"},{"file": 29,"line": 136,"col": 4,"docs": " Number of stack frames to capture.","name": "stack_trace_frames"},{"file": 29,"line": 143,"col": 4,"docs": " If true, the allocator will have two fields:  * `total_requested_bytes` which tracks the total allocated bytes of memory requested.  * `requested_memory_limit` which causes allocations to return `error.OutOfMemory`    when the `total_requested_bytes` exceeds this limit. If false, these fields will be `void`.","name": "enable_memory_limit"},{"file": 29,"line": 146,"col": 4,"docs": " Whether to enable safety checks.","name": "safety"},{"file": 29,"line": 149,"col": 4,"docs": " Whether the allocator may be used simultaneously from multiple threads.","name": "thread_safe"},{"file": 29,"line": 159,"col": 4,"docs": " What type of mutex you'd like to use, for thread safety. when specfied, the mutex type must have the same shape as `std.Thread.Mutex` and `std.Thread.Mutex.Dummy`, and have no required fields. Specifying this field causes the `thread_safe` field to be ignored. when null (default): * the mutex type defaults to `std.Thread.Mutex` when thread_safe is enabled. * the mutex type defaults to `std.Thread.Mutex.Dummy` otherwise.","name": "MutexType"},{"file": 29,"line": 164,"col": 4,"docs": " This is a temporary debugging trick you can use to turn segfaults into more helpful logged error messages with stack trace details. The downside is that every allocation will be leaked, unless used with retain_metadata!","name": "never_unmap"},{"file": 29,"line": 171,"col": 4,"docs": " This is a temporary debugging aid that retains metadata about allocations indefinitely. This allows a greater range of double frees to be reported. All metadata is freed when deinit is called. When used with never_unmap, deliberately leaked memory is also freed during deinit. Currently should be used with never_unmap to avoid segfaults. TODO https://github.com/ziglang/zig/issues/4298 will allow use without never_unmap","name": "retain_metadata"},{"file": 29,"line": 174,"col": 4,"docs": " Enables emitting info messages with the size and address of every allocation.","name": "verbose_log"},{"file": 29,"line": 212,"col": 12,"name": "bytes"},{"file": 29,"line": 213,"col": 12,"name": "requested_size"},{"file": 29,"line": 214,"col": 12,"name": "stack_addresses"},{"file": 29,"line": 215,"col": 12,"name": "freed"},{"file": 29,"line": 216,"col": 12,"name": "ptr_align"},{"file": 22,"line": 279,"col": 8,"name": "Auto"},{"file": 22,"line": 280,"col": 8,"name": "Extern"},{"file": 22,"line": 281,"col": 8,"name": "Packed"},{"file": 30,"line": 680,"col": 4,"name": "dev"},{"file": 30,"line": 681,"col": 4,"name": "__dev_padding"},{"file": 30,"line": 682,"col": 4,"name": "__ino_truncated"},{"file": 30,"line": 683,"col": 4,"name": "mode"},{"file": 30,"line": 684,"col": 4,"name": "nlink"},{"file": 30,"line": 685,"col": 4,"name": "uid"},{"file": 30,"line": 686,"col": 4,"name": "gid"},{"file": 30,"line": 687,"col": 4,"name": "rdev"},{"file": 30,"line": 688,"col": 4,"name": "__rdev_padding"},{"file": 30,"line": 689,"col": 4,"name": "size"},{"file": 30,"line": 690,"col": 4,"name": "blksize"},{"file": 30,"line": 691,"col": 4,"name": "blocks"},{"file": 30,"line": 692,"col": 4,"name": "atim"},{"file": 30,"line": 693,"col": 4,"name": "mtim"},{"file": 30,"line": 694,"col": 4,"name": "ctim"},{"file": 30,"line": 695,"col": 4,"name": "ino"},{"file": 31,"line": 726,"col": 4,"name": "end_index"},{"file": 31,"line": 727,"col": 4,"name": "buffer"},{"file": 16,"line": 822,"col": 16,"name": "len"},{"file": 16,"line": 823,"col": 16,"name": "metadata"},{"file": 16,"line": 824,"col": 16,"name": "items"},{"file": 22,"line": 54,"col": 4,"name": "index"},{"file": 22,"line": 55,"col": 4,"name": "instruction_addresses"},{"file": 33,"line": 8,"col": 8,"name": "options"},{"file": 22,"line": 329,"col": 8,"name": "name"},{"file": 22,"line": 330,"col": 8,"name": "value"},{"file": 34,"line": 456,"col": 8,"docs": " Bits determining whether items are in the map","name": "bits"},{"file": 34,"line": 459,"col": 8,"docs": " Values of items in the map.  If the associated bit is zero, the value is undefined.","name": "values"},{"file": 35,"line": 66,"col": 8,"docs": " The bit mask, as a single integer","name": "mask"},{"file": 17,"line": 449,"col": 8,"docs": " Contents of the list. Pointers to elements in this slice are **invalid after resizing operations** on the ArrayList, unless the operation explicitly either: (1) states otherwise or (2) lists the invalidated pointers. The allocator used determines how element pointers are invalidated, so the behavior may vary between lists. To avoid illegal behavior, take into account the above paragraph plus the explicit statements given in each method.","name": "items"},{"file": 17,"line": 452,"col": 8,"docs": " How many T values this list can hold without allocating additional memory.","name": "capacity"},{"file": 4,"line": 12,"col": 0,"name": "name"},{"file": 4,"line": 13,"col": 0,"name": "short_name"},{"file": 4,"line": 14,"col": 0,"name": "long_name"},{"file": 4,"line": 15,"col": 0,"name": "description"},{"file": 4,"line": 16,"col": 0,"name": "min_values"},{"file": 4,"line": 17,"col": 0,"name": "max_values"},{"file": 4,"line": 18,"col": 0,"name": "allowed_values"},{"file": 4,"line": 19,"col": 0,"name": "values_delimiter"},{"file": 4,"line": 20,"col": 0,"name": "settings"},{"file": 5,"line": 16,"col": 0,"name": "allocator"},{"file": 5,"line": 17,"col": 0,"name": "name"},{"file": 5,"line": 18,"col": 0,"name": "description"},{"file": 5,"line": 19,"col": 0,"name": "args"},{"file": 5,"line": 20,"col": 0,"name": "options"},{"file": 5,"line": 21,"col": 0,"name": "subcommands"},{"file": 5,"line": 22,"col": 0,"name": "settings"},{"file": 7,"line": 11,"col": 4,"name": "none"},{"file": 7,"line": 12,"col": 4,"name": "single"},{"file": 7,"line": 13,"col": 4,"name": "many"},{"file": 43,"line": 1304,"col": 12,"name": "di"},{"file": 43,"line": 1305,"col": 12,"name": "addr_table"},{"file": 42,"line": 375,"col": 4,"name": "header"},{"file": 7,"line": 60,"col": 0,"name": "allocator"},{"file": 7,"line": 61,"col": 0,"name": "args"},{"file": 7,"line": 62,"col": 0,"name": "subcommand"},{"file": 8,"line": 17,"col": 0,"name": "allocator"},{"file": 8,"line": 18,"col": 0,"name": "command"},{"file": 8,"line": 19,"col": 0,"name": "subcommand_help"},{"file": 8,"line": 20,"col": 0,"name": "args_ctx"},{"file": 8,"line": 21,"col": 0,"name": "process_args"},{"file": 37,"line": 5,"col": 8,"name": "unbuffered_writer"},{"file": 37,"line": 6,"col": 8,"name": "fifo"},{"file": 38,"line": 35,"col": 8,"name": "allocator"},{"file": 38,"line": 36,"col": 8,"name": "buf"},{"file": 38,"line": 37,"col": 8,"name": "head"},{"file": 38,"line": 38,"col": 8,"name": "count"},{"file": 38,"line": 13,"col": 4,"docs": " The buffer is internal to the fifo; it is of the specified size.","name": "Static"},{"file": 38,"line": 16,"col": 4,"docs": " The buffer is passed as a slice to the initialiser.","name": "Slice"},{"file": 38,"line": 19,"col": 4,"docs": " The buffer is managed dynamically using a `mem.Allocator`.","name": "Dynamic"},{"file": 47,"line": 784,"col": 24,"name": "lower"},{"file": 47,"line": 784,"col": 31,"name": "upper"},{"file": 36,"line": 1784,"col": 8,"name": "buffer"},{"file": 36,"line": 1785,"col": 8,"name": "index"},{"file": 36,"line": 1786,"col": 8,"name": "delimiter"},{"file": 36,"line": 1736,"col": 8,"name": "buffer"},{"file": 36,"line": 1737,"col": 8,"name": "delimiter_bytes"},{"file": 36,"line": 1738,"col": 8,"name": "index"},{"file": 47,"line": 20,"col": 4,"name": "precision"},{"file": 47,"line": 21,"col": 4,"name": "width"},{"file": 47,"line": 22,"col": 4,"name": "alignment"},{"file": 47,"line": 23,"col": 4,"name": "fill"},{"file": 9,"line": 12,"col": 0,"name": "ptr"},{"file": 9,"line": 13,"col": 0,"name": "vtable"},{"file": 43,"line": 500,"col": 8,"name": "no_color"},{"file": 43,"line": 501,"col": 8,"name": "escape_codes"},{"file": 43,"line": 503,"col": 8,"name": "windows_api"},{"file": 48,"line": 284,"col": 4,"name": "fd"},{"file": 15,"line": 75,"col": 8,"name": "read"},{"file": 15,"line": 76,"col": 8,"name": "write"},{"file": 15,"line": 102,"col": 8,"docs": " Open the file with an advisory lock to coordinate with other processes accessing it at the same time. An exclusive lock will prevent other processes from acquiring a lock. A shared lock will prevent other processes from acquiring a exclusive lock, but does not prevent other process from getting their own shared locks. The lock is advisory, except on Linux in very specific cirsumstances[1]. This means that a process that does not respect the locking API can still get access to the file, despite the lock. On these operating systems, the lock is acquired atomically with opening the file: * Darwin * DragonFlyBSD * FreeBSD * Haiku * NetBSD * OpenBSD On these operating systems, the lock is acquired via a separate syscall after opening the file: * Linux * Windows [1]: https://www.kernel.org/doc/Documentation/filesystems/mandatory-locking.txt","name": "lock"},{"file": 15,"line": 110,"col": 8,"docs": " Sets whether or not to wait until the file is locked to return. If set to true, `error.WouldBlock` will be returned. Otherwise, the file will wait until the file is available to proceed. In async I/O mode, non-blocking at the OS level is determined by `intended_io_mode`, and `true` means `error.WouldBlock` is returned, and `false` means `error.WouldBlock` is handled by the event loop.","name": "lock_nonblocking"},{"file": 15,"line": 115,"col": 8,"docs": " Setting this to `.blocking` prevents `O.NONBLOCK` from being passed even if `std.io.is_async`. It allows the use of `nosuspend` when calling functions related to opening the file, reading, writing, and locking.","name": "intended_io_mode"},{"file": 15,"line": 119,"col": 8,"docs": " Set this to allow the opened file to automatically become the controlling TTY for the current process.","name": "allow_ctty"},{"file": 44,"line": 594,"col": 4,"name": "endian"},{"file": 44,"line": 596,"col": 4,"name": "debug_info"},{"file": 44,"line": 597,"col": 4,"name": "debug_abbrev"},{"file": 44,"line": 598,"col": 4,"name": "debug_str"},{"file": 44,"line": 599,"col": 4,"name": "debug_line"},{"file": 44,"line": 600,"col": 4,"name": "debug_ranges"},{"file": 44,"line": 602,"col": 4,"name": "abbrev_table_list"},{"file": 44,"line": 603,"col": 4,"name": "compile_unit_list"},{"file": 44,"line": 604,"col": 4,"name": "func_list"},{"file": 16,"line": 749,"col": 12,"name": "fingerprint"},{"file": 16,"line": 750,"col": 12,"name": "used"},{"file": 44,"line": 356,"col": 4,"name": "address"},{"file": 44,"line": 357,"col": 4,"name": "file"},{"file": 44,"line": 358,"col": 4,"name": "line"},{"file": 44,"line": 359,"col": 4,"name": "column"},{"file": 44,"line": 360,"col": 4,"name": "is_stmt"},{"file": 44,"line": 361,"col": 4,"name": "basic_block"},{"file": 44,"line": 362,"col": 4,"name": "end_sequence"},{"file": 44,"line": 364,"col": 4,"name": "default_is_stmt"},{"file": 44,"line": 365,"col": 4,"name": "target_address"},{"file": 44,"line": 366,"col": 4,"name": "include_dirs"},{"file": 44,"line": 367,"col": 4,"name": "file_entries"},{"file": 44,"line": 369,"col": 4,"name": "prev_valid"},{"file": 44,"line": 370,"col": 4,"name": "prev_address"},{"file": 44,"line": 371,"col": 4,"name": "prev_file"},{"file": 44,"line": 372,"col": 4,"name": "prev_line"},{"file": 44,"line": 373,"col": 4,"name": "prev_column"},{"file": 44,"line": 374,"col": 4,"name": "prev_is_stmt"},{"file": 44,"line": 375,"col": 4,"name": "prev_basic_block"},{"file": 44,"line": 376,"col": 4,"name": "prev_end_sequence"},{"file": 43,"line": 41,"col": 4,"name": "symbol_name"},{"file": 43,"line": 42,"col": 4,"name": "compile_unit_name"},{"file": 43,"line": 43,"col": 4,"name": "line_info"},{"file": 43,"line": 362,"col": 4,"name": "first_address"},{"file": 43,"line": 364,"col": 4,"name": "fp"},{"file": 66,"line": 4220,"col": 8,"docs": " Per-process CPU limit, in seconds.","name": "CPU"},{"file": 66,"line": 4223,"col": 8,"docs": " Largest file that can be created, in bytes.","name": "FSIZE"},{"file": 66,"line": 4226,"col": 8,"docs": " Maximum size of data segment, in bytes.","name": "DATA"},{"file": 66,"line": 4229,"col": 8,"docs": " Maximum size of stack segment, in bytes.","name": "STACK"},{"file": 66,"line": 4232,"col": 8,"docs": " Largest core file that can be created, in bytes.","name": "CORE"},{"file": 66,"line": 4238,"col": 8,"docs": " Largest resident set size, in bytes. This affects swapping; processes that are exceeding their resident set size will be more likely to have physical memory taken from them.","name": "RSS"},{"file": 66,"line": 4241,"col": 8,"docs": " Number of processes.","name": "NPROC"},{"file": 66,"line": 4244,"col": 8,"docs": " Number of open files.","name": "NOFILE"},{"file": 66,"line": 4247,"col": 8,"docs": " Locked-in-memory address space.","name": "MEMLOCK"},{"file": 66,"line": 4250,"col": 8,"docs": " Address space limit.","name": "AS"},{"file": 66,"line": 4253,"col": 8,"docs": " Maximum number of file locks.","name": "LOCKS"},{"file": 66,"line": 4256,"col": 8,"docs": " Maximum number of pending signals.","name": "SIGPENDING"},{"file": 66,"line": 4259,"col": 8,"docs": " Maximum bytes in POSIX message queues.","name": "MSGQUEUE"},{"file": 66,"line": 4264,"col": 8,"docs": " Maximum nice priority allowed to raise to. Nice levels 19 .. -20 correspond to 0 .. 39 values of this resource limit.","name": "NICE"},{"file": 66,"line": 4268,"col": 8,"docs": " Maximum realtime priority allowed for non-priviledged processes.","name": "RTPRIO"},{"file": 66,"line": 4273,"col": 8,"docs": " Maximum CPU time in µs that a process scheduled under a real-time scheduling policy may consume without making a blocking system call before being forcibly descheduled.","name": "RTTIME"},{"file": 66,"line": 4275,"col": 8,"name": "_"},{"file": 66,"line": 4290,"col": 4,"docs": " Soft limit","name": "cur"},{"file": 66,"line": 4292,"col": 4,"docs": " Hard limit","name": "max"},{"file": 79,"line": 3,"col": 4,"docs": " No error occurred. Same code used for `NSROK`.","name": "SUCCESS"},{"file": 79,"line": 6,"col": 4,"docs": " Operation not permitted","name": "PERM"},{"file": 79,"line": 9,"col": 4,"docs": " No such file or directory","name": "NOENT"},{"file": 79,"line": 12,"col": 4,"docs": " No such process","name": "SRCH"},{"file": 79,"line": 15,"col": 4,"docs": " Interrupted system call","name": "INTR"},{"file": 79,"line": 18,"col": 4,"docs": " I/O error","name": "IO"},{"file": 79,"line": 21,"col": 4,"docs": " No such device or address","name": "NXIO"},{"file": 79,"line": 24,"col": 4,"docs": " Arg list too long","name": "2BIG"},{"file": 79,"line": 27,"col": 4,"docs": " Exec format error","name": "NOEXEC"},{"file": 79,"line": 30,"col": 4,"docs": " Bad file number","name": "BADF"},{"file": 79,"line": 33,"col": 4,"docs": " No child processes","name": "CHILD"},{"file": 79,"line": 37,"col": 4,"docs": " Try again Also means: WOULDBLOCK: operation would block","name": "AGAIN"},{"file": 79,"line": 40,"col": 4,"docs": " Out of memory","name": "NOMEM"},{"file": 79,"line": 43,"col": 4,"docs": " Permission denied","name": "ACCES"},{"file": 79,"line": 46,"col": 4,"docs": " Bad address","name": "FAULT"},{"file": 79,"line": 49,"col": 4,"docs": " Block device required","name": "NOTBLK"},{"file": 79,"line": 52,"col": 4,"docs": " Device or resource busy","name": "BUSY"},{"file": 79,"line": 55,"col": 4,"docs": " File exists","name": "EXIST"},{"file": 79,"line": 58,"col": 4,"docs": " Cross-device link","name": "XDEV"},{"file": 79,"line": 61,"col": 4,"docs": " No such device","name": "NODEV"},{"file": 79,"line": 64,"col": 4,"docs": " Not a directory","name": "NOTDIR"},{"file": 79,"line": 67,"col": 4,"docs": " Is a directory","name": "ISDIR"},{"file": 79,"line": 70,"col": 4,"docs": " Invalid argument","name": "INVAL"},{"file": 79,"line": 73,"col": 4,"docs": " File table overflow","name": "NFILE"},{"file": 79,"line": 76,"col": 4,"docs": " Too many open files","name": "MFILE"},{"file": 79,"line": 79,"col": 4,"docs": " Not a typewriter","name": "NOTTY"},{"file": 79,"line": 82,"col": 4,"docs": " Text file busy","name": "TXTBSY"},{"file": 79,"line": 85,"col": 4,"docs": " File too large","name": "FBIG"},{"file": 79,"line": 88,"col": 4,"docs": " No space left on device","name": "NOSPC"},{"file": 79,"line": 91,"col": 4,"docs": " Illegal seek","name": "SPIPE"},{"file": 79,"line": 94,"col": 4,"docs": " Read-only file system","name": "ROFS"},{"file": 79,"line": 97,"col": 4,"docs": " Too many links","name": "MLINK"},{"file": 79,"line": 100,"col": 4,"docs": " Broken pipe","name": "PIPE"},{"file": 79,"line": 103,"col": 4,"docs": " Math argument out of domain of func","name": "DOM"},{"file": 79,"line": 106,"col": 4,"docs": " Math result not representable","name": "RANGE"},{"file": 79,"line": 109,"col": 4,"docs": " Resource deadlock would occur","name": "DEADLK"},{"file": 79,"line": 112,"col": 4,"docs": " File name too long","name": "NAMETOOLONG"},{"file": 79,"line": 115,"col": 4,"docs": " No record locks available","name": "NOLCK"},{"file": 79,"line": 118,"col": 4,"docs": " Function not implemented","name": "NOSYS"},{"file": 79,"line": 121,"col": 4,"docs": " Directory not empty","name": "NOTEMPTY"},{"file": 79,"line": 124,"col": 4,"docs": " Too many symbolic links encountered","name": "LOOP"},{"file": 79,"line": 127,"col": 4,"docs": " No message of desired type","name": "NOMSG"},{"file": 79,"line": 130,"col": 4,"docs": " Identifier removed","name": "IDRM"},{"file": 79,"line": 133,"col": 4,"docs": " Channel number out of range","name": "CHRNG"},{"file": 79,"line": 136,"col": 4,"docs": " Level 2 not synchronized","name": "L2NSYNC"},{"file": 79,"line": 139,"col": 4,"docs": " Level 3 halted","name": "L3HLT"},{"file": 79,"line": 142,"col": 4,"docs": " Level 3 reset","name": "L3RST"},{"file": 79,"line": 145,"col": 4,"docs": " Link number out of range","name": "LNRNG"},{"file": 79,"line": 148,"col": 4,"docs": " Protocol driver not attached","name": "UNATCH"},{"file": 79,"line": 151,"col": 4,"docs": " No CSI structure available","name": "NOCSI"},{"file": 79,"line": 154,"col": 4,"docs": " Level 2 halted","name": "L2HLT"},{"file": 79,"line": 157,"col": 4,"docs": " Invalid exchange","name": "BADE"},{"file": 79,"line": 160,"col": 4,"docs": " Invalid request descriptor","name": "BADR"},{"file": 79,"line": 163,"col": 4,"docs": " Exchange full","name": "XFULL"},{"file": 79,"line": 166,"col": 4,"docs": " No anode","name": "NOANO"},{"file": 79,"line": 169,"col": 4,"docs": " Invalid request code","name": "BADRQC"},{"file": 79,"line": 172,"col": 4,"docs": " Invalid slot","name": "BADSLT"},{"file": 79,"line": 175,"col": 4,"docs": " Bad font file format","name": "BFONT"},{"file": 79,"line": 178,"col": 4,"docs": " Device not a stream","name": "NOSTR"},{"file": 79,"line": 181,"col": 4,"docs": " No data available","name": "NODATA"},{"file": 79,"line": 184,"col": 4,"docs": " Timer expired","name": "TIME"},{"file": 79,"line": 187,"col": 4,"docs": " Out of streams resources","name": "NOSR"},{"file": 79,"line": 190,"col": 4,"docs": " Machine is not on the network","name": "NONET"},{"file": 79,"line": 193,"col": 4,"docs": " Package not installed","name": "NOPKG"},{"file": 79,"line": 196,"col": 4,"docs": " Object is remote","name": "REMOTE"},{"file": 79,"line": 199,"col": 4,"docs": " Link has been severed","name": "NOLINK"},{"file": 79,"line": 202,"col": 4,"docs": " Advertise error","name": "ADV"},{"file": 79,"line": 205,"col": 4,"docs": " Srmount error","name": "SRMNT"},{"file": 79,"line": 208,"col": 4,"docs": " Communication error on send","name": "COMM"},{"file": 79,"line": 211,"col": 4,"docs": " Protocol error","name": "PROTO"},{"file": 79,"line": 214,"col": 4,"docs": " Multihop attempted","name": "MULTIHOP"},{"file": 79,"line": 217,"col": 4,"docs": " RFS specific error","name": "DOTDOT"},{"file": 79,"line": 220,"col": 4,"docs": " Not a data message","name": "BADMSG"},{"file": 79,"line": 223,"col": 4,"docs": " Value too large for defined data type","name": "OVERFLOW"},{"file": 79,"line": 226,"col": 4,"docs": " Name not unique on network","name": "NOTUNIQ"},{"file": 79,"line": 229,"col": 4,"docs": " File descriptor in bad state","name": "BADFD"},{"file": 79,"line": 232,"col": 4,"docs": " Remote address changed","name": "REMCHG"},{"file": 79,"line": 235,"col": 4,"docs": " Can not access a needed shared library","name": "LIBACC"},{"file": 79,"line": 238,"col": 4,"docs": " Accessing a corrupted shared library","name": "LIBBAD"},{"file": 79,"line": 241,"col": 4,"docs": " .lib section in a.out corrupted","name": "LIBSCN"},{"file": 79,"line": 244,"col": 4,"docs": " Attempting to link in too many shared libraries","name": "LIBMAX"},{"file": 79,"line": 247,"col": 4,"docs": " Cannot exec a shared library directly","name": "LIBEXEC"},{"file": 79,"line": 250,"col": 4,"docs": " Illegal byte sequence","name": "ILSEQ"},{"file": 79,"line": 253,"col": 4,"docs": " Interrupted system call should be restarted","name": "RESTART"},{"file": 79,"line": 256,"col": 4,"docs": " Streams pipe error","name": "STRPIPE"},{"file": 79,"line": 259,"col": 4,"docs": " Too many users","name": "USERS"},{"file": 79,"line": 262,"col": 4,"docs": " Socket operation on non-socket","name": "NOTSOCK"},{"file": 79,"line": 265,"col": 4,"docs": " Destination address required","name": "DESTADDRREQ"},{"file": 79,"line": 268,"col": 4,"docs": " Message too long","name": "MSGSIZE"},{"file": 79,"line": 271,"col": 4,"docs": " Protocol wrong type for socket","name": "PROTOTYPE"},{"file": 79,"line": 274,"col": 4,"docs": " Protocol not available","name": "NOPROTOOPT"},{"file": 79,"line": 277,"col": 4,"docs": " Protocol not supported","name": "PROTONOSUPPORT"},{"file": 79,"line": 280,"col": 4,"docs": " Socket type not supported","name": "SOCKTNOSUPPORT"},{"file": 79,"line": 284,"col": 4,"docs": " Operation not supported on transport endpoint This code also means `NOTSUP`.","name": "OPNOTSUPP"},{"file": 79,"line": 287,"col": 4,"docs": " Protocol family not supported","name": "PFNOSUPPORT"},{"file": 79,"line": 290,"col": 4,"docs": " Address family not supported by protocol","name": "AFNOSUPPORT"},{"file": 79,"line": 293,"col": 4,"docs": " Address already in use","name": "ADDRINUSE"},{"file": 79,"line": 296,"col": 4,"docs": " Cannot assign requested address","name": "ADDRNOTAVAIL"},{"file": 79,"line": 299,"col": 4,"docs": " Network is down","name": "NETDOWN"},{"file": 79,"line": 302,"col": 4,"docs": " Network is unreachable","name": "NETUNREACH"},{"file": 79,"line": 305,"col": 4,"docs": " Network dropped connection because of reset","name": "NETRESET"},{"file": 79,"line": 308,"col": 4,"docs": " Software caused connection abort","name": "CONNABORTED"},{"file": 79,"line": 311,"col": 4,"docs": " Connection reset by peer","name": "CONNRESET"},{"file": 79,"line": 314,"col": 4,"docs": " No buffer space available","name": "NOBUFS"},{"file": 79,"line": 317,"col": 4,"docs": " Transport endpoint is already connected","name": "ISCONN"},{"file": 79,"line": 320,"col": 4,"docs": " Transport endpoint is not connected","name": "NOTCONN"},{"file": 79,"line": 323,"col": 4,"docs": " Cannot send after transport endpoint shutdown","name": "SHUTDOWN"},{"file": 79,"line": 326,"col": 4,"docs": " Too many references: cannot splice","name": "TOOMANYREFS"},{"file": 79,"line": 329,"col": 4,"docs": " Connection timed out","name": "TIMEDOUT"},{"file": 79,"line": 332,"col": 4,"docs": " Connection refused","name": "CONNREFUSED"},{"file": 79,"line": 335,"col": 4,"docs": " Host is down","name": "HOSTDOWN"},{"file": 79,"line": 338,"col": 4,"docs": " No route to host","name": "HOSTUNREACH"},{"file": 79,"line": 341,"col": 4,"docs": " Operation already in progress","name": "ALREADY"},{"file": 79,"line": 344,"col": 4,"docs": " Operation now in progress","name": "INPROGRESS"},{"file": 79,"line": 347,"col": 4,"docs": " Stale NFS file handle","name": "STALE"},{"file": 79,"line": 350,"col": 4,"docs": " Structure needs cleaning","name": "UCLEAN"},{"file": 79,"line": 353,"col": 4,"docs": " Not a XENIX named type file","name": "NOTNAM"},{"file": 79,"line": 356,"col": 4,"docs": " No XENIX semaphores available","name": "NAVAIL"},{"file": 79,"line": 359,"col": 4,"docs": " Is a named type file","name": "ISNAM"},{"file": 79,"line": 362,"col": 4,"docs": " Remote I/O error","name": "REMOTEIO"},{"file": 79,"line": 365,"col": 4,"docs": " Quota exceeded","name": "DQUOT"},{"file": 79,"line": 368,"col": 4,"docs": " No medium found","name": "NOMEDIUM"},{"file": 79,"line": 371,"col": 4,"docs": " Wrong medium type","name": "MEDIUMTYPE"},{"file": 79,"line": 374,"col": 4,"docs": " Operation canceled","name": "CANCELED"},{"file": 79,"line": 377,"col": 4,"docs": " Required key not available","name": "NOKEY"},{"file": 79,"line": 380,"col": 4,"docs": " Key has expired","name": "KEYEXPIRED"},{"file": 79,"line": 383,"col": 4,"docs": " Key has been revoked","name": "KEYREVOKED"},{"file": 79,"line": 386,"col": 4,"docs": " Key was rejected by service","name": "KEYREJECTED"},{"file": 79,"line": 391,"col": 4,"docs": " Owner died","name": "OWNERDEAD"},{"file": 79,"line": 394,"col": 4,"docs": " State not recoverable","name": "NOTRECOVERABLE"},{"file": 79,"line": 397,"col": 4,"docs": " Operation not possible due to RF-kill","name": "RFKILL"},{"file": 79,"line": 400,"col": 4,"docs": " Memory page has hardware error","name": "HWPOISON"},{"file": 79,"line": 405,"col": 4,"docs": " DNS server returned answer with no data","name": "NSRNODATA"},{"file": 79,"line": 408,"col": 4,"docs": " DNS server claims query was misformatted","name": "NSRFORMERR"},{"file": 79,"line": 411,"col": 4,"docs": " DNS server returned general failure","name": "NSRSERVFAIL"},{"file": 79,"line": 414,"col": 4,"docs": " Domain name not found","name": "NSRNOTFOUND"},{"file": 79,"line": 417,"col": 4,"docs": " DNS server does not implement requested operation","name": "NSRNOTIMP"},{"file": 79,"line": 420,"col": 4,"docs": " DNS server refused query","name": "NSRREFUSED"},{"file": 79,"line": 423,"col": 4,"docs": " Misformatted DNS query","name": "NSRBADQUERY"},{"file": 79,"line": 426,"col": 4,"docs": " Misformatted domain name","name": "NSRBADNAME"},{"file": 79,"line": 429,"col": 4,"docs": " Unsupported address family","name": "NSRBADFAMILY"},{"file": 79,"line": 432,"col": 4,"docs": " Misformatted DNS reply","name": "NSRBADRESP"},{"file": 79,"line": 435,"col": 4,"docs": " Could not contact DNS servers","name": "NSRCONNREFUSED"},{"file": 79,"line": 438,"col": 4,"docs": " Timeout while contacting DNS servers","name": "NSRTIMEOUT"},{"file": 79,"line": 441,"col": 4,"docs": " End of file","name": "NSROF"},{"file": 79,"line": 444,"col": 4,"docs": " Error reading file","name": "NSRFILE"},{"file": 79,"line": 447,"col": 4,"docs": " Out of memory","name": "NSRNOMEM"},{"file": 79,"line": 450,"col": 4,"docs": " Application terminated lookup","name": "NSRDESTRUCTION"},{"file": 79,"line": 453,"col": 4,"docs": " Domain name is too long","name": "NSRQUERYDOMAINTOOLONG"},{"file": 79,"line": 456,"col": 4,"docs": " Domain name is too long","name": "NSRCNAMELOOP"},{"file": 79,"line": 458,"col": 4,"name": "_"},{"file": 25,"line": 63,"col": 8,"name": "unlocked"},{"file": 25,"line": 64,"col": 8,"name": "locked"},{"file": 25,"line": 65,"col": 8,"name": "waiting"},{"file": 43,"line": 1055,"col": 4,"name": "allocator"},{"file": 43,"line": 1056,"col": 4,"name": "address_map"},{"file": 62,"line": 8,"col": 4,"name": "child_allocator"},{"file": 62,"line": 9,"col": 4,"name": "state"},{"file": 9,"line": 271,"col": 25,"name": "exact"},{"file": 9,"line": 271,"col": 32,"name": "at_least"},{"file": 43,"line": 490,"col": 8,"name": "Red"},{"file": 43,"line": 491,"col": 8,"name": "Green"},{"file": 43,"line": 492,"col": 8,"name": "Cyan"},{"file": 43,"line": 493,"col": 8,"name": "White"},{"file": 43,"line": 494,"col": 8,"name": "Dim"},{"file": 43,"line": 495,"col": 8,"name": "Bold"},{"file": 43,"line": 496,"col": 8,"name": "Reset"},{"file": 43,"line": 29,"col": 4,"name": "line"},{"file": 43,"line": 30,"col": 4,"name": "column"},{"file": 43,"line": 31,"col": 4,"name": "file_name"},{"file": 43,"line": 32,"col": 4,"name": "allocator"},{"file": 69,"line": 64,"col": 35,"name": "event_set"},{"file": 69,"line": 64,"col": 46,"name": "timed_out"},{"file": 30,"line": 127,"col": 4,"name": "restart_syscall"},{"file": 30,"line": 128,"col": 4,"name": "exit"},{"file": 30,"line": 129,"col": 4,"name": "fork"},{"file": 30,"line": 130,"col": 4,"name": "read"},{"file": 30,"line": 131,"col": 4,"name": "write"},{"file": 30,"line": 132,"col": 4,"name": "open"},{"file": 30,"line": 133,"col": 4,"name": "close"},{"file": 30,"line": 134,"col": 4,"name": "creat"},{"file": 30,"line": 135,"col": 4,"name": "link"},{"file": 30,"line": 136,"col": 4,"name": "unlink"},{"file": 30,"line": 137,"col": 4,"name": "execve"},{"file": 30,"line": 138,"col": 4,"name": "chdir"},{"file": 30,"line": 139,"col": 4,"name": "mknod"},{"file": 30,"line": 140,"col": 4,"name": "chmod"},{"file": 30,"line": 141,"col": 4,"name": "lchown"},{"file": 30,"line": 142,"col": 4,"name": "lseek"},{"file": 30,"line": 143,"col": 4,"name": "getpid"},{"file": 30,"line": 144,"col": 4,"name": "mount"},{"file": 30,"line": 145,"col": 4,"name": "setuid"},{"file": 30,"line": 146,"col": 4,"name": "getuid"},{"file": 30,"line": 147,"col": 4,"name": "ptrace"},{"file": 30,"line": 148,"col": 4,"name": "pause"},{"file": 30,"line": 149,"col": 4,"name": "access"},{"file": 30,"line": 150,"col": 4,"name": "nice"},{"file": 30,"line": 151,"col": 4,"name": "sync"},{"file": 30,"line": 152,"col": 4,"name": "kill"},{"file": 30,"line": 153,"col": 4,"name": "rename"},{"file": 30,"line": 154,"col": 4,"name": "mkdir"},{"file": 30,"line": 155,"col": 4,"name": "rmdir"},{"file": 30,"line": 156,"col": 4,"name": "dup"},{"file": 30,"line": 157,"col": 4,"name": "pipe"},{"file": 30,"line": 158,"col": 4,"name": "times"},{"file": 30,"line": 159,"col": 4,"name": "brk"},{"file": 30,"line": 160,"col": 4,"name": "setgid"},{"file": 30,"line": 161,"col": 4,"name": "getgid"},{"file": 30,"line": 162,"col": 4,"name": "geteuid"},{"file": 30,"line": 163,"col": 4,"name": "getegid"},{"file": 30,"line": 164,"col": 4,"name": "acct"},{"file": 30,"line": 165,"col": 4,"name": "umount2"},{"file": 30,"line": 166,"col": 4,"name": "ioctl"},{"file": 30,"line": 167,"col": 4,"name": "fcntl"},{"file": 30,"line": 168,"col": 4,"name": "setpgid"},{"file": 30,"line": 169,"col": 4,"name": "umask"},{"file": 30,"line": 170,"col": 4,"name": "chroot"},{"file": 30,"line": 171,"col": 4,"name": "ustat"},{"file": 30,"line": 172,"col": 4,"name": "dup2"},{"file": 30,"line": 173,"col": 4,"name": "getppid"},{"file": 30,"line": 174,"col": 4,"name": "getpgrp"},{"file": 30,"line": 175,"col": 4,"name": "setsid"},{"file": 30,"line": 176,"col": 4,"name": "sigaction"},{"file": 30,"line": 177,"col": 4,"name": "setreuid"},{"file": 30,"line": 178,"col": 4,"name": "setregid"},{"file": 30,"line": 179,"col": 4,"name": "sigsuspend"},{"file": 30,"line": 180,"col": 4,"name": "sigpending"},{"file": 30,"line": 181,"col": 4,"name": "sethostname"},{"file": 30,"line": 182,"col": 4,"name": "setrlimit"},{"file": 30,"line": 183,"col": 4,"name": "getrusage"},{"file": 30,"line": 184,"col": 4,"name": "gettimeofday"},{"file": 30,"line": 185,"col": 4,"name": "settimeofday"},{"file": 30,"line": 186,"col": 4,"name": "getgroups"},{"file": 30,"line": 187,"col": 4,"name": "setgroups"},{"file": 30,"line": 188,"col": 4,"name": "symlink"},{"file": 30,"line": 189,"col": 4,"name": "readlink"},{"file": 30,"line": 190,"col": 4,"name": "uselib"},{"file": 30,"line": 191,"col": 4,"name": "swapon"},{"file": 30,"line": 192,"col": 4,"name": "reboot"},{"file": 30,"line": 193,"col": 4,"name": "munmap"},{"file": 30,"line": 194,"col": 4,"name": "truncate"},{"file": 30,"line": 195,"col": 4,"name": "ftruncate"},{"file": 30,"line": 196,"col": 4,"name": "fchmod"},{"file": 30,"line": 197,"col": 4,"name": "fchown"},{"file": 30,"line": 198,"col": 4,"name": "getpriority"},{"file": 30,"line": 199,"col": 4,"name": "setpriority"},{"file": 30,"line": 200,"col": 4,"name": "statfs"},{"file": 30,"line": 201,"col": 4,"name": "fstatfs"},{"file": 30,"line": 202,"col": 4,"name": "syslog"},{"file": 30,"line": 203,"col": 4,"name": "setitimer"},{"file": 30,"line": 204,"col": 4,"name": "getitimer"},{"file": 30,"line": 205,"col": 4,"name": "stat"},{"file": 30,"line": 206,"col": 4,"name": "lstat"},{"file": 30,"line": 207,"col": 4,"name": "fstat"},{"file": 30,"line": 208,"col": 4,"name": "vhangup"},{"file": 30,"line": 209,"col": 4,"name": "wait4"},{"file": 30,"line": 210,"col": 4,"name": "swapoff"},{"file": 30,"line": 211,"col": 4,"name": "sysinfo"},{"file": 30,"line": 212,"col": 4,"name": "fsync"},{"file": 30,"line": 213,"col": 4,"name": "sigreturn"},{"file": 30,"line": 214,"col": 4,"name": "clone"},{"file": 30,"line": 215,"col": 4,"name": "setdomainname"},{"file": 30,"line": 216,"col": 4,"name": "uname"},{"file": 30,"line": 217,"col": 4,"name": "adjtimex"},{"file": 30,"line": 218,"col": 4,"name": "mprotect"},{"file": 30,"line": 219,"col": 4,"name": "sigprocmask"},{"file": 30,"line": 220,"col": 4,"name": "init_module"},{"file": 30,"line": 221,"col": 4,"name": "delete_module"},{"file": 30,"line": 222,"col": 4,"name": "quotactl"},{"file": 30,"line": 223,"col": 4,"name": "getpgid"},{"file": 30,"line": 224,"col": 4,"name": "fchdir"},{"file": 30,"line": 225,"col": 4,"name": "bdflush"},{"file": 30,"line": 226,"col": 4,"name": "sysfs"},{"file": 30,"line": 227,"col": 4,"name": "personality"},{"file": 30,"line": 228,"col": 4,"name": "setfsuid"},{"file": 30,"line": 229,"col": 4,"name": "setfsgid"},{"file": 30,"line": 230,"col": 4,"name": "_llseek"},{"file": 30,"line": 231,"col": 4,"name": "getdents"},{"file": 30,"line": 232,"col": 4,"name": "_newselect"},{"file": 30,"line": 233,"col": 4,"name": "flock"},{"file": 30,"line": 234,"col": 4,"name": "msync"},{"file": 30,"line": 235,"col": 4,"name": "readv"},{"file": 30,"line": 236,"col": 4,"name": "writev"},{"file": 30,"line": 237,"col": 4,"name": "getsid"},{"file": 30,"line": 238,"col": 4,"name": "fdatasync"},{"file": 30,"line": 239,"col": 4,"name": "_sysctl"},{"file": 30,"line": 240,"col": 4,"name": "mlock"},{"file": 30,"line": 241,"col": 4,"name": "munlock"},{"file": 30,"line": 242,"col": 4,"name": "mlockall"},{"file": 30,"line": 243,"col": 4,"name": "munlockall"},{"file": 30,"line": 244,"col": 4,"name": "sched_setparam"},{"file": 30,"line": 245,"col": 4,"name": "sched_getparam"},{"file": 30,"line": 246,"col": 4,"name": "sched_setscheduler"},{"file": 30,"line": 247,"col": 4,"name": "sched_getscheduler"},{"file": 30,"line": 248,"col": 4,"name": "sched_yield"},{"file": 30,"line": 249,"col": 4,"name": "sched_get_priority_max"},{"file": 30,"line": 250,"col": 4,"name": "sched_get_priority_min"},{"file": 30,"line": 251,"col": 4,"name": "sched_rr_get_interval"},{"file": 30,"line": 252,"col": 4,"name": "nanosleep"},{"file": 30,"line": 253,"col": 4,"name": "mremap"},{"file": 30,"line": 254,"col": 4,"name": "setresuid"},{"file": 30,"line": 255,"col": 4,"name": "getresuid"},{"file": 30,"line": 256,"col": 4,"name": "poll"},{"file": 30,"line": 257,"col": 4,"name": "nfsservctl"},{"file": 30,"line": 258,"col": 4,"name": "setresgid"},{"file": 30,"line": 259,"col": 4,"name": "getresgid"},{"file": 30,"line": 260,"col": 4,"name": "prctl"},{"file": 30,"line": 261,"col": 4,"name": "rt_sigreturn"},{"file": 30,"line": 262,"col": 4,"name": "rt_sigaction"},{"file": 30,"line": 263,"col": 4,"name": "rt_sigprocmask"},{"file": 30,"line": 264,"col": 4,"name": "rt_sigpending"},{"file": 30,"line": 265,"col": 4,"name": "rt_sigtimedwait"},{"file": 30,"line": 266,"col": 4,"name": "rt_sigqueueinfo"},{"file": 30,"line": 267,"col": 4,"name": "rt_sigsuspend"},{"file": 30,"line": 268,"col": 4,"name": "pread64"},{"file": 30,"line": 269,"col": 4,"name": "pwrite64"},{"file": 30,"line": 270,"col": 4,"name": "chown"},{"file": 30,"line": 271,"col": 4,"name": "getcwd"},{"file": 30,"line": 272,"col": 4,"name": "capget"},{"file": 30,"line": 273,"col": 4,"name": "capset"},{"file": 30,"line": 274,"col": 4,"name": "sigaltstack"},{"file": 30,"line": 275,"col": 4,"name": "sendfile"},{"file": 30,"line": 276,"col": 4,"name": "vfork"},{"file": 30,"line": 277,"col": 4,"name": "ugetrlimit"},{"file": 30,"line": 278,"col": 4,"name": "mmap2"},{"file": 30,"line": 279,"col": 4,"name": "truncate64"},{"file": 30,"line": 280,"col": 4,"name": "ftruncate64"},{"file": 30,"line": 281,"col": 4,"name": "stat64"},{"file": 30,"line": 282,"col": 4,"name": "lstat64"},{"file": 30,"line": 283,"col": 4,"name": "fstat64"},{"file": 30,"line": 284,"col": 4,"name": "lchown32"},{"file": 30,"line": 285,"col": 4,"name": "getuid32"},{"file": 30,"line": 286,"col": 4,"name": "getgid32"},{"file": 30,"line": 287,"col": 4,"name": "geteuid32"},{"file": 30,"line": 288,"col": 4,"name": "getegid32"},{"file": 30,"line": 289,"col": 4,"name": "setreuid32"},{"file": 30,"line": 290,"col": 4,"name": "setregid32"},{"file": 30,"line": 291,"col": 4,"name": "getgroups32"},{"file": 30,"line": 292,"col": 4,"name": "setgroups32"},{"file": 30,"line": 293,"col": 4,"name": "fchown32"},{"file": 30,"line": 294,"col": 4,"name": "setresuid32"},{"file": 30,"line": 295,"col": 4,"name": "getresuid32"},{"file": 30,"line": 296,"col": 4,"name": "setresgid32"},{"file": 30,"line": 297,"col": 4,"name": "getresgid32"},{"file": 30,"line": 298,"col": 4,"name": "chown32"},{"file": 30,"line": 299,"col": 4,"name": "setuid32"},{"file": 30,"line": 300,"col": 4,"name": "setgid32"},{"file": 30,"line": 301,"col": 4,"name": "setfsuid32"},{"file": 30,"line": 302,"col": 4,"name": "setfsgid32"},{"file": 30,"line": 303,"col": 4,"name": "getdents64"},{"file": 30,"line": 304,"col": 4,"name": "pivot_root"},{"file": 30,"line": 305,"col": 4,"name": "mincore"},{"file": 30,"line": 306,"col": 4,"name": "madvise"},{"file": 30,"line": 307,"col": 4,"name": "fcntl64"},{"file": 30,"line": 308,"col": 4,"name": "gettid"},{"file": 30,"line": 309,"col": 4,"name": "readahead"},{"file": 30,"line": 310,"col": 4,"name": "setxattr"},{"file": 30,"line": 311,"col": 4,"name": "lsetxattr"},{"file": 30,"line": 312,"col": 4,"name": "fsetxattr"},{"file": 30,"line": 313,"col": 4,"name": "getxattr"},{"file": 30,"line": 314,"col": 4,"name": "lgetxattr"},{"file": 30,"line": 315,"col": 4,"name": "fgetxattr"},{"file": 30,"line": 316,"col": 4,"name": "listxattr"},{"file": 30,"line": 317,"col": 4,"name": "llistxattr"},{"file": 30,"line": 318,"col": 4,"name": "flistxattr"},{"file": 30,"line": 319,"col": 4,"name": "removexattr"},{"file": 30,"line": 320,"col": 4,"name": "lremovexattr"},{"file": 30,"line": 321,"col": 4,"name": "fremovexattr"},{"file": 30,"line": 322,"col": 4,"name": "tkill"},{"file": 30,"line": 323,"col": 4,"name": "sendfile64"},{"file": 30,"line": 324,"col": 4,"name": "futex"},{"file": 30,"line": 325,"col": 4,"name": "sched_setaffinity"},{"file": 30,"line": 326,"col": 4,"name": "sched_getaffinity"},{"file": 30,"line": 327,"col": 4,"name": "io_setup"},{"file": 30,"line": 328,"col": 4,"name": "io_destroy"},{"file": 30,"line": 329,"col": 4,"name": "io_getevents"},{"file": 30,"line": 330,"col": 4,"name": "io_submit"},{"file": 30,"line": 331,"col": 4,"name": "io_cancel"},{"file": 30,"line": 332,"col": 4,"name": "exit_group"},{"file": 30,"line": 333,"col": 4,"name": "lookup_dcookie"},{"file": 30,"line": 334,"col": 4,"name": "epoll_create"},{"file": 30,"line": 335,"col": 4,"name": "epoll_ctl"},{"file": 30,"line": 336,"col": 4,"name": "epoll_wait"},{"file": 30,"line": 337,"col": 4,"name": "remap_file_pages"},{"file": 30,"line": 338,"col": 4,"name": "set_tid_address"},{"file": 30,"line": 339,"col": 4,"name": "timer_create"},{"file": 30,"line": 340,"col": 4,"name": "timer_settime"},{"file": 30,"line": 341,"col": 4,"name": "timer_gettime"},{"file": 30,"line": 342,"col": 4,"name": "timer_getoverrun"},{"file": 30,"line": 343,"col": 4,"name": "timer_delete"},{"file": 30,"line": 344,"col": 4,"name": "clock_settime"},{"file": 30,"line": 345,"col": 4,"name": "clock_gettime"},{"file": 30,"line": 346,"col": 4,"name": "clock_getres"},{"file": 30,"line": 347,"col": 4,"name": "clock_nanosleep"},{"file": 30,"line": 348,"col": 4,"name": "statfs64"},{"file": 30,"line": 349,"col": 4,"name": "fstatfs64"},{"file": 30,"line": 350,"col": 4,"name": "tgkill"},{"file": 30,"line": 351,"col": 4,"name": "utimes"},{"file": 30,"line": 352,"col": 4,"name": "fadvise64_64"},{"file": 30,"line": 353,"col": 4,"name": "pciconfig_iobase"},{"file": 30,"line": 354,"col": 4,"name": "pciconfig_read"},{"file": 30,"line": 355,"col": 4,"name": "pciconfig_write"},{"file": 30,"line": 356,"col": 4,"name": "mq_open"},{"file": 30,"line": 357,"col": 4,"name": "mq_unlink"},{"file": 30,"line": 358,"col": 4,"name": "mq_timedsend"},{"file": 30,"line": 359,"col": 4,"name": "mq_timedreceive"},{"file": 30,"line": 360,"col": 4,"name": "mq_notify"},{"file": 30,"line": 361,"col": 4,"name": "mq_getsetattr"},{"file": 30,"line": 362,"col": 4,"name": "waitid"},{"file": 30,"line": 363,"col": 4,"name": "socket"},{"file": 30,"line": 364,"col": 4,"name": "bind"},{"file": 30,"line": 365,"col": 4,"name": "connect"},{"file": 30,"line": 366,"col": 4,"name": "listen"},{"file": 30,"line": 367,"col": 4,"name": "accept"},{"file": 30,"line": 368,"col": 4,"name": "getsockname"},{"file": 30,"line": 369,"col": 4,"name": "getpeername"},{"file": 30,"line": 370,"col": 4,"name": "socketpair"},{"file": 30,"line": 371,"col": 4,"name": "send"},{"file": 30,"line": 372,"col": 4,"name": "sendto"},{"file": 30,"line": 373,"col": 4,"name": "recv"},{"file": 30,"line": 374,"col": 4,"name": "recvfrom"},{"file": 30,"line": 375,"col": 4,"name": "shutdown"},{"file": 30,"line": 376,"col": 4,"name": "setsockopt"},{"file": 30,"line": 377,"col": 4,"name": "getsockopt"},{"file": 30,"line": 378,"col": 4,"name": "sendmsg"},{"file": 30,"line": 379,"col": 4,"name": "recvmsg"},{"file": 30,"line": 380,"col": 4,"name": "semop"},{"file": 30,"line": 381,"col": 4,"name": "semget"},{"file": 30,"line": 382,"col": 4,"name": "semctl"},{"file": 30,"line": 383,"col": 4,"name": "msgsnd"},{"file": 30,"line": 384,"col": 4,"name": "msgrcv"},{"file": 30,"line": 385,"col": 4,"name": "msgget"},{"file": 30,"line": 386,"col": 4,"name": "msgctl"},{"file": 30,"line": 387,"col": 4,"name": "shmat"},{"file": 30,"line": 388,"col": 4,"name": "shmdt"},{"file": 30,"line": 389,"col": 4,"name": "shmget"},{"file": 30,"line": 390,"col": 4,"name": "shmctl"},{"file": 30,"line": 391,"col": 4,"name": "add_key"},{"file": 30,"line": 392,"col": 4,"name": "request_key"},{"file": 30,"line": 393,"col": 4,"name": "keyctl"},{"file": 30,"line": 394,"col": 4,"name": "semtimedop"},{"file": 30,"line": 395,"col": 4,"name": "vserver"},{"file": 30,"line": 396,"col": 4,"name": "ioprio_set"},{"file": 30,"line": 397,"col": 4,"name": "ioprio_get"},{"file": 30,"line": 398,"col": 4,"name": "inotify_init"},{"file": 30,"line": 399,"col": 4,"name": "inotify_add_watch"},{"file": 30,"line": 400,"col": 4,"name": "inotify_rm_watch"},{"file": 30,"line": 401,"col": 4,"name": "mbind"},{"file": 30,"line": 402,"col": 4,"name": "get_mempolicy"},{"file": 30,"line": 403,"col": 4,"name": "set_mempolicy"},{"file": 30,"line": 404,"col": 4,"name": "openat"},{"file": 30,"line": 405,"col": 4,"name": "mkdirat"},{"file": 30,"line": 406,"col": 4,"name": "mknodat"},{"file": 30,"line": 407,"col": 4,"name": "fchownat"},{"file": 30,"line": 408,"col": 4,"name": "futimesat"},{"file": 30,"line": 409,"col": 4,"name": "fstatat64"},{"file": 30,"line": 410,"col": 4,"name": "unlinkat"},{"file": 30,"line": 411,"col": 4,"name": "renameat"},{"file": 30,"line": 412,"col": 4,"name": "linkat"},{"file": 30,"line": 413,"col": 4,"name": "symlinkat"},{"file": 30,"line": 414,"col": 4,"name": "readlinkat"},{"file": 30,"line": 415,"col": 4,"name": "fchmodat"},{"file": 30,"line": 416,"col": 4,"name": "faccessat"},{"file": 30,"line": 417,"col": 4,"name": "pselect6"},{"file": 30,"line": 418,"col": 4,"name": "ppoll"},{"file": 30,"line": 419,"col": 4,"name": "unshare"},{"file": 30,"line": 420,"col": 4,"name": "set_robust_list"},{"file": 30,"line": 421,"col": 4,"name": "get_robust_list"},{"file": 30,"line": 422,"col": 4,"name": "splice"},{"file": 30,"line": 423,"col": 4,"name": "sync_file_range"},{"file": 30,"line": 424,"col": 4,"name": "tee"},{"file": 30,"line": 425,"col": 4,"name": "vmsplice"},{"file": 30,"line": 426,"col": 4,"name": "move_pages"},{"file": 30,"line": 427,"col": 4,"name": "getcpu"},{"file": 30,"line": 428,"col": 4,"name": "epoll_pwait"},{"file": 30,"line": 429,"col": 4,"name": "kexec_load"},{"file": 30,"line": 430,"col": 4,"name": "utimensat"},{"file": 30,"line": 431,"col": 4,"name": "signalfd"},{"file": 30,"line": 432,"col": 4,"name": "timerfd_create"},{"file": 30,"line": 433,"col": 4,"name": "eventfd"},{"file": 30,"line": 434,"col": 4,"name": "fallocate"},{"file": 30,"line": 435,"col": 4,"name": "timerfd_settime"},{"file": 30,"line": 436,"col": 4,"name": "timerfd_gettime"},{"file": 30,"line": 437,"col": 4,"name": "signalfd4"},{"file": 30,"line": 438,"col": 4,"name": "eventfd2"},{"file": 30,"line": 439,"col": 4,"name": "epoll_create1"},{"file": 30,"line": 440,"col": 4,"name": "dup3"},{"file": 30,"line": 441,"col": 4,"name": "pipe2"},{"file": 30,"line": 442,"col": 4,"name": "inotify_init1"},{"file": 30,"line": 443,"col": 4,"name": "preadv"},{"file": 30,"line": 444,"col": 4,"name": "pwritev"},{"file": 30,"line": 445,"col": 4,"name": "rt_tgsigqueueinfo"},{"file": 30,"line": 446,"col": 4,"name": "perf_event_open"},{"file": 30,"line": 447,"col": 4,"name": "recvmmsg"},{"file": 30,"line": 448,"col": 4,"name": "accept4"},{"file": 30,"line": 449,"col": 4,"name": "fanotify_init"},{"file": 30,"line": 450,"col": 4,"name": "fanotify_mark"},{"file": 30,"line": 451,"col": 4,"name": "prlimit64"},{"file": 30,"line": 452,"col": 4,"name": "name_to_handle_at"},{"file": 30,"line": 453,"col": 4,"name": "open_by_handle_at"},{"file": 30,"line": 454,"col": 4,"name": "clock_adjtime"},{"file": 30,"line": 455,"col": 4,"name": "syncfs"},{"file": 30,"line": 456,"col": 4,"name": "sendmmsg"},{"file": 30,"line": 457,"col": 4,"name": "setns"},{"file": 30,"line": 458,"col": 4,"name": "process_vm_readv"},{"file": 30,"line": 459,"col": 4,"name": "process_vm_writev"},{"file": 30,"line": 460,"col": 4,"name": "kcmp"},{"file": 30,"line": 461,"col": 4,"name": "finit_module"},{"file": 30,"line": 462,"col": 4,"name": "sched_setattr"},{"file": 30,"line": 463,"col": 4,"name": "sched_getattr"},{"file": 30,"line": 464,"col": 4,"name": "renameat2"},{"file": 30,"line": 465,"col": 4,"name": "seccomp"},{"file": 30,"line": 466,"col": 4,"name": "getrandom"},{"file": 30,"line": 467,"col": 4,"name": "memfd_create"},{"file": 30,"line": 468,"col": 4,"name": "bpf"},{"file": 30,"line": 469,"col": 4,"name": "execveat"},{"file": 30,"line": 470,"col": 4,"name": "userfaultfd"},{"file": 30,"line": 471,"col": 4,"name": "membarrier"},{"file": 30,"line": 472,"col": 4,"name": "mlock2"},{"file": 30,"line": 473,"col": 4,"name": "copy_file_range"},{"file": 30,"line": 474,"col": 4,"name": "preadv2"},{"file": 30,"line": 475,"col": 4,"name": "pwritev2"},{"file": 30,"line": 476,"col": 4,"name": "pkey_mprotect"},{"file": 30,"line": 477,"col": 4,"name": "pkey_alloc"},{"file": 30,"line": 478,"col": 4,"name": "pkey_free"},{"file": 30,"line": 479,"col": 4,"name": "statx"},{"file": 30,"line": 480,"col": 4,"name": "rseq"},{"file": 30,"line": 481,"col": 4,"name": "io_pgetevents"},{"file": 30,"line": 482,"col": 4,"name": "migrate_pages"},{"file": 30,"line": 483,"col": 4,"name": "kexec_file_load"},{"file": 30,"line": 484,"col": 4,"name": "clock_gettime64"},{"file": 30,"line": 485,"col": 4,"name": "clock_settime64"},{"file": 30,"line": 486,"col": 4,"name": "clock_adjtime64"},{"file": 30,"line": 487,"col": 4,"name": "clock_getres_time64"},{"file": 30,"line": 488,"col": 4,"name": "clock_nanosleep_time64"},{"file": 30,"line": 489,"col": 4,"name": "timer_gettime64"},{"file": 30,"line": 490,"col": 4,"name": "timer_settime64"},{"file": 30,"line": 491,"col": 4,"name": "timerfd_gettime64"},{"file": 30,"line": 492,"col": 4,"name": "timerfd_settime64"},{"file": 30,"line": 493,"col": 4,"name": "utimensat_time64"},{"file": 30,"line": 494,"col": 4,"name": "pselect6_time64"},{"file": 30,"line": 495,"col": 4,"name": "ppoll_time64"},{"file": 30,"line": 496,"col": 4,"name": "io_pgetevents_time64"},{"file": 30,"line": 497,"col": 4,"name": "recvmmsg_time64"},{"file": 30,"line": 498,"col": 4,"name": "mq_timedsend_time64"},{"file": 30,"line": 499,"col": 4,"name": "mq_timedreceive_time64"},{"file": 30,"line": 500,"col": 4,"name": "semtimedop_time64"},{"file": 30,"line": 501,"col": 4,"name": "rt_sigtimedwait_time64"},{"file": 30,"line": 502,"col": 4,"name": "futex_time64"},{"file": 30,"line": 503,"col": 4,"name": "sched_rr_get_interval_time64"},{"file": 30,"line": 504,"col": 4,"name": "pidfd_send_signal"},{"file": 30,"line": 505,"col": 4,"name": "io_uring_setup"},{"file": 30,"line": 506,"col": 4,"name": "io_uring_enter"},{"file": 30,"line": 507,"col": 4,"name": "io_uring_register"},{"file": 30,"line": 508,"col": 4,"name": "open_tree"},{"file": 30,"line": 509,"col": 4,"name": "move_mount"},{"file": 30,"line": 510,"col": 4,"name": "fsopen"},{"file": 30,"line": 511,"col": 4,"name": "fsconfig"},{"file": 30,"line": 512,"col": 4,"name": "fsmount"},{"file": 30,"line": 513,"col": 4,"name": "fspick"},{"file": 30,"line": 514,"col": 4,"name": "pidfd_open"},{"file": 30,"line": 515,"col": 4,"name": "clone3"},{"file": 30,"line": 516,"col": 4,"name": "close_range"},{"file": 30,"line": 517,"col": 4,"name": "openat2"},{"file": 30,"line": 518,"col": 4,"name": "pidfd_getfd"},{"file": 30,"line": 519,"col": 4,"name": "faccessat2"},{"file": 30,"line": 520,"col": 4,"name": "process_madvise"},{"file": 30,"line": 521,"col": 4,"name": "epoll_pwait2"},{"file": 30,"line": 522,"col": 4,"name": "mount_setattr"},{"file": 30,"line": 523,"col": 4,"name": "landlock_create_ruleset"},{"file": 30,"line": 524,"col": 4,"name": "landlock_add_rule"},{"file": 30,"line": 525,"col": 4,"name": "landlock_restrict_self"},{"file": 30,"line": 527,"col": 4,"name": "breakpoint"},{"file": 30,"line": 528,"col": 4,"name": "cacheflush"},{"file": 30,"line": 529,"col": 4,"name": "usr26"},{"file": 30,"line": 530,"col": 4,"name": "usr32"},{"file": 30,"line": 531,"col": 4,"name": "set_tls"},{"file": 30,"line": 532,"col": 4,"name": "get_tls"},{"file": 30,"line": 534,"col": 4,"name": "_"},{"file": 62,"line": 14,"col": 8,"name": "buffer_list"},{"file": 62,"line": 15,"col": 8,"name": "end_index"},{"file": 66,"line": 4352,"col": 4,"name": "tv_sec"},{"file": 66,"line": 4353,"col": 4,"name": "tv_nsec"},{"file": 63,"line": 38,"col": 4,"name": "seed"},{"file": 63,"line": 39,"col": 4,"name": "msg_len"},{"file": 39,"line": 67,"col": 4,"name": "context"},{"file": 39,"line": 68,"col": 4,"name": "parent"},{"file": 39,"line": 69,"col": 4,"name": "name"},{"file": 39,"line": 71,"col": 4,"docs": " Must be handled atomically to be thread-safe.","name": "recently_updated_child"},{"file": 39,"line": 73,"col": 4,"docs": " Must be handled atomically to be thread-safe. 0 means null.","name": "unprotected_estimated_total_items"},{"file": 39,"line": 75,"col": 4,"docs": " Must be handled atomically to be thread-safe.","name": "unprotected_completed_items"},{"file": 55,"line": 451,"col": 4,"name": "inner"},{"file": 58,"line": 141,"col": 4,"docs": "if we used resolution's value when performing the  performance counter calc on windows/darwin, it would  be less precise","name": "frequency"},{"file": 58,"line": 146,"col": 4,"name": "resolution"},{"file": 58,"line": 147,"col": 4,"name": "start_time"},{"file": 29,"line": 932,"col": 4,"name": "alloc"},{"file": 29,"line": 933,"col": 4,"name": "free"},{"file": 55,"line": 202,"col": 4,"name": "index"},{"file": 55,"line": 203,"col": 4,"name": "count"},{"file": 10,"line": 33,"col": 0,"name": "cmd"},{"file": 10,"line": 34,"col": 0,"name": "options"},{"file": 7,"line": 39,"col": 4,"name": "name"},{"file": 7,"line": 40,"col": 4,"name": "ctx"},{"file": 16,"line": 843,"col": 12,"name": "key_ptr"},{"file": 16,"line": 844,"col": 12,"name": "value_ptr"},{"file": 16,"line": 845,"col": 12,"name": "found_existing"},{"file": 11,"line": 90,"col": 0,"name": "allocator"},{"file": 11,"line": 91,"col": 0,"name": "cmd"},{"file": 11,"line": 92,"col": 0,"name": "tokenizer"},{"file": 11,"line": 93,"col": 0,"name": "args_ctx"},{"file": 11,"line": 94,"col": 0,"name": "err_builder"},{"file": 11,"line": 95,"col": 0,"name": "cmd_args_idx"},{"file": 11,"line": 96,"col": 0,"name": "consume_cmd_args"},{"file": 64,"line": 65,"col": 4,"name": "args"},{"file": 64,"line": 66,"col": 4,"name": "cursor"},{"file": 12,"line": 13,"col": 0,"docs": " Actual error that happened","name": "err"},{"file": 12,"line": 15,"col": 0,"docs": " The actual command argument which parser found just before error happened","name": "arg"},{"file": 12,"line": 17,"col": 0,"docs": " The command whose argument parser was trying to parse","name": "cmd"},{"file": 12,"line": 19,"col": 0,"docs": " User provided raw argument","name": "provided_arg"},{"file": 64,"line": 29,"col": 4,"name": "value"},{"file": 64,"line": 30,"col": 4,"name": "tag"},{"file": 64,"line": 6,"col": 8,"name": "short_option"},{"file": 64,"line": 8,"col": 8,"name": "short_option_with_value"},{"file": 64,"line": 10,"col": 8,"name": "short_option_with_empty_value"},{"file": 64,"line": 12,"col": 8,"name": "short_option_with_tail"},{"file": 64,"line": 14,"col": 8,"name": "short_options_with_value"},{"file": 64,"line": 16,"col": 8,"name": "short_options_with_empty_value"},{"file": 64,"line": 18,"col": 8,"name": "long_option"},{"file": 64,"line": 20,"col": 8,"name": "long_option_with_value"},{"file": 64,"line": 22,"col": 8,"name": "long_option_with_empty_value"},{"file": 64,"line": 24,"col": 8,"name": "help_option"},{"file": 64,"line": 26,"col": 8,"name": "some_argument"},{"file": 11,"line": 35,"col": 4,"name": "name"},{"file": 11,"line": 36,"col": 4,"name": "value"},{"file": 11,"line": 37,"col": 4,"name": "cursor"},{"file": 15,"line": 37,"col": 8,"name": "BlockDevice"},{"file": 15,"line": 38,"col": 8,"name": "CharacterDevice"},{"file": 15,"line": 39,"col": 8,"name": "Directory"},{"file": 15,"line": 40,"col": 8,"name": "NamedPipe"},{"file": 15,"line": 41,"col": 8,"name": "SymLink"},{"file": 15,"line": 42,"col": 8,"name": "File"},{"file": 15,"line": 43,"col": 8,"name": "UnixDomainSocket"},{"file": 15,"line": 44,"col": 8,"name": "Whiteout"},{"file": 15,"line": 45,"col": 8,"name": "Door"},{"file": 15,"line": 46,"col": 8,"name": "EventPort"},{"file": 15,"line": 47,"col": 8,"name": "Unknown"},{"file": 15,"line": 71,"col": 28,"name": "None"},{"file": 15,"line": 71,"col": 34,"name": "Shared"},{"file": 15,"line": 71,"col": 42,"name": "Exclusive"},{"file": 15,"line": 283,"col": 8,"docs": " A number that the system uses to point to the file metadata. This number is not guaranteed to be unique across time, as some file systems may reuse an inode after its file has been deleted. Some systems may change the inode of a file over time. On Linux, the inode is a structure that stores the metadata, and the inode _number_ is what you see here: the index number of the inode. The FileIndex on Windows is similar. It is a number for a file that is unique to each filesystem.","name": "inode"},{"file": 15,"line": 284,"col": 8,"name": "size"},{"file": 15,"line": 285,"col": 8,"name": "mode"},{"file": 15,"line": 286,"col": 8,"name": "kind"},{"file": 15,"line": 289,"col": 8,"docs": " Access time in nanoseconds, relative to UTC 1970-01-01.","name": "atime"},{"file": 15,"line": 291,"col": 8,"docs": " Last modification time in nanoseconds, relative to UTC 1970-01-01.","name": "mtime"},{"file": 15,"line": 293,"col": 8,"docs": " Creation time in nanoseconds, relative to UTC 1970-01-01.","name": "ctime"},{"file": 50,"line": 34,"col": 56,"name": "blocking"},{"file": 22,"line": 407,"col": 8,"name": "name"},{"file": 22,"line": 408,"col": 8,"name": "is_pub"},{"file": 22,"line": 409,"col": 8,"name": "data"},{"file": 47,"line": 14,"col": 4,"name": "Left"},{"file": 47,"line": 15,"col": 4,"name": "Center"},{"file": 47,"line": 16,"col": 4,"name": "Right"},{"file": 47,"line": 286,"col": 4,"name": "none"},{"file": 47,"line": 287,"col": 4,"name": "number"},{"file": 47,"line": 288,"col": 4,"name": "named"},{"file": 43,"line": 1555,"col": 8,"name": "base_address"},{"file": 43,"line": 1556,"col": 8,"name": "dwarf"},{"file": 43,"line": 1557,"col": 8,"name": "mapped_memory"},{"file": 16,"line": 724,"col": 12,"name": "values"},{"file": 16,"line": 725,"col": 12,"name": "keys"},{"file": 16,"line": 726,"col": 12,"name": "capacity"},{"file": 44,"line": 266,"col": 4,"name": "Address"},{"file": 44,"line": 267,"col": 4,"name": "Block"},{"file": 44,"line": 268,"col": 4,"name": "Const"},{"file": 44,"line": 269,"col": 4,"name": "ExprLoc"},{"file": 44,"line": 270,"col": 4,"name": "Flag"},{"file": 44,"line": 271,"col": 4,"name": "SecOffset"},{"file": 44,"line": 272,"col": 4,"name": "Ref"},{"file": 44,"line": 273,"col": 4,"name": "RefAddr"},{"file": 44,"line": 274,"col": 4,"name": "String"},{"file": 44,"line": 275,"col": 4,"name": "StrPtr"},{"file": 13,"line": 13,"col": 8,"name": "tag"},{"file": 13,"line": 14,"col": 8,"name": "version_range"},{"file": 13,"line": 461,"col": 8,"name": "none"},{"file": 13,"line": 462,"col": 8,"name": "gnu"},{"file": 13,"line": 463,"col": 8,"name": "gnuabin32"},{"file": 13,"line": 464,"col": 8,"name": "gnuabi64"},{"file": 13,"line": 465,"col": 8,"name": "gnueabi"},{"file": 13,"line": 466,"col": 8,"name": "gnueabihf"},{"file": 13,"line": 467,"col": 8,"name": "gnux32"},{"file": 13,"line": 468,"col": 8,"name": "gnuilp32"},{"file": 13,"line": 469,"col": 8,"name": "code16"},{"file": 13,"line": 470,"col": 8,"name": "eabi"},{"file": 13,"line": 471,"col": 8,"name": "eabihf"},{"file": 13,"line": 472,"col": 8,"name": "android"},{"file": 13,"line": 473,"col": 8,"name": "musl"},{"file": 13,"line": 474,"col": 8,"name": "musleabi"},{"file": 13,"line": 475,"col": 8,"name": "musleabihf"},{"file": 13,"line": 476,"col": 8,"name": "muslx32"},{"file": 13,"line": 477,"col": 8,"name": "msvc"},{"file": 13,"line": 478,"col": 8,"name": "itanium"},{"file": 13,"line": 479,"col": 8,"name": "cygnus"},{"file": 13,"line": 480,"col": 8,"name": "coreclr"},{"file": 13,"line": 481,"col": 8,"name": "simulator"},{"file": 13,"line": 482,"col": 8,"name": "macabi"},{"file": 13,"line": 564,"col": 8,"docs": " Common Object File Format (Windows)","name": "coff"},{"file": 13,"line": 566,"col": 8,"docs": " Executable and Linking Format","name": "elf"},{"file": 13,"line": 568,"col": 8,"docs": " macOS relocatables","name": "macho"},{"file": 13,"line": 570,"col": 8,"docs": " WebAssembly","name": "wasm"},{"file": 13,"line": 572,"col": 8,"docs": " C source code","name": "c"},{"file": 13,"line": 574,"col": 8,"docs": " Standard, Portable Intermediate Representation V","name": "spirv"},{"file": 13,"line": 576,"col": 8,"docs": " Intel IHEX","name": "hex"},{"file": 13,"line": 578,"col": 8,"docs": " Machine code with no metadata.","name": "raw"},{"file": 13,"line": 580,"col": 8,"docs": " Plan 9 from Bell Labs","name": "plan9"},{"file": 13,"line": 608,"col": 8,"docs": " Architecture","name": "arch"},{"file": 13,"line": 612,"col": 8,"docs": " The CPU model to target. It has a set of features which are overridden with the `features` field.","name": "model"},{"file": 13,"line": 615,"col": 8,"docs": " An explicit list of the entire CPU feature set. It may differ from the specific CPU model's features.","name": "features"},{"file": 22,"line": 226,"col": 8,"name": "signedness"},{"file": 22,"line": 227,"col": 8,"name": "bits"},{"file": 22,"line": 233,"col": 8,"name": "bits"},{"file": 22,"line": 239,"col": 8,"name": "size"},{"file": 22,"line": 240,"col": 8,"name": "is_const"},{"file": 22,"line": 241,"col": 8,"name": "is_volatile"},{"file": 22,"line": 242,"col": 8,"name": "alignment"},{"file": 22,"line": 243,"col": 8,"name": "address_space"},{"file": 22,"line": 244,"col": 8,"name": "child"},{"file": 22,"line": 245,"col": 8,"name": "is_allowzero"},{"file": 22,"line": 251,"col": 8,"docs": " This field is an optional type. The type of the sentinel is the element type of the pointer, which is the value of the `child` field in this struct. However there is no way to refer to that type here, so we use `anytype`.","name": "sentinel"},{"file": 22,"line": 266,"col": 8,"name": "len"},{"file": 22,"line": 267,"col": 8,"name": "child"},{"file": 22,"line": 273,"col": 8,"docs": " This field is an optional type. The type of the sentinel is the element type of the array, which is the value of the `child` field in this struct. However there is no way to refer to that type here, so we use `anytype`.","name": "sentinel"},{"file": 22,"line": 287,"col": 8,"name": "name"},{"file": 22,"line": 288,"col": 8,"name": "field_type"},{"file": 22,"line": 289,"col": 8,"name": "default_value"},{"file": 22,"line": 290,"col": 8,"name": "is_comptime"},{"file": 22,"line": 291,"col": 8,"name": "alignment"},{"file": 22,"line": 297,"col": 8,"name": "layout"},{"file": 22,"line": 298,"col": 8,"name": "fields"},{"file": 22,"line": 299,"col": 8,"name": "decls"},{"file": 22,"line": 300,"col": 8,"name": "is_tuple"},{"file": 22,"line": 306,"col": 8,"name": "child"},{"file": 22,"line": 312,"col": 8,"name": "error_set"},{"file": 22,"line": 313,"col": 8,"name": "payload"},{"file": 22,"line": 319,"col": 8,"name": "name"},{"file": 22,"line": 336,"col": 8,"name": "layout"},{"file": 22,"line": 337,"col": 8,"name": "tag_type"},{"file": 22,"line": 338,"col": 8,"name": "fields"},{"file": 22,"line": 339,"col": 8,"name": "decls"},{"file": 22,"line": 340,"col": 8,"name": "is_exhaustive"},{"file": 22,"line": 346,"col": 8,"name": "name"},{"file": 22,"line": 347,"col": 8,"name": "field_type"},{"file": 22,"line": 348,"col": 8,"name": "alignment"},{"file": 22,"line": 354,"col": 8,"name": "layout"},{"file": 22,"line": 355,"col": 8,"name": "tag_type"},{"file": 22,"line": 356,"col": 8,"name": "fields"},{"file": 22,"line": 357,"col": 8,"name": "decls"},{"file": 22,"line": 363,"col": 8,"name": "is_generic"},{"file": 22,"line": 364,"col": 8,"name": "is_noalias"},{"file": 22,"line": 365,"col": 8,"name": "arg_type"},{"file": 22,"line": 371,"col": 8,"name": "calling_convention"},{"file": 22,"line": 372,"col": 8,"name": "alignment"},{"file": 22,"line": 373,"col": 8,"name": "is_generic"},{"file": 22,"line": 374,"col": 8,"name": "is_var_args"},{"file": 22,"line": 375,"col": 8,"name": "return_type"},{"file": 22,"line": 376,"col": 8,"name": "args"},{"file": 22,"line": 382,"col": 8,"name": "decls"},{"file": 22,"line": 388,"col": 8,"name": "function"},{"file": 22,"line": 394,"col": 8,"name": "child"},{"file": 22,"line": 400,"col": 8,"name": "len"},{"file": 22,"line": 401,"col": 8,"name": "child"},{"file": 23,"line": 20,"col": 12,"name": "next"},{"file": 23,"line": 21,"col": 12,"name": "data"},{"file": 23,"line": 167,"col": 12,"name": "prev"},{"file": 23,"line": 168,"col": 12,"name": "next"},{"file": 23,"line": 169,"col": 12,"name": "data"},{"file": 25,"line": 22,"col": 0,"name": "impl"},{"file": 27,"line": 1572,"col": 12,"name": "TickNode"},{"file": 27,"line": 1573,"col": 12,"name": "NoAction"},{"file": 27,"line": 1577,"col": 12,"name": "read"},{"file": 27,"line": 1578,"col": 12,"name": "readv"},{"file": 27,"line": 1579,"col": 12,"name": "write"},{"file": 27,"line": 1580,"col": 12,"name": "writev"},{"file": 27,"line": 1581,"col": 12,"name": "pwrite"},{"file": 27,"line": 1582,"col": 12,"name": "pwritev"},{"file": 27,"line": 1583,"col": 12,"name": "pread"},{"file": 27,"line": 1584,"col": 12,"name": "preadv"},{"file": 27,"line": 1585,"col": 12,"name": "open"},{"file": 27,"line": 1586,"col": 12,"name": "openat"},{"file": 27,"line": 1587,"col": 12,"name": "close"},{"file": 27,"line": 1588,"col": 12,"name": "faccessat"},{"file": 27,"line": 1591,"col": 12,"docs": " special - means the fs thread should exit","name": "end"},{"file": 28,"line": 18,"col": 12,"name": "next"},{"file": 28,"line": 19,"col": 12,"name": "data"},{"file": 27,"line": 43,"col": 8,"name": "id"},{"file": 27,"line": 44,"col": 8,"name": "handle"},{"file": 27,"line": 45,"col": 8,"name": "overlapped"},{"file": 29,"line": 251,"col": 12,"name": "prev"},{"file": 29,"line": 252,"col": 12,"name": "next"},{"file": 29,"line": 253,"col": 12,"name": "page"},{"file": 29,"line": 254,"col": 12,"name": "alloc_cursor"},{"file": 29,"line": 255,"col": 12,"name": "used_count"},{"file": 42,"line": 384,"col": 4,"name": "name"},{"file": 42,"line": 385,"col": 4,"name": "misc"},{"file": 42,"line": 386,"col": 4,"name": "virtual_address"},{"file": 42,"line": 387,"col": 4,"name": "size_of_raw_data"},{"file": 42,"line": 388,"col": 4,"name": "pointer_to_raw_data"},{"file": 42,"line": 389,"col": 4,"name": "pointer_to_relocations"},{"file": 42,"line": 390,"col": 4,"name": "pointer_to_line_numbers"},{"file": 42,"line": 391,"col": 4,"name": "number_of_relocations"},{"file": 42,"line": 392,"col": 4,"name": "number_of_line_numbers"},{"file": 42,"line": 393,"col": 4,"name": "characteristics"},{"file": 39,"line": 17,"col": 0,"docs": " `null` if the current node (and its children) should not print on update()","name": "terminal"},{"file": 39,"line": 21,"col": 0,"docs": " Is this a windows API terminal (note: this is not the same as being run on windows because other terminals exist like MSYS/git-bash)","name": "is_windows_terminal"},{"file": 39,"line": 24,"col": 0,"docs": " Whether the terminal supports ANSI escape codes.","name": "supports_ansi_escape_codes"},{"file": 39,"line": 31,"col": 0,"docs": " If the terminal is \"dumb\", don't print output. This can be useful if you don't want to print all the stages of code generation if there are a lot. You should not use it if the user should see output for example showing the user what tests run.","name": "dont_print_on_dumb"},{"file": 39,"line": 33,"col": 0,"name": "root"},{"file": 39,"line": 37,"col": 0,"docs": " Keeps track of how much time has passed since the beginning. Used to compare with `initial_delay_ms` and `refresh_rate_ms`.","name": "timer"},{"file": 39,"line": 41,"col": 0,"docs": " When the previous refresh was written to the terminal. Used to compare with `refresh_rate_ms`.","name": "prev_refresh_timestamp"},{"file": 39,"line": 45,"col": 0,"docs": " This buffer represents the maximum number of bytes written to the terminal with each refresh.","name": "output_buffer"},{"file": 39,"line": 48,"col": 0,"docs": " How many nanoseconds between writing updates to the terminal.","name": "refresh_rate_ns"},{"file": 39,"line": 51,"col": 0,"docs": " How many nanoseconds to keep the output hidden","name": "initial_delay_ns"},{"file": 39,"line": 53,"col": 0,"name": "done"},{"file": 39,"line": 58,"col": 0,"docs": " Protects the `refresh` function, as well as `node.recently_updated_child`. Without this, callsites would call `Node.end` and then free `Node` memory while it was still being accessed by the `refresh` function.","name": "update_mutex"},{"file": 39,"line": 62,"col": 0,"docs": " Keeps track of how many columns in the terminal have been output, so that we can move the cursor back later.","name": "columns_written"},{"file": 40,"line": 33,"col": 0,"name": "impl"},{"file": 22,"line": 458,"col": 4,"name": "Exe"},{"file": 22,"line": 459,"col": 4,"name": "Lib"},{"file": 22,"line": 460,"col": 4,"name": "Obj"},{"file": 22,"line": 148,"col": 4,"name": "Debug"},{"file": 22,"line": 149,"col": 4,"name": "ReleaseSafe"},{"file": 22,"line": 150,"col": 4,"name": "ReleaseFast"},{"file": 22,"line": 151,"col": 4,"name": "ReleaseSmall"},{"file": 50,"line": 16,"col": 4,"docs": " I/O operates normally, waiting for the operating system syscalls to complete.","name": "blocking"},{"file": 50,"line": 19,"col": 4,"docs": " I/O functions are generated async and rely on a global event loop. Event-based I/O.","name": "evented"},{"file": 61,"line": 19,"col": 0,"name": "impl"},{"file": 45,"line": 595,"col": 4,"name": "p_type"},{"file": 45,"line": 596,"col": 4,"name": "p_offset"},{"file": 45,"line": 597,"col": 4,"name": "p_vaddr"},{"file": 45,"line": 598,"col": 4,"name": "p_paddr"},{"file": 45,"line": 599,"col": 4,"name": "p_filesz"},{"file": 45,"line": 600,"col": 4,"name": "p_memsz"},{"file": 45,"line": 601,"col": 4,"name": "p_flags"},{"file": 45,"line": 602,"col": 4,"name": "p_align"},{"file": 25,"line": 60,"col": 4,"name": "state"},{"file": 47,"line": 292,"col": 4,"name": "buf"},{"file": 47,"line": 293,"col": 4,"name": "pos"},{"file": 47,"line": 373,"col": 4,"name": "next_arg"},{"file": 47,"line": 374,"col": 4,"name": "used_args"},{"file": 47,"line": 375,"col": 4,"name": "args_len"},{"file": 9,"line": 25,"col": 4,"docs": " Attempt to allocate at least `len` bytes aligned to `ptr_align`. If `len_align` is `0`, then the length returned MUST be exactly `len` bytes, otherwise, the length must be aligned to `len_align`. `len` must be greater than or equal to `len_align` and must be aligned by `len_align`. `ret_addr` is optionally provided as the first return address of the allocation call stack. If the value is `0` it means no return address has been provided.","name": "alloc"},{"file": 9,"line": 44,"col": 4,"docs": " Attempt to expand or shrink memory in place. `buf.len` must equal the most recent length returned by `alloc` or `resize`. `buf_align` must equal the same value that was passed as the `ptr_align` parameter to the original `alloc` call. `null` can only be returned if `new_len` is greater than `buf.len`. If `buf` cannot be expanded to accomodate `new_len`, then the allocation MUST be unmodified and `null` MUST be returned. If `len_align` is `0`, then the length returned MUST be exactly `len` bytes, otherwise, the length must be aligned to `len_align`. Note that `len_align` does *not* provide a way to modify the alignment of a pointer. Rather it provides an API for accepting more bytes of memory from the allocator than requested. `new_len` must be greater than zero, greater than or equal to `len_align` and must be aligned by `len_align`. `ret_addr` is optionally provided as the first return address of the allocation call stack. If the value is `0` it means no return address has been provided.","name": "resize"},{"file": 9,"line": 51,"col": 4,"docs": " Free and invalidate a buffer. `buf.len` must equal the most recent length returned by `alloc` or `resize`.  `buf_align` must equal the same value that was passed as the `ptr_align` parameter to the original `alloc` call. `ret_addr` is optionally provided as the first return address of the allocation call stack. If the value is `0` it means no return address has been provided.","name": "free"},{"file": 66,"line": 3305,"col": 4,"name": "dlpi_addr"},{"file": 66,"line": 3306,"col": 4,"name": "dlpi_name"},{"file": 66,"line": 3307,"col": 4,"name": "dlpi_phdr"},{"file": 66,"line": 3308,"col": 4,"name": "dlpi_phnum"},{"file": 43,"line": 1223,"col": 12,"name": "address"},{"file": 43,"line": 1225,"col": 12,"name": "base_address"},{"file": 43,"line": 1226,"col": 12,"name": "name"},{"file": 44,"line": 289,"col": 4,"name": "tag_id"},{"file": 44,"line": 290,"col": 4,"name": "has_children"},{"file": 44,"line": 291,"col": 4,"name": "attrs"},{"file": 44,"line": 279,"col": 4,"name": "payload"},{"file": 44,"line": 280,"col": 4,"name": "signed"},{"file": 61,"line": 116,"col": 4,"name": "waiters"},{"file": 74,"line": 32,"col": 8,"name": "current"},{"file": 75,"line": 91,"col": 4,"name": "entries"},{"file": 75,"line": 92,"col": 4,"name": "tls_block"},{"file": 66,"line": 3410,"col": 8,"name": "signo"},{"file": 66,"line": 3411,"col": 8,"name": "errno"},{"file": 66,"line": 3412,"col": 8,"name": "code"},{"file": 66,"line": 3413,"col": 8,"name": "fields"},{"file": 45,"line": 728,"col": 4,"name": "vd_version"},{"file": 45,"line": 729,"col": 4,"name": "vd_flags"},{"file": 45,"line": 730,"col": 4,"name": "vd_ndx"},{"file": 45,"line": 731,"col": 4,"name": "vd_cnt"},{"file": 45,"line": 732,"col": 4,"name": "vd_hash"},{"file": 45,"line": 733,"col": 4,"name": "vd_aux"},{"file": 45,"line": 734,"col": 4,"name": "vd_next"},{"file": 10,"line": 27,"col": 4,"name": "parent_cmds"},{"file": 10,"line": 28,"col": 4,"name": "include_args"},{"file": 10,"line": 29,"col": 4,"name": "include_subcmds"},{"file": 10,"line": 30,"col": 4,"name": "include_flags"},{"file": 22,"line": 480,"col": 4,"name": "major"},{"file": 22,"line": 481,"col": 4,"name": "minor"},{"file": 22,"line": 482,"col": 4,"name": "patch"},{"file": 22,"line": 414,"col": 12,"name": "Type"},{"file": 22,"line": 415,"col": 12,"name": "Var"},{"file": 22,"line": 416,"col": 12,"name": "Fn"},{"file": 63,"line": 131,"col": 4,"name": "state"},{"file": 63,"line": 133,"col": 4,"name": "buf"},{"file": 63,"line": 134,"col": 4,"name": "buf_len"},{"file": 44,"line": 229,"col": 4,"name": "start"},{"file": 44,"line": 230,"col": 4,"name": "end"},{"file": 13,"line": 94,"col": 12,"name": "nt4"},{"file": 13,"line": 95,"col": 12,"name": "win2k"},{"file": 13,"line": 96,"col": 12,"name": "xp"},{"file": 13,"line": 97,"col": 12,"name": "ws2003"},{"file": 13,"line": 98,"col": 12,"name": "vista"},{"file": 13,"line": 99,"col": 12,"name": "win7"},{"file": 13,"line": 100,"col": 12,"name": "win8"},{"file": 13,"line": 101,"col": 12,"name": "win8_1"},{"file": 13,"line": 102,"col": 12,"name": "win10"},{"file": 13,"line": 103,"col": 12,"name": "win10_th2"},{"file": 13,"line": 104,"col": 12,"name": "win10_rs1"},{"file": 13,"line": 105,"col": 12,"name": "win10_rs2"},{"file": 13,"line": 106,"col": 12,"name": "win10_rs3"},{"file": 13,"line": 107,"col": 12,"name": "win10_rs4"},{"file": 13,"line": 108,"col": 12,"name": "win10_rs5"},{"file": 13,"line": 109,"col": 12,"name": "win10_19h1"},{"file": 13,"line": 110,"col": 12,"name": "win10_vb"},{"file": 13,"line": 111,"col": 12,"name": "win10_mn"},{"file": 13,"line": 112,"col": 12,"name": "win10_fe"},{"file": 13,"line": 113,"col": 12,"name": "_"},{"file": 13,"line": 182,"col": 12,"name": "range"},{"file": 13,"line": 183,"col": 12,"name": "glibc"},{"file": 13,"line": 221,"col": 12,"name": "none"},{"file": 13,"line": 222,"col": 12,"name": "semver"},{"file": 13,"line": 223,"col": 12,"name": "linux"},{"file": 13,"line": 224,"col": 12,"name": "windows"},{"file": 13,"line": 620,"col": 12,"docs": " The bit index into `Set`. Has a default value of `undefined` because the canonical structures are populated via comptime logic.","name": "index"},{"file": 13,"line": 624,"col": 12,"docs": " Has a default value of `undefined` because the canonical structures are populated via comptime logic.","name": "name"},{"file": 13,"line": 628,"col": 12,"docs": " If this corresponds to an LLVM-recognized feature, this will be populated; otherwise null.","name": "llvm_name"},{"file": 13,"line": 631,"col": 12,"docs": " Human-friendly UTF-8 text.","name": "description"},{"file": 13,"line": 634,"col": 12,"docs": " Sparse `Set` of features this depends on.","name": "dependencies"},{"file": 13,"line": 1248,"col": 12,"name": "name"},{"file": 13,"line": 1249,"col": 12,"name": "llvm_name"},{"file": 13,"line": 1250,"col": 12,"name": "features"},{"file": 22,"line": 87,"col": 4,"name": "Internal"},{"file": 22,"line": 88,"col": 4,"name": "Strong"},{"file": 22,"line": 89,"col": 4,"name": "Weak"},{"file": 22,"line": 90,"col": 4,"name": "LinkOnce"},{"file": 22,"line": 96,"col": 4,"name": "Unordered"},{"file": 22,"line": 97,"col": 4,"name": "Monotonic"},{"file": 22,"line": 98,"col": 4,"name": "Acquire"},{"file": 22,"line": 99,"col": 4,"name": "Release"},{"file": 22,"line": 100,"col": 4,"name": "AcqRel"},{"file": 22,"line": 101,"col": 4,"name": "SeqCst"},{"file": 22,"line": 119,"col": 4,"name": "Xchg"},{"file": 22,"line": 120,"col": 4,"name": "Add"},{"file": 22,"line": 121,"col": 4,"name": "Sub"},{"file": 22,"line": 122,"col": 4,"name": "And"},{"file": 22,"line": 123,"col": 4,"name": "Nand"},{"file": 22,"line": 124,"col": 4,"name": "Or"},{"file": 22,"line": 125,"col": 4,"name": "Xor"},{"file": 22,"line": 126,"col": 4,"name": "Max"},{"file": 22,"line": 127,"col": 4,"name": "Min"},{"file": 22,"line": 157,"col": 4,"name": "Unspecified"},{"file": 22,"line": 158,"col": 4,"name": "C"},{"file": 22,"line": 159,"col": 4,"name": "Naked"},{"file": 22,"line": 160,"col": 4,"name": "Async"},{"file": 22,"line": 161,"col": 4,"name": "Inline"},{"file": 22,"line": 162,"col": 4,"name": "Interrupt"},{"file": 22,"line": 163,"col": 4,"name": "Signal"},{"file": 22,"line": 164,"col": 4,"name": "Stdcall"},{"file": 22,"line": 165,"col": 4,"name": "Fastcall"},{"file": 22,"line": 166,"col": 4,"name": "Vectorcall"},{"file": 22,"line": 167,"col": 4,"name": "Thiscall"},{"file": 22,"line": 168,"col": 4,"name": "APCS"},{"file": 22,"line": 169,"col": 4,"name": "AAPCS"},{"file": 22,"line": 170,"col": 4,"name": "AAPCSVFP"},{"file": 22,"line": 171,"col": 4,"name": "SysV"},{"file": 22,"line": 177,"col": 4,"name": "generic"},{"file": 22,"line": 178,"col": 4,"name": "gs"},{"file": 22,"line": 179,"col": 4,"name": "fs"},{"file": 22,"line": 180,"col": 4,"name": "ss"},{"file": 22,"line": 613,"col": 4,"name": "modifier"},{"file": 22,"line": 616,"col": 4,"docs": " Only valid when `Modifier` is `Modifier.async_kw`.","name": "stack"},{"file": 22,"line": 681,"col": 4,"name": "name"},{"file": 22,"line": 682,"col": 4,"name": "linkage"},{"file": 22,"line": 683,"col": 4,"name": "section"},{"file": 22,"line": 689,"col": 4,"name": "name"},{"file": 22,"line": 690,"col": 4,"name": "library_name"},{"file": 22,"line": 691,"col": 4,"name": "linkage"},{"file": 22,"line": 692,"col": 4,"name": "is_thread_local"},{"file": 22,"line": 698,"col": 4,"name": "name"},{"file": 22,"line": 699,"col": 4,"name": "func"},{"file": 22,"line": 700,"col": 4,"name": "async_frame_size"},{"file": 27,"line": 14,"col": 4,"name": "next_tick_queue"},{"file": 27,"line": 15,"col": 4,"name": "os_data"},{"file": 27,"line": 16,"col": 4,"name": "final_resume_node"},{"file": 27,"line": 17,"col": 4,"name": "pending_event_count"},{"file": 27,"line": 18,"col": 4,"name": "extra_threads"},{"file": 27,"line": 23,"col": 4,"docs": " TODO change this to a pool of configurable number of threads and rename it to be not file-system-specific. it will become a thread pool for turning non-CPU-bound blocking things into async things. A fallback for any missing OS-specific API.","name": "fs_thread"},{"file": 27,"line": 24,"col": 4,"name": "fs_queue"},{"file": 27,"line": 25,"col": 4,"name": "fs_end_request"},{"file": 27,"line": 26,"col": 4,"name": "fs_thread_wakeup"},{"file": 27,"line": 30,"col": 4,"docs": " For resources that have the same lifetime as the `Loop`. This is only used by `Loop` for the thread pool and associated resources.","name": "arena"},{"file": 27,"line": 33,"col": 4,"docs": " State which manages frames that are sleeping on timers","name": "delay_queue"},{"file": 27,"line": 37,"col": 4,"docs": " Pre-allocated eventfds. All permanently active. This is how `Loop` sends promises to be resumed on other threads.","name": "available_eventfd_resume_nodes"},{"file": 27,"line": 38,"col": 4,"name": "eventfd_resume_nodes"},{"file": 27,"line": 1594,"col": 16,"name": "fd"},{"file": 27,"line": 1595,"col": 16,"name": "buf"},{"file": 27,"line": 1596,"col": 16,"name": "result"},{"file": 27,"line": 1602,"col": 16,"name": "fd"},{"file": 27,"line": 1603,"col": 16,"name": "iov"},{"file": 27,"line": 1604,"col": 16,"name": "result"},{"file": 27,"line": 1610,"col": 16,"name": "fd"},{"file": 27,"line": 1611,"col": 16,"name": "bytes"},{"file": 27,"line": 1612,"col": 16,"name": "result"},{"file": 27,"line": 1618,"col": 16,"name": "fd"},{"file": 27,"line": 1619,"col": 16,"name": "iov"},{"file": 27,"line": 1620,"col": 16,"name": "result"},{"file": 27,"line": 1626,"col": 16,"name": "fd"},{"file": 27,"line": 1627,"col": 16,"name": "bytes"},{"file": 27,"line": 1628,"col": 16,"name": "offset"},{"file": 27,"line": 1629,"col": 16,"name": "result"},{"file": 27,"line": 1635,"col": 16,"name": "fd"},{"file": 27,"line": 1636,"col": 16,"name": "iov"},{"file": 27,"line": 1637,"col": 16,"name": "offset"},{"file": 27,"line": 1638,"col": 16,"name": "result"},{"file": 27,"line": 1644,"col": 16,"name": "fd"},{"file": 27,"line": 1645,"col": 16,"name": "buf"},{"file": 27,"line": 1646,"col": 16,"name": "offset"},{"file": 27,"line": 1647,"col": 16,"name": "result"},{"file": 27,"line": 1653,"col": 16,"name": "fd"},{"file": 27,"line": 1654,"col": 16,"name": "iov"},{"file": 27,"line": 1655,"col": 16,"name": "offset"},{"file": 27,"line": 1656,"col": 16,"name": "result"},{"file": 27,"line": 1662,"col": 16,"name": "path"},{"file": 27,"line": 1663,"col": 16,"name": "flags"},{"file": 27,"line": 1664,"col": 16,"name": "mode"},{"file": 27,"line": 1665,"col": 16,"name": "result"},{"file": 27,"line": 1671,"col": 16,"name": "fd"},{"file": 27,"line": 1672,"col": 16,"name": "path"},{"file": 27,"line": 1673,"col": 16,"name": "flags"},{"file": 27,"line": 1674,"col": 16,"name": "mode"},{"file": 27,"line": 1675,"col": 16,"name": "result"},{"file": 27,"line": 1681,"col": 16,"name": "fd"},{"file": 27,"line": 1685,"col": 16,"name": "dirfd"},{"file": 27,"line": 1686,"col": 16,"name": "path"},{"file": 27,"line": 1687,"col": 16,"name": "mode"},{"file": 27,"line": 1688,"col": 16,"name": "flags"},{"file": 27,"line": 1689,"col": 16,"name": "result"},{"file": 27,"line": 64,"col": 12,"name": "Basic"},{"file": 27,"line": 65,"col": 12,"name": "Stop"},{"file": 27,"line": 66,"col": 12,"name": "EventFd"},{"file": 30,"line": 721,"col": 4,"name": "trap_no"},{"file": 30,"line": 722,"col": 4,"name": "error_code"},{"file": 30,"line": 723,"col": 4,"name": "oldmask"},{"file": 30,"line": 724,"col": 4,"name": "arm_r0"},{"file": 30,"line": 725,"col": 4,"name": "arm_r1"},{"file": 30,"line": 726,"col": 4,"name": "arm_r2"},{"file": 30,"line": 727,"col": 4,"name": "arm_r3"},{"file": 30,"line": 728,"col": 4,"name": "arm_r4"},{"file": 30,"line": 729,"col": 4,"name": "arm_r5"},{"file": 30,"line": 730,"col": 4,"name": "arm_r6"},{"file": 30,"line": 731,"col": 4,"name": "arm_r7"},{"file": 30,"line": 732,"col": 4,"name": "arm_r8"},{"file": 30,"line": 733,"col": 4,"name": "arm_r9"},{"file": 30,"line": 734,"col": 4,"name": "arm_r10"},{"file": 30,"line": 735,"col": 4,"name": "arm_fp"},{"file": 30,"line": 736,"col": 4,"name": "arm_ip"},{"file": 30,"line": 737,"col": 4,"name": "arm_sp"},{"file": 30,"line": 738,"col": 4,"name": "arm_lr"},{"file": 30,"line": 739,"col": 4,"name": "arm_pc"},{"file": 30,"line": 740,"col": 4,"name": "arm_cpsr"},{"file": 30,"line": 741,"col": 4,"name": "fault_address"},{"file": 30,"line": 745,"col": 4,"name": "flags"},{"file": 30,"line": 746,"col": 4,"name": "link"},{"file": 30,"line": 747,"col": 4,"name": "stack"},{"file": 30,"line": 748,"col": 4,"name": "mcontext"},{"file": 30,"line": 749,"col": 4,"name": "sigmask"},{"file": 30,"line": 750,"col": 4,"name": "regspace"},{"file": 66,"line": 3347,"col": 8,"name": "sp"},{"file": 66,"line": 3348,"col": 8,"name": "flags"},{"file": 66,"line": 3349,"col": 8,"name": "size"},{"file": 32,"line": 77,"col": 4,"docs": " Error: something has gone wrong. This might be recoverable or might be followed by the program exiting.","name": "err"},{"file": 32,"line": 80,"col": 4,"docs": " Warning: it is uncertain if something has gone wrong or not, but the circumstances would be worth investigating.","name": "warn"},{"file": 32,"line": 82,"col": 4,"docs": " Info: general messages about the state of the program.","name": "info"},{"file": 32,"line": 84,"col": 4,"docs": " Debug: messages only useful for debugging.","name": "debug"},{"file": 32,"line": 117,"col": 4,"name": "scope"},{"file": 32,"line": 118,"col": 4,"name": "level"},{"file": 42,"line": 380,"col": 8,"name": "physical_address"},{"file": 42,"line": 381,"col": 8,"name": "virtual_size"},{"file": 68,"line": 25,"col": 0,"name": "state"},{"file": 69,"line": 17,"col": 0,"name": "impl"},{"file": 40,"line": 709,"col": 4,"name": "thread"},{"file": 42,"line": 99,"col": 4,"name": "in_file"},{"file": 42,"line": 100,"col": 4,"name": "allocator"},{"file": 42,"line": 102,"col": 4,"name": "coff_header"},{"file": 42,"line": 103,"col": 4,"name": "pe_header"},{"file": 42,"line": 104,"col": 4,"name": "sections"},{"file": 42,"line": 106,"col": 4,"name": "guid"},{"file": 42,"line": 107,"col": 4,"name": "age"},{"file": 42,"line": 343,"col": 4,"name": "machine"},{"file": 42,"line": 344,"col": 4,"name": "number_of_sections"},{"file": 42,"line": 345,"col": 4,"name": "timedate_stamp"},{"file": 42,"line": 346,"col": 4,"name": "pointer_to_symbol_table"},{"file": 42,"line": 347,"col": 4,"name": "number_of_symbols"},{"file": 42,"line": 348,"col": 4,"name": "size_of_optional_header"},{"file": 42,"line": 349,"col": 4,"name": "characteristics"},{"file": 42,"line": 358,"col": 4,"name": "magic"},{"file": 42,"line": 359,"col": 4,"name": "data_directory"},{"file": 42,"line": 360,"col": 4,"name": "image_base"},{"file": 43,"line": 52,"col": 4,"name": "pdb"},{"file": 43,"line": 53,"col": 4,"name": "dwarf"},{"file": 43,"line": 1016,"col": 4,"name": "strx"},{"file": 43,"line": 1017,"col": 4,"name": "addr"},{"file": 43,"line": 1018,"col": 4,"name": "size"},{"file": 43,"line": 1019,"col": 4,"name": "ofile"},{"file": 45,"line": 310,"col": 4,"docs": " No file type","name": "NONE"},{"file": 45,"line": 313,"col": 4,"docs": " Relocatable file","name": "REL"},{"file": 45,"line": 316,"col": 4,"docs": " Executable file","name": "EXEC"},{"file": 45,"line": 319,"col": 4,"docs": " Shared object file","name": "DYN"},{"file": 45,"line": 322,"col": 4,"docs": " Core file","name": "CORE"},{"file": 45,"line": 563,"col": 4,"name": "e_ident"},{"file": 45,"line": 564,"col": 4,"name": "e_type"},{"file": 45,"line": 565,"col": 4,"name": "e_machine"},{"file": 45,"line": 566,"col": 4,"name": "e_version"},{"file": 45,"line": 567,"col": 4,"name": "e_entry"},{"file": 45,"line": 568,"col": 4,"name": "e_phoff"},{"file": 45,"line": 569,"col": 4,"name": "e_shoff"},{"file": 45,"line": 570,"col": 4,"name": "e_flags"},{"file": 45,"line": 571,"col": 4,"name": "e_ehsize"},{"file": 45,"line": 572,"col": 4,"name": "e_phentsize"},{"file": 45,"line": 573,"col": 4,"name": "e_phnum"},{"file": 45,"line": 574,"col": 4,"name": "e_shentsize"},{"file": 45,"line": 575,"col": 4,"name": "e_shnum"},{"file": 45,"line": 576,"col": 4,"name": "e_shstrndx"},{"file": 45,"line": 579,"col": 4,"name": "e_ident"},{"file": 45,"line": 580,"col": 4,"name": "e_type"},{"file": 45,"line": 581,"col": 4,"name": "e_machine"},{"file": 45,"line": 582,"col": 4,"name": "e_version"},{"file": 45,"line": 583,"col": 4,"name": "e_entry"},{"file": 45,"line": 584,"col": 4,"name": "e_phoff"},{"file": 45,"line": 585,"col": 4,"name": "e_shoff"},{"file": 45,"line": 586,"col": 4,"name": "e_flags"},{"file": 45,"line": 587,"col": 4,"name": "e_ehsize"},{"file": 45,"line": 588,"col": 4,"name": "e_phentsize"},{"file": 45,"line": 589,"col": 4,"name": "e_phnum"},{"file": 45,"line": 590,"col": 4,"name": "e_shentsize"},{"file": 45,"line": 591,"col": 4,"name": "e_shnum"},{"file": 45,"line": 592,"col": 4,"name": "e_shstrndx"},{"file": 45,"line": 605,"col": 4,"name": "p_type"},{"file": 45,"line": 606,"col": 4,"name": "p_flags"},{"file": 45,"line": 607,"col": 4,"name": "p_offset"},{"file": 45,"line": 608,"col": 4,"name": "p_vaddr"},{"file": 45,"line": 609,"col": 4,"name": "p_paddr"},{"file": 45,"line": 610,"col": 4,"name": "p_filesz"},{"file": 45,"line": 611,"col": 4,"name": "p_memsz"},{"file": 45,"line": 612,"col": 4,"name": "p_align"},{"file": 45,"line": 615,"col": 4,"name": "sh_name"},{"file": 45,"line": 616,"col": 4,"name": "sh_type"},{"file": 45,"line": 617,"col": 4,"name": "sh_flags"},{"file": 45,"line": 618,"col": 4,"name": "sh_addr"},{"file": 45,"line": 619,"col": 4,"name": "sh_offset"},{"file": 45,"line": 620,"col": 4,"name": "sh_size"},{"file": 45,"line": 621,"col": 4,"name": "sh_link"},{"file": 45,"line": 622,"col": 4,"name": "sh_info"},{"file": 45,"line": 623,"col": 4,"name": "sh_addralign"},{"file": 45,"line": 624,"col": 4,"name": "sh_entsize"},{"file": 45,"line": 627,"col": 4,"name": "sh_name"},{"file": 45,"line": 628,"col": 4,"name": "sh_type"},{"file": 45,"line": 629,"col": 4,"name": "sh_flags"},{"file": 45,"line": 630,"col": 4,"name": "sh_addr"},{"file": 45,"line": 631,"col": 4,"name": "sh_offset"},{"file": 45,"line": 632,"col": 4,"name": "sh_size"},{"file": 45,"line": 633,"col": 4,"name": "sh_link"},{"file": 45,"line": 634,"col": 4,"name": "sh_info"},{"file": 45,"line": 635,"col": 4,"name": "sh_addralign"},{"file": 45,"line": 636,"col": 4,"name": "sh_entsize"},{"file": 45,"line": 650,"col": 4,"name": "st_name"},{"file": 45,"line": 651,"col": 4,"name": "st_value"},{"file": 45,"line": 652,"col": 4,"name": "st_size"},{"file": 45,"line": 653,"col": 4,"name": "st_info"},{"file": 45,"line": 654,"col": 4,"name": "st_other"},{"file": 45,"line": 655,"col": 4,"name": "st_shndx"},{"file": 45,"line": 720,"col": 4,"name": "d_tag"},{"file": 45,"line": 721,"col": 4,"name": "d_val"},{"file": 45,"line": 746,"col": 4,"name": "vda_name"},{"file": 45,"line": 747,"col": 4,"name": "vda_next"},{"file": 45,"line": 782,"col": 4,"name": "a_type"},{"file": 45,"line": 783,"col": 4,"name": "a_un"},{"file": 45,"line": 949,"col": 4,"docs": " No machine","name": "_NONE"},{"file": 45,"line": 952,"col": 4,"docs": " AT&T WE 32100","name": "_M32"},{"file": 45,"line": 955,"col": 4,"docs": " SPARC","name": "_SPARC"},{"file": 45,"line": 958,"col": 4,"docs": " Intel 386","name": "_386"},{"file": 45,"line": 961,"col": 4,"docs": " Motorola 68000","name": "_68K"},{"file": 45,"line": 964,"col": 4,"docs": " Motorola 88000","name": "_88K"},{"file": 45,"line": 967,"col": 4,"docs": " Intel MCU","name": "_IAMCU"},{"file": 45,"line": 970,"col": 4,"docs": " Intel 80860","name": "_860"},{"file": 45,"line": 973,"col": 4,"docs": " MIPS R3000","name": "_MIPS"},{"file": 45,"line": 976,"col": 4,"docs": " IBM System/370","name": "_S370"},{"file": 45,"line": 979,"col": 4,"docs": " MIPS RS3000 Little-endian","name": "_MIPS_RS3_LE"},{"file": 45,"line": 982,"col": 4,"docs": " SPU Mark II","name": "_SPU_2"},{"file": 45,"line": 985,"col": 4,"docs": " Hewlett-Packard PA-RISC","name": "_PARISC"},{"file": 45,"line": 988,"col": 4,"docs": " Fujitsu VPP500","name": "_VPP500"},{"file": 45,"line": 991,"col": 4,"docs": " Enhanced instruction set SPARC","name": "_SPARC32PLUS"},{"file": 45,"line": 994,"col": 4,"docs": " Intel 80960","name": "_960"},{"file": 45,"line": 997,"col": 4,"docs": " PowerPC","name": "_PPC"},{"file": 45,"line": 1000,"col": 4,"docs": " PowerPC64","name": "_PPC64"},{"file": 45,"line": 1003,"col": 4,"docs": " IBM System/390","name": "_S390"},{"file": 45,"line": 1006,"col": 4,"docs": " IBM SPU/SPC","name": "_SPU"},{"file": 45,"line": 1009,"col": 4,"docs": " NEC V800","name": "_V800"},{"file": 45,"line": 1012,"col": 4,"docs": " Fujitsu FR20","name": "_FR20"},{"file": 45,"line": 1015,"col": 4,"docs": " TRW RH-32","name": "_RH32"},{"file": 45,"line": 1018,"col": 4,"docs": " Motorola RCE","name": "_RCE"},{"file": 45,"line": 1021,"col": 4,"docs": " ARM","name": "_ARM"},{"file": 45,"line": 1024,"col": 4,"docs": " DEC Alpha","name": "_ALPHA"},{"file": 45,"line": 1027,"col": 4,"docs": " Hitachi SH","name": "_SH"},{"file": 45,"line": 1030,"col": 4,"docs": " SPARC V9","name": "_SPARCV9"},{"file": 45,"line": 1033,"col": 4,"docs": " Siemens TriCore","name": "_TRICORE"},{"file": 45,"line": 1036,"col": 4,"docs": " Argonaut RISC Core","name": "_ARC"},{"file": 45,"line": 1039,"col": 4,"docs": " Hitachi H8/300","name": "_H8_300"},{"file": 45,"line": 1042,"col": 4,"docs": " Hitachi H8/300H","name": "_H8_300H"},{"file": 45,"line": 1045,"col": 4,"docs": " Hitachi H8S","name": "_H8S"},{"file": 45,"line": 1048,"col": 4,"docs": " Hitachi H8/500","name": "_H8_500"},{"file": 45,"line": 1051,"col": 4,"docs": " Intel IA-64 processor architecture","name": "_IA_64"},{"file": 45,"line": 1054,"col": 4,"docs": " Stanford MIPS-X","name": "_MIPS_X"},{"file": 45,"line": 1057,"col": 4,"docs": " Motorola ColdFire","name": "_COLDFIRE"},{"file": 45,"line": 1060,"col": 4,"docs": " Motorola M68HC12","name": "_68HC12"},{"file": 45,"line": 1063,"col": 4,"docs": " Fujitsu MMA Multimedia Accelerator","name": "_MMA"},{"file": 45,"line": 1066,"col": 4,"docs": " Siemens PCP","name": "_PCP"},{"file": 45,"line": 1069,"col": 4,"docs": " Sony nCPU embedded RISC processor","name": "_NCPU"},{"file": 45,"line": 1072,"col": 4,"docs": " Denso NDR1 microprocessor","name": "_NDR1"},{"file": 45,"line": 1075,"col": 4,"docs": " Motorola Star*Core processor","name": "_STARCORE"},{"file": 45,"line": 1078,"col": 4,"docs": " Toyota ME16 processor","name": "_ME16"},{"file": 45,"line": 1081,"col": 4,"docs": " STMicroelectronics ST100 processor","name": "_ST100"},{"file": 45,"line": 1084,"col": 4,"docs": " Advanced Logic Corp. TinyJ embedded processor family","name": "_TINYJ"},{"file": 45,"line": 1087,"col": 4,"docs": " AMD x86-64 architecture","name": "_X86_64"},{"file": 45,"line": 1090,"col": 4,"docs": " Sony DSP Processor","name": "_PDSP"},{"file": 45,"line": 1093,"col": 4,"docs": " Digital Equipment Corp. PDP-10","name": "_PDP10"},{"file": 45,"line": 1096,"col": 4,"docs": " Digital Equipment Corp. PDP-11","name": "_PDP11"},{"file": 45,"line": 1099,"col": 4,"docs": " Siemens FX66 microcontroller","name": "_FX66"},{"file": 45,"line": 1102,"col": 4,"docs": " STMicroelectronics ST9+ 8/16 bit microcontroller","name": "_ST9PLUS"},{"file": 45,"line": 1105,"col": 4,"docs": " STMicroelectronics ST7 8-bit microcontroller","name": "_ST7"},{"file": 45,"line": 1108,"col": 4,"docs": " Motorola MC68HC16 Microcontroller","name": "_68HC16"},{"file": 45,"line": 1111,"col": 4,"docs": " Motorola MC68HC11 Microcontroller","name": "_68HC11"},{"file": 45,"line": 1114,"col": 4,"docs": " Motorola MC68HC08 Microcontroller","name": "_68HC08"},{"file": 45,"line": 1117,"col": 4,"docs": " Motorola MC68HC05 Microcontroller","name": "_68HC05"},{"file": 45,"line": 1120,"col": 4,"docs": " Silicon Graphics SVx","name": "_SVX"},{"file": 45,"line": 1123,"col": 4,"docs": " STMicroelectronics ST19 8-bit microcontroller","name": "_ST19"},{"file": 45,"line": 1126,"col": 4,"docs": " Digital VAX","name": "_VAX"},{"file": 45,"line": 1129,"col": 4,"docs": " Axis Communications 32-bit embedded processor","name": "_CRIS"},{"file": 45,"line": 1132,"col": 4,"docs": " Infineon Technologies 32-bit embedded processor","name": "_JAVELIN"},{"file": 45,"line": 1135,"col": 4,"docs": " Element 14 64-bit DSP Processor","name": "_FIREPATH"},{"file": 45,"line": 1138,"col": 4,"docs": " LSI Logic 16-bit DSP Processor","name": "_ZSP"},{"file": 45,"line": 1141,"col": 4,"docs": " Donald Knuth's educational 64-bit processor","name": "_MMIX"},{"file": 45,"line": 1144,"col": 4,"docs": " Harvard University machine-independent object files","name": "_HUANY"},{"file": 45,"line": 1147,"col": 4,"docs": " SiTera Prism","name": "_PRISM"},{"file": 45,"line": 1150,"col": 4,"docs": " Atmel AVR 8-bit microcontroller","name": "_AVR"},{"file": 45,"line": 1153,"col": 4,"docs": " Fujitsu FR30","name": "_FR30"},{"file": 45,"line": 1156,"col": 4,"docs": " Mitsubishi D10V","name": "_D10V"},{"file": 45,"line": 1159,"col": 4,"docs": " Mitsubishi D30V","name": "_D30V"},{"file": 45,"line": 1162,"col": 4,"docs": " NEC v850","name": "_V850"},{"file": 45,"line": 1165,"col": 4,"docs": " Mitsubishi M32R","name": "_M32R"},{"file": 45,"line": 1168,"col": 4,"docs": " Matsushita MN10300","name": "_MN10300"},{"file": 45,"line": 1171,"col": 4,"docs": " Matsushita MN10200","name": "_MN10200"},{"file": 45,"line": 1174,"col": 4,"docs": " picoJava","name": "_PJ"},{"file": 45,"line": 1177,"col": 4,"docs": " OpenRISC 32-bit embedded processor","name": "_OPENRISC"},{"file": 45,"line": 1180,"col": 4,"docs": " ARC International ARCompact processor (old spelling/synonym: EM_ARC_A5)","name": "_ARC_COMPACT"},{"file": 45,"line": 1183,"col": 4,"docs": " Tensilica Xtensa Architecture","name": "_XTENSA"},{"file": 45,"line": 1186,"col": 4,"docs": " Alphamosaic VideoCore processor","name": "_VIDEOCORE"},{"file": 45,"line": 1189,"col": 4,"docs": " Thompson Multimedia General Purpose Processor","name": "_TMM_GPP"},{"file": 45,"line": 1192,"col": 4,"docs": " National Semiconductor 32000 series","name": "_NS32K"},{"file": 45,"line": 1195,"col": 4,"docs": " Tenor Network TPC processor","name": "_TPC"},{"file": 45,"line": 1198,"col": 4,"docs": " Trebia SNP 1000 processor","name": "_SNP1K"},{"file": 45,"line": 1201,"col": 4,"docs": " STMicroelectronics (www.st.com) ST200","name": "_ST200"},{"file": 45,"line": 1204,"col": 4,"docs": " Ubicom IP2xxx microcontroller family","name": "_IP2K"},{"file": 45,"line": 1207,"col": 4,"docs": " MAX Processor","name": "_MAX"},{"file": 45,"line": 1210,"col": 4,"docs": " National Semiconductor CompactRISC microprocessor","name": "_CR"},{"file": 45,"line": 1213,"col": 4,"docs": " Fujitsu F2MC16","name": "_F2MC16"},{"file": 45,"line": 1216,"col": 4,"docs": " Texas Instruments embedded microcontroller msp430","name": "_MSP430"},{"file": 45,"line": 1219,"col": 4,"docs": " Analog Devices Blackfin (DSP) processor","name": "_BLACKFIN"},{"file": 45,"line": 1222,"col": 4,"docs": " S1C33 Family of Seiko Epson processors","name": "_SE_C33"},{"file": 45,"line": 1225,"col": 4,"docs": " Sharp embedded microprocessor","name": "_SEP"},{"file": 45,"line": 1228,"col": 4,"docs": " Arca RISC Microprocessor","name": "_ARCA"},{"file": 45,"line": 1231,"col": 4,"docs": " Microprocessor series from PKU-Unity Ltd. and MPRC of Peking University","name": "_UNICORE"},{"file": 45,"line": 1234,"col": 4,"docs": " eXcess: 16/32/64-bit configurable embedded CPU","name": "_EXCESS"},{"file": 45,"line": 1237,"col": 4,"docs": " Icera Semiconductor Inc. Deep Execution Processor","name": "_DXP"},{"file": 45,"line": 1240,"col": 4,"docs": " Altera Nios II soft-core processor","name": "_ALTERA_NIOS2"},{"file": 45,"line": 1243,"col": 4,"docs": " National Semiconductor CompactRISC CRX","name": "_CRX"},{"file": 45,"line": 1246,"col": 4,"docs": " Motorola XGATE embedded processor","name": "_XGATE"},{"file": 45,"line": 1249,"col": 4,"docs": " Infineon C16x/XC16x processor","name": "_C166"},{"file": 45,"line": 1252,"col": 4,"docs": " Renesas M16C series microprocessors","name": "_M16C"},{"file": 45,"line": 1255,"col": 4,"docs": " Microchip Technology dsPIC30F Digital Signal Controller","name": "_DSPIC30F"},{"file": 45,"line": 1258,"col": 4,"docs": " Freescale Communication Engine RISC core","name": "_CE"},{"file": 45,"line": 1261,"col": 4,"docs": " Renesas M32C series microprocessors","name": "_M32C"},{"file": 45,"line": 1264,"col": 4,"docs": " Altium TSK3000 core","name": "_TSK3000"},{"file": 45,"line": 1267,"col": 4,"docs": " Freescale RS08 embedded processor","name": "_RS08"},{"file": 45,"line": 1270,"col": 4,"docs": " Analog Devices SHARC family of 32-bit DSP processors","name": "_SHARC"},{"file": 45,"line": 1273,"col": 4,"docs": " Cyan Technology eCOG2 microprocessor","name": "_ECOG2"},{"file": 45,"line": 1276,"col": 4,"docs": " Sunplus S+core7 RISC processor","name": "_SCORE7"},{"file": 45,"line": 1279,"col": 4,"docs": " New Japan Radio (NJR) 24-bit DSP Processor","name": "_DSP24"},{"file": 45,"line": 1282,"col": 4,"docs": " Broadcom VideoCore III processor","name": "_VIDEOCORE3"},{"file": 45,"line": 1285,"col": 4,"docs": " RISC processor for Lattice FPGA architecture","name": "_LATTICEMICO32"},{"file": 45,"line": 1288,"col": 4,"docs": " Seiko Epson C17 family","name": "_SE_C17"},{"file": 45,"line": 1291,"col": 4,"docs": " The Texas Instruments TMS320C6000 DSP family","name": "_TI_C6000"},{"file": 45,"line": 1294,"col": 4,"docs": " The Texas Instruments TMS320C2000 DSP family","name": "_TI_C2000"},{"file": 45,"line": 1297,"col": 4,"docs": " The Texas Instruments TMS320C55x DSP family","name": "_TI_C5500"},{"file": 45,"line": 1300,"col": 4,"docs": " STMicroelectronics 64bit VLIW Data Signal Processor","name": "_MMDSP_PLUS"},{"file": 45,"line": 1303,"col": 4,"docs": " Cypress M8C microprocessor","name": "_CYPRESS_M8C"},{"file": 45,"line": 1306,"col": 4,"docs": " Renesas R32C series microprocessors","name": "_R32C"},{"file": 45,"line": 1309,"col": 4,"docs": " NXP Semiconductors TriMedia architecture family","name": "_TRIMEDIA"},{"file": 45,"line": 1312,"col": 4,"docs": " Qualcomm Hexagon processor","name": "_HEXAGON"},{"file": 45,"line": 1315,"col": 4,"docs": " Intel 8051 and variants","name": "_8051"},{"file": 45,"line": 1318,"col": 4,"docs": " STMicroelectronics STxP7x family of configurable and extensible RISC processors","name": "_STXP7X"},{"file": 45,"line": 1321,"col": 4,"docs": " Andes Technology compact code size embedded RISC processor family","name": "_NDS32"},{"file": 45,"line": 1324,"col": 4,"docs": " Cyan Technology eCOG1X family","name": "_ECOG1X"},{"file": 45,"line": 1327,"col": 4,"docs": " Dallas Semiconductor MAXQ30 Core Micro-controllers","name": "_MAXQ30"},{"file": 45,"line": 1330,"col": 4,"docs": " New Japan Radio (NJR) 16-bit DSP Processor","name": "_XIMO16"},{"file": 45,"line": 1333,"col": 4,"docs": " M2000 Reconfigurable RISC Microprocessor","name": "_MANIK"},{"file": 45,"line": 1336,"col": 4,"docs": " Cray Inc. NV2 vector architecture","name": "_CRAYNV2"},{"file": 45,"line": 1339,"col": 4,"docs": " Renesas RX family","name": "_RX"},{"file": 45,"line": 1342,"col": 4,"docs": " Imagination Technologies META processor architecture","name": "_METAG"},{"file": 45,"line": 1345,"col": 4,"docs": " MCST Elbrus general purpose hardware architecture","name": "_MCST_ELBRUS"},{"file": 45,"line": 1348,"col": 4,"docs": " Cyan Technology eCOG16 family","name": "_ECOG16"},{"file": 45,"line": 1351,"col": 4,"docs": " National Semiconductor CompactRISC CR16 16-bit microprocessor","name": "_CR16"},{"file": 45,"line": 1354,"col": 4,"docs": " Freescale Extended Time Processing Unit","name": "_ETPU"},{"file": 45,"line": 1357,"col": 4,"docs": " Infineon Technologies SLE9X core","name": "_SLE9X"},{"file": 45,"line": 1360,"col": 4,"docs": " Intel L10M","name": "_L10M"},{"file": 45,"line": 1363,"col": 4,"docs": " Intel K10M","name": "_K10M"},{"file": 45,"line": 1366,"col": 4,"docs": " ARM AArch64","name": "_AARCH64"},{"file": 45,"line": 1369,"col": 4,"docs": " Atmel Corporation 32-bit microprocessor family","name": "_AVR32"},{"file": 45,"line": 1372,"col": 4,"docs": " STMicroeletronics STM8 8-bit microcontroller","name": "_STM8"},{"file": 45,"line": 1375,"col": 4,"docs": " Tilera TILE64 multicore architecture family","name": "_TILE64"},{"file": 45,"line": 1378,"col": 4,"docs": " Tilera TILEPro multicore architecture family","name": "_TILEPRO"},{"file": 45,"line": 1381,"col": 4,"docs": " NVIDIA CUDA architecture","name": "_CUDA"},{"file": 45,"line": 1384,"col": 4,"docs": " Tilera TILE-Gx multicore architecture family","name": "_TILEGX"},{"file": 45,"line": 1387,"col": 4,"docs": " CloudShield architecture family","name": "_CLOUDSHIELD"},{"file": 45,"line": 1390,"col": 4,"docs": " KIPO-KAIST Core-A 1st generation processor family","name": "_COREA_1ST"},{"file": 45,"line": 1393,"col": 4,"docs": " KIPO-KAIST Core-A 2nd generation processor family","name": "_COREA_2ND"},{"file": 45,"line": 1396,"col": 4,"docs": " Synopsys ARCompact V2","name": "_ARC_COMPACT2"},{"file": 45,"line": 1399,"col": 4,"docs": " Open8 8-bit RISC soft processor core","name": "_OPEN8"},{"file": 45,"line": 1402,"col": 4,"docs": " Renesas RL78 family","name": "_RL78"},{"file": 45,"line": 1405,"col": 4,"docs": " Broadcom VideoCore V processor","name": "_VIDEOCORE5"},{"file": 45,"line": 1408,"col": 4,"docs": " Renesas 78KOR family","name": "_78KOR"},{"file": 45,"line": 1411,"col": 4,"docs": " Freescale 56800EX Digital Signal Controller (DSC)","name": "_56800EX"},{"file": 45,"line": 1414,"col": 4,"docs": " Beyond BA1 CPU architecture","name": "_BA1"},{"file": 45,"line": 1417,"col": 4,"docs": " Beyond BA2 CPU architecture","name": "_BA2"},{"file": 45,"line": 1420,"col": 4,"docs": " XMOS xCORE processor family","name": "_XCORE"},{"file": 45,"line": 1423,"col": 4,"docs": " Microchip 8-bit PIC(r) family","name": "_MCHP_PIC"},{"file": 45,"line": 1426,"col": 4,"docs": " Reserved by Intel","name": "_INTEL205"},{"file": 45,"line": 1429,"col": 4,"docs": " Reserved by Intel","name": "_INTEL206"},{"file": 45,"line": 1432,"col": 4,"docs": " Reserved by Intel","name": "_INTEL207"},{"file": 45,"line": 1435,"col": 4,"docs": " Reserved by Intel","name": "_INTEL208"},{"file": 45,"line": 1438,"col": 4,"docs": " Reserved by Intel","name": "_INTEL209"},{"file": 45,"line": 1441,"col": 4,"docs": " KM211 KM32 32-bit processor","name": "_KM32"},{"file": 45,"line": 1444,"col": 4,"docs": " KM211 KMX32 32-bit processor","name": "_KMX32"},{"file": 45,"line": 1447,"col": 4,"docs": " KM211 KMX16 16-bit processor","name": "_KMX16"},{"file": 45,"line": 1450,"col": 4,"docs": " KM211 KMX8 8-bit processor","name": "_KMX8"},{"file": 45,"line": 1453,"col": 4,"docs": " KM211 KVARC processor","name": "_KVARC"},{"file": 45,"line": 1456,"col": 4,"docs": " Paneve CDP architecture family","name": "_CDP"},{"file": 45,"line": 1459,"col": 4,"docs": " Cognitive Smart Memory Processor","name": "_COGE"},{"file": 45,"line": 1462,"col": 4,"docs": " iCelero CoolEngine","name": "_COOL"},{"file": 45,"line": 1465,"col": 4,"docs": " Nanoradio Optimized RISC","name": "_NORC"},{"file": 45,"line": 1468,"col": 4,"docs": " CSR Kalimba architecture family","name": "_CSR_KALIMBA"},{"file": 45,"line": 1471,"col": 4,"docs": " AMD GPU architecture","name": "_AMDGPU"},{"file": 45,"line": 1474,"col": 4,"docs": " RISC-V","name": "_RISCV"},{"file": 45,"line": 1477,"col": 4,"docs": " Lanai 32-bit processor","name": "_LANAI"},{"file": 45,"line": 1480,"col": 4,"docs": " Linux kernel bpf virtual machine","name": "_BPF"},{"file": 45,"line": 1482,"col": 4,"name": "_"},{"file": 66,"line": 3059,"col": 4,"name": "handler"},{"file": 66,"line": 3063,"col": 4,"name": "mask"},{"file": 66,"line": 3064,"col": 4,"name": "flags"},{"file": 66,"line": 3065,"col": 4,"name": "restorer"},{"file": 53,"line": 183,"col": 4,"name": "iov_base"},{"file": 53,"line": 184,"col": 4,"name": "iov_len"},{"file": 53,"line": 188,"col": 4,"name": "iov_base"},{"file": 53,"line": 189,"col": 4,"name": "iov_len"},{"file": 54,"line": 41,"col": 4,"docs": " COFF Section index, 1-based","name": "Section"},{"file": 54,"line": 42,"col": 4,"name": "Padding1"},{"file": 54,"line": 43,"col": 4,"name": "Offset"},{"file": 54,"line": 44,"col": 4,"name": "Size"},{"file": 54,"line": 45,"col": 4,"name": "Characteristics"},{"file": 54,"line": 46,"col": 4,"name": "ModuleIndex"},{"file": 54,"line": 47,"col": 4,"name": "Padding2"},{"file": 54,"line": 48,"col": 4,"name": "DataCrc"},{"file": 54,"line": 49,"col": 4,"name": "RelocCrc"},{"file": 54,"line": 53,"col": 4,"name": "Unused1"},{"file": 54,"line": 54,"col": 4,"name": "SectionContr"},{"file": 54,"line": 55,"col": 4,"name": "Flags"},{"file": 54,"line": 56,"col": 4,"name": "ModuleSymStream"},{"file": 54,"line": 57,"col": 4,"name": "SymByteSize"},{"file": 54,"line": 58,"col": 4,"name": "C11ByteSize"},{"file": 54,"line": 59,"col": 4,"name": "C13ByteSize"},{"file": 54,"line": 60,"col": 4,"name": "SourceFileCount"},{"file": 54,"line": 61,"col": 4,"name": "Padding"},{"file": 54,"line": 62,"col": 4,"name": "Unused2"},{"file": 54,"line": 63,"col": 4,"name": "SourceFileNameIndex"},{"file": 54,"line": 64,"col": 4,"name": "PdbFilePathNameIndex"},{"file": 54,"line": 481,"col": 4,"name": "in_file"},{"file": 54,"line": 482,"col": 4,"name": "msf"},{"file": 54,"line": 483,"col": 4,"name": "allocator"},{"file": 54,"line": 484,"col": 4,"name": "string_table"},{"file": 54,"line": 485,"col": 4,"name": "dbi"},{"file": 54,"line": 486,"col": 4,"name": "modules"},{"file": 54,"line": 487,"col": 4,"name": "sect_contribs"},{"file": 54,"line": 488,"col": 4,"name": "guid"},{"file": 54,"line": 489,"col": 4,"name": "age"},{"file": 54,"line": 857,"col": 4,"name": "directory"},{"file": 54,"line": 858,"col": 4,"name": "streams"},{"file": 54,"line": 998,"col": 4,"name": "in_file"},{"file": 54,"line": 999,"col": 4,"name": "pos"},{"file": 54,"line": 1000,"col": 4,"name": "blocks"},{"file": 54,"line": 1001,"col": 4,"name": "block_size"},{"file": 55,"line": 302,"col": 4,"name": "index"},{"file": 55,"line": 303,"col": 4,"name": "cmd_line"},{"file": 74,"line": 25,"col": 4,"name": "l_addr"},{"file": 74,"line": 26,"col": 4,"name": "l_name"},{"file": 74,"line": 27,"col": 4,"name": "l_ld"},{"file": 74,"line": 28,"col": 4,"name": "l_next"},{"file": 74,"line": 29,"col": 4,"name": "l_prev"},{"file": 66,"line": 3358,"col": 4,"name": "pad"},{"file": 66,"line": 3359,"col": 4,"name": "common"},{"file": 66,"line": 3379,"col": 4,"name": "sigfault"},{"file": 66,"line": 3390,"col": 4,"name": "sigpoll"},{"file": 66,"line": 3394,"col": 4,"name": "sigsys"},{"file": 22,"line": 485,"col": 8,"name": "min"},{"file": 22,"line": 486,"col": 8,"name": "max"},{"file": 22,"line": 421,"col": 16,"name": "fn_type"},{"file": 22,"line": 422,"col": 16,"name": "is_noinline"},{"file": 22,"line": 423,"col": 16,"name": "is_var_args"},{"file": 22,"line": 424,"col": 16,"name": "is_extern"},{"file": 22,"line": 425,"col": 16,"name": "is_export"},{"file": 22,"line": 426,"col": 16,"name": "lib_name"},{"file": 22,"line": 427,"col": 16,"name": "return_type"},{"file": 22,"line": 428,"col": 16,"name": "arg_names"},{"file": 13,"line": 140,"col": 16,"name": "min"},{"file": 13,"line": 141,"col": 16,"name": "max"},{"file": 22,"line": 620,"col": 8,"docs": " Equivalent to function call syntax.","name": "auto"},{"file": 22,"line": 623,"col": 8,"docs": " Equivalent to async keyword used with function call syntax.","name": "async_kw"},{"file": 22,"line": 629,"col": 8,"docs": " Prevents tail call optimization. This guarantees that the return address will point to the callsite, as opposed to the callsite's callsite. If the call is otherwise required to be tail-called or inlined, a compile error is emitted instead.","name": "never_tail"},{"file": 22,"line": 633,"col": 8,"docs": " Guarantees that the call will not be inlined. If the call is otherwise required to be inlined, a compile error is emitted instead.","name": "never_inline"},{"file": 22,"line": 637,"col": 8,"docs": " Asserts that the function call will not suspend. This allows a non-async function to call an async function.","name": "no_async"},{"file": 22,"line": 641,"col": 8,"docs": " Guarantees that the call will be generated with tail call optimization. If this is not possible, a compile error is emitted instead.","name": "always_tail"},{"file": 22,"line": 645,"col": 8,"docs": " Guarantees that the call will inlined at the callsite. If this is not possible, a compile error is emitted instead.","name": "always_inline"},{"file": 22,"line": 649,"col": 8,"docs": " Evaluates the call at compile-time. If the call cannot be completed at compile-time, a compile error is emitted instead.","name": "compile_time"},{"file": 66,"line": 3018,"col": 4,"name": "ws_row"},{"file": 66,"line": 3019,"col": 4,"name": "ws_col"},{"file": 66,"line": 3020,"col": 4,"name": "ws_xpixel"},{"file": 66,"line": 3021,"col": 4,"name": "ws_ypixel"},{"file": 66,"line": 3047,"col": 8,"name": "handler"},{"file": 66,"line": 3048,"col": 8,"name": "flags"},{"file": 66,"line": 3049,"col": 8,"name": "restorer"},{"file": 66,"line": 3050,"col": 8,"name": "mask"},{"file": 66,"line": 3166,"col": 4,"name": "ptr"},{"file": 66,"line": 3167,"col": 4,"name": "fd"},{"file": 66,"line": 3168,"col": 4,"name": "u32"},{"file": 66,"line": 3169,"col": 4,"name": "u64"},{"file": 66,"line": 3180,"col": 8,"name": "events"},{"file": 66,"line": 3181,"col": 8,"name": "data"},{"file": 66,"line": 3353,"col": 4,"name": "int"},{"file": 66,"line": 3354,"col": 4,"name": "ptr"},{"file": 27,"line": 845,"col": 8,"name": "timer"},{"file": 27,"line": 846,"col": 8,"name": "waiters"},{"file": 27,"line": 847,"col": 8,"name": "thread"},{"file": 27,"line": 848,"col": 8,"name": "event"},{"file": 27,"line": 849,"col": 8,"name": "is_running"},{"file": 27,"line": 1560,"col": 8,"name": "epollfd"},{"file": 27,"line": 1561,"col": 8,"name": "final_eventfd"},{"file": 27,"line": 1562,"col": 8,"name": "final_eventfd_event"},{"file": 40,"line": 712,"col": 8,"name": "completion"},{"file": 40,"line": 713,"col": 8,"name": "child_tid"},{"file": 40,"line": 714,"col": 8,"name": "parent_tid"},{"file": 40,"line": 715,"col": 8,"name": "mapped"},{"file": 42,"line": 354,"col": 8,"name": "virtual_address"},{"file": 42,"line": 355,"col": 8,"name": "size"},{"file": 45,"line": 784,"col": 8,"name": "a_val"},{"file": 66,"line": 3060,"col": 8,"name": "handler"},{"file": 66,"line": 3061,"col": 8,"name": "sigaction"},{"file": 74,"line": 49,"col": 4,"name": "r_version"},{"file": 74,"line": 50,"col": 4,"name": "r_map"},{"file": 74,"line": 51,"col": 4,"name": "r_brk"},{"file": 74,"line": 52,"col": 4,"name": "r_ldbase"},{"file": 54,"line": 492,"col": 8,"name": "mod_info"},{"file": 54,"line": 493,"col": 8,"name": "module_name"},{"file": 54,"line": 494,"col": 8,"name": "obj_file_name"},{"file": 54,"line": 496,"col": 8,"name": "populated"},{"file": 54,"line": 497,"col": 8,"name": "symbols"},{"file": 54,"line": 498,"col": 8,"name": "subsect_info"},{"file": 54,"line": 499,"col": 8,"name": "checksum_offset"},{"file": 66,"line": 3360,"col": 8,"name": "first"},{"file": 66,"line": 3370,"col": 8,"name": "second"},{"file": 66,"line": 3380,"col": 8,"name": "addr"},{"file": 66,"line": 3381,"col": 8,"name": "addr_lsb"},{"file": 66,"line": 3382,"col": 8,"name": "first"},{"file": 66,"line": 3391,"col": 8,"name": "band"},{"file": 66,"line": 3392,"col": 8,"name": "fd"},{"file": 66,"line": 3395,"col": 8,"name": "call_addr"},{"file": 66,"line": 3396,"col": 8,"name": "syscall"},{"file": 66,"line": 3397,"col": 8,"name": "native_arch"},{"file": 75,"line": 97,"col": 4,"name": "init_data"},{"file": 75,"line": 98,"col": 4,"name": "alloc_size"},{"file": 75,"line": 99,"col": 4,"name": "alloc_align"},{"file": 75,"line": 100,"col": 4,"name": "tcb_offset"},{"file": 75,"line": 101,"col": 4,"name": "dtv_offset"},{"file": 75,"line": 102,"col": 4,"name": "data_offset"},{"file": 75,"line": 103,"col": 4,"name": "data_size"},{"file": 75,"line": 105,"col": 4,"name": "gdt_entry_number"},{"file": 75,"line": 45,"col": 4,"name": "VariantI"},{"file": 75,"line": 46,"col": 4,"name": "VariantII"},{"file": 75,"line": 86,"col": 4,"name": "dummy"},{"file": 27,"line": 892,"col": 12,"name": "entries"},{"file": 66,"line": 3361,"col": 12,"name": "piduid"},{"file": 66,"line": 3365,"col": 12,"name": "timer"},{"file": 66,"line": 3371,"col": 12,"name": "value"},{"file": 66,"line": 3372,"col": 12,"name": "sigchld"},{"file": 66,"line": 3383,"col": 12,"name": "addr_bnd"},{"file": 66,"line": 3387,"col": 12,"name": "pkey"},{"file": 66,"line": 3362,"col": 16,"name": "pid"},{"file": 66,"line": 3363,"col": 16,"name": "uid"},{"file": 66,"line": 3366,"col": 16,"name": "timerid"},{"file": 66,"line": 3367,"col": 16,"name": "overrun"},{"file": 66,"line": 3373,"col": 16,"name": "status"},{"file": 66,"line": 3374,"col": 16,"name": "utime"},{"file": 66,"line": 3375,"col": 16,"name": "stime"},{"file": 66,"line": 3384,"col": 16,"name": "lower"},{"file": 66,"line": 3385,"col": 16,"name": "upper"},{"file": 13,"line": 734,"col": 41,"name": "set"},{"file": 13,"line": 734,"col": 51,"name": "feature"},{"file": 13,"line": 748,"col": 44,"name": "set"},{"file": 13,"line": 748,"col": 54,"name": "features"},{"file": 13,"line": 651,"col": 31,"name": "set"},{"file": 13,"line": 671,"col": 37,"name": "set"},{"file": 13,"line": 671,"col": 48,"name": "other_set"},{"file": 13,"line": 677,"col": 37,"name": "set"},{"file": 13,"line": 677,"col": 48,"name": "arch_feature_index"},{"file": 13,"line": 684,"col": 40,"name": "set"},{"file": 13,"line": 684,"col": 51,"name": "other_set"},{"file": 13,"line": 689,"col": 44,"name": "set"},{"file": 13,"line": 689,"col": 55,"name": "all_features_list"},{"file": 13,"line": 706,"col": 31,"name": "set"},{"file": 13,"line": 710,"col": 27,"name": "set"},{"file": 13,"line": 710,"col": 37,"name": "other_set"},{"file": 13,"line": 714,"col": 36,"name": "set"},{"file": 13,"line": 714,"col": 46,"name": "other_set"},{"file": 13,"line": 820,"col": 25,"name": "arch"},{"file": 13,"line": 834,"col": 29,"name": "arch"},{"file": 13,"line": 841,"col": 27,"name": "arch"},{"file": 13,"line": 869,"col": 25,"name": "arch"},{"file": 13,"line": 890,"col": 27,"name": "arch"},{"file": 13,"line": 897,"col": 25,"name": "arch"},{"file": 13,"line": 904,"col": 33,"name": "arch"},{"file": 13,"line": 904,"col": 45,"name": "cpu_name"},{"file": 13,"line": 913,"col": 32,"name": "arch"},{"file": 13,"line": 974,"col": 33,"name": "arch"},{"file": 13,"line": 1101,"col": 31,"name": "arch"},{"file": 13,"line": 1169,"col": 31,"name": "arch"},{"file": 13,"line": 1189,"col": 35,"name": "arch"},{"file": 13,"line": 1214,"col": 32,"name": "arch"},{"file": 13,"line": 1237,"col": 32,"name": "cpus","comptime": true},{"file": 14,"line": 49,"col": 30,"name": "self"},{"file": 14,"line": 49,"col": 42,"name": "T","comptime": true},{"file": 14,"line": 49,"col": 60,"name": "value"},{"file": 14,"line": 57,"col": 31,"name": "self"},{"file": 14,"line": 57,"col": 43,"name": "T","comptime": true},{"file": 14,"line": 57,"col": 61,"name": "value"},{"file": 14,"line": 64,"col": 30,"name": "self"},{"file": 14,"line": 64,"col": 42,"name": "T","comptime": true},{"file": 14,"line": 64,"col": 60,"name": "value"},{"file": 14,"line": 71,"col": 27,"name": "self"},{"file": 14,"line": 71,"col": 39,"name": "T","comptime": true},{"file": 14,"line": 71,"col": 57,"name": "value"},{"file": 14,"line": 78,"col": 24,"name": "self"},{"file": 14,"line": 78,"col": 36,"name": "T","comptime": true},{"file": 14,"line": 78,"col": 54,"name": "value"},{"file": 14,"line": 78,"col": 64,"name": "endian"},{"file": 14,"line": 84,"col": 27,"name": "self"},{"file": 14,"line": 84,"col": 39,"name": "value"},{"file": 15,"line": 225,"col": 21,"name": "self"},{"file": 15,"line": 225,"col": 33,"name": "length"},{"file": 15,"line": 233,"col": 18,"name": "self"},{"file": 15,"line": 233,"col": 30,"name": "offset"},{"file": 15,"line": 239,"col": 23,"name": "self"},{"file": 15,"line": 239,"col": 35,"name": "offset"},{"file": 15,"line": 245,"col": 18,"name": "self"},{"file": 15,"line": 245,"col": 30,"name": "offset"},{"file": 15,"line": 252,"col": 18,"name": "self"},{"file": 15,"line": 267,"col": 16,"name": "self"},{"file": 15,"line": 372,"col": 17,"name": "self"},{"file": 15,"line": 372,"col": 29,"name": "new_mode"},{"file": 15,"line": 383,"col": 17,"name": "self"},{"file": 15,"line": 383,"col": 29,"name": "owner"},{"file": 15,"line": 383,"col": 42,"name": "group"},{"file": 15,"line": 395,"col": 8,"name": "self"},{"file": 15,"line": 397,"col": 8,"docs": " access timestamp in nanoseconds","name": "atime"},{"file": 15,"line": 399,"col": 8,"docs": " last modification timestamp in nanoseconds","name": "mtime"},{"file": 15,"line": 422,"col": 26,"name": "self"},{"file": 15,"line": 422,"col": 38,"name": "allocator"},{"file": 15,"line": 422,"col": 64,"name": "max_bytes"},{"file": 15,"line": 433,"col": 8,"name": "self"},{"file": 15,"line": 434,"col": 8,"name": "allocator"},{"file": 15,"line": 435,"col": 8,"name": "max_bytes"},{"file": 15,"line": 436,"col": 8,"name": "size_hint"},{"file": 15,"line": 437,"col": 8,"name": "alignment","comptime": true},{"file": 15,"line": 438,"col": 8,"name": "optional_sentinel","comptime": true},{"file": 15,"line": 481,"col": 19,"name": "self"},{"file": 15,"line": 481,"col": 31,"name": "buffer"},{"file": 15,"line": 491,"col": 17,"name": "self"},{"file": 15,"line": 491,"col": 29,"name": "buffer"},{"file": 15,"line": 491,"col": 43,"name": "offset"},{"file": 15,"line": 505,"col": 20,"name": "self"},{"file": 15,"line": 505,"col": 32,"name": "buffer"},{"file": 15,"line": 505,"col": 46,"name": "offset"},{"file": 15,"line": 516,"col": 17,"name": "self"},{"file": 15,"line": 516,"col": 29,"name": "iovecs"},{"file": 15,"line": 537,"col": 20,"name": "self"},{"file": 15,"line": 537,"col": 32,"name": "iovecs"},{"file": 15,"line": 559,"col": 18,"name": "self"},{"file": 15,"line": 559,"col": 30,"name": "iovecs"},{"file": 15,"line": 559,"col": 56,"name": "offset"},{"file": 15,"line": 580,"col": 21,"name": "self"},{"file": 15,"line": 580,"col": 33,"name": "iovecs"},{"file": 15,"line": 580,"col": 53,"name": "offset"},{"file": 15,"line": 616,"col": 20,"name": "self"},{"file": 15,"line": 616,"col": 32,"name": "bytes"},{"file": 15,"line": 623,"col": 18,"name": "self"},{"file": 15,"line": 623,"col": 30,"name": "bytes"},{"file": 15,"line": 623,"col": 49,"name": "offset"},{"file": 15,"line": 635,"col": 21,"name": "self"},{"file": 15,"line": 635,"col": 33,"name": "bytes"},{"file": 15,"line": 635,"col": 52,"name": "offset"},{"file": 15,"line": 644,"col": 18,"name": "self"},{"file": 15,"line": 644,"col": 30,"name": "iovecs"},{"file": 15,"line": 663,"col": 21,"name": "self"},{"file": 15,"line": 663,"col": 33,"name": "iovecs"},{"file": 15,"line": 680,"col": 19,"name": "self"},{"file": 15,"line": 680,"col": 31,"name": "iovecs"},{"file": 15,"line": 680,"col": 57,"name": "offset"},{"file": 15,"line": 698,"col": 22,"name": "self"},{"file": 15,"line": 698,"col": 34,"name": "iovecs"},{"file": 15,"line": 698,"col": 60,"name": "offset"},{"file": 15,"line": 718,"col": 21,"name": "in"},{"file": 15,"line": 718,"col": 31,"name": "in_offset"},{"file": 15,"line": 718,"col": 47,"name": "out"},{"file": 15,"line": 718,"col": 58,"name": "out_offset"},{"file": 15,"line": 718,"col": 75,"name": "len"},{"file": 15,"line": 726,"col": 24,"name": "in"},{"file": 15,"line": 726,"col": 34,"name": "in_offset"},{"file": 15,"line": 726,"col": 50,"name": "out"},{"file": 15,"line": 726,"col": 61,"name": "out_offset"},{"file": 15,"line": 726,"col": 78,"name": "len"},{"file": 15,"line": 758,"col": 24,"name": "self"},{"file": 15,"line": 758,"col": 36,"name": "in_file"},{"file": 15,"line": 758,"col": 51,"name": "args"},{"file": 15,"line": 774,"col": 34,"name": "self"},{"file": 15,"line": 774,"col": 46,"name": "in_file"},{"file": 15,"line": 774,"col": 61,"name": "args"},{"file": 15,"line": 862,"col": 18,"name": "file"},{"file": 15,"line": 882,"col": 26,"name": "file"},{"file": 15,"line": 901,"col": 16,"name": "file"},{"file": 15,"line": 901,"col": 28,"name": "l"},{"file": 15,"line": 937,"col": 18,"name": "file"},{"file": 15,"line": 968,"col": 19,"name": "file"},{"file": 15,"line": 968,"col": 31,"name": "l"},{"file": 15,"line": 1008,"col": 25,"name": "file"},{"file": 15,"line": 796,"col": 28,"name": "self"},{"file": 15,"line": 796,"col": 40,"name": "in_file"},{"file": 15,"line": 796,"col": 55,"name": "args"},{"file": 16,"line": 404,"col": 27,"name": "allocator"},{"file": 16,"line": 404,"col": 49,"name": "ctx"},{"file": 16,"line": 425,"col": 38,"name": "self"},{"file": 16,"line": 433,"col": 28,"name": "self"},{"file": 16,"line": 444,"col": 24,"name": "self"},{"file": 16,"line": 450,"col": 27,"name": "self"},{"file": 16,"line": 466,"col": 24,"name": "self"},{"file": 16,"line": 466,"col": 37,"name": "key"},{"file": 16,"line": 476,"col": 31,"name": "self"},{"file": 16,"line": 476,"col": 44,"name": "key"},{"file": 16,"line": 476,"col": 58,"name": "ctx"},{"file": 16,"line": 487,"col": 38,"name": "self"},{"file": 16,"line": 487,"col": 51,"name": "key"},{"file": 16,"line": 498,"col": 45,"name": "self"},{"file": 16,"line": 498,"col": 58,"name": "key"},{"file": 16,"line": 498,"col": 72,"name": "ctx"},{"file": 16,"line": 502,"col": 29,"name": "self"},{"file": 16,"line": 502,"col": 42,"name": "key"},{"file": 16,"line": 502,"col": 50,"name": "value"},{"file": 16,"line": 510,"col": 35,"name": "self"},{"file": 16,"line": 510,"col": 48,"name": "expected_count"},{"file": 16,"line": 517,"col": 36,"name": "self"},{"file": 16,"line": 517,"col": 49,"name": "additional_count"},{"file": 16,"line": 523,"col": 24,"name": "self"},{"file": 16,"line": 542,"col": 33,"name": "self"},{"file": 16,"line": 542,"col": 46,"name": "key"},{"file": 16,"line": 542,"col": 54,"name": "value"},{"file": 16,"line": 549,"col": 42,"name": "self"},{"file": 16,"line": 549,"col": 55,"name": "key"},{"file": 16,"line": 549,"col": 63,"name": "value"},{"file": 16,"line": 554,"col": 24,"name": "self"},{"file": 16,"line": 554,"col": 37,"name": "key"},{"file": 16,"line": 554,"col": 45,"name": "value"},{"file": 16,"line": 560,"col": 38,"name": "self"},{"file": 16,"line": 560,"col": 51,"name": "key"},{"file": 16,"line": 560,"col": 59,"name": "value"},{"file": 16,"line": 565,"col": 27,"name": "self"},{"file": 16,"line": 565,"col": 40,"name": "key"},{"file": 16,"line": 569,"col": 34,"name": "self"},{"file": 16,"line": 569,"col": 47,"name": "key"},{"file": 16,"line": 569,"col": 61,"name": "ctx"},{"file": 16,"line": 577,"col": 26,"name": "self"},{"file": 16,"line": 577,"col": 38,"name": "key"},{"file": 16,"line": 577,"col": 52,"name": "ctx"},{"file": 16,"line": 584,"col": 29,"name": "self"},{"file": 16,"line": 584,"col": 41,"name": "key"},{"file": 16,"line": 584,"col": 55,"name": "ctx"},{"file": 16,"line": 589,"col": 22,"name": "self"},{"file": 16,"line": 589,"col": 34,"name": "key"},{"file": 16,"line": 592,"col": 29,"name": "self"},{"file": 16,"line": 592,"col": 41,"name": "key"},{"file": 16,"line": 592,"col": 55,"name": "ctx"},{"file": 16,"line": 596,"col": 25,"name": "self"},{"file": 16,"line": 596,"col": 37,"name": "key"},{"file": 16,"line": 599,"col": 32,"name": "self"},{"file": 16,"line": 599,"col": 44,"name": "key"},{"file": 16,"line": 599,"col": 58,"name": "ctx"},{"file": 16,"line": 604,"col": 24,"name": "self"},{"file": 16,"line": 604,"col": 36,"name": "key"},{"file": 16,"line": 608,"col": 31,"name": "self"},{"file": 16,"line": 608,"col": 43,"name": "key"},{"file": 16,"line": 608,"col": 57,"name": "ctx"},{"file": 16,"line": 617,"col": 31,"name": "self"},{"file": 16,"line": 617,"col": 43,"name": "key"},{"file": 16,"line": 617,"col": 57,"name": "ctx"},{"file": 16,"line": 623,"col": 22,"name": "self"},{"file": 16,"line": 623,"col": 35,"name": "key"},{"file": 16,"line": 627,"col": 29,"name": "self"},{"file": 16,"line": 627,"col": 42,"name": "key"},{"file": 16,"line": 627,"col": 56,"name": "ctx"},{"file": 16,"line": 632,"col": 21,"name": "self"},{"file": 16,"line": 638,"col": 34,"name": "self"},{"file": 16,"line": 638,"col": 46,"name": "new_allocator"},{"file": 16,"line": 644,"col": 32,"name": "self"},{"file": 16,"line": 644,"col": 44,"name": "new_ctx"},{"file": 16,"line": 651,"col": 12,"name": "self"},{"file": 16,"line": 652,"col": 12,"name": "new_allocator"},{"file": 16,"line": 653,"col": 12,"name": "new_ctx"},{"file": 16,"line": 850,"col": 23,"name": "self"},{"file": 16,"line": 850,"col": 35,"name": "allocator"},{"file": 16,"line": 856,"col": 30,"name": "self"},{"file": 16,"line": 856,"col": 42,"name": "allocator"},{"file": 16,"line": 856,"col": 64,"name": "ctx"},{"file": 16,"line": 881,"col": 35,"name": "self"},{"file": 16,"line": 881,"col": 48,"name": "allocator"},{"file": 16,"line": 881,"col": 70,"name": "new_size"},{"file": 16,"line": 886,"col": 42,"name": "self"},{"file": 16,"line": 886,"col": 55,"name": "allocator"},{"file": 16,"line": 886,"col": 77,"name": "new_size"},{"file": 16,"line": 886,"col": 93,"name": "ctx"},{"file": 16,"line": 891,"col": 36,"name": "self"},{"file": 16,"line": 891,"col": 49,"name": "allocator"},{"file": 16,"line": 891,"col": 71,"name": "additional_size"},{"file": 16,"line": 894,"col": 43,"name": "self"},{"file": 16,"line": 894,"col": 56,"name": "allocator"},{"file": 16,"line": 894,"col": 78,"name": "additional_size"},{"file": 16,"line": 894,"col": 101,"name": "ctx"},{"file": 16,"line": 898,"col": 38,"name": "self"},{"file": 16,"line": 906,"col": 28,"name": "self"},{"file": 16,"line": 906,"col": 41,"name": "allocator"},{"file": 16,"line": 934,"col": 24,"name": "self"},{"file": 16,"line": 938,"col": 27,"name": "self"},{"file": 16,"line": 971,"col": 28,"name": "self"},{"file": 16,"line": 971,"col": 41,"name": "allocator"},{"file": 16,"line": 971,"col": 63,"name": "key"},{"file": 16,"line": 971,"col": 71,"name": "value"},{"file": 16,"line": 986,"col": 33,"name": "self"},{"file": 16,"line": 986,"col": 46,"name": "key"},{"file": 16,"line": 986,"col": 54,"name": "value"},{"file": 16,"line": 991,"col": 40,"name": "self"},{"file": 16,"line": 991,"col": 53,"name": "key"},{"file": 16,"line": 991,"col": 61,"name": "value"},{"file": 16,"line": 991,"col": 71,"name": "ctx"},{"file": 16,"line": 998,"col": 42,"name": "self"},{"file": 16,"line": 998,"col": 55,"name": "key"},{"file": 16,"line": 998,"col": 63,"name": "value"},{"file": 16,"line": 1028,"col": 24,"name": "self"},{"file": 16,"line": 1028,"col": 37,"name": "allocator"},{"file": 16,"line": 1028,"col": 59,"name": "key"},{"file": 16,"line": 1028,"col": 67,"name": "value"},{"file": 16,"line": 1033,"col": 31,"name": "self"},{"file": 16,"line": 1033,"col": 44,"name": "allocator"},{"file": 16,"line": 1033,"col": 66,"name": "key"},{"file": 16,"line": 1033,"col": 74,"name": "value"},{"file": 16,"line": 1033,"col": 84,"name": "ctx"},{"file": 16,"line": 1048,"col": 38,"name": "self"},{"file": 16,"line": 1048,"col": 51,"name": "key"},{"file": 16,"line": 1048,"col": 59,"name": "value"},{"file": 16,"line": 1053,"col": 45,"name": "self"},{"file": 16,"line": 1053,"col": 58,"name": "key"},{"file": 16,"line": 1053,"col": 66,"name": "value"},{"file": 16,"line": 1053,"col": 76,"name": "ctx"},{"file": 16,"line": 1068,"col": 27,"name": "self"},{"file": 16,"line": 1068,"col": 40,"name": "key"},{"file": 16,"line": 1073,"col": 34,"name": "self"},{"file": 16,"line": 1073,"col": 47,"name": "key"},{"file": 16,"line": 1073,"col": 55,"name": "ctx"},{"file": 16,"line": 1076,"col": 34,"name": "self"},{"file": 16,"line": 1076,"col": 47,"name": "key"},{"file": 16,"line": 1076,"col": 61,"name": "ctx"},{"file": 16,"line": 1148,"col": 24,"name": "self"},{"file": 16,"line": 1148,"col": 36,"name": "key"},{"file": 16,"line": 1153,"col": 31,"name": "self"},{"file": 16,"line": 1153,"col": 43,"name": "key"},{"file": 16,"line": 1153,"col": 51,"name": "ctx"},{"file": 16,"line": 1156,"col": 31,"name": "self"},{"file": 16,"line": 1156,"col": 43,"name": "key"},{"file": 16,"line": 1156,"col": 57,"name": "ctx"},{"file": 16,"line": 1167,"col": 19,"name": "self"},{"file": 16,"line": 1167,"col": 32,"name": "allocator"},{"file": 16,"line": 1167,"col": 54,"name": "key"},{"file": 16,"line": 1167,"col": 62,"name": "value"},{"file": 16,"line": 1178,"col": 25,"name": "self"},{"file": 16,"line": 1178,"col": 37,"name": "key"},{"file": 16,"line": 1183,"col": 32,"name": "self"},{"file": 16,"line": 1183,"col": 44,"name": "key"},{"file": 16,"line": 1183,"col": 52,"name": "ctx"},{"file": 16,"line": 1186,"col": 32,"name": "self"},{"file": 16,"line": 1186,"col": 44,"name": "key"},{"file": 16,"line": 1186,"col": 58,"name": "ctx"},{"file": 16,"line": 1194,"col": 22,"name": "self"},{"file": 16,"line": 1194,"col": 34,"name": "key"},{"file": 16,"line": 1199,"col": 29,"name": "self"},{"file": 16,"line": 1199,"col": 41,"name": "key"},{"file": 16,"line": 1199,"col": 49,"name": "ctx"},{"file": 16,"line": 1202,"col": 29,"name": "self"},{"file": 16,"line": 1202,"col": 41,"name": "key"},{"file": 16,"line": 1202,"col": 55,"name": "ctx"},{"file": 16,"line": 1210,"col": 22,"name": "self"},{"file": 16,"line": 1210,"col": 34,"name": "key"},{"file": 16,"line": 1226,"col": 19,"name": "self"},{"file": 16,"line": 1226,"col": 31,"name": "key"},{"file": 16,"line": 1241,"col": 24,"name": "self"},{"file": 16,"line": 1241,"col": 37,"name": "allocator"},{"file": 16,"line": 1241,"col": 59,"name": "key"},{"file": 16,"line": 1253,"col": 31,"name": "self"},{"file": 16,"line": 1253,"col": 44,"name": "allocator"},{"file": 16,"line": 1253,"col": 66,"name": "key"},{"file": 16,"line": 1253,"col": 80,"name": "key_ctx"},{"file": 16,"line": 1273,"col": 38,"name": "self"},{"file": 16,"line": 1273,"col": 51,"name": "key"},{"file": 16,"line": 1278,"col": 45,"name": "self"},{"file": 16,"line": 1278,"col": 58,"name": "key"},{"file": 16,"line": 1278,"col": 66,"name": "ctx"},{"file": 16,"line": 1352,"col": 29,"name": "self"},{"file": 16,"line": 1352,"col": 42,"name": "allocator"},{"file": 16,"line": 1352,"col": 64,"name": "key"},{"file": 16,"line": 1352,"col": 72,"name": "value"},{"file": 16,"line": 1357,"col": 36,"name": "self"},{"file": 16,"line": 1357,"col": 49,"name": "allocator"},{"file": 16,"line": 1357,"col": 71,"name": "key"},{"file": 16,"line": 1357,"col": 79,"name": "value"},{"file": 16,"line": 1357,"col": 89,"name": "ctx"},{"file": 16,"line": 1367,"col": 24,"name": "self"},{"file": 16,"line": 1367,"col": 43,"name": "key"},{"file": 16,"line": 1382,"col": 22,"name": "self"},{"file": 16,"line": 1382,"col": 35,"name": "key"},{"file": 16,"line": 1387,"col": 29,"name": "self"},{"file": 16,"line": 1387,"col": 42,"name": "key"},{"file": 16,"line": 1387,"col": 50,"name": "ctx"},{"file": 16,"line": 1390,"col": 29,"name": "self"},{"file": 16,"line": 1390,"col": 42,"name": "key"},{"file": 16,"line": 1390,"col": 56,"name": "ctx"},{"file": 16,"line": 1421,"col": 21,"name": "self"},{"file": 16,"line": 1421,"col": 33,"name": "allocator"},{"file": 16,"line": 1426,"col": 28,"name": "self"},{"file": 16,"line": 1426,"col": 40,"name": "allocator"},{"file": 16,"line": 1426,"col": 62,"name": "new_ctx"},{"file": 16,"line": 864,"col": 36,"name": "size"},{"file": 16,"line": 864,"col": 48,"name": "cap"},{"file": 17,"line": 60,"col": 28,"name": "allocator"},{"file": 17,"line": 60,"col": 50,"name": "num"},{"file": 17,"line": 76,"col": 30,"name": "allocator"},{"file": 17,"line": 76,"col": 52,"name": "slice"},{"file": 17,"line": 88,"col": 31,"name": "self"},{"file": 17,"line": 104,"col": 36,"name": "self"},{"file": 17,"line": 104,"col": 49,"name": "sentinel","comptime": true},{"file": 17,"line": 112,"col": 22,"name": "self"},{"file": 17,"line": 112,"col": 35,"name": "n"},{"file": 17,"line": 112,"col": 45,"name": "item"},{"file": 17,"line": 122,"col": 27,"name": "self"},{"file": 17,"line": 122,"col": 40,"name": "i"},{"file": 17,"line": 122,"col": 50,"name": "items"},{"file": 17,"line": 134,"col": 28,"name": "self"},{"file": 17,"line": 134,"col": 41,"name": "start"},{"file": 17,"line": 134,"col": 55,"name": "len"},{"file": 17,"line": 134,"col": 67,"name": "new_items"},{"file": 17,"line": 167,"col": 36,"name": "self"},{"file": 17,"line": 167,"col": 49,"name": "item"},{"file": 17,"line": 177,"col": 29,"name": "self"},{"file": 17,"line": 177,"col": 42,"name": "i"},{"file": 17,"line": 191,"col": 26,"name": "self"},{"file": 17,"line": 191,"col": 39,"name": "i"},{"file": 17,"line": 223,"col": 22,"name": "self"},{"file": 17,"line": 236,"col": 28,"name": "self"},{"file": 17,"line": 236,"col": 41,"name": "value"},{"file": 17,"line": 236,"col": 51,"name": "n"},{"file": 17,"line": 244,"col": 42,"name": "self"},{"file": 17,"line": 244,"col": 55,"name": "value"},{"file": 17,"line": 244,"col": 65,"name": "n"},{"file": 17,"line": 260,"col": 29,"name": "self"},{"file": 17,"line": 260,"col": 42,"name": "new_len"},{"file": 17,"line": 284,"col": 38,"name": "self"},{"file": 17,"line": 289,"col": 28,"name": "self"},{"file": 17,"line": 340,"col": 32,"name": "self"},{"file": 17,"line": 367,"col": 30,"name": "self"},{"file": 17,"line": 367,"col": 43,"name": "n","comptime": true},{"file": 17,"line": 378,"col": 44,"name": "self"},{"file": 17,"line": 378,"col": 57,"name": "n","comptime": true},{"file": 17,"line": 388,"col": 19,"name": "self"},{"file": 17,"line": 397,"col": 25,"name": "self"},{"file": 17,"line": 414,"col": 35,"name": "self"},{"file": 17,"line": 229,"col": 23,"name": "self"},{"file": 17,"line": 229,"col": 36,"name": "m"},{"file": 13,"line": 66,"col": 25,"name": "tag"},{"file": 13,"line": 73,"col": 36,"name": "tag"},{"file": 13,"line": 83,"col": 39,"name": "tag"},{"file": 13,"line": 83,"col": 49,"name": "arch"},{"file": 13,"line": 1325,"col": 21,"name": "self"},{"file": 13,"line": 1325,"col": 35,"name": "allocator"},{"file": 13,"line": 1329,"col": 29,"name": "allocator"},{"file": 13,"line": 1329,"col": 55,"name": "cpu_arch"},{"file": 13,"line": 1329,"col": 75,"name": "os_tag"},{"file": 13,"line": 1329,"col": 91,"name": "abi"},{"file": 13,"line": 1333,"col": 23,"name": "self"},{"file": 13,"line": 1333,"col": 37,"name": "allocator"},{"file": 13,"line": 1337,"col": 28,"name": "cpu_arch"},{"file": 13,"line": 1337,"col": 48,"name": "os_tag"},{"file": 13,"line": 1349,"col": 22,"name": "self"},{"file": 13,"line": 1353,"col": 34,"name": "os_tag"},{"file": 13,"line": 1353,"col": 50,"name": "abi"},{"file": 13,"line": 1363,"col": 27,"name": "self"},{"file": 13,"line": 1367,"col": 28,"name": "self"},{"file": 13,"line": 1371,"col": 28,"name": "os_tag"},{"file": 13,"line": 1371,"col": 44,"name": "abi"},{"file": 13,"line": 1381,"col": 21,"name": "self"},{"file": 13,"line": 1385,"col": 33,"name": "os_tag"},{"file": 13,"line": 1385,"col": 49,"name": "cpu_arch"},{"file": 13,"line": 1398,"col": 27,"name": "self"},{"file": 13,"line": 1402,"col": 19,"name": "self"},{"file": 13,"line": 1406,"col": 17,"name": "self"},{"file": 13,"line": 1410,"col": 18,"name": "self"},{"file": 13,"line": 1414,"col": 21,"name": "self"},{"file": 13,"line": 1426,"col": 17,"name": "self"},{"file": 13,"line": 1430,"col": 29,"name": "self"},{"file": 13,"line": 1434,"col": 32,"name": "os_tag"},{"file": 13,"line": 1434,"col": 48,"name": "abi"},{"file": 13,"line": 1438,"col": 21,"name": "self"},{"file": 13,"line": 1442,"col": 32,"name": "self"},{"file": 13,"line": 1452,"col": 23,"name": "self"},{"file": 13,"line": 1456,"col": 28,"name": "self"},{"file": 13,"line": 1512,"col": 37,"name": "self"},{"file": 13,"line": 1701,"col": 20,"name": "cpu_arch"},{"file": 13,"line": 1715,"col": 35,"name": "target"},{"file": 19,"line": 109,"col": 21,"name": "self"},{"file": 20,"line": 52,"col": 32,"name": "self"},{"file": 20,"line": 52,"col": 44,"name": "array_list"},{"file": 20,"line": 52,"col": 76,"name": "max_append_size"},{"file": 20,"line": 57,"col": 12,"name": "self"},{"file": 20,"line": 58,"col": 12,"name": "alignment","comptime": true},{"file": 20,"line": 59,"col": 12,"name": "array_list"},{"file": 20,"line": 60,"col": 12,"name": "max_append_size"},{"file": 20,"line": 90,"col": 28,"name": "self"},{"file": 20,"line": 90,"col": 40,"name": "allocator"},{"file": 20,"line": 90,"col": 66,"name": "max_size"},{"file": 20,"line": 145,"col": 34,"name": "self"},{"file": 20,"line": 145,"col": 46,"name": "buf"},{"file": 20,"line": 145,"col": 57,"name": "delimiter"},{"file": 20,"line": 167,"col": 12,"name": "self"},{"file": 20,"line": 168,"col": 12,"name": "allocator"},{"file": 20,"line": 169,"col": 12,"name": "delimiter"},{"file": 20,"line": 170,"col": 12,"name": "max_size"},{"file": 20,"line": 192,"col": 39,"name": "self"},{"file": 20,"line": 192,"col": 51,"name": "buf"},{"file": 20,"line": 192,"col": 62,"name": "delimiter"},{"file": 20,"line": 218,"col": 39,"name": "self"},{"file": 20,"line": 218,"col": 51,"name": "delimiter"},{"file": 20,"line": 250,"col": 29,"name": "self"},{"file": 20,"line": 250,"col": 41,"name": "T","comptime": true},{"file": 20,"line": 256,"col": 30,"name": "self"},{"file": 20,"line": 256,"col": 42,"name": "T","comptime": true},{"file": 20,"line": 261,"col": 29,"name": "self"},{"file": 20,"line": 261,"col": 41,"name": "T","comptime": true},{"file": 20,"line": 266,"col": 26,"name": "self"},{"file": 20,"line": 266,"col": 38,"name": "T","comptime": true},{"file": 20,"line": 291,"col": 25,"name": "self"},{"file": 20,"line": 291,"col": 37,"name": "num_bytes"},{"file": 20,"line": 291,"col": 53,"name": "options","comptime": true},{"file": 20,"line": 303,"col": 23,"name": "self"},{"file": 20,"line": 303,"col": 35,"name": "slice"},{"file": 20,"line": 314,"col": 26,"name": "self"},{"file": 20,"line": 314,"col": 38,"name": "T","comptime": true},{"file": 20,"line": 325,"col": 24,"name": "self"},{"file": 20,"line": 325,"col": 36,"name": "Enum","comptime": true},{"file": 20,"line": 325,"col": 57,"name": "endian"},{"file": 23,"line": 82,"col": 22,"name": "list"},{"file": 23,"line": 82,"col": 35,"name": "node"},{"file": 23,"line": 98,"col": 24,"name": "list"},{"file": 23,"line": 106,"col": 19,"name": "list"},{"file": 24,"line": 30,"col": 19,"name": "self"},{"file": 24,"line": 30,"col": 32,"name": "node"},{"file": 24,"line": 49,"col": 19,"name": "self"},{"file": 24,"line": 66,"col": 21,"name": "self"},{"file": 24,"line": 66,"col": 34,"name": "node"},{"file": 24,"line": 85,"col": 22,"name": "self"},{"file": 24,"line": 85,"col": 35,"name": "node"},{"file": 24,"line": 111,"col": 23,"name": "self"},{"file": 24,"line": 118,"col": 20,"name": "self"},{"file": 24,"line": 125,"col": 28,"name": "self"},{"file": 24,"line": 125,"col": 41,"name": "stream"},{"file": 23,"line": 181,"col": 27,"name": "list"},{"file": 23,"line": 181,"col": 40,"name": "node"},{"file": 23,"line": 181,"col": 53,"name": "new_node"},{"file": 23,"line": 202,"col": 28,"name": "list"},{"file": 23,"line": 202,"col": 41,"name": "node"},{"file": 23,"line": 202,"col": 54,"name": "new_node"},{"file": 23,"line": 223,"col": 30,"name": "list1"},{"file": 23,"line": 223,"col": 44,"name": "list2"},{"file": 23,"line": 244,"col": 22,"name": "list"},{"file": 23,"line": 244,"col": 35,"name": "new_node"},{"file": 23,"line": 258,"col": 23,"name": "list"},{"file": 23,"line": 258,"col": 36,"name": "new_node"},{"file": 23,"line": 277,"col": 22,"name": "list"},{"file": 23,"line": 277,"col": 35,"name": "node"},{"file": 23,"line": 302,"col": 19,"name": "list"},{"file": 23,"line": 312,"col": 24,"name": "list"},{"file": 26,"line": 12,"col": 20,"name": "value"},{"file": 26,"line": 18,"col": 29,"name": "self"},{"file": 26,"line": 24,"col": 30,"name": "self"},{"file": 26,"line": 24,"col": 43,"name": "value"},{"file": 26,"line": 28,"col": 20,"name": "self"},{"file": 26,"line": 28,"col": 39,"name": "ordering","comptime": true},{"file": 26,"line": 36,"col": 21,"name": "self"},{"file": 26,"line": 36,"col": 34,"name": "value"},{"file": 26,"line": 36,"col": 44,"name": "ordering","comptime": true},{"file": 26,"line": 44,"col": 27,"name": "self"},{"file": 26,"line": 44,"col": 40,"name": "value"},{"file": 26,"line": 44,"col": 50,"name": "ordering","comptime": true},{"file": 26,"line": 49,"col": 12,"name": "self"},{"file": 26,"line": 50,"col": 12,"name": "compare"},{"file": 26,"line": 51,"col": 12,"name": "exchange"},{"file": 26,"line": 52,"col": 12,"name": "success","comptime": true},{"file": 26,"line": 53,"col": 12,"name": "failure","comptime": true},{"file": 26,"line": 59,"col": 12,"name": "self"},{"file": 26,"line": 60,"col": 12,"name": "compare"},{"file": 26,"line": 61,"col": 12,"name": "exchange"},{"file": 26,"line": 62,"col": 12,"name": "success","comptime": true},{"file": 26,"line": 63,"col": 12,"name": "failure","comptime": true},{"file": 26,"line": 69,"col": 12,"name": "self"},{"file": 26,"line": 70,"col": 12,"name": "is_strong","comptime": true},{"file": 26,"line": 71,"col": 12,"name": "compare"},{"file": 26,"line": 72,"col": 12,"name": "exchange"},{"file": 26,"line": 73,"col": 12,"name": "success","comptime": true},{"file": 26,"line": 74,"col": 12,"name": "failure","comptime": true},{"file": 26,"line": 100,"col": 12,"name": "self"},{"file": 26,"line": 101,"col": 12,"name": "op","comptime": true},{"file": 26,"line": 102,"col": 12,"name": "value"},{"file": 26,"line": 103,"col": 12,"name": "ordering","comptime": true},{"file": 26,"line": 131,"col": 35,"name": "self"},{"file": 26,"line": 131,"col": 48,"name": "value"},{"file": 26,"line": 131,"col": 58,"name": "ordering","comptime": true},{"file": 26,"line": 135,"col": 36,"name": "self"},{"file": 26,"line": 135,"col": 49,"name": "value"},{"file": 26,"line": 135,"col": 59,"name": "ordering","comptime": true},{"file": 26,"line": 139,"col": 34,"name": "self"},{"file": 26,"line": 139,"col": 47,"name": "value"},{"file": 26,"line": 139,"col": 57,"name": "ordering","comptime": true},{"file": 26,"line": 143,"col": 35,"name": "self"},{"file": 26,"line": 143,"col": 48,"name": "value"},{"file": 26,"line": 143,"col": 58,"name": "ordering","comptime": true},{"file": 26,"line": 154,"col": 33,"name": "self"},{"file": 26,"line": 154,"col": 46,"name": "bit"},{"file": 26,"line": 154,"col": 56,"name": "ordering","comptime": true},{"file": 26,"line": 158,"col": 35,"name": "self"},{"file": 26,"line": 158,"col": 48,"name": "bit"},{"file": 26,"line": 158,"col": 58,"name": "ordering","comptime": true},{"file": 26,"line": 162,"col": 36,"name": "self"},{"file": 26,"line": 162,"col": 49,"name": "bit"},{"file": 26,"line": 162,"col": 59,"name": "ordering","comptime": true},{"file": 26,"line": 113,"col": 35,"name": "self"},{"file": 26,"line": 113,"col": 48,"name": "value"},{"file": 26,"line": 113,"col": 58,"name": "ordering","comptime": true},{"file": 26,"line": 117,"col": 35,"name": "self"},{"file": 26,"line": 117,"col": 48,"name": "value"},{"file": 26,"line": 117,"col": 58,"name": "ordering","comptime": true},{"file": 26,"line": 121,"col": 35,"name": "self"},{"file": 26,"line": 121,"col": 48,"name": "value"},{"file": 26,"line": 121,"col": 58,"name": "ordering","comptime": true},{"file": 26,"line": 125,"col": 35,"name": "self"},{"file": 26,"line": 125,"col": 48,"name": "value"},{"file": 26,"line": 125,"col": 58,"name": "ordering","comptime": true},{"file": 28,"line": 31,"col": 25,"name": "self"},{"file": 28,"line": 31,"col": 38,"name": "node"},{"file": 28,"line": 36,"col": 20,"name": "self"},{"file": 28,"line": 36,"col": 33,"name": "node"},{"file": 28,"line": 49,"col": 19,"name": "self"},{"file": 28,"line": 64,"col": 23,"name": "self"},{"file": 29,"line": 287,"col": 25,"name": "self"},{"file": 29,"line": 652,"col": 39,"name": "self"},{"file": 29,"line": 652,"col": 52,"name": "limit"},{"file": 29,"line": 315,"col": 22,"name": "size_class"},{"file": 29,"line": 382,"col": 22,"name": "self"},{"file": 29,"line": 382,"col": 35,"name": "bucket"},{"file": 29,"line": 382,"col": 58,"name": "size_class"},{"file": 29,"line": 388,"col": 32,"name": "self"},{"file": 29,"line": 442,"col": 29,"name": "first_trace_addr"},{"file": 29,"line": 442,"col": 54,"name": "addresses"},{"file": 29,"line": 452,"col": 28,"name": "ret_addr"},{"file": 29,"line": 452,"col": 45,"name": "alloc_stack_trace"},{"file": 29,"line": 452,"col": 76,"name": "free_stack_trace"},{"file": 29,"line": 464,"col": 21,"name": "self"},{"file": 29,"line": 464,"col": 34,"name": "size_class"},{"file": 29,"line": 464,"col": 53,"name": "trace_addr"},{"file": 29,"line": 499,"col": 12,"name": "bucket_list"},{"file": 29,"line": 500,"col": 12,"name": "addr"},{"file": 29,"line": 518,"col": 12,"name": "self"},{"file": 29,"line": 519,"col": 12,"name": "old_mem"},{"file": 29,"line": 520,"col": 12,"name": "old_align"},{"file": 29,"line": 521,"col": 12,"name": "new_size"},{"file": 29,"line": 522,"col": 12,"name": "len_align"},{"file": 29,"line": 523,"col": 12,"name": "ret_addr"},{"file": 29,"line": 593,"col": 12,"name": "self"},{"file": 29,"line": 594,"col": 12,"name": "old_mem"},{"file": 29,"line": 595,"col": 12,"name": "old_align"},{"file": 29,"line": 596,"col": 12,"name": "ret_addr"},{"file": 29,"line": 657,"col": 12,"name": "self"},{"file": 29,"line": 658,"col": 12,"name": "old_mem"},{"file": 29,"line": 659,"col": 12,"name": "old_align"},{"file": 29,"line": 660,"col": 12,"name": "new_size"},{"file": 29,"line": 661,"col": 12,"name": "len_align"},{"file": 29,"line": 662,"col": 12,"name": "ret_addr"},{"file": 29,"line": 744,"col": 12,"name": "self"},{"file": 29,"line": 745,"col": 12,"name": "old_mem"},{"file": 29,"line": 746,"col": 12,"name": "old_align"},{"file": 29,"line": 747,"col": 12,"name": "ret_addr"},{"file": 29,"line": 853,"col": 31,"name": "self"},{"file": 29,"line": 853,"col": 44,"name": "size"},{"file": 29,"line": 864,"col": 17,"name": "self"},{"file": 29,"line": 864,"col": 30,"name": "len"},{"file": 29,"line": 864,"col": 42,"name": "ptr_align"},{"file": 29,"line": 864,"col": 58,"name": "len_align"},{"file": 29,"line": 864,"col": 74,"name": "ret_addr"},{"file": 29,"line": 909,"col": 24,"name": "self"},{"file": 29,"line": 909,"col": 37,"name": "size_class"},{"file": 29,"line": 909,"col": 56,"name": "bucket_index"},{"file": 29,"line": 220,"col": 30,"name": "self"},{"file": 29,"line": 220,"col": 49,"name": "trace_kind"},{"file": 29,"line": 237,"col": 33,"name": "self"},{"file": 29,"line": 237,"col": 52,"name": "ret_addr"},{"file": 29,"line": 237,"col": 69,"name": "trace_kind"},{"file": 31,"line": 743,"col": 31,"name": "self"},{"file": 31,"line": 752,"col": 19,"name": "self"},{"file": 31,"line": 752,"col": 48,"name": "ptr"},{"file": 31,"line": 844,"col": 17,"name": "self"},{"file": 31,"line": 828,"col": 23,"name": "self"},{"file": 31,"line": 828,"col": 52,"name": "n"},{"file": 31,"line": 828,"col": 62,"name": "ptr_align"},{"file": 31,"line": 828,"col": 78,"name": "len_align"},{"file": 31,"line": 828,"col": 94,"name": "ra"},{"file": 32,"line": 195,"col": 12,"name": "format","comptime": true},{"file": 32,"line": 196,"col": 12,"name": "args"},{"file": 32,"line": 206,"col": 12,"name": "format","comptime": true},{"file": 32,"line": 207,"col": 12,"name": "args"},{"file": 32,"line": 215,"col": 12,"name": "format","comptime": true},{"file": 32,"line": 216,"col": 12,"name": "args"},{"file": 34,"line": 462,"col": 21,"name": "self"},{"file": 34,"line": 473,"col": 19,"name": "self"},{"file": 34,"line": 473,"col": 31,"name": "key"},{"file": 34,"line": 480,"col": 33,"name": "self"},{"file": 34,"line": 480,"col": 45,"name": "key"},{"file": 34,"line": 488,"col": 22,"name": "self"},{"file": 34,"line": 488,"col": 35,"name": "key"},{"file": 34,"line": 495,"col": 27,"name": "self"},{"file": 34,"line": 495,"col": 46,"name": "key"},{"file": 34,"line": 502,"col": 36,"name": "self"},{"file": 34,"line": 502,"col": 49,"name": "key"},{"file": 34,"line": 520,"col": 32,"name": "self"},{"file": 34,"line": 520,"col": 45,"name": "key"},{"file": 34,"line": 530,"col": 24,"name": "self"},{"file": 34,"line": 530,"col": 37,"name": "key"},{"file": 34,"line": 530,"col": 47,"name": "value"},{"file": 34,"line": 548,"col": 27,"name": "self"},{"file": 34,"line": 548,"col": 40,"name": "key"},{"file": 34,"line": 559,"col": 24,"name": "self"},{"file": 34,"line": 243,"col": 28,"name": "init_values"},{"file": 34,"line": 258,"col": 32,"name": "value"},{"file": 34,"line": 268,"col": 36,"name": "init_values"},{"file": 34,"line": 273,"col": 43,"name": "default","comptime": true},{"file": 34,"line": 273,"col": 65,"name": "init_values"},{"file": 35,"line": 79,"col": 31,"name": "self"},{"file": 35,"line": 92,"col": 21,"name": "self"},{"file": 35,"line": 98,"col": 24,"name": "self"},{"file": 35,"line": 98,"col": 37,"name": "index"},{"file": 35,"line": 98,"col": 51,"name": "value"},{"file": 35,"line": 121,"col": 22,"name": "self"},{"file": 35,"line": 121,"col": 35,"name": "index"},{"file": 35,"line": 128,"col": 25,"name": "self"},{"file": 35,"line": 128,"col": 38,"name": "toggles"},{"file": 35,"line": 133,"col": 25,"name": "self"},{"file": 35,"line": 140,"col": 24,"name": "self"},{"file": 35,"line": 140,"col": 37,"name": "other"},{"file": 35,"line": 147,"col": 31,"name": "self"},{"file": 35,"line": 147,"col": 44,"name": "other"},{"file": 35,"line": 153,"col": 28,"name": "self"},{"file": 35,"line": 161,"col": 30,"name": "self"},{"file": 35,"line": 173,"col": 24,"name": "self"},{"file": 35,"line": 173,"col": 43,"name": "options","comptime": true},{"file": 35,"line": 182,"col": 24,"name": "options","comptime": true},{"file": 35,"line": 186,"col": 30,"name": "direction","comptime": true},{"file": 35,"line": 218,"col": 23,"name": "index"},{"file": 35,"line": 218,"col": 37,"name": "value"},{"file": 17,"line": 459,"col": 28,"name": "allocator"},{"file": 17,"line": 459,"col": 50,"name": "num"},{"file": 17,"line": 473,"col": 25,"name": "self"},{"file": 17,"line": 473,"col": 38,"name": "allocator"},{"file": 17,"line": 478,"col": 28,"name": "self"},{"file": 17,"line": 478,"col": 41,"name": "allocator"},{"file": 17,"line": 485,"col": 36,"name": "self"},{"file": 17,"line": 485,"col": 49,"name": "allocator"},{"file": 17,"line": 485,"col": 71,"name": "sentinel","comptime": true},{"file": 17,"line": 494,"col": 22,"name": "self"},{"file": 17,"line": 494,"col": 35,"name": "allocator"},{"file": 17,"line": 494,"col": 57,"name": "n"},{"file": 17,"line": 494,"col": 67,"name": "item"},{"file": 17,"line": 505,"col": 27,"name": "self"},{"file": 17,"line": 505,"col": 40,"name": "allocator"},{"file": 17,"line": 505,"col": 62,"name": "i"},{"file": 17,"line": 505,"col": 72,"name": "items"},{"file": 17,"line": 517,"col": 28,"name": "self"},{"file": 17,"line": 517,"col": 41,"name": "allocator"},{"file": 17,"line": 517,"col": 63,"name": "start"},{"file": 17,"line": 517,"col": 77,"name": "len"},{"file": 17,"line": 517,"col": 89,"name": "new_items"},{"file": 17,"line": 531,"col": 36,"name": "self"},{"file": 17,"line": 531,"col": 49,"name": "item"},{"file": 17,"line": 540,"col": 29,"name": "self"},{"file": 17,"line": 540,"col": 42,"name": "i"},{"file": 17,"line": 555,"col": 26,"name": "self"},{"file": 17,"line": 555,"col": 39,"name": "i"},{"file": 17,"line": 565,"col": 27,"name": "self"},{"file": 17,"line": 565,"col": 40,"name": "allocator"},{"file": 17,"line": 565,"col": 62,"name": "items"},{"file": 17,"line": 572,"col": 41,"name": "self"},{"file": 17,"line": 572,"col": 54,"name": "items"},{"file": 17,"line": 592,"col": 22,"name": "self"},{"file": 17,"line": 592,"col": 35,"name": "allocator"},{"file": 17,"line": 605,"col": 28,"name": "self"},{"file": 17,"line": 605,"col": 41,"name": "allocator"},{"file": 17,"line": 605,"col": 63,"name": "value"},{"file": 17,"line": 605,"col": 73,"name": "n"},{"file": 17,"line": 614,"col": 42,"name": "self"},{"file": 17,"line": 614,"col": 55,"name": "value"},{"file": 17,"line": 614,"col": 65,"name": "n"},{"file": 17,"line": 623,"col": 22,"name": "self"},{"file": 17,"line": 623,"col": 35,"name": "allocator"},{"file": 17,"line": 623,"col": 57,"name": "new_len"},{"file": 17,"line": 629,"col": 29,"name": "self"},{"file": 17,"line": 629,"col": 42,"name": "allocator"},{"file": 17,"line": 629,"col": 64,"name": "new_len"},{"file": 17,"line": 644,"col": 39,"name": "self"},{"file": 17,"line": 644,"col": 52,"name": "new_len"},{"file": 17,"line": 650,"col": 38,"name": "self"},{"file": 17,"line": 655,"col": 28,"name": "self"},{"file": 17,"line": 655,"col": 41,"name": "allocator"},{"file": 17,"line": 692,"col": 12,"name": "self"},{"file": 17,"line": 693,"col": 12,"name": "allocator"},{"file": 17,"line": 694,"col": 12,"name": "additional_count"},{"file": 17,"line": 702,"col": 32,"name": "self"},{"file": 17,"line": 728,"col": 30,"name": "self"},{"file": 17,"line": 728,"col": 43,"name": "allocator"},{"file": 17,"line": 728,"col": 65,"name": "n","comptime": true},{"file": 17,"line": 739,"col": 44,"name": "self"},{"file": 17,"line": 739,"col": 57,"name": "n","comptime": true},{"file": 17,"line": 749,"col": 19,"name": "self"},{"file": 17,"line": 758,"col": 25,"name": "self"},{"file": 17,"line": 598,"col": 23,"name": "context"},{"file": 17,"line": 598,"col": 47,"name": "m"},{"file": 26,"line": 167,"col": 16,"name": "self"},{"file": 26,"line": 168,"col": 16,"name": "op","comptime": true},{"file": 26,"line": 169,"col": 16,"name": "bit"},{"file": 26,"line": 170,"col": 16,"name": "ordering","comptime": true},{"file": 38,"line": 82,"col": 22,"name": "self"},{"file": 38,"line": 86,"col": 23,"name": "self"},{"file": 38,"line": 111,"col": 22,"name": "self"},{"file": 38,"line": 111,"col": 35,"name": "size"},{"file": 38,"line": 124,"col": 35,"name": "self"},{"file": 38,"line": 124,"col": 48,"name": "size"},{"file": 38,"line": 136,"col": 36,"name": "self"},{"file": 38,"line": 136,"col": 49,"name": "size"},{"file": 38,"line": 143,"col": 30,"name": "self"},{"file": 38,"line": 199,"col": 24,"name": "self"},{"file": 38,"line": 208,"col": 20,"name": "self"},{"file": 38,"line": 208,"col": 33,"name": "dst"},{"file": 38,"line": 229,"col": 22,"name": "self"},{"file": 38,"line": 253,"col": 32,"name": "self"},{"file": 38,"line": 253,"col": 45,"name": "size"},{"file": 38,"line": 288,"col": 25,"name": "self"},{"file": 38,"line": 288,"col": 38,"name": "item"},{"file": 38,"line": 293,"col": 39,"name": "self"},{"file": 38,"line": 293,"col": 52,"name": "item"},{"file": 38,"line": 306,"col": 21,"name": "self"},{"file": 38,"line": 306,"col": 34,"name": "src"},{"file": 38,"line": 319,"col": 22,"name": "self"},{"file": 38,"line": 338,"col": 21,"name": "self"},{"file": 38,"line": 338,"col": 34,"name": "src"},{"file": 38,"line": 355,"col": 24,"name": "self"},{"file": 38,"line": 355,"col": 36,"name": "offset"},{"file": 38,"line": 370,"col": 20,"name": "self"},{"file": 38,"line": 370,"col": 33,"name": "src_reader"},{"file": 38,"line": 370,"col": 54,"name": "dest_writer"},{"file": 38,"line": 225,"col": 18,"name": "self"},{"file": 38,"line": 225,"col": 31,"name": "dest"},{"file": 38,"line": 314,"col": 23,"name": "self"},{"file": 38,"line": 314,"col": 36,"name": "bytes"},{"file": 38,"line": 324,"col": 18,"name": "self"},{"file": 38,"line": 324,"col": 31,"name": "count"},{"file": 36,"line": 1804,"col": 20,"name": "self"},{"file": 36,"line": 1767,"col": 21,"name": "self"},{"file": 9,"line": 97,"col": 16,"name": "AllocatorType","comptime": true},{"file": 9,"line": 117,"col": 16,"name": "AllocatorType","comptime": true},{"file": 9,"line": 134,"col": 17,"name": "AllocatorType","comptime": true},{"file": 9,"line": 197,"col": 4,"name": "self"},{"file": 9,"line": 198,"col": 4,"name": "Elem","comptime": true},{"file": 9,"line": 199,"col": 4,"name": "n"},{"file": 9,"line": 201,"col": 4,"docs": " null means naturally aligned","name": "optional_alignment","comptime": true},{"file": 9,"line": 202,"col": 4,"name": "optional_sentinel","comptime": true},{"file": 9,"line": 208,"col": 4,"name": "self"},{"file": 9,"line": 209,"col": 4,"name": "Elem","comptime": true},{"file": 9,"line": 210,"col": 4,"name": "n"},{"file": 9,"line": 212,"col": 4,"docs": " null means naturally aligned","name": "optional_alignment","comptime": true},{"file": 9,"line": 213,"col": 4,"name": "optional_sentinel","comptime": true},{"file": 9,"line": 214,"col": 4,"name": "return_address"},{"file": 9,"line": 242,"col": 4,"name": "self"},{"file": 9,"line": 243,"col": 4,"name": "Elem","comptime": true},{"file": 9,"line": 244,"col": 4,"name": "n"},{"file": 9,"line": 245,"col": 4,"name": "sentinel","comptime": true},{"file": 9,"line": 261,"col": 4,"name": "self"},{"file": 9,"line": 262,"col": 4,"name": "T","comptime": true},{"file": 9,"line": 264,"col": 4,"docs": " null means naturally aligned","name": "alignment","comptime": true},{"file": 9,"line": 265,"col": 4,"name": "n"},{"file": 9,"line": 266,"col": 4,"name": "exact"},{"file": 9,"line": 341,"col": 15,"name": "self"},{"file": 9,"line": 341,"col": 32,"name": "old_mem"},{"file": 9,"line": 341,"col": 50,"name": "new_n"},{"file": 9,"line": 361,"col": 4,"name": "self"},{"file": 9,"line": 362,"col": 4,"name": "old_mem"},{"file": 9,"line": 363,"col": 4,"name": "new_alignment","comptime": true},{"file": 9,"line": 364,"col": 4,"name": "new_n"},{"file": 9,"line": 365,"col": 4,"name": "exact"},{"file": 9,"line": 439,"col": 4,"name": "self"},{"file": 9,"line": 440,"col": 4,"name": "old_mem"},{"file": 9,"line": 441,"col": 4,"name": "new_alignment","comptime": true},{"file": 9,"line": 442,"col": 4,"name": "new_n"},{"file": 9,"line": 512,"col": 4,"name": "self"},{"file": 9,"line": 516,"col": 4,"docs": " Must be >= 1. Must be a power of 2. Returned slice's pointer will have this alignment.","name": "alignment"},{"file": 9,"line": 517,"col": 4,"name": "byte_count"},{"file": 9,"line": 521,"col": 4,"docs": " 0 indicates the length of the slice returned MUST match `byte_count` exactly non-zero means the length of the returned slice must be aligned by `len_align` `byte_count` must be aligned by `len_align`","name": "len_align"},{"file": 9,"line": 522,"col": 4,"name": "return_address"},{"file": 9,"line": 603,"col": 4,"name": "self"},{"file": 9,"line": 606,"col": 4,"docs": " Must be the same as what was returned from most recent call to `allocFn` or `resizeFn`. If `old_mem.len == 0` then this is a new allocation and `new_byte_count` must be >= 1.","name": "old_mem"},{"file": 9,"line": 611,"col": 4,"docs": " If `old_mem.len == 0` then this is `undefined`, otherwise: Must be the same as what was passed to `allocFn`. Must be >= 1. Must be a power of 2.","name": "old_alignment"},{"file": 9,"line": 613,"col": 4,"docs": " If `new_byte_count` is 0 then this is a free and it is required that `old_mem.len != 0`.","name": "new_byte_count"},{"file": 9,"line": 617,"col": 4,"docs": " Must be >= 1. Must be a power of 2. Returned slice's pointer will have this alignment.","name": "new_alignment"},{"file": 9,"line": 621,"col": 4,"docs": " 0 indicates the length of the slice returned MUST match `new_byte_count` exactly non-zero means the length of the returned slice must be aligned by `len_align` `new_byte_count` must be aligned by `len_align`","name": "len_align"},{"file": 9,"line": 622,"col": 4,"name": "return_address"},{"file": 9,"line": 225,"col": 27,"name": "Elem","comptime": true},{"file": 9,"line": 225,"col": 48,"name": "alignment","comptime": true},{"file": 9,"line": 225,"col": 74,"name": "sentinel","comptime": true},{"file": 48,"line": 779,"col": 19,"name": "self"},{"file": 48,"line": 902,"col": 16,"name": "self"},{"file": 48,"line": 902,"col": 27,"name": "allocator"},{"file": 48,"line": 935,"col": 17,"name": "self"},{"file": 48,"line": 961,"col": 24,"name": "self"},{"file": 48,"line": 961,"col": 35,"name": "sub_path"},{"file": 48,"line": 961,"col": 57,"name": "flags"},{"file": 48,"line": 1066,"col": 21,"name": "self"},{"file": 48,"line": 1066,"col": 32,"name": "sub_path_w"},{"file": 48,"line": 1066,"col": 57,"name": "flags"},{"file": 48,"line": 1106,"col": 22,"name": "self"},{"file": 48,"line": 1106,"col": 33,"name": "sub_path"},{"file": 48,"line": 1106,"col": 55,"name": "flags"},{"file": 48,"line": 1119,"col": 26,"name": "self"},{"file": 48,"line": 1119,"col": 37,"name": "sub_path"},{"file": 48,"line": 1119,"col": 59,"name": "flags"},{"file": 48,"line": 1147,"col": 23,"name": "self"},{"file": 48,"line": 1147,"col": 34,"name": "sub_path_c"},{"file": 48,"line": 1147,"col": 61,"name": "flags"},{"file": 48,"line": 1218,"col": 23,"name": "self"},{"file": 48,"line": 1218,"col": 34,"name": "sub_path_w"},{"file": 48,"line": 1218,"col": 59,"name": "flags"},{"file": 48,"line": 1259,"col": 19,"name": "self"},{"file": 48,"line": 1259,"col": 30,"name": "sub_path"},{"file": 48,"line": 1263,"col": 20,"name": "self"},{"file": 48,"line": 1263,"col": 31,"name": "sub_path"},{"file": 48,"line": 1267,"col": 20,"name": "self"},{"file": 48,"line": 1267,"col": 31,"name": "sub_path"},{"file": 48,"line": 1275,"col": 20,"name": "self"},{"file": 48,"line": 1275,"col": 31,"name": "sub_path"},{"file": 48,"line": 1308,"col": 24,"name": "self"},{"file": 48,"line": 1308,"col": 35,"name": "sub_path"},{"file": 48,"line": 1308,"col": 57,"name": "open_dir_options"},{"file": 48,"line": 1321,"col": 20,"name": "self"},{"file": 48,"line": 1321,"col": 31,"name": "pathname"},{"file": 48,"line": 1321,"col": 53,"name": "out_buffer"},{"file": 48,"line": 1335,"col": 21,"name": "self"},{"file": 48,"line": 1335,"col": 32,"name": "pathname"},{"file": 48,"line": 1335,"col": 57,"name": "out_buffer"},{"file": 48,"line": 1368,"col": 21,"name": "self"},{"file": 48,"line": 1368,"col": 32,"name": "pathname"},{"file": 48,"line": 1368,"col": 55,"name": "out_buffer"},{"file": 48,"line": 1420,"col": 25,"name": "self"},{"file": 48,"line": 1420,"col": 36,"name": "allocator"},{"file": 48,"line": 1420,"col": 58,"name": "pathname"},{"file": 48,"line": 1438,"col": 20,"name": "self"},{"file": 48,"line": 1463,"col": 19,"name": "self"},{"file": 48,"line": 1463,"col": 30,"name": "sub_path"},{"file": 48,"line": 1463,"col": 52,"name": "args"},{"file": 48,"line": 1476,"col": 23,"name": "self"},{"file": 48,"line": 1476,"col": 34,"name": "sub_path"},{"file": 48,"line": 1476,"col": 56,"name": "args"},{"file": 48,"line": 1515,"col": 20,"name": "self"},{"file": 48,"line": 1515,"col": 31,"name": "sub_path_c"},{"file": 48,"line": 1515,"col": 58,"name": "args"},{"file": 48,"line": 1531,"col": 20,"name": "self"},{"file": 48,"line": 1531,"col": 31,"name": "sub_path_w"},{"file": 48,"line": 1531,"col": 59,"name": "args"},{"file": 48,"line": 1610,"col": 22,"name": "self"},{"file": 48,"line": 1610,"col": 33,"name": "sub_path"},{"file": 48,"line": 1626,"col": 23,"name": "self"},{"file": 48,"line": 1626,"col": 34,"name": "sub_path_c"},{"file": 48,"line": 1645,"col": 23,"name": "self"},{"file": 48,"line": 1645,"col": 34,"name": "sub_path_w"},{"file": 48,"line": 1671,"col": 21,"name": "self"},{"file": 48,"line": 1671,"col": 32,"name": "sub_path"},{"file": 48,"line": 1687,"col": 22,"name": "self"},{"file": 48,"line": 1687,"col": 33,"name": "sub_path_c"},{"file": 48,"line": 1696,"col": 22,"name": "self"},{"file": 48,"line": 1696,"col": 33,"name": "sub_path_w"},{"file": 48,"line": 1709,"col": 18,"name": "self"},{"file": 48,"line": 1709,"col": 29,"name": "old_sub_path"},{"file": 48,"line": 1709,"col": 55,"name": "new_sub_path"},{"file": 48,"line": 1714,"col": 19,"name": "self"},{"file": 48,"line": 1714,"col": 30,"name": "old_sub_path_z"},{"file": 48,"line": 1714,"col": 61,"name": "new_sub_path_z"},{"file": 48,"line": 1720,"col": 19,"name": "self"},{"file": 48,"line": 1720,"col": 30,"name": "old_sub_path_w"},{"file": 48,"line": 1720,"col": 59,"name": "new_sub_path_w"},{"file": 48,"line": 1729,"col": 8,"name": "self"},{"file": 48,"line": 1730,"col": 8,"name": "target_path"},{"file": 48,"line": 1731,"col": 8,"name": "sym_link_path"},{"file": 48,"line": 1732,"col": 8,"name": "flags"},{"file": 48,"line": 1749,"col": 8,"name": "self"},{"file": 48,"line": 1750,"col": 8,"name": "target_path"},{"file": 48,"line": 1751,"col": 8,"name": "sym_link_path"},{"file": 48,"line": 1752,"col": 8,"name": "_"},{"file": 48,"line": 1759,"col": 8,"name": "self"},{"file": 48,"line": 1760,"col": 8,"name": "target_path_c"},{"file": 48,"line": 1761,"col": 8,"name": "sym_link_path_c"},{"file": 48,"line": 1762,"col": 8,"name": "flags"},{"file": 48,"line": 1775,"col": 8,"name": "self"},{"file": 48,"line": 1776,"col": 8,"name": "target_path_w"},{"file": 48,"line": 1777,"col": 8,"name": "sym_link_path_w"},{"file": 48,"line": 1778,"col": 8,"name": "flags"},{"file": 48,"line": 1786,"col": 20,"name": "self"},{"file": 48,"line": 1786,"col": 31,"name": "sub_path"},{"file": 48,"line": 1786,"col": 53,"name": "buffer"},{"file": 48,"line": 1799,"col": 24,"name": "self"},{"file": 48,"line": 1799,"col": 35,"name": "sub_path"},{"file": 48,"line": 1799,"col": 57,"name": "buffer"},{"file": 48,"line": 1804,"col": 21,"name": "self"},{"file": 48,"line": 1804,"col": 32,"name": "sub_path_c"},{"file": 48,"line": 1804,"col": 59,"name": "buffer"},{"file": 48,"line": 1814,"col": 21,"name": "self"},{"file": 48,"line": 1814,"col": 32,"name": "sub_path_w"},{"file": 48,"line": 1814,"col": 57,"name": "buffer"},{"file": 48,"line": 1823,"col": 20,"name": "self"},{"file": 48,"line": 1823,"col": 31,"name": "file_path"},{"file": 48,"line": 1823,"col": 54,"name": "buffer"},{"file": 48,"line": 1833,"col": 25,"name": "self"},{"file": 48,"line": 1833,"col": 36,"name": "allocator"},{"file": 48,"line": 1833,"col": 62,"name": "file_path"},{"file": 48,"line": 1833,"col": 85,"name": "max_bytes"},{"file": 48,"line": 1843,"col": 8,"name": "self"},{"file": 48,"line": 1844,"col": 8,"name": "allocator"},{"file": 48,"line": 1845,"col": 8,"name": "file_path"},{"file": 48,"line": 1846,"col": 8,"name": "max_bytes"},{"file": 48,"line": 1847,"col": 8,"name": "size_hint"},{"file": 48,"line": 1848,"col": 8,"name": "alignment","comptime": true},{"file": 48,"line": 1849,"col": 8,"name": "optional_sentinel","comptime": true},{"file": 48,"line": 1892,"col": 22,"name": "self"},{"file": 48,"line": 1892,"col": 33,"name": "sub_path"},{"file": 48,"line": 2041,"col": 21,"name": "self"},{"file": 48,"line": 2041,"col": 32,"name": "sub_path"},{"file": 48,"line": 2041,"col": 54,"name": "data"},{"file": 48,"line": 2054,"col": 18,"name": "self"},{"file": 48,"line": 2054,"col": 29,"name": "sub_path"},{"file": 48,"line": 2054,"col": 51,"name": "flags"},{"file": 48,"line": 2064,"col": 19,"name": "self"},{"file": 48,"line": 2064,"col": 30,"name": "sub_path"},{"file": 48,"line": 2064,"col": 55,"name": "flags"},{"file": 48,"line": 2087,"col": 19,"name": "self"},{"file": 48,"line": 2087,"col": 30,"name": "sub_path_w"},{"file": 48,"line": 2087,"col": 58,"name": "flags"},{"file": 48,"line": 2098,"col": 8,"name": "source_dir"},{"file": 48,"line": 2099,"col": 8,"name": "source_path"},{"file": 48,"line": 2100,"col": 8,"name": "dest_dir"},{"file": 48,"line": 2101,"col": 8,"name": "dest_path"},{"file": 48,"line": 2102,"col": 8,"name": "options"},{"file": 48,"line": 2146,"col": 8,"name": "source_dir"},{"file": 48,"line": 2147,"col": 8,"name": "source_path"},{"file": 48,"line": 2148,"col": 8,"name": "dest_dir"},{"file": 48,"line": 2149,"col": 8,"name": "dest_path"},{"file": 48,"line": 2150,"col": 8,"name": "options"},{"file": 48,"line": 2177,"col": 22,"name": "self"},{"file": 48,"line": 2177,"col": 33,"name": "dest_path"},{"file": 48,"line": 2177,"col": 56,"name": "options"},{"file": 48,"line": 2189,"col": 16,"name": "self"},{"file": 48,"line": 2200,"col": 20,"name": "self"},{"file": 48,"line": 2200,"col": 31,"name": "sub_path"},{"file": 48,"line": 2214,"col": 17,"name": "self"},{"file": 48,"line": 2214,"col": 28,"name": "new_mode"},{"file": 48,"line": 2228,"col": 17,"name": "self"},{"file": 48,"line": 2228,"col": 28,"name": "owner"},{"file": 48,"line": 2228,"col": 46,"name": "group"},{"file": 48,"line": 1541,"col": 21,"name": "self"},{"file": 48,"line": 1541,"col": 32,"name": "sub_path_c"},{"file": 48,"line": 1541,"col": 59,"name": "flags"},{"file": 48,"line": 1559,"col": 26,"name": "self"},{"file": 48,"line": 1559,"col": 37,"name": "sub_path_w"},{"file": 48,"line": 1559,"col": 65,"name": "access_mask"},{"file": 48,"line": 1559,"col": 83,"name": "no_follow"},{"file": 16,"line": 778,"col": 26,"name": "self"},{"file": 43,"line": 1065,"col": 18,"name": "self"},{"file": 43,"line": 1082,"col": 24,"name": "self"},{"file": 43,"line": 1082,"col": 42,"name": "address"},{"file": 43,"line": 1139,"col": 25,"name": "self"},{"file": 43,"line": 1139,"col": 43,"name": "address"},{"file": 43,"line": 1287,"col": 25,"name": "self"},{"file": 43,"line": 1287,"col": 43,"name": "address"},{"file": 39,"line": 126,"col": 34,"name": "self"},{"file": 39,"line": 126,"col": 47,"name": "count"},{"file": 39,"line": 131,"col": 29,"name": "self"},{"file": 39,"line": 131,"col": 42,"name": "completed_items"},{"file": 55,"line": 465,"col": 29,"name": "allocator"},{"file": 55,"line": 485,"col": 21,"name": "self"},{"file": 55,"line": 490,"col": 20,"name": "self"},{"file": 55,"line": 496,"col": 16,"name": "self"},{"file": 58,"line": 211,"col": 17,"name": "self"},{"file": 58,"line": 216,"col": 15,"name": "self"},{"file": 55,"line": 220,"col": 16,"name": "self"},{"file": 16,"line": 70,"col": 30,"name": "V","comptime": true},{"file": 13,"line": 356,"col": 31,"name": "self"},{"file": 13,"line": 378,"col": 25,"name": "self"},{"file": 13,"line": 378,"col": 35,"name": "tag","comptime": true},{"file": 13,"line": 378,"col": 54,"name": "version"},{"file": 13,"line": 391,"col": 28,"name": "os"},{"file": 13,"line": 484,"col": 23,"name": "arch"},{"file": 13,"line": 484,"col": 39,"name": "target_os"},{"file": 13,"line": 537,"col": 21,"name": "abi"},{"file": 13,"line": 544,"col": 22,"name": "abi"},{"file": 13,"line": 551,"col": 24,"name": "abi"},{"file": 13,"line": 582,"col": 23,"name": "of"},{"file": 13,"line": 582,"col": 41,"name": "cpu_arch"},{"file": 13,"line": 1315,"col": 24,"name": "arch"},{"file": 23,"line": 29,"col": 31,"name": "node"},{"file": 23,"line": 29,"col": 44,"name": "new_node"},{"file": 23,"line": 40,"col": 30,"name": "node"},{"file": 23,"line": 48,"col": 28,"name": "node"},{"file": 23,"line": 57,"col": 33,"name": "node"},{"file": 24,"line": 242,"col": 13,"name": "ctx"},{"file": 24,"line": 261,"col": 13,"name": "ctx"},{"file": 25,"line": 279,"col": 10,"name": "ctx"},{"file": 27,"line": 1717,"col": 18,"name": "h"},{"file": 27,"line": 1717,"col": 36,"name": "did_it"},{"file": 27,"line": 1772,"col": 13,"name": "wait_ns"},{"file": 27,"line": 1772,"col": 27,"name": "sleep_count"},{"file": 28,"line": 147,"col": 13,"name": "ctx"},{"file": 28,"line": 165,"col": 13,"name": "ctx"},{"file": 29,"line": 274,"col": 16,"name": "bucket"},{"file": 29,"line": 275,"col": 16,"name": "ret_addr"},{"file": 29,"line": 276,"col": 16,"name": "size_class"},{"file": 29,"line": 277,"col": 16,"name": "slot_index"},{"file": 29,"line": 278,"col": 16,"name": "trace_kind"},{"file": 30,"line": 64,"col": 16,"name": "number"},{"file": 30,"line": 64,"col": 29,"name": "arg1"},{"file": 30,"line": 64,"col": 42,"name": "arg2"},{"file": 30,"line": 64,"col": 55,"name": "arg3"},{"file": 30,"line": 64,"col": 68,"name": "arg4"},{"file": 30,"line": 64,"col": 81,"name": "arg5"},{"file": 30,"line": 101,"col": 4,"name": "func"},{"file": 30,"line": 102,"col": 4,"name": "stack"},{"file": 30,"line": 103,"col": 4,"name": "flags"},{"file": 30,"line": 104,"col": 4,"name": "arg"},{"file": 30,"line": 105,"col": 4,"name": "ptid"},{"file": 30,"line": 106,"col": 4,"name": "tls"},{"file": 30,"line": 107,"col": 4,"name": "ctid"},{"file": 31,"line": 851,"col": 21,"name": "size","comptime": true},{"file": 31,"line": 851,"col": 43,"name": "fallback_allocator"},{"file": 31,"line": 859,"col": 30,"name": "size","comptime": true},{"file": 31,"line": 1099,"col": 21,"name": "base_allocator"},{"file": 31,"line": 1145,"col": 28,"name": "base_allocator"},{"file": 31,"line": 1175,"col": 35,"name": "base_allocator"},{"file": 31,"line": 1207,"col": 34,"name": "base_allocator"},{"file": 31,"line": 187,"col": 4,"name": "_"},{"file": 31,"line": 188,"col": 4,"name": "len"},{"file": 31,"line": 189,"col": 4,"name": "ptr_align"},{"file": 31,"line": 190,"col": 4,"name": "len_align"},{"file": 31,"line": 191,"col": 4,"name": "ret_addr"},{"file": 31,"line": 201,"col": 4,"name": "_"},{"file": 31,"line": 202,"col": 4,"name": "buf"},{"file": 31,"line": 203,"col": 4,"name": "old_align"},{"file": 31,"line": 204,"col": 4,"name": "new_len"},{"file": 31,"line": 205,"col": 4,"name": "len_align"},{"file": 31,"line": 206,"col": 4,"name": "ret_addr"},{"file": 31,"line": 217,"col": 4,"name": "_"},{"file": 31,"line": 218,"col": 4,"name": "buf"},{"file": 31,"line": 219,"col": 4,"name": "old_align"},{"file": 31,"line": 220,"col": 4,"name": "ret_addr"},{"file": 31,"line": 715,"col": 20,"name": "container"},{"file": 31,"line": 715,"col": 37,"name": "ptr"},{"file": 32,"line": 153,"col": 4,"name": "message_level","comptime": true},{"file": 32,"line": 154,"col": 4,"name": "scope","comptime": true},{"file": 32,"line": 155,"col": 4,"name": "format","comptime": true},{"file": 32,"line": 156,"col": 4,"name": "args"},{"file": 34,"line": 11,"col": 23,"name": "E","comptime": true},{"file": 34,"line": 11,"col": 41,"name": "Data","comptime": true},{"file": 34,"line": 11,"col": 62,"name": "field_default","comptime": true},{"file": 34,"line": 34,"col": 24,"name": "E","comptime": true},{"file": 34,"line": 34,"col": 42,"name": "fields","comptime": true},{"file": 34,"line": 46,"col": 14,"name": "E","comptime": true},{"file": 34,"line": 98,"col": 4,"name": "E","comptime": true},{"file": 34,"line": 99,"col": 4,"name": "Data","comptime": true},{"file": 34,"line": 100,"col": 4,"name": "max_unused_slots","comptime": true},{"file": 34,"line": 101,"col": 4,"name": "init_values"},{"file": 34,"line": 132,"col": 4,"name": "E","comptime": true},{"file": 34,"line": 133,"col": 4,"name": "Data","comptime": true},{"file": 34,"line": 134,"col": 4,"name": "default","comptime": true},{"file": 34,"line": 135,"col": 4,"name": "max_unused_slots","comptime": true},{"file": 34,"line": 136,"col": 4,"name": "init_values"},{"file": 34,"line": 164,"col": 16,"name": "E","comptime": true},{"file": 34,"line": 164,"col": 34,"name": "value","comptime": true},{"file": 34,"line": 209,"col": 15,"name": "E","comptime": true},{"file": 34,"line": 296,"col": 17,"name": "E","comptime": true},{"file": 34,"line": 296,"col": 35,"name": "V","comptime": true},{"file": 34,"line": 329,"col": 19,"name": "Self","comptime": true},{"file": 34,"line": 338,"col": 18,"name": "I","comptime": true},{"file": 34,"line": 338,"col": 36,"name": "Ext","comptime": true},{"file": 34,"line": 597,"col": 20,"name": "I","comptime": true},{"file": 34,"line": 597,"col": 38,"name": "V","comptime": true},{"file": 34,"line": 597,"col": 56,"name": "Ext","comptime": true},{"file": 34,"line": 59,"col": 22,"name": "E","comptime": true},{"file": 34,"line": 59,"col": 40,"name": "max_unused_slots","comptime": true},{"file": 35,"line": 228,"col": 19,"name": "MaskIntType","comptime": true},{"file": 35,"line": 228,"col": 47,"name": "size","comptime": true},{"file": 35,"line": 899,"col": 18,"name": "MaskInt","comptime": true},{"file": 35,"line": 899,"col": 42,"name": "options","comptime": true},{"file": 35,"line": 996,"col": 14,"name": "a"},{"file": 35,"line": 996,"col": 26,"name": "b"},{"file": 35,"line": 996,"col": 38,"name": "len"},{"file": 35,"line": 1148,"col": 20,"name": "Set","comptime": true},{"file": 36,"line": 36,"col": 27,"name": "T","comptime": true},{"file": 36,"line": 127,"col": 22,"name": "allocator"},{"file": 36,"line": 226,"col": 21,"name": "T","comptime": true},{"file": 36,"line": 226,"col": 39,"name": "dest"},{"file": 36,"line": 226,"col": 50,"name": "source"},{"file": 36,"line": 424,"col": 16,"name": "T","comptime": true},{"file": 36,"line": 424,"col": 34,"name": "init"},{"file": 36,"line": 518,"col": 13,"name": "T","comptime": true},{"file": 36,"line": 518,"col": 31,"name": "lhs"},{"file": 36,"line": 518,"col": 47,"name": "rhs"},{"file": 36,"line": 540,"col": 16,"name": "T","comptime": true},{"file": 36,"line": 540,"col": 34,"name": "lhs"},{"file": 36,"line": 540,"col": 50,"name": "rhs"},{"file": 36,"line": 564,"col": 19,"name": "T","comptime": true},{"file": 36,"line": 564,"col": 37,"name": "a"},{"file": 36,"line": 564,"col": 51,"name": "b"},{"file": 36,"line": 926,"col": 16,"name": "T","comptime": true},{"file": 36,"line": 926,"col": 34,"name": "slice"},{"file": 36,"line": 926,"col": 52,"name": "scalar"},{"file": 36,"line": 944,"col": 17,"name": "T","comptime": true},{"file": 36,"line": 944,"col": 35,"name": "slice"},{"file": 36,"line": 944,"col": 53,"name": "values_to_strip"},{"file": 36,"line": 951,"col": 12,"name": "T","comptime": true},{"file": 36,"line": 951,"col": 30,"name": "slice"},{"file": 36,"line": 951,"col": 48,"name": "values_to_strip"},{"file": 36,"line": 972,"col": 25,"name": "T","comptime": true},{"file": 36,"line": 972,"col": 43,"name": "slice"},{"file": 36,"line": 972,"col": 61,"name": "value"},{"file": 36,"line": 989,"col": 18,"name": "T","comptime": true},{"file": 36,"line": 989,"col": 36,"name": "slice"},{"file": 36,"line": 989,"col": 54,"name": "values"},{"file": 36,"line": 993,"col": 22,"name": "T","comptime": true},{"file": 36,"line": 993,"col": 40,"name": "slice"},{"file": 36,"line": 993,"col": 58,"name": "values"},{"file": 36,"line": 1004,"col": 21,"name": "T","comptime": true},{"file": 36,"line": 1004,"col": 39,"name": "slice"},{"file": 36,"line": 1004,"col": 57,"name": "start_index"},{"file": 36,"line": 1004,"col": 77,"name": "values"},{"file": 36,"line": 1014,"col": 15,"name": "T","comptime": true},{"file": 36,"line": 1014,"col": 33,"name": "haystack"},{"file": 36,"line": 1014,"col": 54,"name": "needle"},{"file": 36,"line": 1022,"col": 25,"name": "T","comptime": true},{"file": 36,"line": 1022,"col": 43,"name": "haystack"},{"file": 36,"line": 1022,"col": 64,"name": "needle"},{"file": 36,"line": 1070,"col": 19,"name": "T","comptime": true},{"file": 36,"line": 1070,"col": 37,"name": "haystack"},{"file": 36,"line": 1070,"col": 58,"name": "needle"},{"file": 36,"line": 1181,"col": 13,"name": "T","comptime": true},{"file": 36,"line": 1181,"col": 31,"name": "haystack"},{"file": 36,"line": 1181,"col": 52,"name": "needle"},{"file": 36,"line": 1295,"col": 26,"name": "T","comptime": true},{"file": 36,"line": 1295,"col": 44,"name": "bytes"},{"file": 36,"line": 1305,"col": 27,"name": "T","comptime": true},{"file": 36,"line": 1305,"col": 45,"name": "bytes"},{"file": 36,"line": 1333,"col": 20,"name": "T","comptime": true},{"file": 36,"line": 1333,"col": 38,"name": "bytes"},{"file": 36,"line": 1333,"col": 57,"name": "endian"},{"file": 36,"line": 1379,"col": 22,"name": "T","comptime": true},{"file": 36,"line": 1379,"col": 40,"name": "buf"},{"file": 36,"line": 1379,"col": 83,"name": "value"},{"file": 36,"line": 1387,"col": 23,"name": "T","comptime": true},{"file": 36,"line": 1387,"col": 41,"name": "buf"},{"file": 36,"line": 1387,"col": 88,"name": "value"},{"file": 36,"line": 1404,"col": 16,"name": "T","comptime": true},{"file": 36,"line": 1404,"col": 34,"name": "buffer"},{"file": 36,"line": 1404,"col": 84,"name": "value"},{"file": 36,"line": 1404,"col": 94,"name": "endian"},{"file": 36,"line": 1418,"col": 27,"name": "T","comptime": true},{"file": 36,"line": 1418,"col": 45,"name": "buffer"},{"file": 36,"line": 1418,"col": 59,"name": "value"},{"file": 36,"line": 1442,"col": 24,"name": "T","comptime": true},{"file": 36,"line": 1442,"col": 42,"name": "buffer"},{"file": 36,"line": 1442,"col": 56,"name": "value"},{"file": 36,"line": 1480,"col": 21,"name": "T","comptime": true},{"file": 36,"line": 1480,"col": 39,"name": "buffer"},{"file": 36,"line": 1480,"col": 53,"name": "value"},{"file": 36,"line": 1480,"col": 63,"name": "endian"},{"file": 36,"line": 1527,"col": 22,"name": "S","comptime": true},{"file": 36,"line": 1527,"col": 40,"name": "ptr"},{"file": 36,"line": 1725,"col": 16,"name": "T","comptime": true},{"file": 36,"line": 1725,"col": 34,"name": "haystack"},{"file": 36,"line": 1725,"col": 55,"name": "needle"},{"file": 36,"line": 1814,"col": 12,"name": "allocator"},{"file": 36,"line": 1814,"col": 34,"name": "separator"},{"file": 36,"line": 1814,"col": 57,"name": "slices"},{"file": 36,"line": 1820,"col": 13,"name": "allocator"},{"file": 36,"line": 1820,"col": 35,"name": "separator"},{"file": 36,"line": 1820,"col": 58,"name": "slices"},{"file": 36,"line": 1904,"col": 14,"name": "allocator"},{"file": 36,"line": 1904,"col": 36,"name": "T","comptime": true},{"file": 36,"line": 1904,"col": 54,"name": "slices"},{"file": 36,"line": 2145,"col": 11,"name": "T","comptime": true},{"file": 36,"line": 2145,"col": 29,"name": "slice"},{"file": 36,"line": 2159,"col": 11,"name": "T","comptime": true},{"file": 36,"line": 2159,"col": 29,"name": "slice"},{"file": 36,"line": 2178,"col": 15,"name": "T","comptime": true},{"file": 36,"line": 2178,"col": 33,"name": "items"},{"file": 36,"line": 2195,"col": 14,"name": "T","comptime": true},{"file": 36,"line": 2195,"col": 32,"name": "items"},{"file": 36,"line": 2195,"col": 44,"name": "amount"},{"file": 36,"line": 2211,"col": 15,"name": "T","comptime": true},{"file": 36,"line": 2211,"col": 33,"name": "input"},{"file": 36,"line": 2211,"col": 51,"name": "needle"},{"file": 36,"line": 2211,"col": 70,"name": "replacement"},{"file": 36,"line": 2211,"col": 94,"name": "output"},{"file": 36,"line": 2266,"col": 21,"name": "T","comptime": true},{"file": 36,"line": 2266,"col": 39,"name": "slice"},{"file": 36,"line": 2266,"col": 51,"name": "needle"},{"file": 36,"line": 2266,"col": 62,"name": "replacement"},{"file": 36,"line": 2275,"col": 26,"name": "T","comptime": true},{"file": 36,"line": 2275,"col": 44,"name": "slice"},{"file": 36,"line": 2275,"col": 56,"name": "elem"},{"file": 36,"line": 2289,"col": 23,"name": "T","comptime": true},{"file": 36,"line": 2289,"col": 41,"name": "slice"},{"file": 36,"line": 2289,"col": 53,"name": "elem"},{"file": 36,"line": 2314,"col": 23,"name": "T","comptime": true},{"file": 36,"line": 2314,"col": 41,"name": "input"},{"file": 36,"line": 2314,"col": 59,"name": "needle"},{"file": 36,"line": 2314,"col": 78,"name": "replacement"},{"file": 36,"line": 2346,"col": 20,"name": "T","comptime": true},{"file": 36,"line": 2346,"col": 38,"name": "allocator"},{"file": 36,"line": 2346,"col": 60,"name": "input"},{"file": 36,"line": 2346,"col": 78,"name": "needle"},{"file": 36,"line": 2346,"col": 97,"name": "replacement"},{"file": 36,"line": 2365,"col": 22,"name": "T","comptime": true},{"file": 36,"line": 2365,"col": 40,"name": "x"},{"file": 36,"line": 2373,"col": 19,"name": "T","comptime": true},{"file": 36,"line": 2373,"col": 37,"name": "x"},{"file": 36,"line": 2381,"col": 16,"name": "T","comptime": true},{"file": 36,"line": 2381,"col": 34,"name": "x"},{"file": 36,"line": 2381,"col": 40,"name": "endianness_of_x"},{"file": 36,"line": 2389,"col": 16,"name": "T","comptime": true},{"file": 36,"line": 2389,"col": 34,"name": "x"},{"file": 36,"line": 2389,"col": 40,"name": "desired_endianness"},{"file": 36,"line": 2397,"col": 22,"name": "T","comptime": true},{"file": 36,"line": 2397,"col": 40,"name": "x"},{"file": 36,"line": 2405,"col": 19,"name": "T","comptime": true},{"file": 36,"line": 2405,"col": 37,"name": "x"},{"file": 36,"line": 2556,"col": 15,"name": "value"},{"file": 36,"line": 2589,"col": 20,"name": "T","comptime": true},{"file": 36,"line": 2589,"col": 38,"name": "bytes"},{"file": 36,"line": 2646,"col": 20,"name": "T","comptime": true},{"file": 36,"line": 2646,"col": 38,"name": "bytes"},{"file": 36,"line": 2871,"col": 25,"name": "val"},{"file": 36,"line": 2921,"col": 20,"name": "alignment"},{"file": 36,"line": 2925,"col": 25,"name": "i"},{"file": 36,"line": 2925,"col": 35,"name": "alignment"},{"file": 36,"line": 2983,"col": 20,"name": "bytes"},{"file": 36,"line": 2983,"col": 33,"name": "new_alignment","comptime": true},{"file": 36,"line": 2997,"col": 20,"name": "slice"},{"file": 36,"line": 2997,"col": 36,"name": "new_alignment","comptime": true},{"file": 36,"line": 157,"col": 22,"name": "_"},{"file": 36,"line": 157,"col": 37,"name": "n"},{"file": 36,"line": 157,"col": 47,"name": "alignment"},{"file": 36,"line": 157,"col": 63,"name": "len_align"},{"file": 36,"line": 157,"col": 79,"name": "ra"},{"file": 36,"line": 1041,"col": 39,"name": "pattern"},{"file": 36,"line": 1041,"col": 60,"name": "table"},{"file": 36,"line": 1825,"col": 14,"name": "allocator"},{"file": 36,"line": 1825,"col": 36,"name": "separator"},{"file": 36,"line": 1825,"col": 59,"name": "slices"},{"file": 36,"line": 1825,"col": 87,"name": "zero"},{"file": 36,"line": 2293,"col": 23,"name": "str"},{"file": 36,"line": 2293,"col": 40,"name": "elem"},{"file": 36,"line": 2293,"col": 50,"name": "expected"},{"file": 36,"line": 2574,"col": 26,"name": "T","comptime": true},{"file": 36,"line": 2574,"col": 44,"name": "B","comptime": true},{"file": 36,"line": 2965,"col": 16,"name": "AttributeSource","comptime": true},{"file": 36,"line": 2965,"col": 48,"name": "new_alignment","comptime": true},{"file": 40,"line": 53,"col": 15,"name": "self"},{"file": 40,"line": 53,"col": 29,"name": "name"},{"file": 40,"line": 159,"col": 15,"name": "self"},{"file": 40,"line": 159,"col": 29,"name": "buffer_ptr"},{"file": 40,"line": 306,"col": 13,"name": "config"},{"file": 40,"line": 306,"col": 34,"name": "function","comptime": true},{"file": 40,"line": 306,"col": 62,"name": "args"},{"file": 40,"line": 320,"col": 17,"name": "self"},{"file": 40,"line": 326,"col": 14,"name": "self"},{"file": 40,"line": 332,"col": 12,"name": "self"},{"file": 40,"line": 344,"col": 10,"name": "f","comptime": true},{"file": 40,"line": 344,"col": 31,"name": "args"},{"file": 40,"line": 1022,"col": 18,"name": "thread"},{"file": 40,"line": 1121,"col": 23,"name": "value"},{"file": 40,"line": 1121,"col": 38,"name": "event"},{"file": 40,"line": 1155,"col": 21,"name": "mutex"},{"file": 40,"line": 1155,"col": 36,"name": "cond"},{"file": 41,"line": 15,"col": 20,"name": "ordering","comptime": true},{"file": 41,"line": 26,"col": 28,"name": "ordering","comptime": true},{"file": 43,"line": 151,"col": 25,"name": "first_address"},{"file": 43,"line": 151,"col": 48,"name": "stack_trace"},{"file": 43,"line": 227,"col": 13,"name": "format","comptime": true},{"file": 43,"line": 227,"col": 42,"name": "args"},{"file": 43,"line": 236,"col": 4,"name": "trace"},{"file": 43,"line": 237,"col": 4,"name": "format","comptime": true},{"file": 43,"line": 238,"col": 4,"name": "args"},{"file": 43,"line": 469,"col": 4,"name": "out_stream"},{"file": 43,"line": 470,"col": 4,"name": "debug_info"},{"file": 43,"line": 471,"col": 4,"name": "tty_config"},{"file": 43,"line": 472,"col": 4,"name": "start_addr"},{"file": 43,"line": 1786,"col": 28,"name": "prefix"},{"file": 43,"line": 560,"col": 22,"name": "symbols"},{"file": 43,"line": 560,"col": 52,"name": "address"},{"file": 43,"line": 718,"col": 21,"name": "allocator"},{"file": 43,"line": 718,"col": 47,"name": "coff_file"},{"file": 43,"line": 857,"col": 22,"name": "allocator"},{"file": 43,"line": 857,"col": 48,"name": "macho_file"},{"file": 43,"line": 1743,"col": 25,"name": "info"},{"file": 43,"line": 1754,"col": 30,"name": "info"},{"file": 43,"line": 1754,"col": 65,"name": "msg","comptime": true},{"file": 43,"line": 1754,"col": 83,"name": "format","comptime": true},{"file": 45,"line": 406,"col": 29,"name": "ParseSource"},{"file": 45,"line": 456,"col": 29,"name": "ParseSource"},{"file": 45,"line": 508,"col": 11,"name": "is_64"},{"file": 45,"line": 508,"col": 24,"name": "need_bswap"},{"file": 45,"line": 508,"col": 42,"name": "int_32"},{"file": 45,"line": 508,"col": 59,"name": "int_64"},{"file": 45,"line": 520,"col": 13,"name": "need_bswap"},{"file": 45,"line": 520,"col": 31,"name": "int_32"},{"file": 45,"line": 520,"col": 48,"name": "Int64","comptime": true},{"file": 47,"line": 398,"col": 21,"name": "value"},{"file": 47,"line": 398,"col": 37,"name": "options"},{"file": 47,"line": 398,"col": 61,"name": "writer"},{"file": 47,"line": 814,"col": 24,"name": "bytes"},{"file": 47,"line": 820,"col": 24,"name": "bytes"},{"file": 47,"line": 860,"col": 27,"name": "bytes"},{"file": 47,"line": 867,"col": 27,"name": "bytes"},{"file": 47,"line": 922,"col": 21,"name": "value"},{"file": 47,"line": 929,"col": 21,"name": "value"},{"file": 47,"line": 948,"col": 4,"name": "bytes"},{"file": 47,"line": 949,"col": 4,"name": "fmt","comptime": true},{"file": 47,"line": 950,"col": 4,"name": "options"},{"file": 47,"line": 951,"col": 4,"name": "writer"},{"file": 47,"line": 967,"col": 4,"name": "c"},{"file": 47,"line": 968,"col": 4,"name": "options"},{"file": 47,"line": 969,"col": 4,"name": "writer"},{"file": 47,"line": 1021,"col": 4,"name": "value"},{"file": 47,"line": 1022,"col": 4,"name": "options"},{"file": 47,"line": 1023,"col": 4,"name": "writer"},{"file": 47,"line": 1112,"col": 4,"name": "value"},{"file": 47,"line": 1113,"col": 4,"name": "options"},{"file": 47,"line": 1114,"col": 4,"name": "writer"},{"file": 47,"line": 1223,"col": 4,"name": "value"},{"file": 47,"line": 1224,"col": 4,"name": "options"},{"file": 47,"line": 1225,"col": 4,"name": "writer"},{"file": 47,"line": 1413,"col": 20,"name": "out_buf"},{"file": 47,"line": 1413,"col": 35,"name": "value"},{"file": 47,"line": 1413,"col": 51,"name": "base"},{"file": 47,"line": 1413,"col": 61,"name": "case"},{"file": 47,"line": 1413,"col": 73,"name": "options"},{"file": 47,"line": 1470,"col": 19,"name": "ns"},{"file": 47,"line": 1523,"col": 25,"name": "ns"},{"file": 47,"line": 1612,"col": 17,"name": "format_fn","comptime": true},{"file": 47,"line": 1638,"col": 16,"name": "T","comptime": true},{"file": 47,"line": 1638,"col": 34,"name": "buf"},{"file": 47,"line": 1638,"col": 51,"name": "radix"},{"file": 47,"line": 1760,"col": 21,"name": "T","comptime": true},{"file": 47,"line": 1760,"col": 39,"name": "buf"},{"file": 47,"line": 1760,"col": 56,"name": "radix"},{"file": 47,"line": 1809,"col": 19,"name": "c"},{"file": 47,"line": 1809,"col": 26,"name": "radix"},{"file": 47,"line": 1840,"col": 17,"name": "buf"},{"file": 47,"line": 1840,"col": 28,"name": "fmt","comptime": true},{"file": 47,"line": 1840,"col": 54,"name": "args"},{"file": 47,"line": 1846,"col": 13,"name": "fmt","comptime": true},{"file": 47,"line": 1846,"col": 39,"name": "args"},{"file": 47,"line": 1854,"col": 18,"name": "allocator"},{"file": 47,"line": 1854,"col": 44,"name": "fmt","comptime": true},{"file": 47,"line": 1854,"col": 70,"name": "args"},{"file": 47,"line": 1867,"col": 19,"name": "allocator"},{"file": 47,"line": 1867,"col": 45,"name": "fmt","comptime": true},{"file": 47,"line": 1867,"col": 71,"name": "args"},{"file": 47,"line": 1893,"col": 26,"name": "buf"},{"file": 47,"line": 1893,"col": 37,"name": "value"},{"file": 47,"line": 1893,"col": 53,"name": "base"},{"file": 47,"line": 1893,"col": 63,"name": "case"},{"file": 47,"line": 1893,"col": 75,"name": "options"},{"file": 47,"line": 1897,"col": 21,"name": "fmt","comptime": true},{"file": 47,"line": 1897,"col": 47,"name": "args"},{"file": 47,"line": 2421,"col": 18,"name": "out"},{"file": 47,"line": 2421,"col": 29,"name": "input"},{"file": 47,"line": 427,"col": 15,"name": "T","comptime": true},{"file": 47,"line": 753,"col": 4,"name": "value"},{"file": 47,"line": 754,"col": 4,"name": "fmt","comptime": true},{"file": 47,"line": 755,"col": 4,"name": "options"},{"file": 47,"line": 756,"col": 4,"name": "writer"},{"file": 47,"line": 786,"col": 22,"name": "case","comptime": true},{"file": 47,"line": 824,"col": 25,"name": "case","comptime": true},{"file": 47,"line": 871,"col": 18,"name": "radix","comptime": true},{"file": 47,"line": 1419,"col": 18,"name": "ns"},{"file": 47,"line": 1419,"col": 27,"name": "fmt","comptime": true},{"file": 47,"line": 1419,"col": 53,"name": "options"},{"file": 47,"line": 1419,"col": 85,"name": "writer"},{"file": 47,"line": 1512,"col": 24,"name": "ns"},{"file": 47,"line": 1512,"col": 33,"name": "fmt","comptime": true},{"file": 47,"line": 1512,"col": 59,"name": "options"},{"file": 47,"line": 1512,"col": 91,"name": "writer"},{"file": 47,"line": 1697,"col": 4,"name": "T","comptime": true},{"file": 47,"line": 1698,"col": 4,"name": "buf"},{"file": 47,"line": 1699,"col": 4,"name": "radix"},{"file": 47,"line": 1700,"col": 4,"name": "sign","comptime": true},{"file": 48,"line": 66,"col": 21,"name": "allocator"},{"file": 48,"line": 66,"col": 43,"name": "existing_path"},{"file": 48,"line": 66,"col": 70,"name": "new_path"},{"file": 48,"line": 108,"col": 4,"name": "source_path"},{"file": 48,"line": 109,"col": 4,"name": "dest_path"},{"file": 48,"line": 110,"col": 4,"name": "args"},{"file": 48,"line": 121,"col": 24,"name": "source_path"},{"file": 48,"line": 121,"col": 49,"name": "dest_path"},{"file": 48,"line": 121,"col": 72,"name": "args"},{"file": 48,"line": 211,"col": 23,"name": "absolute_path"},{"file": 48,"line": 217,"col": 24,"name": "absolute_path_z"},{"file": 48,"line": 223,"col": 24,"name": "absolute_path_w"},{"file": 48,"line": 229,"col": 25,"name": "dir_path"},{"file": 48,"line": 235,"col": 26,"name": "dir_path"},{"file": 48,"line": 241,"col": 26,"name": "dir_path"},{"file": 48,"line": 247,"col": 22,"name": "old_path"},{"file": 48,"line": 247,"col": 44,"name": "new_path"},{"file": 48,"line": 254,"col": 23,"name": "old_path"},{"file": 48,"line": 254,"col": 48,"name": "new_path"},{"file": 48,"line": 261,"col": 23,"name": "old_path"},{"file": 48,"line": 261,"col": 49,"name": "new_path"},{"file": 48,"line": 268,"col": 14,"name": "old_dir"},{"file": 48,"line": 268,"col": 28,"name": "old_sub_path"},{"file": 48,"line": 268,"col": 54,"name": "new_dir"},{"file": 48,"line": 268,"col": 68,"name": "new_sub_path"},{"file": 48,"line": 273,"col": 15,"name": "old_dir"},{"file": 48,"line": 273,"col": 29,"name": "old_sub_path_z"},{"file": 48,"line": 273,"col": 60,"name": "new_dir"},{"file": 48,"line": 273,"col": 74,"name": "new_sub_path_z"},{"file": 48,"line": 279,"col": 15,"name": "old_dir"},{"file": 48,"line": 279,"col": 29,"name": "old_sub_path_w"},{"file": 48,"line": 279,"col": 58,"name": "new_dir"},{"file": 48,"line": 279,"col": 72,"name": "new_sub_path_w"},{"file": 48,"line": 2257,"col": 23,"name": "absolute_path"},{"file": 48,"line": 2257,"col": 50,"name": "flags"},{"file": 48,"line": 2266,"col": 24,"name": "absolute_path_c"},{"file": 48,"line": 2266,"col": 56,"name": "flags"},{"file": 48,"line": 2274,"col": 24,"name": "absolute_path_c"},{"file": 48,"line": 2274,"col": 57,"name": "flags"},{"file": 48,"line": 2288,"col": 24,"name": "absolute_path"},{"file": 48,"line": 2288,"col": 51,"name": "flags"},{"file": 48,"line": 2300,"col": 25,"name": "absolute_path_w"},{"file": 48,"line": 2300,"col": 55,"name": "flags"},{"file": 48,"line": 2311,"col": 22,"name": "absolute_path"},{"file": 48,"line": 2311,"col": 49,"name": "flags"},{"file": 48,"line": 2319,"col": 23,"name": "absolute_path"},{"file": 48,"line": 2319,"col": 53,"name": "flags"},{"file": 48,"line": 2327,"col": 23,"name": "absolute_path"},{"file": 48,"line": 2327,"col": 53,"name": "flags"},{"file": 48,"line": 2341,"col": 26,"name": "absolute_path"},{"file": 48,"line": 2341,"col": 53,"name": "flags"},{"file": 48,"line": 2347,"col": 27,"name": "absolute_path_c"},{"file": 48,"line": 2347,"col": 59,"name": "flags"},{"file": 48,"line": 2353,"col": 27,"name": "absolute_path_w"},{"file": 48,"line": 2353,"col": 60,"name": "flags"},{"file": 48,"line": 2362,"col": 26,"name": "absolute_path"},{"file": 48,"line": 2368,"col": 27,"name": "absolute_path_c"},{"file": 48,"line": 2374,"col": 27,"name": "absolute_path_w"},{"file": 48,"line": 2384,"col": 26,"name": "absolute_path"},{"file": 48,"line": 2399,"col": 24,"name": "pathname"},{"file": 48,"line": 2399,"col": 46,"name": "buffer"},{"file": 48,"line": 2406,"col": 25,"name": "pathname_w"},{"file": 48,"line": 2406,"col": 53,"name": "buffer"},{"file": 48,"line": 2412,"col": 25,"name": "pathname_c"},{"file": 48,"line": 2412,"col": 52,"name": "buffer"},{"file": 48,"line": 2430,"col": 23,"name": "target_path"},{"file": 48,"line": 2430,"col": 48,"name": "sym_link_path"},{"file": 48,"line": 2430,"col": 75,"name": "flags"},{"file": 48,"line": 2448,"col": 24,"name": "target_path_w"},{"file": 48,"line": 2448,"col": 52,"name": "sym_link_path_w"},{"file": 48,"line": 2448,"col": 82,"name": "flags"},{"file": 48,"line": 2456,"col": 24,"name": "target_path_c"},{"file": 48,"line": 2456,"col": 54,"name": "sym_link_path_c"},{"file": 48,"line": 2456,"col": 86,"name": "flags"},{"file": 48,"line": 2503,"col": 24,"name": "allocator"},{"file": 48,"line": 2525,"col": 19,"name": "out_buffer"},{"file": 48,"line": 2612,"col": 27,"name": "allocator"},{"file": 48,"line": 2626,"col": 22,"name": "out_buffer"},{"file": 48,"line": 2635,"col": 21,"name": "allocator"},{"file": 48,"line": 2635,"col": 43,"name": "pathname"},{"file": 48,"line": 2651,"col": 13,"name": "fd_in"},{"file": 48,"line": 2651,"col": 29,"name": "fd_out"},{"file": 50,"line": 156,"col": 14,"name": "context"},{"file": 50,"line": 156,"col": 29,"name": "data"},{"file": 51,"line": 118,"col": 19,"name": "T","comptime": true},{"file": 51,"line": 118,"col": 37,"name": "x"},{"file": 51,"line": 118,"col": 43,"name": "y"},{"file": 51,"line": 118,"col": 49,"name": "tolerance"},{"file": 51,"line": 146,"col": 19,"name": "T","comptime": true},{"file": 51,"line": 146,"col": 37,"name": "x"},{"file": 51,"line": 146,"col": 43,"name": "y"},{"file": 51,"line": 146,"col": 49,"name": "tolerance"},{"file": 51,"line": 160,"col": 16,"name": "T","comptime": true},{"file": 51,"line": 160,"col": 34,"name": "x"},{"file": 51,"line": 160,"col": 40,"name": "y"},{"file": 51,"line": 160,"col": 46,"name": "tolerance"},{"file": 51,"line": 199,"col": 25,"name": "value"},{"file": 51,"line": 289,"col": 25,"name": "T","comptime": true},{"file": 51,"line": 304,"col": 25,"name": "T","comptime": true},{"file": 51,"line": 392,"col": 12,"name": "x"},{"file": 51,"line": 392,"col": 24,"name": "y"},{"file": 51,"line": 392,"col": 36,"name": "z"},{"file": 51,"line": 431,"col": 13,"name": "val"},{"file": 51,"line": 431,"col": 27,"name": "lower"},{"file": 51,"line": 431,"col": 43,"name": "upper"},{"file": 51,"line": 471,"col": 14,"name": "x"},{"file": 51,"line": 477,"col": 16,"name": "T","comptime": true},{"file": 51,"line": 477,"col": 34,"name": "a"},{"file": 51,"line": 477,"col": 40,"name": "shift_amt"},{"file": 51,"line": 484,"col": 11,"name": "T","comptime": true},{"file": 51,"line": 484,"col": 29,"name": "a"},{"file": 51,"line": 484,"col": 35,"name": "shift_amt"},{"file": 51,"line": 524,"col": 11,"name": "T","comptime": true},{"file": 51,"line": 524,"col": 29,"name": "a"},{"file": 51,"line": 524,"col": 35,"name": "shift_amt"},{"file": 51,"line": 564,"col": 12,"name": "T","comptime": true},{"file": 51,"line": 564,"col": 30,"name": "x"},{"file": 51,"line": 564,"col": 36,"name": "r"},{"file": 51,"line": 592,"col": 12,"name": "T","comptime": true},{"file": 51,"line": 592,"col": 30,"name": "x"},{"file": 51,"line": 592,"col": 36,"name": "r"},{"file": 51,"line": 632,"col": 19,"name": "T","comptime": true},{"file": 51,"line": 644,"col": 23,"name": "from","comptime": true},{"file": 51,"line": 644,"col": 52,"name": "to","comptime": true},{"file": 51,"line": 721,"col": 14,"name": "x"},{"file": 51,"line": 756,"col": 16,"name": "T","comptime": true},{"file": 51,"line": 756,"col": 34,"name": "numerator"},{"file": 51,"line": 756,"col": 48,"name": "denominator"},{"file": 51,"line": 780,"col": 16,"name": "T","comptime": true},{"file": 51,"line": 780,"col": 34,"name": "numerator"},{"file": 51,"line": 780,"col": 48,"name": "denominator"},{"file": 51,"line": 804,"col": 15,"name": "T","comptime": true},{"file": 51,"line": 804,"col": 33,"name": "numerator"},{"file": 51,"line": 804,"col": 47,"name": "denominator"},{"file": 51,"line": 859,"col": 16,"name": "T","comptime": true},{"file": 51,"line": 859,"col": 34,"name": "numerator"},{"file": 51,"line": 859,"col": 48,"name": "denominator"},{"file": 51,"line": 887,"col": 11,"name": "T","comptime": true},{"file": 51,"line": 887,"col": 29,"name": "numerator"},{"file": 51,"line": 887,"col": 43,"name": "denominator"},{"file": 51,"line": 913,"col": 11,"name": "T","comptime": true},{"file": 51,"line": 913,"col": 29,"name": "numerator"},{"file": 51,"line": 913,"col": 43,"name": "denominator"},{"file": 51,"line": 973,"col": 18,"name": "x"},{"file": 51,"line": 1022,"col": 17,"name": "alignment","comptime": true},{"file": 51,"line": 1022,"col": 42,"name": "ptr"},{"file": 51,"line": 1037,"col": 23,"name": "T","comptime": true},{"file": 51,"line": 1037,"col": 41,"name": "value"},{"file": 51,"line": 1093,"col": 28,"name": "T","comptime": true},{"file": 51,"line": 1093,"col": 46,"name": "value"},{"file": 51,"line": 1133,"col": 16,"name": "T","comptime": true},{"file": 51,"line": 1133,"col": 34,"name": "x"},{"file": 51,"line": 1142,"col": 21,"name": "T","comptime": true},{"file": 51,"line": 1142,"col": 39,"name": "x"},{"file": 51,"line": 1167,"col": 17,"name": "T","comptime": true},{"file": 51,"line": 1167,"col": 35,"name": "value"},{"file": 51,"line": 1345,"col": 13,"name": "a"},{"file": 51,"line": 1345,"col": 25,"name": "b"},{"file": 51,"line": 1376,"col": 15,"name": "a"},{"file": 51,"line": 1376,"col": 27,"name": "op"},{"file": 51,"line": 1376,"col": 48,"name": "b"},{"file": 51,"line": 1438,"col": 23,"name": "MaskInt","comptime": true},{"file": 51,"line": 1438,"col": 47,"name": "value"},{"file": 51,"line": 1483,"col": 19,"name": "num"},{"file": 51,"line": 1483,"col": 33,"name": "denom"},{"file": 52,"line": 12,"col": 15,"name": "v"},{"file": 52,"line": 55,"col": 20,"name": "T","comptime": true},{"file": 52,"line": 55,"col": 38,"name": "str"},{"file": 52,"line": 99,"col": 16,"name": "T","comptime": true},{"file": 52,"line": 118,"col": 17,"name": "T","comptime": true},{"file": 52,"line": 404,"col": 23,"name": "T","comptime": true},{"file": 52,"line": 404,"col": 41,"name": "decl_name","comptime": true},{"file": 52,"line": 485,"col": 17,"name": "T","comptime": true},{"file": 52,"line": 485,"col": 35,"name": "field","comptime": true},{"file": 52,"line": 520,"col": 18,"name": "T","comptime": true},{"file": 52,"line": 559,"col": 17,"name": "T","comptime": true},{"file": 52,"line": 621,"col": 17,"name": "u"},{"file": 52,"line": 648,"col": 18,"name": "U","comptime": true},{"file": 52,"line": 648,"col": 36,"name": "tag"},{"file": 52,"line": 815,"col": 17,"name": "EnumTag","comptime": true},{"file": 52,"line": 815,"col": 41,"name": "tag_int"},{"file": 52,"line": 838,"col": 16,"name": "Namespace","comptime": true},{"file": 52,"line": 838,"col": 42,"name": "Decl","comptime": true},{"file": 52,"line": 867,"col": 13,"name": "bit_count","comptime": true},{"file": 52,"line": 880,"col": 14,"name": "len","comptime": true},{"file": 52,"line": 880,"col": 33,"name": "child","comptime": true},{"file": 52,"line": 896,"col": 17,"name": "Function","comptime": true},{"file": 52,"line": 1002,"col": 20,"name": "name","comptime": true},{"file": 52,"line": 1002,"col": 47,"name": "T","comptime": true},{"file": 52,"line": 1009,"col": 15,"name": "error_union"},{"file": 52,"line": 580,"col": 19,"name": "expected"},{"file": 52,"line": 580,"col": 38,"name": "actual"},{"file": 53,"line": 271,"col": 14,"name": "fd"},{"file": 53,"line": 271,"col": 24,"name": "mode"},{"file": 53,"line": 312,"col": 14,"name": "fd"},{"file": 53,"line": 312,"col": 24,"name": "owner"},{"file": 53,"line": 312,"col": 39,"name": "group"},{"file": 53,"line": 346,"col": 17,"name": "buffer"},{"file": 53,"line": 477,"col": 12,"name": "pid"},{"file": 53,"line": 477,"col": 24,"name": "sig"},{"file": 53,"line": 609,"col": 13,"name": "fd"},{"file": 53,"line": 609,"col": 23,"name": "iov"},{"file": 53,"line": 669,"col": 13,"name": "fd"},{"file": 53,"line": 669,"col": 23,"name": "buf"},{"file": 53,"line": 669,"col": 34,"name": "offset"},{"file": 53,"line": 746,"col": 17,"name": "fd"},{"file": 53,"line": 746,"col": 27,"name": "length"},{"file": 53,"line": 817,"col": 14,"name": "fd"},{"file": 53,"line": 817,"col": 24,"name": "iov"},{"file": 53,"line": 817,"col": 44,"name": "offset"},{"file": 53,"line": 1000,"col": 14,"name": "fd"},{"file": 53,"line": 1000,"col": 24,"name": "iov"},{"file": 53,"line": 1075,"col": 14,"name": "fd"},{"file": 53,"line": 1075,"col": 24,"name": "bytes"},{"file": 53,"line": 1075,"col": 43,"name": "offset"},{"file": 53,"line": 1167,"col": 15,"name": "fd"},{"file": 53,"line": 1167,"col": 25,"name": "iov"},{"file": 53,"line": 1167,"col": 51,"name": "offset"},{"file": 53,"line": 1293,"col": 12,"name": "file_path"},{"file": 53,"line": 1293,"col": 35,"name": "flags"},{"file": 53,"line": 1293,"col": 47,"name": "perm"},{"file": 53,"line": 1304,"col": 13,"name": "file_path"},{"file": 53,"line": 1304,"col": 39,"name": "flags"},{"file": 53,"line": 1304,"col": 51,"name": "perm"},{"file": 53,"line": 1382,"col": 13,"name": "file_path_w"},{"file": 53,"line": 1382,"col": 39,"name": "flags"},{"file": 53,"line": 1382,"col": 51,"name": "perm"},{"file": 53,"line": 1396,"col": 14,"name": "dir_fd"},{"file": 53,"line": 1396,"col": 28,"name": "file_path"},{"file": 53,"line": 1396,"col": 51,"name": "flags"},{"file": 53,"line": 1396,"col": 63,"name": "mode"},{"file": 53,"line": 1409,"col": 18,"name": "dir_fd"},{"file": 53,"line": 1409,"col": 32,"name": "file_path"},{"file": 53,"line": 1409,"col": 55,"name": "lookup_flags"},{"file": 53,"line": 1409,"col": 84,"name": "oflags"},{"file": 53,"line": 1409,"col": 102,"name": "fdflags"},{"file": 53,"line": 1409,"col": 122,"name": "base"},{"file": 53,"line": 1409,"col": 138,"name": "inheriting"},{"file": 53,"line": 1491,"col": 15,"name": "dir_fd"},{"file": 53,"line": 1491,"col": 29,"name": "file_path_w"},{"file": 53,"line": 1491,"col": 55,"name": "flags"},{"file": 53,"line": 1491,"col": 67,"name": "mode"},{"file": 53,"line": 1502,"col": 11,"name": "old_fd"},{"file": 53,"line": 1512,"col": 12,"name": "old_fd"},{"file": 53,"line": 1512,"col": 26,"name": "new_fd"},{"file": 53,"line": 1543,"col": 4,"name": "path"},{"file": 53,"line": 1544,"col": 4,"name": "child_argv"},{"file": 53,"line": 1545,"col": 4,"name": "envp"},{"file": 53,"line": 1589,"col": 4,"name": "arg0_expand","comptime": true},{"file": 53,"line": 1590,"col": 4,"name": "file"},{"file": 53,"line": 1591,"col": 4,"name": "child_argv"},{"file": 53,"line": 1595,"col": 4,"name": "envp"},{"file": 53,"line": 1643,"col": 4,"name": "file"},{"file": 53,"line": 1644,"col": 4,"name": "argv_ptr"},{"file": 53,"line": 1645,"col": 4,"name": "envp"},{"file": 53,"line": 1714,"col": 15,"name": "key"},{"file": 53,"line": 1758,"col": 14,"name": "out_buffer"},{"file": 53,"line": 1805,"col": 15,"name": "target_path"},{"file": 53,"line": 1805,"col": 40,"name": "sym_link_path"},{"file": 53,"line": 1819,"col": 16,"name": "target_path"},{"file": 53,"line": 1819,"col": 44,"name": "sym_link_path"},{"file": 53,"line": 1849,"col": 17,"name": "target_path"},{"file": 53,"line": 1849,"col": 42,"name": "newdirfd"},{"file": 53,"line": 1849,"col": 58,"name": "sym_link_path"},{"file": 53,"line": 1863,"col": 21,"name": "target_path"},{"file": 53,"line": 1863,"col": 46,"name": "newdirfd"},{"file": 53,"line": 1863,"col": 62,"name": "sym_link_path"},{"file": 53,"line": 1887,"col": 18,"name": "target_path"},{"file": 53,"line": 1887,"col": 46,"name": "newdirfd"},{"file": 53,"line": 1887,"col": 62,"name": "sym_link_path"},{"file": 53,"line": 1926,"col": 13,"name": "oldpath"},{"file": 53,"line": 1926,"col": 37,"name": "newpath"},{"file": 53,"line": 1926,"col": 61,"name": "flags"},{"file": 53,"line": 1948,"col": 12,"name": "oldpath"},{"file": 53,"line": 1948,"col": 33,"name": "newpath"},{"file": 53,"line": 1948,"col": 54,"name": "flags"},{"file": 53,"line": 1957,"col": 4,"name": "olddir"},{"file": 53,"line": 1958,"col": 4,"name": "oldpath"},{"file": 53,"line": 1959,"col": 4,"name": "newdir"},{"file": 53,"line": 1960,"col": 4,"name": "newpath"},{"file": 53,"line": 1961,"col": 4,"name": "flags"},{"file": 53,"line": 1986,"col": 4,"name": "olddir"},{"file": 53,"line": 1987,"col": 4,"name": "oldpath"},{"file": 53,"line": 1988,"col": 4,"name": "newdir"},{"file": 53,"line": 1989,"col": 4,"name": "newpath"},{"file": 53,"line": 1990,"col": 4,"name": "flags"},{"file": 53,"line": 2022,"col": 14,"name": "file_path"},{"file": 53,"line": 2035,"col": 15,"name": "file_path"},{"file": 53,"line": 2060,"col": 15,"name": "file_path_w"},{"file": 53,"line": 2071,"col": 16,"name": "dirfd"},{"file": 53,"line": 2071,"col": 29,"name": "file_path"},{"file": 53,"line": 2071,"col": 52,"name": "flags"},{"file": 53,"line": 2085,"col": 20,"name": "dirfd"},{"file": 53,"line": 2085,"col": 33,"name": "file_path"},{"file": 53,"line": 2085,"col": 56,"name": "flags"},{"file": 53,"line": 2116,"col": 17,"name": "dirfd"},{"file": 53,"line": 2116,"col": 30,"name": "file_path_c"},{"file": 53,"line": 2116,"col": 58,"name": "flags"},{"file": 53,"line": 2146,"col": 17,"name": "dirfd"},{"file": 53,"line": 2146,"col": 30,"name": "sub_path_w"},{"file": 53,"line": 2146,"col": 55,"name": "flags"},{"file": 53,"line": 2176,"col": 14,"name": "old_path"},{"file": 53,"line": 2176,"col": 36,"name": "new_path"},{"file": 53,"line": 2191,"col": 15,"name": "old_path"},{"file": 53,"line": 2191,"col": 40,"name": "new_path"},{"file": 53,"line": 2223,"col": 15,"name": "old_path"},{"file": 53,"line": 2223,"col": 41,"name": "new_path"},{"file": 53,"line": 2230,"col": 4,"name": "old_dir_fd"},{"file": 53,"line": 2231,"col": 4,"name": "old_path"},{"file": 53,"line": 2232,"col": 4,"name": "new_dir_fd"},{"file": 53,"line": 2233,"col": 4,"name": "new_path"},{"file": 53,"line": 2250,"col": 20,"name": "old_dir_fd"},{"file": 53,"line": 2250,"col": 38,"name": "old_path"},{"file": 53,"line": 2250,"col": 60,"name": "new_dir_fd"},{"file": 53,"line": 2250,"col": 78,"name": "new_path"},{"file": 53,"line": 2278,"col": 4,"name": "old_dir_fd"},{"file": 53,"line": 2279,"col": 4,"name": "old_path"},{"file": 53,"line": 2280,"col": 4,"name": "new_dir_fd"},{"file": 53,"line": 2281,"col": 4,"name": "new_path"},{"file": 53,"line": 2316,"col": 4,"name": "old_dir_fd"},{"file": 53,"line": 2317,"col": 4,"name": "old_path_w"},{"file": 53,"line": 2318,"col": 4,"name": "new_dir_fd"},{"file": 53,"line": 2319,"col": 4,"name": "new_path_w"},{"file": 53,"line": 2320,"col": 4,"name": "ReplaceIfExists"},{"file": 53,"line": 2371,"col": 15,"name": "dir_fd"},{"file": 53,"line": 2371,"col": 29,"name": "sub_dir_path"},{"file": 53,"line": 2371,"col": 55,"name": "mode"},{"file": 53,"line": 2383,"col": 19,"name": "dir_fd"},{"file": 53,"line": 2383,"col": 33,"name": "sub_dir_path"},{"file": 53,"line": 2383,"col": 59,"name": "mode"},{"file": 53,"line": 2406,"col": 16,"name": "dir_fd"},{"file": 53,"line": 2406,"col": 30,"name": "sub_dir_path"},{"file": 53,"line": 2406,"col": 59,"name": "mode"},{"file": 53,"line": 2431,"col": 16,"name": "dir_fd"},{"file": 53,"line": 2431,"col": 30,"name": "sub_path_w"},{"file": 53,"line": 2431,"col": 55,"name": "mode"},{"file": 53,"line": 2469,"col": 13,"name": "dir_path"},{"file": 53,"line": 2469,"col": 35,"name": "mode"},{"file": 53,"line": 2482,"col": 14,"name": "dir_path"},{"file": 53,"line": 2482,"col": 39,"name": "mode"},{"file": 53,"line": 2507,"col": 14,"name": "dir_path_w"},{"file": 53,"line": 2507,"col": 39,"name": "mode"},{"file": 53,"line": 2539,"col": 13,"name": "dir_path"},{"file": 53,"line": 2552,"col": 14,"name": "dir_path"},{"file": 53,"line": 2577,"col": 14,"name": "dir_path_w"},{"file": 53,"line": 2600,"col": 13,"name": "dir_path"},{"file": 53,"line": 2615,"col": 14,"name": "dir_path"},{"file": 53,"line": 2637,"col": 14,"name": "dir_path"},{"file": 53,"line": 2650,"col": 14,"name": "dirfd"},{"file": 53,"line": 2684,"col": 16,"name": "file_path"},{"file": 53,"line": 2684,"col": 39,"name": "out_buffer"},{"file": 53,"line": 2698,"col": 17,"name": "file_path"},{"file": 53,"line": 2698,"col": 41,"name": "out_buffer"},{"file": 53,"line": 2703,"col": 17,"name": "file_path"},{"file": 53,"line": 2703,"col": 43,"name": "out_buffer"},{"file": 53,"line": 2727,"col": 18,"name": "dirfd"},{"file": 53,"line": 2727,"col": 31,"name": "file_path"},{"file": 53,"line": 2727,"col": 54,"name": "out_buffer"},{"file": 53,"line": 2741,"col": 22,"name": "dirfd"},{"file": 53,"line": 2741,"col": 35,"name": "file_path"},{"file": 53,"line": 2741,"col": 58,"name": "out_buffer"},{"file": 53,"line": 2761,"col": 19,"name": "dirfd"},{"file": 53,"line": 2761,"col": 32,"name": "file_path"},{"file": 53,"line": 2761,"col": 56,"name": "out_buffer"},{"file": 53,"line": 2767,"col": 19,"name": "dirfd"},{"file": 53,"line": 2767,"col": 32,"name": "file_path"},{"file": 53,"line": 2767,"col": 58,"name": "out_buffer"},{"file": 53,"line": 2795,"col": 14,"name": "uid"},{"file": 53,"line": 2805,"col": 15,"name": "uid"},{"file": 53,"line": 2814,"col": 16,"name": "ruid"},{"file": 53,"line": 2814,"col": 29,"name": "euid"},{"file": 53,"line": 2824,"col": 14,"name": "gid"},{"file": 53,"line": 2834,"col": 15,"name": "uid"},{"file": 53,"line": 2843,"col": 16,"name": "rgid"},{"file": 53,"line": 2843,"col": 29,"name": "egid"},{"file": 53,"line": 2898,"col": 19,"name": "handle"},{"file": 53,"line": 2948,"col": 14,"name": "domain"},{"file": 53,"line": 2948,"col": 27,"name": "socket_type"},{"file": 53,"line": 2948,"col": 45,"name": "protocol"},{"file": 53,"line": 3023,"col": 16,"name": "sock"},{"file": 53,"line": 3023,"col": 32,"name": "how"},{"file": 53,"line": 3059,"col": 19,"name": "sock"},{"file": 53,"line": 3110,"col": 12,"name": "sock"},{"file": 53,"line": 3110,"col": 28,"name": "addr"},{"file": 53,"line": 3110,"col": 51,"name": "len"},{"file": 53,"line": 3180,"col": 14,"name": "sock"},{"file": 53,"line": 3180,"col": 30,"name": "backlog"},{"file": 53,"line": 3256,"col": 4,"docs": " This argument is a socket that has been created with `socket`, bound to a local address with `bind`, and is listening for connections after a `listen`.","name": "sock"},{"file": 53,"line": 3261,"col": 4,"docs": " This argument is a pointer to a sockaddr structure.  This structure is filled in with  the address  of  the  peer  socket, as known to the communications layer.  The exact format of the address returned addr is determined by the socket's address  family  (see  `socket`  and  the respective  protocol  man  pages).","name": "addr"},{"file": 53,"line": 3268,"col": 4,"docs": " This argument is a value-result argument: the caller must initialize it to contain  the size (in bytes) of the structure pointed to by addr; on return it will contain the actual size of the peer address. The returned address is truncated if the buffer provided is too small; in this  case,  `addr_size` will return a value greater than was supplied to the call.","name": "addr_size"},{"file": 53,"line": 3275,"col": 4,"docs": " The following values can be bitwise ORed in flags to obtain different behavior: * `SOCK.NONBLOCK` - Set the `O.NONBLOCK` file status flag on the open file description (see `open`)   referred  to by the new file descriptor.  Using this flag saves extra calls to `fcntl` to achieve   the same result. * `SOCK.CLOEXEC`  - Set the close-on-exec (`FD_CLOEXEC`) flag on the new file descriptor.   See  the   description  of the `O.CLOEXEC` flag in `open` for reasons why this may be useful.","name": "flags"},{"file": 53,"line": 3349,"col": 21,"name": "flags"},{"file": 53,"line": 3388,"col": 17,"name": "epfd"},{"file": 53,"line": 3388,"col": 28,"name": "op"},{"file": 53,"line": 3388,"col": 37,"name": "fd"},{"file": 53,"line": 3388,"col": 46,"name": "event"},{"file": 53,"line": 3408,"col": 18,"name": "epfd"},{"file": 53,"line": 3408,"col": 29,"name": "events"},{"file": 53,"line": 3408,"col": 58,"name": "timeout"},{"file": 53,"line": 3429,"col": 15,"name": "initval"},{"file": 53,"line": 3429,"col": 29,"name": "flags"},{"file": 53,"line": 3456,"col": 19,"name": "sock"},{"file": 53,"line": 3456,"col": 35,"name": "addr"},{"file": 53,"line": 3456,"col": 52,"name": "addrlen"},{"file": 53,"line": 3485,"col": 19,"name": "sock"},{"file": 53,"line": 3485,"col": 35,"name": "addr"},{"file": 53,"line": 3485,"col": 52,"name": "addrlen"},{"file": 53,"line": 3564,"col": 15,"name": "sock"},{"file": 53,"line": 3564,"col": 31,"name": "sock_addr"},{"file": 53,"line": 3564,"col": 59,"name": "len"},{"file": 53,"line": 3616,"col": 23,"name": "sockfd"},{"file": 53,"line": 3656,"col": 15,"name": "pid"},{"file": 53,"line": 3656,"col": 27,"name": "flags"},{"file": 53,"line": 3721,"col": 15,"name": "dirfd"},{"file": 53,"line": 3721,"col": 28,"name": "pathname"},{"file": 53,"line": 3721,"col": 50,"name": "flags"},{"file": 53,"line": 3734,"col": 19,"name": "dirfd"},{"file": 53,"line": 3734,"col": 32,"name": "pathname"},{"file": 53,"line": 3734,"col": 54,"name": "flags"},{"file": 53,"line": 3753,"col": 16,"name": "dirfd"},{"file": 53,"line": 3753,"col": 29,"name": "pathname"},{"file": 53,"line": 3753,"col": 54,"name": "flags"},{"file": 53,"line": 3813,"col": 4,"name": "kq"},{"file": 53,"line": 3814,"col": 4,"name": "changelist"},{"file": 53,"line": 3815,"col": 4,"name": "eventlist"},{"file": 53,"line": 3816,"col": 4,"name": "timeout"},{"file": 53,"line": 3849,"col": 21,"name": "flags"},{"file": 53,"line": 3871,"col": 25,"name": "inotify_fd"},{"file": 53,"line": 3871,"col": 42,"name": "pathname"},{"file": 53,"line": 3871,"col": 64,"name": "mask"},{"file": 53,"line": 3877,"col": 26,"name": "inotify_fd"},{"file": 53,"line": 3877,"col": 43,"name": "pathname"},{"file": 53,"line": 3877,"col": 68,"name": "mask"},{"file": 53,"line": 3895,"col": 24,"name": "inotify_fd"},{"file": 53,"line": 3895,"col": 41,"name": "wd"},{"file": 53,"line": 3919,"col": 16,"name": "memory"},{"file": 53,"line": 3919,"col": 51,"name": "protection"},{"file": 53,"line": 4034,"col": 14,"name": "path"},{"file": 53,"line": 4034,"col": 32,"name": "mode"},{"file": 53,"line": 4045,"col": 15,"name": "path"},{"file": 53,"line": 4045,"col": 36,"name": "mode"},{"file": 53,"line": 4071,"col": 15,"name": "path"},{"file": 53,"line": 4071,"col": 37,"name": "mode"},{"file": 53,"line": 4087,"col": 17,"name": "dirfd"},{"file": 53,"line": 4087,"col": 30,"name": "path"},{"file": 53,"line": 4087,"col": 48,"name": "mode"},{"file": 53,"line": 4087,"col": 59,"name": "flags"},{"file": 53,"line": 4097,"col": 18,"name": "dirfd"},{"file": 53,"line": 4097,"col": 31,"name": "path"},{"file": 53,"line": 4097,"col": 52,"name": "mode"},{"file": 53,"line": 4097,"col": 63,"name": "flags"},{"file": 53,"line": 4122,"col": 18,"name": "dirfd"},{"file": 53,"line": 4122,"col": 31,"name": "sub_path_w"},{"file": 53,"line": 4122,"col": 59,"name": "mode"},{"file": 53,"line": 4122,"col": 70,"name": "flags"},{"file": 53,"line": 4179,"col": 13,"name": "flags"},{"file": 53,"line": 4238,"col": 4,"name": "name"},{"file": 53,"line": 4239,"col": 4,"name": "oldp"},{"file": 53,"line": 4240,"col": 4,"name": "oldlenp"},{"file": 53,"line": 4241,"col": 4,"name": "newp"},{"file": 53,"line": 4242,"col": 4,"name": "newlen"},{"file": 53,"line": 4263,"col": 4,"name": "name"},{"file": 53,"line": 4264,"col": 4,"name": "oldp"},{"file": 53,"line": 4265,"col": 4,"name": "oldlenp"},{"file": 53,"line": 4266,"col": 4,"name": "newp"},{"file": 53,"line": 4267,"col": 4,"name": "newlen"},{"file": 53,"line": 4286,"col": 20,"name": "tv"},{"file": 53,"line": 4286,"col": 35,"name": "tz"},{"file": 53,"line": 4303,"col": 17,"name": "fd"},{"file": 53,"line": 4303,"col": 27,"name": "offset"},{"file": 53,"line": 4351,"col": 17,"name": "fd"},{"file": 53,"line": 4351,"col": 27,"name": "offset"},{"file": 53,"line": 4398,"col": 17,"name": "fd"},{"file": 53,"line": 4398,"col": 27,"name": "offset"},{"file": 53,"line": 4445,"col": 21,"name": "fd"},{"file": 53,"line": 4498,"col": 13,"name": "fd"},{"file": 53,"line": 4498,"col": 23,"name": "cmd"},{"file": 53,"line": 4498,"col": 33,"name": "arg"},{"file": 53,"line": 4627,"col": 16,"name": "pathname"},{"file": 53,"line": 4627,"col": 38,"name": "out_buffer"},{"file": 53,"line": 4640,"col": 17,"name": "pathname"},{"file": 53,"line": 4640,"col": 42,"name": "out_buffer"},{"file": 53,"line": 4675,"col": 17,"name": "pathname"},{"file": 53,"line": 4675,"col": 40,"name": "out_buffer"},{"file": 53,"line": 4715,"col": 17,"name": "fd"},{"file": 53,"line": 4715,"col": 27,"name": "out_buffer"},{"file": 53,"line": 4768,"col": 17,"name": "seconds"},{"file": 53,"line": 4768,"col": 31,"name": "nanoseconds"},{"file": 53,"line": 4943,"col": 25,"name": "pid"},{"file": 53,"line": 4998,"col": 19,"name": "ss"},{"file": 53,"line": 4998,"col": 34,"name": "old_ss"},{"file": 53,"line": 5043,"col": 16,"name": "fd"},{"file": 53,"line": 5043,"col": 26,"name": "times"},{"file": 53,"line": 5076,"col": 19,"name": "name_buffer"},{"file": 53,"line": 5106,"col": 4,"name": "op"},{"file": 53,"line": 5107,"col": 4,"name": "dname"},{"file": 53,"line": 5108,"col": 4,"name": "class"},{"file": 53,"line": 5109,"col": 4,"name": "ty"},{"file": 53,"line": 5110,"col": 4,"name": "data"},{"file": 53,"line": 5111,"col": 4,"name": "newrr"},{"file": 53,"line": 5112,"col": 4,"name": "buf"},{"file": 53,"line": 5223,"col": 4,"docs": " The file descriptor of the sending socket.","name": "sockfd"},{"file": 53,"line": 5225,"col": 4,"docs": " Message header and iovecs","name": "msg"},{"file": 53,"line": 5226,"col": 4,"name": "flags"},{"file": 53,"line": 5321,"col": 4,"docs": " The file descriptor of the sending socket.","name": "sockfd"},{"file": 53,"line": 5323,"col": 4,"docs": " Message to send.","name": "buf"},{"file": 53,"line": 5324,"col": 4,"name": "flags"},{"file": 53,"line": 5325,"col": 4,"name": "dest_addr"},{"file": 53,"line": 5326,"col": 4,"name": "addrlen"},{"file": 53,"line": 5413,"col": 4,"docs": " The file descriptor of the sending socket.","name": "sockfd"},{"file": 53,"line": 5414,"col": 4,"name": "buf"},{"file": 53,"line": 5415,"col": 4,"name": "flags"},{"file": 53,"line": 5475,"col": 4,"name": "out_fd"},{"file": 53,"line": 5476,"col": 4,"name": "in_fd"},{"file": 53,"line": 5477,"col": 4,"name": "in_offset"},{"file": 53,"line": 5478,"col": 4,"name": "in_len"},{"file": 53,"line": 5479,"col": 4,"name": "headers"},{"file": 53,"line": 5480,"col": 4,"name": "trailers"},{"file": 53,"line": 5481,"col": 4,"name": "flags"},{"file": 53,"line": 5796,"col": 23,"name": "fd_in"},{"file": 53,"line": 5796,"col": 36,"name": "off_in"},{"file": 53,"line": 5796,"col": 49,"name": "fd_out"},{"file": 53,"line": 5796,"col": 63,"name": "off_out"},{"file": 53,"line": 5796,"col": 77,"name": "len"},{"file": 53,"line": 5796,"col": 89,"name": "flags"},{"file": 53,"line": 5850,"col": 12,"name": "fds"},{"file": 53,"line": 5850,"col": 27,"name": "timeout"},{"file": 53,"line": 5888,"col": 13,"name": "fds"},{"file": 53,"line": 5888,"col": 28,"name": "timeout"},{"file": 53,"line": 5888,"col": 55,"name": "mask"},{"file": 53,"line": 5934,"col": 12,"name": "sock"},{"file": 53,"line": 5934,"col": 28,"name": "buf"},{"file": 53,"line": 5934,"col": 39,"name": "flags"},{"file": 53,"line": 5941,"col": 4,"name": "sockfd"},{"file": 53,"line": 5942,"col": 4,"name": "buf"},{"file": 53,"line": 5943,"col": 4,"name": "flags"},{"file": 53,"line": 5944,"col": 4,"name": "src_addr"},{"file": 53,"line": 5945,"col": 4,"name": "addrlen"},{"file": 53,"line": 5987,"col": 4,"name": "msg"},{"file": 53,"line": 5988,"col": 4,"name": "comp_dn"},{"file": 53,"line": 5989,"col": 4,"name": "exp_dn"},{"file": 53,"line": 6075,"col": 18,"name": "fd"},{"file": 53,"line": 6075,"col": 32,"name": "level"},{"file": 53,"line": 6075,"col": 44,"name": "optname"},{"file": 53,"line": 6075,"col": 58,"name": "opt"},{"file": 53,"line": 6117,"col": 21,"name": "name"},{"file": 53,"line": 6117,"col": 42,"name": "flags"},{"file": 53,"line": 6146,"col": 20,"name": "name"},{"file": 53,"line": 6146,"col": 38,"name": "flags"},{"file": 53,"line": 6151,"col": 17,"name": "who"},{"file": 53,"line": 6164,"col": 17,"name": "handle"},{"file": 53,"line": 6179,"col": 17,"name": "handle"},{"file": 53,"line": 6179,"col": 31,"name": "optional_action"},{"file": 53,"line": 6179,"col": 54,"name": "termios_p"},{"file": 53,"line": 6198,"col": 26,"name": "fd"},{"file": 53,"line": 6198,"col": 36,"name": "ifr"},{"file": 53,"line": 6215,"col": 16,"name": "fd"},{"file": 53,"line": 6215,"col": 26,"name": "mask"},{"file": 53,"line": 6215,"col": 49,"name": "flags"},{"file": 53,"line": 6242,"col": 14,"name": "fd"},{"file": 53,"line": 6255,"col": 13,"name": "fd"},{"file": 53,"line": 6279,"col": 17,"name": "fd"},{"file": 53,"line": 6312,"col": 13,"name": "option"},{"file": 53,"line": 6312,"col": 25,"name": "args"},{"file": 53,"line": 6341,"col": 17,"name": "resource"},{"file": 53,"line": 6407,"col": 15,"name": "ptr"},{"file": 53,"line": 6407,"col": 48,"name": "length"},{"file": 53,"line": 6407,"col": 63,"name": "advice"},{"file": 53,"line": 6476,"col": 4,"name": "attr"},{"file": 53,"line": 6477,"col": 4,"name": "pid"},{"file": 53,"line": 6478,"col": 4,"name": "cpu"},{"file": 53,"line": 6479,"col": 4,"name": "group_fd"},{"file": 53,"line": 6480,"col": 4,"name": "flags"},{"file": 53,"line": 394,"col": 28,"name": "buf"},{"file": 53,"line": 1344,"col": 24,"name": "flags"},{"file": 53,"line": 4516,"col": 16,"name": "sock"},{"file": 53,"line": 4516,"col": 32,"name": "flags"},{"file": 53,"line": 5432,"col": 21,"name": "iovs"},{"file": 53,"line": 6137,"col": 15,"name": "name"},{"file": 54,"line": 462,"col": 23,"name": "stream"},{"file": 54,"line": 462,"col": 40,"name": "allocator"},{"file": 54,"line": 946,"col": 22,"name": "size"},{"file": 54,"line": 946,"col": 33,"name": "block_size"},{"file": 55,"line": 18,"col": 14,"name": "out_buffer"},{"file": 55,"line": 23,"col": 19,"name": "allocator"},{"file": 55,"line": 56,"col": 17,"name": "allocator"},{"file": 55,"line": 156,"col": 22,"name": "allocator"},{"file": 55,"line": 156,"col": 48,"name": "key"},{"file": 55,"line": 185,"col": 17,"name": "allocator"},{"file": 55,"line": 185,"col": 39,"name": "key"},{"file": 55,"line": 515,"col": 25,"name": "allocator"},{"file": 55,"line": 624,"col": 19,"name": "name"},{"file": 55,"line": 633,"col": 24,"name": "name"},{"file": 55,"line": 742,"col": 32,"name": "allocator"},{"file": 55,"line": 834,"col": 13,"name": "allocator"},{"file": 55,"line": 834,"col": 39,"name": "argv"},{"file": 55,"line": 847,"col": 4,"name": "allocator"},{"file": 55,"line": 848,"col": 4,"name": "argv"},{"file": 55,"line": 849,"col": 4,"name": "env_map"},{"file": 55,"line": 608,"col": 22,"name": "input_cmd_line"},{"file": 55,"line": 608,"col": 52,"name": "expected_args"},{"file": 56,"line": 7,"col": 4,"name": "T","comptime": true},{"file": 56,"line": 8,"col": 4,"name": "key"},{"file": 56,"line": 9,"col": 4,"name": "items"},{"file": 56,"line": 10,"col": 4,"name": "context"},{"file": 56,"line": 11,"col": 4,"name": "compareFn","comptime": true},{"file": 56,"line": 77,"col": 4,"name": "T","comptime": true},{"file": 56,"line": 78,"col": 4,"name": "items"},{"file": 56,"line": 79,"col": 4,"name": "context"},{"file": 56,"line": 80,"col": 4,"name": "lessThan","comptime": true},{"file": 56,"line": 183,"col": 4,"name": "T","comptime": true},{"file": 56,"line": 184,"col": 4,"name": "items"},{"file": 56,"line": 185,"col": 4,"name": "context"},{"file": 56,"line": 186,"col": 4,"name": "lessThan","comptime": true},{"file": 56,"line": 1128,"col": 11,"name": "T","comptime": true},{"file": 56,"line": 1140,"col": 12,"name": "T","comptime": true},{"file": 56,"line": 1362,"col": 4,"name": "T","comptime": true},{"file": 56,"line": 1363,"col": 4,"name": "items"},{"file": 56,"line": 1364,"col": 4,"name": "context"},{"file": 56,"line": 1365,"col": 4,"name": "lessThan","comptime": true},{"file": 56,"line": 1394,"col": 4,"name": "T","comptime": true},{"file": 56,"line": 1395,"col": 4,"name": "items"},{"file": 56,"line": 1396,"col": 4,"name": "context"},{"file": 56,"line": 1397,"col": 4,"name": "lessThan","comptime": true},{"file": 56,"line": 1414,"col": 4,"name": "T","comptime": true},{"file": 56,"line": 1415,"col": 4,"name": "items"},{"file": 56,"line": 1416,"col": 4,"name": "context"},{"file": 56,"line": 1417,"col": 4,"name": "lessThan","comptime": true},{"file": 56,"line": 1446,"col": 4,"name": "T","comptime": true},{"file": 56,"line": 1447,"col": 4,"name": "items"},{"file": 56,"line": 1448,"col": 4,"name": "context"},{"file": 56,"line": 1449,"col": 4,"name": "lessThan","comptime": true},{"file": 56,"line": 1466,"col": 4,"name": "T","comptime": true},{"file": 56,"line": 1467,"col": 4,"name": "items"},{"file": 56,"line": 1468,"col": 4,"name": "context"},{"file": 56,"line": 1469,"col": 4,"name": "lessThan","comptime": true},{"file": 56,"line": 812,"col": 4,"name": "T","comptime": true},{"file": 56,"line": 813,"col": 4,"name": "items"},{"file": 56,"line": 814,"col": 4,"name": "A_arg"},{"file": 56,"line": 815,"col": 4,"name": "B_arg"},{"file": 56,"line": 816,"col": 4,"name": "context"},{"file": 56,"line": 817,"col": 4,"name": "lessThan","comptime": true},{"file": 56,"line": 861,"col": 4,"name": "T","comptime": true},{"file": 56,"line": 862,"col": 4,"name": "items"},{"file": 56,"line": 863,"col": 4,"name": "A"},{"file": 56,"line": 864,"col": 4,"name": "B"},{"file": 56,"line": 865,"col": 4,"name": "context"},{"file": 56,"line": 866,"col": 4,"name": "lessThan","comptime": true},{"file": 56,"line": 867,"col": 4,"name": "buffer"},{"file": 56,"line": 895,"col": 13,"name": "T","comptime": true},{"file": 56,"line": 895,"col": 31,"name": "items"},{"file": 56,"line": 895,"col": 43,"name": "start1"},{"file": 56,"line": 895,"col": 58,"name": "start2"},{"file": 56,"line": 895,"col": 73,"name": "block_size"},{"file": 56,"line": 905,"col": 4,"name": "T","comptime": true},{"file": 56,"line": 906,"col": 4,"name": "items"},{"file": 56,"line": 907,"col": 4,"name": "value"},{"file": 56,"line": 908,"col": 4,"name": "range"},{"file": 56,"line": 909,"col": 4,"name": "context"},{"file": 56,"line": 910,"col": 4,"name": "lessThan","comptime": true},{"file": 56,"line": 911,"col": 4,"name": "unique"},{"file": 56,"line": 927,"col": 4,"name": "T","comptime": true},{"file": 56,"line": 928,"col": 4,"name": "items"},{"file": 56,"line": 929,"col": 4,"name": "value"},{"file": 56,"line": 930,"col": 4,"name": "range"},{"file": 56,"line": 931,"col": 4,"name": "context"},{"file": 56,"line": 932,"col": 4,"name": "lessThan","comptime": true},{"file": 56,"line": 933,"col": 4,"name": "unique"},{"file": 56,"line": 949,"col": 4,"name": "T","comptime": true},{"file": 56,"line": 950,"col": 4,"name": "items"},{"file": 56,"line": 951,"col": 4,"name": "value"},{"file": 56,"line": 952,"col": 4,"name": "range"},{"file": 56,"line": 953,"col": 4,"name": "context"},{"file": 56,"line": 954,"col": 4,"name": "lessThan","comptime": true},{"file": 56,"line": 955,"col": 4,"name": "unique"},{"file": 56,"line": 971,"col": 4,"name": "T","comptime": true},{"file": 56,"line": 972,"col": 4,"name": "items"},{"file": 56,"line": 973,"col": 4,"name": "value"},{"file": 56,"line": 974,"col": 4,"name": "range"},{"file": 56,"line": 975,"col": 4,"name": "context"},{"file": 56,"line": 976,"col": 4,"name": "lessThan","comptime": true},{"file": 56,"line": 977,"col": 4,"name": "unique"},{"file": 56,"line": 993,"col": 4,"name": "T","comptime": true},{"file": 56,"line": 994,"col": 4,"name": "items"},{"file": 56,"line": 995,"col": 4,"name": "value"},{"file": 56,"line": 996,"col": 4,"name": "range"},{"file": 56,"line": 997,"col": 4,"name": "context"},{"file": 56,"line": 998,"col": 4,"name": "lessThan","comptime": true},{"file": 56,"line": 1016,"col": 4,"name": "T","comptime": true},{"file": 56,"line": 1017,"col": 4,"name": "items"},{"file": 56,"line": 1018,"col": 4,"name": "value"},{"file": 56,"line": 1019,"col": 4,"name": "range"},{"file": 56,"line": 1020,"col": 4,"name": "context"},{"file": 56,"line": 1021,"col": 4,"name": "lessThan","comptime": true},{"file": 56,"line": 1039,"col": 4,"name": "T","comptime": true},{"file": 56,"line": 1040,"col": 4,"name": "from"},{"file": 56,"line": 1041,"col": 4,"name": "A"},{"file": 56,"line": 1042,"col": 4,"name": "B"},{"file": 56,"line": 1043,"col": 4,"name": "context"},{"file": 56,"line": 1044,"col": 4,"name": "lessThan","comptime": true},{"file": 56,"line": 1045,"col": 4,"name": "into"},{"file": 56,"line": 1077,"col": 4,"name": "T","comptime": true},{"file": 56,"line": 1078,"col": 4,"name": "items"},{"file": 56,"line": 1079,"col": 4,"name": "A"},{"file": 56,"line": 1080,"col": 4,"name": "B"},{"file": 56,"line": 1081,"col": 4,"name": "context"},{"file": 56,"line": 1082,"col": 4,"name": "lessThan","comptime": true},{"file": 56,"line": 1083,"col": 4,"name": "cache"},{"file": 56,"line": 1113,"col": 4,"name": "T","comptime": true},{"file": 56,"line": 1114,"col": 4,"name": "items"},{"file": 56,"line": 1115,"col": 4,"name": "context"},{"file": 56,"line": 1116,"col": 4,"name": "lessThan","comptime": true},{"file": 56,"line": 1117,"col": 4,"name": "order"},{"file": 56,"line": 1118,"col": 4,"name": "x"},{"file": 56,"line": 1119,"col": 4,"name": "y"},{"file": 56,"line": 1203,"col": 14,"name": "context"},{"file": 56,"line": 1203,"col": 29,"name": "a"},{"file": 56,"line": 1203,"col": 44,"name": "b"},{"file": 56,"line": 1340,"col": 12,"name": "rng"},{"file": 57,"line": 26,"col": 19,"name": "expected_error"},{"file": 57,"line": 26,"col": 45,"name": "actual_error_union"},{"file": 57,"line": 197,"col": 17,"name": "expected"},{"file": 57,"line": 197,"col": 39,"name": "template","comptime": true},{"file": 57,"line": 197,"col": 70,"name": "args"},{"file": 57,"line": 215,"col": 25,"name": "expected"},{"file": 57,"line": 215,"col": 44,"name": "actual"},{"file": 57,"line": 215,"col": 71,"name": "tolerance"},{"file": 57,"line": 247,"col": 25,"name": "expected"},{"file": 57,"line": 247,"col": 44,"name": "actual"},{"file": 57,"line": 247,"col": 71,"name": "tolerance"},{"file": 57,"line": 281,"col": 25,"name": "T","comptime": true},{"file": 57,"line": 281,"col": 43,"name": "expected"},{"file": 57,"line": 281,"col": 64,"name": "actual"},{"file": 57,"line": 336,"col": 14,"name": "opts"},{"file": 57,"line": 379,"col": 26,"name": "expected"},{"file": 57,"line": 379,"col": 48,"name": "actual"},{"file": 57,"line": 403,"col": 28,"name": "actual"},{"file": 57,"line": 403,"col": 48,"name": "expected_ends_with"},{"file": 57,"line": 423,"col": 22,"name": "source"},{"file": 57,"line": 423,"col": 42,"name": "indicator_index"},{"file": 57,"line": 442,"col": 28,"name": "source"},{"file": 57,"line": 450,"col": 13,"name": "line"},{"file": 58,"line": 11,"col": 13,"name": "nanoseconds"},{"file": 58,"line": 248,"col": 14,"name": "a"},{"file": 58,"line": 248,"col": 22,"name": "b"},{"file": 58,"line": 248,"col": 30,"name": "c"},{"file": 59,"line": 7,"col": 35,"name": "c"},{"file": 59,"line": 34,"col": 18,"name": "c"},{"file": 59,"line": 34,"col": 26,"name": "out"},{"file": 59,"line": 151,"col": 26,"name": "value"},{"file": 59,"line": 194,"col": 25,"name": "s"},{"file": 59,"line": 552,"col": 26,"name": "allocator"},{"file": 59,"line": 552,"col": 52,"name": "utf16le"},{"file": 59,"line": 569,"col": 27,"name": "allocator"},{"file": 59,"line": 569,"col": 53,"name": "utf16le"},{"file": 59,"line": 591,"col": 21,"name": "utf8"},{"file": 59,"line": 591,"col": 33,"name": "utf16le"},{"file": 59,"line": 663,"col": 29,"name": "allocator"},{"file": 59,"line": 663,"col": 55,"name": "utf8"},{"file": 59,"line": 691,"col": 21,"name": "utf16le"},{"file": 59,"line": 691,"col": 37,"name": "utf8"},{"file": 59,"line": 752,"col": 34,"name": "utf8","comptime": true},{"file": 59,"line": 804,"col": 18,"name": "utf16le"},{"file": 59,"line": 367,"col": 19,"name": "codePoint"},{"file": 59,"line": 367,"col": 35,"name": "array"},{"file": 59,"line": 367,"col": 48,"name": "expectedErr"},{"file": 59,"line": 536,"col": 13,"name": "bytes"},{"file": 59,"line": 536,"col": 32,"name": "expected_err"},{"file": 59,"line": 540,"col": 13,"name": "bytes"},{"file": 59,"line": 540,"col": 32,"name": "expected_codepoint"},{"file": 59,"line": 544,"col": 14,"name": "bytes"},{"file": 59,"line": 762,"col": 18,"name": "utf8"},{"file": 59,"line": 781,"col": 4,"name": "utf16le"},{"file": 59,"line": 782,"col": 4,"name": "fmt","comptime": true},{"file": 59,"line": 783,"col": 4,"name": "options"},{"file": 59,"line": 784,"col": 4,"name": "writer"},{"file": 60,"line": 123,"col": 9,"name": "code"},{"file": 60,"line": 191,"col": 33,"name": "exit_code"},{"file": 60,"line": 196,"col": 4,"name": "hinstDLL"},{"file": 60,"line": 197,"col": 4,"name": "fdwReason"},{"file": 60,"line": 198,"col": 4,"name": "lpReserved"},{"file": 60,"line": 226,"col": 11,"name": "handle"},{"file": 60,"line": 226,"col": 32,"name": "system_table"},{"file": 60,"line": 447,"col": 8,"name": "c_argc"},{"file": 60,"line": 447,"col": 21,"name": "c_argv"},{"file": 60,"line": 447,"col": 41,"name": "c_envp"},{"file": 60,"line": 462,"col": 18,"name": "c_argc"},{"file": 60,"line": 462,"col": 31,"name": "c_argv"},{"file": 60,"line": 526,"col": 17,"name": "loop"},{"file": 60,"line": 534,"col": 20,"name": "loop"},{"file": 61,"line": 30,"col": 11,"name": "ev"},{"file": 61,"line": 45,"col": 13,"name": "ev"},{"file": 61,"line": 58,"col": 17,"name": "ev"},{"file": 61,"line": 58,"col": 40,"name": "timeout_ns"},{"file": 44,"line": 322,"col": 25,"name": "self"},{"file": 44,"line": 322,"col": 43,"name": "id"},{"file": 61,"line": 123,"col": 16,"name": "ev"},{"file": 61,"line": 129,"col": 18,"name": "ev"},{"file": 61,"line": 133,"col": 15,"name": "ev"},{"file": 61,"line": 161,"col": 17,"name": "ev"},{"file": 22,"line": 503,"col": 17,"name": "lhs"},{"file": 22,"line": 503,"col": 31,"name": "rhs"},{"file": 22,"line": 513,"col": 17,"name": "text"},{"file": 22,"line": 538,"col": 8,"name": "self"},{"file": 22,"line": 539,"col": 8,"name": "fmt","comptime": true},{"file": 22,"line": 540,"col": 8,"name": "options"},{"file": 22,"line": 541,"col": 8,"name": "out_stream"},{"file": 65,"line": 9,"col": 18,"name": "traits","comptime": true},{"file": 65,"line": 66,"col": 16,"name": "name","comptime": true},{"file": 65,"line": 131,"col": 17,"name": "id","comptime": true},{"file": 65,"line": 152,"col": 16,"name": "T","comptime": true},{"file": 65,"line": 170,"col": 16,"name": "T","comptime": true},{"file": 65,"line": 188,"col": 21,"name": "T","comptime": true},{"file": 65,"line": 202,"col": 19,"name": "T","comptime": true},{"file": 65,"line": 232,"col": 21,"name": "T","comptime": true},{"file": 65,"line": 323,"col": 15,"name": "T","comptime": true},{"file": 65,"line": 339,"col": 18,"name": "T","comptime": true},{"file": 65,"line": 403,"col": 19,"name": "T","comptime": true},{"file": 65,"line": 469,"col": 16,"name": "T","comptime": true},{"file": 65,"line": 469,"col": 34,"name": "names","comptime": true},{"file": 65,"line": 495,"col": 17,"name": "T","comptime": true},{"file": 65,"line": 495,"col": 35,"name": "names","comptime": true},{"file": 65,"line": 521,"col": 20,"name": "T","comptime": true},{"file": 65,"line": 521,"col": 38,"name": "names","comptime": true},{"file": 63,"line": 136,"col": 16,"name": "seed"},{"file": 63,"line": 144,"col": 18,"name": "self"},{"file": 63,"line": 144,"col": 33,"name": "b"},{"file": 63,"line": 162,"col": 17,"name": "self"},{"file": 13,"line": 135,"col": 29,"name": "self"},{"file": 13,"line": 135,"col": 51,"name": "ver"},{"file": 13,"line": 159,"col": 16,"name": "self"},{"file": 13,"line": 160,"col": 16,"name": "fmt","comptime": true},{"file": 13,"line": 161,"col": 16,"name": "_"},{"file": 13,"line": 162,"col": 16,"name": "out_stream"},{"file": 13,"line": 185,"col": 35,"name": "self"},{"file": 13,"line": 185,"col": 60,"name": "ver"},{"file": 13,"line": 191,"col": 29,"name": "self"},{"file": 13,"line": 191,"col": 54,"name": "ver"},{"file": 13,"line": 228,"col": 27,"name": "tag"},{"file": 13,"line": 228,"col": 37,"name": "arch"},{"file": 13,"line": 1252,"col": 25,"name": "model"},{"file": 13,"line": 1252,"col": 46,"name": "arch"},{"file": 13,"line": 1262,"col": 27,"name": "arch"},{"file": 13,"line": 1299,"col": 28,"name": "arch"},{"file": 66,"line": 195,"col": 11,"name": "old"},{"file": 66,"line": 199,"col": 12,"name": "old"},{"file": 66,"line": 199,"col": 22,"name": "new"},{"file": 66,"line": 215,"col": 12,"name": "old"},{"file": 66,"line": 215,"col": 22,"name": "new"},{"file": 66,"line": 215,"col": 32,"name": "flags"},{"file": 66,"line": 219,"col": 13,"name": "path"},{"file": 66,"line": 223,"col": 14,"name": "fd"},{"file": 66,"line": 227,"col": 14,"name": "path"},{"file": 66,"line": 231,"col": 14,"name": "path"},{"file": 66,"line": 231,"col": 35,"name": "argv"},{"file": 66,"line": 231,"col": 71,"name": "envp"},{"file": 66,"line": 254,"col": 16,"name": "fd"},{"file": 66,"line": 254,"col": 25,"name": "times"},{"file": 66,"line": 258,"col": 17,"name": "dirfd"},{"file": 66,"line": 258,"col": 29,"name": "path"},{"file": 66,"line": 258,"col": 51,"name": "times"},{"file": 66,"line": 258,"col": 78,"name": "flags"},{"file": 66,"line": 262,"col": 17,"name": "fd"},{"file": 66,"line": 262,"col": 26,"name": "mode"},{"file": 66,"line": 262,"col": 37,"name": "offset"},{"file": 66,"line": 262,"col": 50,"name": "length"},{"file": 66,"line": 294,"col": 14,"name": "buf"},{"file": 66,"line": 294,"col": 26,"name": "size"},{"file": 66,"line": 298,"col": 16,"name": "fd"},{"file": 66,"line": 298,"col": 25,"name": "dirp"},{"file": 66,"line": 298,"col": 38,"name": "len"},{"file": 66,"line": 307,"col": 18,"name": "fd"},{"file": 66,"line": 307,"col": 27,"name": "dirp"},{"file": 66,"line": 307,"col": 40,"name": "len"},{"file": 66,"line": 316,"col": 21,"name": "flags"},{"file": 66,"line": 320,"col": 25,"name": "fd"},{"file": 66,"line": 320,"col": 34,"name": "pathname"},{"file": 66,"line": 320,"col": 59,"name": "mask"},{"file": 66,"line": 324,"col": 24,"name": "fd"},{"file": 66,"line": 324,"col": 33,"name": "wd"},{"file": 66,"line": 328,"col": 16,"name": "path","noalias": true},{"file": 66,"line": 328,"col": 45,"name": "buf_ptr","noalias": true},{"file": 66,"line": 328,"col": 69,"name": "buf_len"},{"file": 66,"line": 336,"col": 18,"name": "dirfd"},{"file": 66,"line": 336,"col": 30,"name": "path","noalias": true},{"file": 66,"line": 336,"col": 59,"name": "buf_ptr","noalias": true},{"file": 66,"line": 336,"col": 83,"name": "buf_len"},{"file": 66,"line": 340,"col": 13,"name": "path"},{"file": 66,"line": 340,"col": 34,"name": "mode"},{"file": 66,"line": 348,"col": 15,"name": "dirfd"},{"file": 66,"line": 348,"col": 27,"name": "path"},{"file": 66,"line": 348,"col": 48,"name": "mode"},{"file": 66,"line": 352,"col": 13,"name": "path"},{"file": 66,"line": 352,"col": 34,"name": "mode"},{"file": 66,"line": 352,"col": 45,"name": "dev"},{"file": 66,"line": 360,"col": 15,"name": "dirfd"},{"file": 66,"line": 360,"col": 27,"name": "path"},{"file": 66,"line": 360,"col": 48,"name": "mode"},{"file": 66,"line": 360,"col": 59,"name": "dev"},{"file": 66,"line": 364,"col": 13,"name": "special"},{"file": 66,"line": 364,"col": 37,"name": "dir"},{"file": 66,"line": 364,"col": 57,"name": "fstype"},{"file": 66,"line": 364,"col": 80,"name": "flags"},{"file": 66,"line": 364,"col": 92,"name": "data"},{"file": 66,"line": 368,"col": 14,"name": "special"},{"file": 66,"line": 372,"col": 15,"name": "special"},{"file": 66,"line": 372,"col": 39,"name": "flags"},{"file": 66,"line": 404,"col": 16,"name": "address"},{"file": 66,"line": 404,"col": 38,"name": "length"},{"file": 66,"line": 404,"col": 53,"name": "protection"},{"file": 66,"line": 412,"col": 12,"name": "fds"},{"file": 66,"line": 412,"col": 28,"name": "n"},{"file": 66,"line": 412,"col": 39,"name": "timeout"},{"file": 66,"line": 433,"col": 13,"name": "fds"},{"file": 66,"line": 433,"col": 29,"name": "n"},{"file": 66,"line": 433,"col": 40,"name": "timeout"},{"file": 66,"line": 433,"col": 61,"name": "sigmask"},{"file": 66,"line": 441,"col": 14,"name": "fd"},{"file": 66,"line": 441,"col": 23,"name": "iov"},{"file": 66,"line": 441,"col": 44,"name": "count"},{"file": 66,"line": 441,"col": 58,"name": "offset"},{"file": 66,"line": 456,"col": 15,"name": "fd"},{"file": 66,"line": 456,"col": 24,"name": "iov"},{"file": 66,"line": 456,"col": 45,"name": "count"},{"file": 66,"line": 456,"col": 59,"name": "offset"},{"file": 66,"line": 456,"col": 72,"name": "flags"},{"file": 66,"line": 470,"col": 13,"name": "fd"},{"file": 66,"line": 470,"col": 22,"name": "iov"},{"file": 66,"line": 470,"col": 43,"name": "count"},{"file": 66,"line": 474,"col": 14,"name": "fd"},{"file": 66,"line": 474,"col": 23,"name": "iov"},{"file": 66,"line": 474,"col": 50,"name": "count"},{"file": 66,"line": 478,"col": 15,"name": "fd"},{"file": 66,"line": 478,"col": 24,"name": "iov"},{"file": 66,"line": 478,"col": 51,"name": "count"},{"file": 66,"line": 478,"col": 65,"name": "offset"},{"file": 66,"line": 491,"col": 16,"name": "fd"},{"file": 66,"line": 491,"col": 25,"name": "iov"},{"file": 66,"line": 491,"col": 52,"name": "count"},{"file": 66,"line": 491,"col": 66,"name": "offset"},{"file": 66,"line": 491,"col": 79,"name": "flags"},{"file": 66,"line": 505,"col": 13,"name": "path"},{"file": 66,"line": 513,"col": 15,"name": "existing"},{"file": 66,"line": 513,"col": 40,"name": "new"},{"file": 66,"line": 521,"col": 17,"name": "existing"},{"file": 66,"line": 521,"col": 42,"name": "newfd"},{"file": 66,"line": 521,"col": 54,"name": "newpath"},{"file": 66,"line": 525,"col": 13,"name": "fd"},{"file": 66,"line": 525,"col": 22,"name": "buf"},{"file": 66,"line": 525,"col": 34,"name": "count"},{"file": 66,"line": 525,"col": 48,"name": "offset"},{"file": 66,"line": 564,"col": 14,"name": "path"},{"file": 66,"line": 564,"col": 35,"name": "mode"},{"file": 66,"line": 572,"col": 17,"name": "dirfd"},{"file": 66,"line": 572,"col": 29,"name": "path"},{"file": 66,"line": 572,"col": 50,"name": "mode"},{"file": 66,"line": 572,"col": 61,"name": "flags"},{"file": 66,"line": 576,"col": 12,"name": "fd"},{"file": 66,"line": 586,"col": 13,"name": "fd"},{"file": 66,"line": 586,"col": 26,"name": "flags"},{"file": 66,"line": 594,"col": 17,"name": "fd"},{"file": 66,"line": 594,"col": 26,"name": "length"},{"file": 66,"line": 622,"col": 14,"name": "fd"},{"file": 66,"line": 622,"col": 23,"name": "buf"},{"file": 66,"line": 622,"col": 41,"name": "count"},{"file": 66,"line": 622,"col": 55,"name": "offset"},{"file": 66,"line": 662,"col": 14,"name": "old"},{"file": 66,"line": 662,"col": 34,"name": "new"},{"file": 66,"line": 672,"col": 16,"name": "oldfd"},{"file": 66,"line": 672,"col": 28,"name": "oldpath"},{"file": 66,"line": 672,"col": 50,"name": "newfd"},{"file": 66,"line": 672,"col": 62,"name": "newpath"},{"file": 66,"line": 693,"col": 17,"name": "oldfd"},{"file": 66,"line": 693,"col": 29,"name": "oldpath"},{"file": 66,"line": 693,"col": 53,"name": "newfd"},{"file": 66,"line": 693,"col": 65,"name": "newpath"},{"file": 66,"line": 693,"col": 89,"name": "flags"},{"file": 66,"line": 704,"col": 12,"name": "path"},{"file": 66,"line": 704,"col": 33,"name": "flags"},{"file": 66,"line": 704,"col": 45,"name": "perm"},{"file": 66,"line": 718,"col": 14,"name": "path"},{"file": 66,"line": 718,"col": 35,"name": "perm"},{"file": 66,"line": 728,"col": 14,"name": "flags"},{"file": 66,"line": 728,"col": 28,"name": "child_stack_ptr"},{"file": 66,"line": 728,"col": 52,"name": "parent_tid"},{"file": 66,"line": 728,"col": 70,"name": "child_tid"},{"file": 66,"line": 728,"col": 87,"name": "newtls"},{"file": 66,"line": 733,"col": 14,"name": "flags"},{"file": 66,"line": 733,"col": 26,"name": "child_stack_ptr"},{"file": 66,"line": 741,"col": 14,"name": "fd"},{"file": 66,"line": 741,"col": 23,"name": "mode"},{"file": 66,"line": 745,"col": 14,"name": "fd"},{"file": 66,"line": 745,"col": 23,"name": "owner"},{"file": 66,"line": 745,"col": 37,"name": "group"},{"file": 66,"line": 754,"col": 14,"name": "fd"},{"file": 66,"line": 754,"col": 23,"name": "offset"},{"file": 66,"line": 754,"col": 36,"name": "result"},{"file": 66,"line": 754,"col": 51,"name": "whence"},{"file": 66,"line": 768,"col": 13,"name": "fd"},{"file": 66,"line": 768,"col": 22,"name": "offset"},{"file": 66,"line": 768,"col": 35,"name": "whence"},{"file": 66,"line": 772,"col": 12,"name": "status"},{"file": 66,"line": 782,"col": 17,"name": "buf"},{"file": 66,"line": 782,"col": 29,"name": "count"},{"file": 66,"line": 782,"col": 43,"name": "flags"},{"file": 66,"line": 786,"col": 12,"name": "pid"},{"file": 66,"line": 786,"col": 24,"name": "sig"},{"file": 66,"line": 794,"col": 14,"name": "tgid"},{"file": 66,"line": 794,"col": 27,"name": "tid"},{"file": 66,"line": 794,"col": 39,"name": "sig"},{"file": 66,"line": 798,"col": 12,"name": "oldpath"},{"file": 66,"line": 798,"col": 36,"name": "newpath"},{"file": 66,"line": 798,"col": 60,"name": "flags"},{"file": 66,"line": 818,"col": 14,"name": "oldfd"},{"file": 66,"line": 818,"col": 27,"name": "oldpath"},{"file": 66,"line": 818,"col": 51,"name": "newfd"},{"file": 66,"line": 818,"col": 64,"name": "newpath"},{"file": 66,"line": 818,"col": 88,"name": "flags"},{"file": 66,"line": 829,"col": 14,"name": "path"},{"file": 66,"line": 837,"col": 16,"name": "dirfd"},{"file": 66,"line": 837,"col": 28,"name": "path"},{"file": 66,"line": 837,"col": 49,"name": "flags"},{"file": 66,"line": 841,"col": 15,"name": "pid"},{"file": 66,"line": 841,"col": 27,"name": "status"},{"file": 66,"line": 841,"col": 41,"name": "flags"},{"file": 66,"line": 845,"col": 14,"name": "id_type"},{"file": 66,"line": 845,"col": 26,"name": "id"},{"file": 66,"line": 845,"col": 35,"name": "infop"},{"file": 66,"line": 845,"col": 54,"name": "flags"},{"file": 66,"line": 849,"col": 13,"name": "fd"},{"file": 66,"line": 849,"col": 23,"name": "cmd"},{"file": 66,"line": 849,"col": 33,"name": "arg"},{"file": 66,"line": 894,"col": 21,"name": "clk_id"},{"file": 66,"line": 894,"col": 34,"name": "tp"},{"file": 66,"line": 898,"col": 20,"name": "tv"},{"file": 66,"line": 898,"col": 34,"name": "tz"},{"file": 66,"line": 902,"col": 20,"name": "tv"},{"file": 66,"line": 902,"col": 40,"name": "tz"},{"file": 66,"line": 906,"col": 17,"name": "req"},{"file": 66,"line": 906,"col": 39,"name": "rem"},{"file": 66,"line": 910,"col": 14,"name": "uid"},{"file": 66,"line": 918,"col": 14,"name": "gid"},{"file": 66,"line": 926,"col": 16,"name": "ruid"},{"file": 66,"line": 926,"col": 29,"name": "euid"},{"file": 66,"line": 934,"col": 16,"name": "rgid"},{"file": 66,"line": 934,"col": 29,"name": "egid"},{"file": 66,"line": 974,"col": 15,"name": "euid"},{"file": 66,"line": 985,"col": 15,"name": "egid"},{"file": 66,"line": 996,"col": 17,"name": "ruid"},{"file": 66,"line": 996,"col": 31,"name": "euid"},{"file": 66,"line": 996,"col": 45,"name": "suid"},{"file": 66,"line": 1004,"col": 17,"name": "rgid"},{"file": 66,"line": 1004,"col": 31,"name": "egid"},{"file": 66,"line": 1004,"col": 45,"name": "sgid"},{"file": 66,"line": 1012,"col": 17,"name": "ruid"},{"file": 66,"line": 1012,"col": 30,"name": "euid"},{"file": 66,"line": 1012,"col": 43,"name": "suid"},{"file": 66,"line": 1020,"col": 17,"name": "rgid"},{"file": 66,"line": 1020,"col": 30,"name": "egid"},{"file": 66,"line": 1020,"col": 43,"name": "sgid"},{"file": 66,"line": 1028,"col": 17,"name": "size"},{"file": 66,"line": 1028,"col": 30,"name": "list"},{"file": 66,"line": 1036,"col": 17,"name": "size"},{"file": 66,"line": 1036,"col": 30,"name": "list"},{"file": 66,"line": 1097,"col": 17,"name": "set"},{"file": 66,"line": 1097,"col": 33,"name": "sig"},{"file": 66,"line": 1105,"col": 19,"name": "set"},{"file": 66,"line": 1105,"col": 41,"name": "sig"},{"file": 66,"line": 1110,"col": 19,"name": "fd"},{"file": 66,"line": 1110,"col": 28,"name": "addr","noalias": true},{"file": 66,"line": 1110,"col": 53,"name": "len","noalias": true},{"file": 66,"line": 1117,"col": 19,"name": "fd"},{"file": 66,"line": 1117,"col": 28,"name": "addr","noalias": true},{"file": 66,"line": 1117,"col": 53,"name": "len","noalias": true},{"file": 66,"line": 1124,"col": 14,"name": "domain"},{"file": 66,"line": 1124,"col": 27,"name": "socket_type"},{"file": 66,"line": 1124,"col": 45,"name": "protocol"},{"file": 66,"line": 1131,"col": 18,"name": "fd"},{"file": 66,"line": 1131,"col": 27,"name": "level"},{"file": 66,"line": 1131,"col": 39,"name": "optname"},{"file": 66,"line": 1131,"col": 53,"name": "optval"},{"file": 66,"line": 1131,"col": 74,"name": "optlen"},{"file": 66,"line": 1138,"col": 18,"name": "fd"},{"file": 66,"line": 1138,"col": 27,"name": "level"},{"file": 66,"line": 1138,"col": 39,"name": "optname"},{"file": 66,"line": 1138,"col": 53,"name": "optval","noalias": true},{"file": 66,"line": 1138,"col": 76,"name": "optlen","noalias": true},{"file": 66,"line": 1145,"col": 15,"name": "fd"},{"file": 66,"line": 1145,"col": 24,"name": "msg"},{"file": 66,"line": 1145,"col": 61,"name": "flags"},{"file": 66,"line": 1152,"col": 16,"name": "fd"},{"file": 66,"line": 1152,"col": 25,"name": "msgvec"},{"file": 66,"line": 1152,"col": 51,"name": "vlen"},{"file": 66,"line": 1152,"col": 62,"name": "flags"},{"file": 66,"line": 1192,"col": 15,"name": "fd"},{"file": 66,"line": 1192,"col": 24,"name": "addr"},{"file": 66,"line": 1192,"col": 48,"name": "len"},{"file": 66,"line": 1199,"col": 15,"name": "fd"},{"file": 66,"line": 1199,"col": 24,"name": "msg"},{"file": 66,"line": 1199,"col": 55,"name": "flags"},{"file": 66,"line": 1206,"col": 16,"name": "fd"},{"file": 66,"line": 1206,"col": 25,"name": "buf","noalias": true},{"file": 66,"line": 1206,"col": 45,"name": "len"},{"file": 66,"line": 1206,"col": 57,"name": "flags"},{"file": 66,"line": 1206,"col": 69,"name": "addr","noalias": true},{"file": 66,"line": 1206,"col": 95,"name": "alen","noalias": true},{"file": 66,"line": 1213,"col": 16,"name": "fd"},{"file": 66,"line": 1213,"col": 25,"name": "how"},{"file": 66,"line": 1220,"col": 12,"name": "fd"},{"file": 66,"line": 1220,"col": 21,"name": "addr"},{"file": 66,"line": 1220,"col": 44,"name": "len"},{"file": 66,"line": 1227,"col": 14,"name": "fd"},{"file": 66,"line": 1227,"col": 23,"name": "backlog"},{"file": 66,"line": 1234,"col": 14,"name": "fd"},{"file": 66,"line": 1234,"col": 23,"name": "buf"},{"file": 66,"line": 1234,"col": 41,"name": "len"},{"file": 66,"line": 1234,"col": 53,"name": "flags"},{"file": 66,"line": 1234,"col": 65,"name": "addr"},{"file": 66,"line": 1234,"col": 89,"name": "alen"},{"file": 66,"line": 1241,"col": 16,"name": "outfd"},{"file": 66,"line": 1241,"col": 28,"name": "infd"},{"file": 66,"line": 1241,"col": 39,"name": "offset"},{"file": 66,"line": 1241,"col": 54,"name": "count"},{"file": 66,"line": 1261,"col": 18,"name": "domain"},{"file": 66,"line": 1261,"col": 31,"name": "socket_type"},{"file": 66,"line": 1261,"col": 49,"name": "protocol"},{"file": 66,"line": 1261,"col": 64,"name": "fd"},{"file": 66,"line": 1268,"col": 14,"name": "fd"},{"file": 66,"line": 1268,"col": 23,"name": "addr","noalias": true},{"file": 66,"line": 1268,"col": 49,"name": "len","noalias": true},{"file": 66,"line": 1275,"col": 15,"name": "fd"},{"file": 66,"line": 1275,"col": 24,"name": "addr","noalias": true},{"file": 66,"line": 1275,"col": 50,"name": "len","noalias": true},{"file": 66,"line": 1275,"col": 76,"name": "flags"},{"file": 66,"line": 1290,"col": 12,"name": "pathname"},{"file": 66,"line": 1290,"col": 37,"name": "statbuf"},{"file": 66,"line": 1298,"col": 13,"name": "pathname"},{"file": 66,"line": 1298,"col": 38,"name": "statbuf"},{"file": 66,"line": 1306,"col": 15,"name": "dirfd"},{"file": 66,"line": 1306,"col": 27,"name": "path"},{"file": 66,"line": 1306,"col": 48,"name": "stat_buf"},{"file": 66,"line": 1306,"col": 65,"name": "flags"},{"file": 66,"line": 1314,"col": 13,"name": "dirfd"},{"file": 66,"line": 1314,"col": 25,"name": "path"},{"file": 66,"line": 1314,"col": 44,"name": "flags"},{"file": 66,"line": 1314,"col": 56,"name": "mask"},{"file": 66,"line": 1314,"col": 67,"name": "statx_buf"},{"file": 66,"line": 1328,"col": 17,"name": "path"},{"file": 66,"line": 1328,"col": 38,"name": "list"},{"file": 66,"line": 1328,"col": 51,"name": "size"},{"file": 66,"line": 1332,"col": 18,"name": "path"},{"file": 66,"line": 1332,"col": 39,"name": "list"},{"file": 66,"line": 1332,"col": 52,"name": "size"},{"file": 66,"line": 1336,"col": 18,"name": "fd"},{"file": 66,"line": 1336,"col": 29,"name": "list"},{"file": 66,"line": 1336,"col": 42,"name": "size"},{"file": 66,"line": 1340,"col": 16,"name": "path"},{"file": 66,"line": 1340,"col": 37,"name": "name"},{"file": 66,"line": 1340,"col": 58,"name": "value"},{"file": 66,"line": 1340,"col": 72,"name": "size"},{"file": 66,"line": 1344,"col": 17,"name": "path"},{"file": 66,"line": 1344,"col": 38,"name": "name"},{"file": 66,"line": 1344,"col": 59,"name": "value"},{"file": 66,"line": 1344,"col": 73,"name": "size"},{"file": 66,"line": 1348,"col": 17,"name": "fd"},{"file": 66,"line": 1348,"col": 28,"name": "name"},{"file": 66,"line": 1348,"col": 49,"name": "value"},{"file": 66,"line": 1348,"col": 63,"name": "size"},{"file": 66,"line": 1352,"col": 16,"name": "path"},{"file": 66,"line": 1352,"col": 37,"name": "name"},{"file": 66,"line": 1352,"col": 58,"name": "value"},{"file": 66,"line": 1352,"col": 78,"name": "size"},{"file": 66,"line": 1352,"col": 91,"name": "flags"},{"file": 66,"line": 1356,"col": 17,"name": "path"},{"file": 66,"line": 1356,"col": 38,"name": "name"},{"file": 66,"line": 1356,"col": 59,"name": "value"},{"file": 66,"line": 1356,"col": 79,"name": "size"},{"file": 66,"line": 1356,"col": 92,"name": "flags"},{"file": 66,"line": 1360,"col": 17,"name": "fd"},{"file": 66,"line": 1360,"col": 28,"name": "name"},{"file": 66,"line": 1360,"col": 49,"name": "value"},{"file": 66,"line": 1360,"col": 69,"name": "size"},{"file": 66,"line": 1360,"col": 82,"name": "flags"},{"file": 66,"line": 1364,"col": 19,"name": "path"},{"file": 66,"line": 1364,"col": 40,"name": "name"},{"file": 66,"line": 1368,"col": 20,"name": "path"},{"file": 66,"line": 1368,"col": 41,"name": "name"},{"file": 66,"line": 1372,"col": 20,"name": "fd"},{"file": 66,"line": 1372,"col": 31,"name": "name"},{"file": 66,"line": 1380,"col": 25,"name": "pid"},{"file": 66,"line": 1380,"col": 37,"name": "size"},{"file": 66,"line": 1380,"col": 50,"name": "set"},{"file": 66,"line": 1391,"col": 21,"name": "flags"},{"file": 66,"line": 1395,"col": 17,"name": "epoll_fd"},{"file": 66,"line": 1395,"col": 32,"name": "op"},{"file": 66,"line": 1395,"col": 41,"name": "fd"},{"file": 66,"line": 1395,"col": 50,"name": "ev"},{"file": 66,"line": 1399,"col": 18,"name": "epoll_fd"},{"file": 66,"line": 1399,"col": 33,"name": "events"},{"file": 66,"line": 1399,"col": 57,"name": "maxevents"},{"file": 66,"line": 1399,"col": 73,"name": "timeout"},{"file": 66,"line": 1403,"col": 19,"name": "epoll_fd"},{"file": 66,"line": 1403,"col": 34,"name": "events"},{"file": 66,"line": 1403,"col": 58,"name": "maxevents"},{"file": 66,"line": 1403,"col": 74,"name": "timeout"},{"file": 66,"line": 1403,"col": 88,"name": "sigmask"},{"file": 66,"line": 1415,"col": 15,"name": "count"},{"file": 66,"line": 1415,"col": 27,"name": "flags"},{"file": 66,"line": 1419,"col": 22,"name": "clockid"},{"file": 66,"line": 1419,"col": 36,"name": "flags"},{"file": 66,"line": 1428,"col": 23,"name": "fd"},{"file": 66,"line": 1428,"col": 32,"name": "curr_value"},{"file": 66,"line": 1432,"col": 23,"name": "fd"},{"file": 66,"line": 1432,"col": 32,"name": "flags"},{"file": 66,"line": 1432,"col": 44,"name": "new_value"},{"file": 66,"line": 1432,"col": 74,"name": "old_value"},{"file": 66,"line": 1436,"col": 15,"name": "flags"},{"file": 66,"line": 1440,"col": 14,"name": "hdrp"},{"file": 66,"line": 1440,"col": 40,"name": "datap"},{"file": 66,"line": 1444,"col": 14,"name": "hdrp"},{"file": 66,"line": 1444,"col": 40,"name": "datap"},{"file": 66,"line": 1448,"col": 19,"name": "ss"},{"file": 66,"line": 1448,"col": 34,"name": "old_ss"},{"file": 66,"line": 1452,"col": 13,"name": "uts"},{"file": 66,"line": 1456,"col": 22,"name": "entries"},{"file": 66,"line": 1456,"col": 36,"name": "p"},{"file": 66,"line": 1460,"col": 22,"name": "fd"},{"file": 66,"line": 1460,"col": 31,"name": "to_submit"},{"file": 66,"line": 1460,"col": 47,"name": "min_complete"},{"file": 66,"line": 1460,"col": 66,"name": "flags"},{"file": 66,"line": 1460,"col": 78,"name": "sig"},{"file": 66,"line": 1464,"col": 25,"name": "fd"},{"file": 66,"line": 1464,"col": 34,"name": "opcode"},{"file": 66,"line": 1464,"col": 59,"name": "arg"},{"file": 66,"line": 1464,"col": 83,"name": "nr_args"},{"file": 66,"line": 1468,"col": 20,"name": "name"},{"file": 66,"line": 1468,"col": 41,"name": "flags"},{"file": 66,"line": 1472,"col": 17,"name": "who"},{"file": 66,"line": 1472,"col": 27,"name": "usage"},{"file": 66,"line": 1476,"col": 17,"name": "fd"},{"file": 66,"line": 1476,"col": 27,"name": "termios_p"},{"file": 66,"line": 1480,"col": 17,"name": "fd"},{"file": 66,"line": 1480,"col": 27,"name": "optional_action"},{"file": 66,"line": 1480,"col": 50,"name": "termios_p"},{"file": 66,"line": 1484,"col": 13,"name": "fd"},{"file": 66,"line": 1484,"col": 23,"name": "request"},{"file": 66,"line": 1484,"col": 37,"name": "arg"},{"file": 66,"line": 1488,"col": 16,"name": "fd"},{"file": 66,"line": 1488,"col": 26,"name": "mask"},{"file": 66,"line": 1488,"col": 49,"name": "flags"},{"file": 66,"line": 1492,"col": 23,"name": "fd_in"},{"file": 66,"line": 1492,"col": 36,"name": "off_in"},{"file": 66,"line": 1492,"col": 51,"name": "fd_out"},{"file": 66,"line": 1492,"col": 65,"name": "off_out"},{"file": 66,"line": 1492,"col": 81,"name": "len"},{"file": 66,"line": 1492,"col": 93,"name": "flags"},{"file": 66,"line": 1504,"col": 11,"name": "cmd"},{"file": 66,"line": 1504,"col": 25,"name": "attr"},{"file": 66,"line": 1504,"col": 42,"name": "size"},{"file": 66,"line": 1512,"col": 14,"name": "fd"},{"file": 66,"line": 1516,"col": 13,"name": "fd"},{"file": 66,"line": 1520,"col": 17,"name": "fd"},{"file": 66,"line": 1524,"col": 13,"name": "option"},{"file": 66,"line": 1524,"col": 26,"name": "arg2"},{"file": 66,"line": 1524,"col": 39,"name": "arg3"},{"file": 66,"line": 1524,"col": 52,"name": "arg4"},{"file": 66,"line": 1524,"col": 65,"name": "arg5"},{"file": 66,"line": 1528,"col": 17,"name": "resource"},{"file": 66,"line": 1528,"col": 44,"name": "rlim"},{"file": 66,"line": 1548,"col": 15,"name": "address"},{"file": 66,"line": 1548,"col": 31,"name": "len"},{"file": 66,"line": 1548,"col": 43,"name": "advice"},{"file": 66,"line": 1552,"col": 18,"name": "pid"},{"file": 66,"line": 1552,"col": 30,"name": "flags"},{"file": 66,"line": 1556,"col": 19,"name": "pidfd"},{"file": 66,"line": 1556,"col": 32,"name": "targetfd"},{"file": 66,"line": 1556,"col": 48,"name": "flags"},{"file": 66,"line": 1565,"col": 25,"name": "pidfd"},{"file": 66,"line": 1565,"col": 38,"name": "sig"},{"file": 66,"line": 1565,"col": 48,"name": "info"},{"file": 66,"line": 1565,"col": 67,"name": "flags"},{"file": 66,"line": 1575,"col": 24,"name": "pid"},{"file": 66,"line": 1575,"col": 36,"name": "local"},{"file": 66,"line": 1575,"col": 59,"name": "local_count"},{"file": 66,"line": 1575,"col": 79,"name": "remote"},{"file": 66,"line": 1575,"col": 103,"name": "remote_count"},{"file": 66,"line": 1575,"col": 124,"name": "flags"},{"file": 66,"line": 1587,"col": 25,"name": "pid"},{"file": 66,"line": 1587,"col": 37,"name": "local"},{"file": 66,"line": 1587,"col": 60,"name": "local_count"},{"file": 66,"line": 1587,"col": 80,"name": "remote"},{"file": 66,"line": 1587,"col": 104,"name": "remote_count"},{"file": 66,"line": 1587,"col": 125,"name": "flags"},{"file": 66,"line": 1599,"col": 15,"name": "fd"},{"file": 66,"line": 1599,"col": 25,"name": "offset"},{"file": 66,"line": 1599,"col": 38,"name": "len"},{"file": 66,"line": 1599,"col": 48,"name": "advice"},{"file": 66,"line": 1659,"col": 4,"name": "attr"},{"file": 66,"line": 1660,"col": 4,"name": "pid"},{"file": 66,"line": 1661,"col": 4,"name": "cpu"},{"file": 66,"line": 1662,"col": 4,"name": "group_fd"},{"file": 66,"line": 1663,"col": 4,"name": "flags"},{"file": 66,"line": 3315,"col": 17,"name": "set"},{"file": 76,"line": 1089,"col": 25,"name": "sqe"},{"file": 76,"line": 1107,"col": 27,"name": "sqe"},{"file": 76,"line": 1107,"col": 47,"name": "fd"},{"file": 76,"line": 1107,"col": 60,"name": "flags"},{"file": 76,"line": 1126,"col": 4,"name": "op"},{"file": 76,"line": 1127,"col": 4,"name": "sqe"},{"file": 76,"line": 1128,"col": 4,"name": "fd"},{"file": 76,"line": 1129,"col": 4,"name": "addr"},{"file": 76,"line": 1130,"col": 4,"name": "len"},{"file": 76,"line": 1131,"col": 4,"name": "offset"},{"file": 76,"line": 1150,"col": 26,"name": "sqe"},{"file": 76,"line": 1150,"col": 46,"name": "fd"},{"file": 76,"line": 1150,"col": 59,"name": "buffer"},{"file": 76,"line": 1150,"col": 73,"name": "offset"},{"file": 76,"line": 1154,"col": 27,"name": "sqe"},{"file": 76,"line": 1154,"col": 47,"name": "fd"},{"file": 76,"line": 1154,"col": 60,"name": "buffer"},{"file": 76,"line": 1154,"col": 80,"name": "offset"},{"file": 76,"line": 1159,"col": 4,"name": "sqe"},{"file": 76,"line": 1160,"col": 4,"name": "fd"},{"file": 76,"line": 1161,"col": 4,"name": "iovecs"},{"file": 76,"line": 1162,"col": 4,"name": "offset"},{"file": 76,"line": 1168,"col": 4,"name": "sqe"},{"file": 76,"line": 1169,"col": 4,"name": "fd"},{"file": 76,"line": 1170,"col": 4,"name": "iovecs"},{"file": 76,"line": 1171,"col": 4,"name": "offset"},{"file": 76,"line": 1176,"col": 32,"name": "sqe"},{"file": 76,"line": 1176,"col": 52,"name": "fd"},{"file": 76,"line": 1176,"col": 65,"name": "buffer"},{"file": 76,"line": 1176,"col": 84,"name": "offset"},{"file": 76,"line": 1176,"col": 97,"name": "buffer_index"},{"file": 76,"line": 1181,"col": 33,"name": "sqe"},{"file": 76,"line": 1181,"col": 53,"name": "fd"},{"file": 76,"line": 1181,"col": 66,"name": "buffer"},{"file": 76,"line": 1181,"col": 85,"name": "offset"},{"file": 76,"line": 1181,"col": 98,"name": "buffer_index"},{"file": 76,"line": 1192,"col": 40,"name": "poll_mask"},{"file": 76,"line": 1197,"col": 4,"name": "sqe"},{"file": 76,"line": 1198,"col": 4,"name": "fd"},{"file": 76,"line": 1199,"col": 4,"name": "addr"},{"file": 76,"line": 1200,"col": 4,"name": "addrlen"},{"file": 76,"line": 1201,"col": 4,"name": "flags"},{"file": 76,"line": 1210,"col": 4,"name": "sqe"},{"file": 76,"line": 1211,"col": 4,"name": "fd"},{"file": 76,"line": 1212,"col": 4,"name": "addr"},{"file": 76,"line": 1213,"col": 4,"name": "addrlen"},{"file": 76,"line": 1220,"col": 4,"name": "sqe"},{"file": 76,"line": 1221,"col": 4,"name": "epfd"},{"file": 76,"line": 1222,"col": 4,"name": "fd"},{"file": 76,"line": 1223,"col": 4,"name": "op"},{"file": 76,"line": 1224,"col": 4,"name": "ev"},{"file": 76,"line": 1229,"col": 26,"name": "sqe"},{"file": 76,"line": 1229,"col": 46,"name": "fd"},{"file": 76,"line": 1229,"col": 59,"name": "buffer"},{"file": 76,"line": 1229,"col": 73,"name": "flags"},{"file": 76,"line": 1234,"col": 26,"name": "sqe"},{"file": 76,"line": 1234,"col": 46,"name": "fd"},{"file": 76,"line": 1234,"col": 59,"name": "buffer"},{"file": 76,"line": 1234,"col": 79,"name": "flags"},{"file": 76,"line": 1240,"col": 4,"name": "sqe"},{"file": 76,"line": 1241,"col": 4,"name": "fd"},{"file": 76,"line": 1242,"col": 4,"name": "path"},{"file": 76,"line": 1243,"col": 4,"name": "flags"},{"file": 76,"line": 1244,"col": 4,"name": "mode"},{"file": 76,"line": 1250,"col": 27,"name": "sqe"},{"file": 76,"line": 1250,"col": 47,"name": "fd"},{"file": 76,"line": 1269,"col": 4,"name": "sqe"},{"file": 76,"line": 1270,"col": 4,"name": "ts"},{"file": 76,"line": 1271,"col": 4,"name": "count"},{"file": 76,"line": 1272,"col": 4,"name": "flags"},{"file": 76,"line": 1278,"col": 36,"name": "sqe"},{"file": 76,"line": 1278,"col": 56,"name": "timeout_user_data"},{"file": 76,"line": 1278,"col": 80,"name": "flags"},{"file": 76,"line": 1297,"col": 4,"name": "sqe"},{"file": 76,"line": 1298,"col": 4,"name": "ts"},{"file": 76,"line": 1299,"col": 4,"name": "flags"},{"file": 76,"line": 1306,"col": 4,"name": "sqe"},{"file": 76,"line": 1307,"col": 4,"name": "fd"},{"file": 76,"line": 1308,"col": 4,"name": "poll_mask"},{"file": 76,"line": 1315,"col": 4,"name": "sqe"},{"file": 76,"line": 1316,"col": 4,"name": "target_user_data"},{"file": 76,"line": 1322,"col": 4,"name": "sqe"},{"file": 76,"line": 1323,"col": 4,"name": "old_user_data"},{"file": 76,"line": 1324,"col": 4,"name": "new_user_data"},{"file": 76,"line": 1325,"col": 4,"name": "poll_mask"},{"file": 76,"line": 1326,"col": 4,"name": "flags"},{"file": 76,"line": 1333,"col": 4,"name": "sqe"},{"file": 76,"line": 1334,"col": 4,"name": "fd"},{"file": 76,"line": 1335,"col": 4,"name": "mode"},{"file": 76,"line": 1336,"col": 4,"name": "offset"},{"file": 76,"line": 1337,"col": 4,"name": "len"},{"file": 76,"line": 1357,"col": 4,"name": "sqe"},{"file": 76,"line": 1358,"col": 4,"name": "fd"},{"file": 76,"line": 1359,"col": 4,"name": "path"},{"file": 76,"line": 1360,"col": 4,"name": "flags"},{"file": 76,"line": 1361,"col": 4,"name": "mask"},{"file": 76,"line": 1362,"col": 4,"name": "buf"},{"file": 76,"line": 1369,"col": 4,"name": "sqe"},{"file": 76,"line": 1370,"col": 4,"name": "cancel_user_data"},{"file": 76,"line": 1371,"col": 4,"name": "flags"},{"file": 76,"line": 1378,"col": 4,"name": "sqe"},{"file": 76,"line": 1379,"col": 4,"name": "sockfd"},{"file": 76,"line": 1380,"col": 4,"name": "how"},{"file": 76,"line": 1386,"col": 4,"name": "sqe"},{"file": 76,"line": 1387,"col": 4,"name": "old_dir_fd"},{"file": 76,"line": 1388,"col": 4,"name": "old_path"},{"file": 76,"line": 1389,"col": 4,"name": "new_dir_fd"},{"file": 76,"line": 1390,"col": 4,"name": "new_path"},{"file": 76,"line": 1391,"col": 4,"name": "flags"},{"file": 76,"line": 1406,"col": 4,"name": "sqe"},{"file": 76,"line": 1407,"col": 4,"name": "dir_fd"},{"file": 76,"line": 1408,"col": 4,"name": "path"},{"file": 76,"line": 1409,"col": 4,"name": "flags"},{"file": 76,"line": 1416,"col": 4,"name": "sqe"},{"file": 76,"line": 1417,"col": 4,"name": "dir_fd"},{"file": 76,"line": 1418,"col": 4,"name": "path"},{"file": 76,"line": 1419,"col": 4,"name": "mode"},{"file": 76,"line": 1425,"col": 4,"name": "sqe"},{"file": 76,"line": 1426,"col": 4,"name": "target"},{"file": 76,"line": 1427,"col": 4,"name": "new_dir_fd"},{"file": 76,"line": 1428,"col": 4,"name": "link_path"},{"file": 76,"line": 1441,"col": 4,"name": "sqe"},{"file": 76,"line": 1442,"col": 4,"name": "old_dir_fd"},{"file": 76,"line": 1443,"col": 4,"name": "old_path"},{"file": 76,"line": 1444,"col": 4,"name": "new_dir_fd"},{"file": 76,"line": 1445,"col": 4,"name": "new_path"},{"file": 76,"line": 1446,"col": 4,"name": "flags"},{"file": 66,"line": 160,"col": 18,"name": "val"},{"file": 66,"line": 167,"col": 18,"name": "val"},{"file": 66,"line": 174,"col": 16,"name": "val"},{"file": 66,"line": 4424,"col": 17,"name": "x","comptime": true},{"file": 27,"line": 115,"col": 16,"name": "self"},{"file": 27,"line": 129,"col": 30,"name": "self"},{"file": 27,"line": 139,"col": 29,"name": "self"},{"file": 27,"line": 148,"col": 26,"name": "self"},{"file": 27,"line": 148,"col": 39,"name": "thread_count"},{"file": 27,"line": 197,"col": 18,"name": "self"},{"file": 27,"line": 468,"col": 22,"name": "self"},{"file": 27,"line": 468,"col": 35,"name": "fd"},{"file": 27,"line": 468,"col": 44,"name": "resume_node"},{"file": 27,"line": 468,"col": 70,"name": "flags"},{"file": 27,"line": 480,"col": 22,"name": "self"},{"file": 27,"line": 480,"col": 35,"name": "fd"},{"file": 27,"line": 480,"col": 44,"name": "op"},{"file": 27,"line": 480,"col": 53,"name": "flags"},{"file": 27,"line": 480,"col": 65,"name": "resume_node"},{"file": 27,"line": 489,"col": 25,"name": "self"},{"file": 27,"line": 489,"col": 38,"name": "fd"},{"file": 27,"line": 494,"col": 23,"name": "self"},{"file": 27,"line": 494,"col": 36,"name": "fd"},{"file": 27,"line": 494,"col": 45,"name": "flags"},{"file": 27,"line": 546,"col": 31,"name": "self"},{"file": 27,"line": 546,"col": 44,"name": "fd"},{"file": 27,"line": 558,"col": 31,"name": "self"},{"file": 27,"line": 558,"col": 44,"name": "fd"},{"file": 27,"line": 570,"col": 41,"name": "self"},{"file": 27,"line": 570,"col": 54,"name": "fd"},{"file": 27,"line": 583,"col": 22,"name": "self"},{"file": 27,"line": 583,"col": 35,"name": "ident"},{"file": 27,"line": 583,"col": 49,"name": "filter"},{"file": 27,"line": 583,"col": 62,"name": "flags"},{"file": 27,"line": 606,"col": 21,"name": "self"},{"file": 27,"line": 606,"col": 34,"name": "resume_node"},{"file": 27,"line": 606,"col": 66,"name": "ident"},{"file": 27,"line": 606,"col": 80,"name": "filter"},{"file": 27,"line": 606,"col": 93,"name": "flags"},{"file": 27,"line": 621,"col": 24,"name": "self"},{"file": 27,"line": 621,"col": 37,"name": "ident"},{"file": 27,"line": 621,"col": 51,"name": "filter"},{"file": 27,"line": 686,"col": 22,"name": "self"},{"file": 27,"line": 686,"col": 35,"name": "node"},{"file": 27,"line": 692,"col": 28,"name": "self"},{"file": 27,"line": 692,"col": 41,"name": "node"},{"file": 27,"line": 698,"col": 15,"name": "self"},{"file": 27,"line": 729,"col": 23,"name": "self"},{"file": 27,"line": 729,"col": 36,"name": "alloc"},{"file": 27,"line": 729,"col": 58,"name": "func","comptime": true},{"file": 27,"line": 729,"col": 82,"name": "args"},{"file": 27,"line": 757,"col": 17,"name": "self"},{"file": 27,"line": 779,"col": 25,"name": "self"},{"file": 27,"line": 783,"col": 26,"name": "self"},{"file": 27,"line": 826,"col": 17,"name": "self"},{"file": 27,"line": 826,"col": 30,"name": "nanoseconds"},{"file": 27,"line": 951,"col": 8,"name": "self"},{"file": 27,"line": 954,"col": 8,"docs": " This argument is a socket that has been created with `socket`, bound to a local address with `bind`, and is listening for connections after a `listen`.","name": "sockfd"},{"file": 27,"line": 959,"col": 8,"docs": " This argument is a pointer to a sockaddr structure.  This structure is filled in with  the address  of  the  peer  socket, as known to the communications layer.  The exact format of the address returned addr is determined by the socket's address  family  (see  `socket`  and  the respective  protocol  man  pages).","name": "addr"},{"file": 27,"line": 966,"col": 8,"docs": " This argument is a value-result argument: the caller must initialize it to contain  the size (in bytes) of the structure pointed to by addr; on return it will contain the actual size of the peer address. The returned address is truncated if the buffer provided is too small; in this  case,  `addr_size` will return a value greater than was supplied to the call.","name": "addr_size"},{"file": 27,"line": 970,"col": 8,"docs": " The following values can be bitwise ORed in flags to obtain different behavior: * `SOCK.CLOEXEC`  - Set the close-on-exec (`FD_CLOEXEC`) flag on the new file descriptor.   See  the   description  of the `O.CLOEXEC` flag in `open` for reasons why this may be useful.","name": "flags"},{"file": 27,"line": 983,"col": 19,"name": "self"},{"file": 27,"line": 983,"col": 32,"name": "sockfd"},{"file": 27,"line": 983,"col": 53,"name": "sock_addr"},{"file": 27,"line": 983,"col": 84,"name": "len"},{"file": 27,"line": 994,"col": 17,"name": "self"},{"file": 27,"line": 994,"col": 30,"name": "file_path"},{"file": 27,"line": 994,"col": 56,"name": "flags"},{"file": 27,"line": 994,"col": 68,"name": "mode"},{"file": 27,"line": 1015,"col": 19,"name": "self"},{"file": 27,"line": 1015,"col": 32,"name": "fd"},{"file": 27,"line": 1015,"col": 45,"name": "file_path"},{"file": 27,"line": 1015,"col": 71,"name": "flags"},{"file": 27,"line": 1015,"col": 83,"name": "mode"},{"file": 27,"line": 1037,"col": 17,"name": "self"},{"file": 27,"line": 1037,"col": 30,"name": "fd"},{"file": 27,"line": 1051,"col": 16,"name": "self"},{"file": 27,"line": 1051,"col": 29,"name": "fd"},{"file": 27,"line": 1051,"col": 42,"name": "buf"},{"file": 27,"line": 1051,"col": 53,"name": "simulate_evented"},{"file": 27,"line": 1084,"col": 17,"name": "self"},{"file": 27,"line": 1084,"col": 30,"name": "fd"},{"file": 27,"line": 1084,"col": 43,"name": "iov"},{"file": 27,"line": 1084,"col": 66,"name": "simulate_evented"},{"file": 27,"line": 1117,"col": 17,"name": "self"},{"file": 27,"line": 1117,"col": 30,"name": "fd"},{"file": 27,"line": 1117,"col": 43,"name": "buf"},{"file": 27,"line": 1117,"col": 54,"name": "offset"},{"file": 27,"line": 1117,"col": 67,"name": "simulate_evented"},{"file": 27,"line": 1151,"col": 18,"name": "self"},{"file": 27,"line": 1151,"col": 31,"name": "fd"},{"file": 27,"line": 1151,"col": 44,"name": "iov"},{"file": 27,"line": 1151,"col": 67,"name": "offset"},{"file": 27,"line": 1151,"col": 80,"name": "simulate_evented"},{"file": 27,"line": 1185,"col": 17,"name": "self"},{"file": 27,"line": 1185,"col": 30,"name": "fd"},{"file": 27,"line": 1185,"col": 43,"name": "bytes"},{"file": 27,"line": 1185,"col": 62,"name": "simulate_evented"},{"file": 27,"line": 1218,"col": 18,"name": "self"},{"file": 27,"line": 1218,"col": 31,"name": "fd"},{"file": 27,"line": 1218,"col": 44,"name": "iov"},{"file": 27,"line": 1218,"col": 73,"name": "simulate_evented"},{"file": 27,"line": 1251,"col": 18,"name": "self"},{"file": 27,"line": 1251,"col": 31,"name": "fd"},{"file": 27,"line": 1251,"col": 44,"name": "bytes"},{"file": 27,"line": 1251,"col": 63,"name": "offset"},{"file": 27,"line": 1251,"col": 76,"name": "simulate_evented"},{"file": 27,"line": 1285,"col": 19,"name": "self"},{"file": 27,"line": 1285,"col": 32,"name": "fd"},{"file": 27,"line": 1285,"col": 45,"name": "iov"},{"file": 27,"line": 1285,"col": 74,"name": "offset"},{"file": 27,"line": 1285,"col": 87,"name": "simulate_evented"},{"file": 27,"line": 1318,"col": 8,"name": "self"},{"file": 27,"line": 1320,"col": 8,"docs": " The file descriptor of the sending socket.","name": "sockfd"},{"file": 27,"line": 1322,"col": 8,"docs": " Message to send.","name": "buf"},{"file": 27,"line": 1323,"col": 8,"name": "flags"},{"file": 27,"line": 1324,"col": 8,"name": "dest_addr"},{"file": 27,"line": 1325,"col": 8,"name": "addrlen"},{"file": 27,"line": 1339,"col": 8,"name": "self"},{"file": 27,"line": 1340,"col": 8,"name": "sockfd"},{"file": 27,"line": 1341,"col": 8,"name": "buf"},{"file": 27,"line": 1342,"col": 8,"name": "flags"},{"file": 27,"line": 1343,"col": 8,"name": "src_addr"},{"file": 27,"line": 1344,"col": 8,"name": "addrlen"},{"file": 27,"line": 1360,"col": 8,"name": "self"},{"file": 27,"line": 1361,"col": 8,"name": "dirfd"},{"file": 27,"line": 1362,"col": 8,"name": "path_z"},{"file": 27,"line": 1363,"col": 8,"name": "mode"},{"file": 27,"line": 1364,"col": 8,"name": "flags"},{"file": 27,"line": 210,"col": 18,"name": "self"},{"file": 27,"line": 210,"col": 31,"name": "extra_thread_count"},{"file": 27,"line": 449,"col": 20,"name": "self"},{"file": 27,"line": 635,"col": 16,"name": "self"},{"file": 27,"line": 1386,"col": 17,"name": "self"},{"file": 27,"line": 1479,"col": 22,"name": "self"},{"file": 27,"line": 1479,"col": 35,"name": "request_node"},{"file": 27,"line": 1485,"col": 21,"name": "self"},{"file": 27,"line": 1485,"col": 34,"name": "request_node"},{"file": 27,"line": 1491,"col": 18,"name": "self"},{"file": 67,"line": 61,"col": 16,"name": "sub_path_w"},{"file": 67,"line": 61,"col": 41,"name": "options"},{"file": 67,"line": 131,"col": 18,"name": "rd"},{"file": 67,"line": 131,"col": 31,"name": "wr"},{"file": 67,"line": 131,"col": 44,"name": "sattr"},{"file": 67,"line": 139,"col": 21,"name": "attributes"},{"file": 67,"line": 139,"col": 56,"name": "name"},{"file": 67,"line": 139,"col": 74,"name": "flags"},{"file": 67,"line": 139,"col": 88,"name": "desired_access"},{"file": 67,"line": 144,"col": 22,"name": "attributes"},{"file": 67,"line": 144,"col": 57,"name": "nameW"},{"file": 67,"line": 144,"col": 80,"name": "flags"},{"file": 67,"line": 144,"col": 94,"name": "desired_access"},{"file": 67,"line": 162,"col": 4,"name": "h"},{"file": 67,"line": 163,"col": 4,"name": "ioControlCode"},{"file": 67,"line": 164,"col": 4,"name": "in"},{"file": 67,"line": 165,"col": 4,"name": "out"},{"file": 67,"line": 214,"col": 27,"name": "h"},{"file": 67,"line": 214,"col": 38,"name": "overlapped"},{"file": 67,"line": 214,"col": 63,"name": "wait"},{"file": 67,"line": 227,"col": 28,"name": "h"},{"file": 67,"line": 227,"col": 39,"name": "mask"},{"file": 67,"line": 227,"col": 52,"name": "flags"},{"file": 67,"line": 240,"col": 20,"name": "output"},{"file": 67,"line": 263,"col": 27,"name": "handle"},{"file": 67,"line": 263,"col": 43,"name": "milliseconds"},{"file": 67,"line": 267,"col": 29,"name": "handle"},{"file": 67,"line": 267,"col": 45,"name": "milliseconds"},{"file": 67,"line": 267,"col": 66,"name": "alertable"},{"file": 67,"line": 279,"col": 32,"name": "handles"},{"file": 67,"line": 279,"col": 57,"name": "waitAll"},{"file": 67,"line": 279,"col": 72,"name": "milliseconds"},{"file": 67,"line": 279,"col": 93,"name": "alertable"},{"file": 67,"line": 310,"col": 4,"name": "file_handle"},{"file": 67,"line": 311,"col": 4,"name": "existing_completion_port"},{"file": 67,"line": 312,"col": 4,"name": "completion_key"},{"file": 67,"line": 313,"col": 4,"name": "concurrent_thread_count"},{"file": 67,"line": 327,"col": 4,"name": "completion_port"},{"file": 67,"line": 328,"col": 4,"name": "bytes_transferred_count"},{"file": 67,"line": 329,"col": 4,"name": "completion_key"},{"file": 67,"line": 330,"col": 4,"name": "lpOverlapped"},{"file": 67,"line": 347,"col": 4,"name": "completion_port"},{"file": 67,"line": 348,"col": 4,"name": "bytes_transferred_count"},{"file": 67,"line": 349,"col": 4,"name": "lpCompletionKey"},{"file": 67,"line": 350,"col": 4,"name": "lpOverlapped"},{"file": 67,"line": 351,"col": 4,"name": "dwMilliseconds"},{"file": 67,"line": 383,"col": 4,"name": "completion_port"},{"file": 67,"line": 384,"col": 4,"name": "completion_port_entries"},{"file": 67,"line": 385,"col": 4,"name": "timeout_ms"},{"file": 67,"line": 386,"col": 4,"name": "alertable"},{"file": 67,"line": 412,"col": 19,"name": "hObject"},{"file": 67,"line": 416,"col": 17,"name": "hFindFile"},{"file": 67,"line": 428,"col": 16,"name": "in_hFile"},{"file": 67,"line": 428,"col": 34,"name": "buffer"},{"file": 67,"line": 428,"col": 48,"name": "offset"},{"file": 67,"line": 428,"col": 62,"name": "io_mode"},{"file": 67,"line": 512,"col": 4,"name": "handle"},{"file": 67,"line": 513,"col": 4,"name": "bytes"},{"file": 67,"line": 514,"col": 4,"name": "offset"},{"file": 67,"line": 515,"col": 4,"name": "io_mode"},{"file": 67,"line": 606,"col": 27,"name": "path_name"},{"file": 67,"line": 638,"col": 27,"name": "buffer"},{"file": 67,"line": 676,"col": 4,"name": "dir"},{"file": 67,"line": 677,"col": 4,"name": "sym_link_path"},{"file": 67,"line": 678,"col": 4,"name": "target_path"},{"file": 67,"line": 679,"col": 4,"name": "is_directory"},{"file": 67,"line": 737,"col": 16,"name": "dir"},{"file": 67,"line": 737,"col": 30,"name": "sub_path_w"},{"file": 67,"line": 737,"col": 55,"name": "out_buffer"},{"file": 67,"line": 847,"col": 18,"name": "sub_path_w"},{"file": 67,"line": 847,"col": 43,"name": "options"},{"file": 67,"line": 909,"col": 18,"name": "old_path"},{"file": 67,"line": 909,"col": 40,"name": "new_path"},{"file": 67,"line": 909,"col": 62,"name": "flags"},{"file": 67,"line": 915,"col": 19,"name": "old_path"},{"file": 67,"line": 915,"col": 45,"name": "new_path"},{"file": 67,"line": 915,"col": 71,"name": "flags"},{"file": 67,"line": 930,"col": 20,"name": "handle_id"},{"file": 67,"line": 943,"col": 30,"name": "handle"},{"file": 67,"line": 943,"col": 46,"name": "offset"},{"file": 67,"line": 958,"col": 32,"name": "handle"},{"file": 67,"line": 958,"col": 48,"name": "offset"},{"file": 67,"line": 969,"col": 28,"name": "handle"},{"file": 67,"line": 969,"col": 44,"name": "offset"},{"file": 67,"line": 980,"col": 36,"name": "handle"},{"file": 67,"line": 995,"col": 4,"name": "handle"},{"file": 67,"line": 996,"col": 4,"name": "out_buffer"},{"file": 67,"line": 1067,"col": 4,"name": "hFile"},{"file": 67,"line": 1068,"col": 4,"name": "fmt"},{"file": 67,"line": 1069,"col": 4,"name": "out_buffer"},{"file": 67,"line": 1205,"col": 4,"name": "handle"},{"file": 67,"line": 1206,"col": 4,"name": "info_class"},{"file": 67,"line": 1207,"col": 4,"name": "out_buffer"},{"file": 67,"line": 1221,"col": 21,"name": "hFile"},{"file": 67,"line": 1237,"col": 25,"name": "filename"},{"file": 67,"line": 1242,"col": 26,"name": "lpFileName"},{"file": 67,"line": 1255,"col": 18,"name": "majorVersion"},{"file": 67,"line": 1255,"col": 36,"name": "minorVersion"},{"file": 67,"line": 1307,"col": 4,"name": "af"},{"file": 67,"line": 1308,"col": 4,"name": "socket_type"},{"file": 67,"line": 1309,"col": 4,"name": "protocol"},{"file": 67,"line": 1310,"col": 4,"name": "protocolInfo"},{"file": 67,"line": 1311,"col": 4,"name": "g"},{"file": 67,"line": 1312,"col": 4,"name": "dwFlags"},{"file": 67,"line": 1350,"col": 12,"name": "s"},{"file": 67,"line": 1350,"col": 30,"name": "name"},{"file": 67,"line": 1350,"col": 60,"name": "namelen"},{"file": 67,"line": 1354,"col": 14,"name": "s"},{"file": 67,"line": 1354,"col": 32,"name": "backlog"},{"file": 67,"line": 1358,"col": 19,"name": "s"},{"file": 67,"line": 1368,"col": 14,"name": "s"},{"file": 67,"line": 1368,"col": 32,"name": "name"},{"file": 67,"line": 1368,"col": 57,"name": "namelen"},{"file": 67,"line": 1373,"col": 19,"name": "s"},{"file": 67,"line": 1373,"col": 37,"name": "name"},{"file": 67,"line": 1373,"col": 61,"name": "namelen"},{"file": 67,"line": 1377,"col": 19,"name": "s"},{"file": 67,"line": 1377,"col": 37,"name": "name"},{"file": 67,"line": 1377,"col": 61,"name": "namelen"},{"file": 67,"line": 1382,"col": 4,"name": "s"},{"file": 67,"line": 1383,"col": 4,"name": "msg"},{"file": 67,"line": 1384,"col": 4,"name": "flags"},{"file": 67,"line": 1394,"col": 14,"name": "s"},{"file": 67,"line": 1394,"col": 32,"name": "buf"},{"file": 67,"line": 1394,"col": 50,"name": "len"},{"file": 67,"line": 1394,"col": 62,"name": "flags"},{"file": 67,"line": 1394,"col": 74,"name": "to"},{"file": 67,"line": 1394,"col": 103,"name": "to_len"},{"file": 67,"line": 1404,"col": 16,"name": "s"},{"file": 67,"line": 1404,"col": 34,"name": "buf"},{"file": 67,"line": 1404,"col": 46,"name": "len"},{"file": 67,"line": 1404,"col": 58,"name": "flags"},{"file": 67,"line": 1404,"col": 70,"name": "from"},{"file": 67,"line": 1404,"col": 95,"name": "from_len"},{"file": 67,"line": 1415,"col": 12,"name": "fds"},{"file": 67,"line": 1415,"col": 35,"name": "n"},{"file": 67,"line": 1415,"col": 47,"name": "timeout"},{"file": 67,"line": 1420,"col": 4,"name": "s"},{"file": 67,"line": 1421,"col": 4,"name": "dwIoControlCode"},{"file": 67,"line": 1422,"col": 4,"name": "inBuffer"},{"file": 67,"line": 1423,"col": 4,"name": "outBuffer"},{"file": 67,"line": 1424,"col": 4,"name": "overlapped"},{"file": 67,"line": 1425,"col": 4,"name": "completionRoutine"},{"file": 67,"line": 1450,"col": 26,"name": "hModule"},{"file": 67,"line": 1450,"col": 45,"name": "buf_ptr"},{"file": 67,"line": 1450,"col": 62,"name": "buf_len"},{"file": 67,"line": 1462,"col": 24,"name": "hProcess"},{"file": 67,"line": 1462,"col": 42,"name": "uExitCode"},{"file": 67,"line": 1472,"col": 20,"name": "addr"},{"file": 67,"line": 1472,"col": 35,"name": "size"},{"file": 67,"line": 1472,"col": 48,"name": "alloc_type"},{"file": 67,"line": 1472,"col": 67,"name": "flProtect"},{"file": 67,"line": 1480,"col": 19,"name": "lpAddress"},{"file": 67,"line": 1480,"col": 39,"name": "dwSize"},{"file": 67,"line": 1480,"col": 54,"name": "dwFreeType"},{"file": 67,"line": 1486,"col": 31,"name": "hConsoleOutput"},{"file": 67,"line": 1486,"col": 55,"name": "wAttributes"},{"file": 67,"line": 1494,"col": 29,"name": "handler_routine"},{"file": 67,"line": 1494,"col": 64,"name": "add"},{"file": 67,"line": 1507,"col": 42,"name": "handle"},{"file": 67,"line": 1507,"col": 58,"name": "flags"},{"file": 67,"line": 1522,"col": 31,"name": "penv"},{"file": 67,"line": 1531,"col": 31,"name": "lpName"},{"file": 67,"line": 1531,"col": 47,"name": "lpBuffer"},{"file": 67,"line": 1531,"col": 65,"name": "nSize"},{"file": 67,"line": 1550,"col": 4,"name": "lpApplicationName"},{"file": 67,"line": 1551,"col": 4,"name": "lpCommandLine"},{"file": 67,"line": 1552,"col": 4,"name": "lpProcessAttributes"},{"file": 67,"line": 1553,"col": 4,"name": "lpThreadAttributes"},{"file": 67,"line": 1554,"col": 4,"name": "bInheritHandles"},{"file": 67,"line": 1555,"col": 4,"name": "dwCreationFlags"},{"file": 67,"line": 1556,"col": 4,"name": "lpEnvironment"},{"file": 67,"line": 1557,"col": 4,"name": "lpCurrentDirectory"},{"file": 67,"line": 1558,"col": 4,"name": "lpStartupInfo"},{"file": 67,"line": 1559,"col": 4,"name": "lpProcessInformation"},{"file": 67,"line": 1589,"col": 20,"name": "lpLibFileName"},{"file": 67,"line": 1600,"col": 19,"name": "hModule"},{"file": 67,"line": 1622,"col": 27,"name": "InitOnce"},{"file": 67,"line": 1622,"col": 49,"name": "InitFn"},{"file": 67,"line": 1622,"col": 71,"name": "Parameter"},{"file": 67,"line": 1622,"col": 95,"name": "Context"},{"file": 67,"line": 1626,"col": 16,"name": "hHeap"},{"file": 67,"line": 1626,"col": 31,"name": "dwFlags"},{"file": 67,"line": 1626,"col": 47,"name": "lpMem"},{"file": 67,"line": 1630,"col": 19,"name": "hHeap"},{"file": 67,"line": 1634,"col": 17,"name": "hMem"},{"file": 67,"line": 1641,"col": 4,"name": "hFile"},{"file": 67,"line": 1656,"col": 4,"name": "hFile"},{"file": 67,"line": 1657,"col": 4,"name": "lpCreationTime"},{"file": 67,"line": 1658,"col": 4,"name": "lpLastAccessTime"},{"file": 67,"line": 1659,"col": 4,"name": "lpLastWriteTime"},{"file": 67,"line": 1675,"col": 4,"name": "FileHandle"},{"file": 67,"line": 1676,"col": 4,"name": "Event"},{"file": 67,"line": 1677,"col": 4,"name": "ApcRoutine"},{"file": 67,"line": 1678,"col": 4,"name": "ApcContext"},{"file": 67,"line": 1679,"col": 4,"name": "IoStatusBlock"},{"file": 67,"line": 1680,"col": 4,"name": "ByteOffset"},{"file": 67,"line": 1681,"col": 4,"name": "Length"},{"file": 67,"line": 1682,"col": 4,"name": "Key"},{"file": 67,"line": 1683,"col": 4,"name": "FailImmediately"},{"file": 67,"line": 1684,"col": 4,"name": "ExclusiveLock"},{"file": 67,"line": 1712,"col": 4,"name": "FileHandle"},{"file": 67,"line": 1713,"col": 4,"name": "IoStatusBlock"},{"file": 67,"line": 1714,"col": 4,"name": "ByteOffset"},{"file": 67,"line": 1715,"col": 4,"name": "Length"},{"file": 67,"line": 1716,"col": 4,"name": "Key"},{"file": 67,"line": 1754,"col": 19,"name": "hns"},{"file": 67,"line": 1759,"col": 17,"name": "ns"},{"file": 67,"line": 1764,"col": 29,"name": "ft"},{"file": 67,"line": 1770,"col": 29,"name": "ns"},{"file": 67,"line": 1795,"col": 30,"name": "T","comptime": true},{"file": 67,"line": 1795,"col": 48,"name": "path"},{"file": 67,"line": 1848,"col": 21,"name": "T","comptime": true},{"file": 67,"line": 1848,"col": 39,"name": "path"},{"file": 67,"line": 1864,"col": 27,"name": "s"},{"file": 67,"line": 1870,"col": 28,"name": "s"},{"file": 67,"line": 1918,"col": 24,"name": "s"},{"file": 67,"line": 1950,"col": 36,"name": "T","comptime": true},{"file": 67,"line": 1950,"col": 54,"name": "sock"},{"file": 67,"line": 1950,"col": 75,"name": "guid"},{"file": 67,"line": 1983,"col": 23,"name": "err"},{"file": 67,"line": 2004,"col": 26,"name": "err"},{"file": 67,"line": 2010,"col": 24,"name": "status"},{"file": 67,"line": 2018,"col": 28,"name": "hThread"},{"file": 67,"line": 2018,"col": 45,"name": "lpThreadDescription"},{"file": 67,"line": 2025,"col": 28,"name": "hThread"},{"file": 67,"line": 2025,"col": 45,"name": "ppszThreadDescription"},{"file": 67,"line": 2209,"col": 16,"name": "deviceType"},{"file": 67,"line": 2209,"col": 33,"name": "function"},{"file": 67,"line": 2209,"col": 48,"name": "method"},{"file": 67,"line": 2209,"col": 70,"name": "access"},{"file": 67,"line": 821,"col": 21,"name": "path"},{"file": 67,"line": 821,"col": 40,"name": "is_relative"},{"file": 67,"line": 821,"col": 59,"name": "out_buffer"},{"file": 67,"line": 1907,"col": 20,"name": "path"},{"file": 67,"line": 1907,"col": 42,"name": "out"},{"file": 67,"line": 1945,"col": 21,"name": "p"},{"file": 67,"line": 1945,"col": 34,"name": "s"},{"file": 32,"line": 87,"col": 18,"name": "self","comptime": true},{"file": 68,"line": 40,"col": 12,"name": "self"},{"file": 68,"line": 44,"col": 17,"name": "self"},{"file": 68,"line": 44,"col": 40,"name": "timeout"},{"file": 68,"line": 125,"col": 11,"name": "self"},{"file": 68,"line": 48,"col": 11,"name": "self"},{"file": 68,"line": 48,"col": 34,"name": "timeout"},{"file": 69,"line": 31,"col": 12,"name": "ev"},{"file": 69,"line": 37,"col": 14,"name": "ev"},{"file": 69,"line": 45,"col": 11,"name": "ev"},{"file": 69,"line": 52,"col": 13,"name": "ev"},{"file": 69,"line": 60,"col": 12,"name": "ev"},{"file": 69,"line": 73,"col": 17,"name": "ev"},{"file": 69,"line": 73,"col": 34,"name": "timeout_ns"},{"file": 40,"line": 861,"col": 13,"name": "config"},{"file": 40,"line": 861,"col": 34,"name": "f","comptime": true},{"file": 40,"line": 861,"col": 55,"name": "args"},{"file": 40,"line": 979,"col": 17,"name": "self"},{"file": 40,"line": 983,"col": 14,"name": "self"},{"file": 40,"line": 991,"col": 12,"name": "self"},{"file": 42,"line": 109,"col": 16,"name": "allocator"},{"file": 42,"line": 109,"col": 42,"name": "in_file"},{"file": 42,"line": 121,"col": 22,"name": "self"},{"file": 42,"line": 213,"col": 22,"name": "self"},{"file": 42,"line": 213,"col": 35,"name": "buffer"},{"file": 42,"line": 274,"col": 24,"name": "self"},{"file": 42,"line": 316,"col": 22,"name": "self"},{"file": 42,"line": 316,"col": 35,"name": "name","comptime": true},{"file": 42,"line": 326,"col": 26,"name": "self"},{"file": 42,"line": 326,"col": 39,"name": "name","comptime": true},{"file": 42,"line": 326,"col": 66,"name": "allocator"},{"file": 42,"line": 159,"col": 27,"name": "self"},{"file": 42,"line": 159,"col": 40,"name": "offset"},{"file": 42,"line": 159,"col": 55,"name": "buf"},{"file": 42,"line": 178,"col": 26,"name": "self"},{"file": 43,"line": 1022,"col": 15,"name": "self"},{"file": 43,"line": 1026,"col": 23,"name": "context"},{"file": 43,"line": 1026,"col": 38,"name": "lhs"},{"file": 43,"line": 1026,"col": 56,"name": "rhs"},{"file": 72,"line": 35,"col": 20,"name": "writer"},{"file": 72,"line": 35,"col": 37,"name": "uint_value"},{"file": 72,"line": 111,"col": 20,"name": "writer"},{"file": 72,"line": 111,"col": 37,"name": "int_value"},{"file": 72,"line": 139,"col": 26,"name": "l","comptime": true},{"file": 72,"line": 139,"col": 45,"name": "ptr"},{"file": 72,"line": 139,"col": 58,"name": "int"},{"file": 72,"line": 177,"col": 28,"name": "T","comptime": true},{"file": 72,"line": 177,"col": 46,"name": "encoded"},{"file": 72,"line": 182,"col": 28,"name": "T","comptime": true},{"file": 72,"line": 182,"col": 46,"name": "encoded"},{"file": 72,"line": 187,"col": 21,"name": "T","comptime": true},{"file": 72,"line": 187,"col": 39,"name": "encoded"},{"file": 72,"line": 193,"col": 21,"name": "T","comptime": true},{"file": 72,"line": 193,"col": 39,"name": "encoded"},{"file": 72,"line": 199,"col": 25,"name": "T","comptime": true},{"file": 72,"line": 199,"col": 43,"name": "N","comptime": true},{"file": 72,"line": 199,"col": 62,"name": "encoded"},{"file": 72,"line": 207,"col": 25,"name": "T","comptime": true},{"file": 72,"line": 207,"col": 43,"name": "N","comptime": true},{"file": 72,"line": 207,"col": 62,"name": "encoded"},{"file": 72,"line": 302,"col": 21,"name": "value"},{"file": 73,"line": 113,"col": 13,"name": "allocator"},{"file": 73,"line": 113,"col": 35,"name": "paths"},{"file": 73,"line": 219,"col": 18,"name": "path"},{"file": 73,"line": 250,"col": 25,"name": "path"},{"file": 73,"line": 254,"col": 26,"name": "path_w"},{"file": 73,"line": 258,"col": 30,"name": "path"},{"file": 73,"line": 262,"col": 26,"name": "path_c"},{"file": 73,"line": 325,"col": 24,"name": "path"},{"file": 73,"line": 404,"col": 22,"name": "path"},{"file": 73,"line": 412,"col": 29,"name": "path"},{"file": 73,"line": 469,"col": 15,"name": "allocator"},{"file": 73,"line": 469,"col": 37,"name": "paths"},{"file": 73,"line": 485,"col": 22,"name": "allocator"},{"file": 73,"line": 485,"col": 44,"name": "paths"},{"file": 73,"line": 671,"col": 20,"name": "allocator"},{"file": 73,"line": 671,"col": 42,"name": "paths"},{"file": 73,"line": 832,"col": 15,"name": "path"},{"file": 73,"line": 840,"col": 22,"name": "path"},{"file": 73,"line": 874,"col": 20,"name": "path"},{"file": 73,"line": 966,"col": 16,"name": "path"},{"file": 73,"line": 974,"col": 21,"name": "path"},{"file": 73,"line": 995,"col": 23,"name": "path"},{"file": 73,"line": 1082,"col": 16,"name": "allocator"},{"file": 73,"line": 1082,"col": 38,"name": "from"},{"file": 73,"line": 1082,"col": 56,"name": "to"},{"file": 73,"line": 1090,"col": 23,"name": "allocator"},{"file": 73,"line": 1090,"col": 45,"name": "from"},{"file": 73,"line": 1090,"col": 63,"name": "to"},{"file": 73,"line": 1163,"col": 21,"name": "allocator"},{"file": 73,"line": 1163,"col": 43,"name": "from"},{"file": 73,"line": 1163,"col": 61,"name": "to"},{"file": 73,"line": 1279,"col": 17,"name": "path"},{"file": 73,"line": 118,"col": 22,"name": "paths"},{"file": 73,"line": 118,"col": 49,"name": "expected"},{"file": 73,"line": 118,"col": 71,"name": "zero"},{"file": 73,"line": 129,"col": 25,"name": "paths"},{"file": 73,"line": 129,"col": 52,"name": "expected"},{"file": 73,"line": 129,"col": 74,"name": "zero"},{"file": 73,"line": 140,"col": 23,"name": "paths"},{"file": 73,"line": 140,"col": 50,"name": "expected"},{"file": 73,"line": 140,"col": 72,"name": "zero"},{"file": 73,"line": 227,"col": 25,"name": "T","comptime": true},{"file": 73,"line": 227,"col": 43,"name": "path"},{"file": 73,"line": 305,"col": 25,"name": "path"},{"file": 73,"line": 305,"col": 43,"name": "expected_result"},{"file": 73,"line": 309,"col": 23,"name": "path"},{"file": 73,"line": 309,"col": 41,"name": "expected_result"},{"file": 73,"line": 416,"col": 26,"name": "ns1"},{"file": 73,"line": 416,"col": 43,"name": "ns2"},{"file": 73,"line": 427,"col": 26,"name": "kind"},{"file": 73,"line": 427,"col": 50,"name": "p1"},{"file": 73,"line": 427,"col": 66,"name": "p2"},{"file": 73,"line": 450,"col": 14,"name": "byte"},{"file": 73,"line": 457,"col": 22,"name": "s1"},{"file": 73,"line": 457,"col": 38,"name": "s2"},{"file": 73,"line": 814,"col": 22,"name": "paths"},{"file": 73,"line": 814,"col": 49,"name": "expected"},{"file": 73,"line": 820,"col": 20,"name": "paths"},{"file": 73,"line": 820,"col": 47,"name": "expected"},{"file": 73,"line": 950,"col": 20,"name": "input"},{"file": 73,"line": 950,"col": 39,"name": "expected_output"},{"file": 73,"line": 958,"col": 22,"name": "input"},{"file": 73,"line": 958,"col": 41,"name": "expected_output"},{"file": 73,"line": 1066,"col": 16,"name": "input"},{"file": 73,"line": 1066,"col": 35,"name": "expected_output"},{"file": 73,"line": 1070,"col": 21,"name": "input"},{"file": 73,"line": 1070,"col": 40,"name": "expected_output"},{"file": 73,"line": 1074,"col": 23,"name": "input"},{"file": 73,"line": 1074,"col": 42,"name": "expected_output"},{"file": 73,"line": 1254,"col": 21,"name": "from"},{"file": 73,"line": 1254,"col": 39,"name": "to"},{"file": 73,"line": 1254,"col": 55,"name": "expected_output"},{"file": 73,"line": 1260,"col": 23,"name": "from"},{"file": 73,"line": 1260,"col": 41,"name": "to"},{"file": 73,"line": 1260,"col": 57,"name": "expected_output"},{"file": 73,"line": 1286,"col": 17,"name": "path"},{"file": 73,"line": 1286,"col": 35,"name": "expected"},{"file": 66,"line": 2975,"col": 17,"name": "m"},{"file": 66,"line": 2979,"col": 17,"name": "m"},{"file": 66,"line": 2983,"col": 17,"name": "m"},{"file": 66,"line": 2987,"col": 17,"name": "m"},{"file": 66,"line": 2991,"col": 18,"name": "m"},{"file": 66,"line": 2995,"col": 17,"name": "m"},{"file": 66,"line": 2999,"col": 18,"name": "m"},{"file": 74,"line": 301,"col": 12,"name": "def_arg"},{"file": 74,"line": 301,"col": 34,"name": "vsym_arg"},{"file": 74,"line": 301,"col": 49,"name": "vername"},{"file": 74,"line": 301,"col": 70,"name": "strings"},{"file": 54,"line": 502,"col": 16,"name": "allocator"},{"file": 54,"line": 502,"col": 42,"name": "path"},{"file": 54,"line": 519,"col": 18,"name": "self"},{"file": 54,"line": 525,"col": 26,"name": "self"},{"file": 54,"line": 605,"col": 27,"name": "self"},{"file": 54,"line": 669,"col": 25,"name": "self"},{"file": 54,"line": 669,"col": 37,"name": "module"},{"file": 54,"line": 669,"col": 54,"name": "address"},{"file": 54,"line": 693,"col": 29,"name": "self"},{"file": 54,"line": 693,"col": 41,"name": "module"},{"file": 54,"line": 693,"col": 58,"name": "address"},{"file": 54,"line": 790,"col": 21,"name": "self"},{"file": 54,"line": 790,"col": 33,"name": "index"},{"file": 54,"line": 843,"col": 25,"name": "self"},{"file": 54,"line": 843,"col": 37,"name": "id"},{"file": 54,"line": 849,"col": 21,"name": "self"},{"file": 54,"line": 849,"col": 33,"name": "stream"},{"file": 54,"line": 860,"col": 12,"name": "allocator"},{"file": 54,"line": 860,"col": 38,"name": "file"},{"file": 54,"line": 1047,"col": 18,"name": "self"},{"file": 54,"line": 1047,"col": 36,"name": "len"},{"file": 54,"line": 1053,"col": 18,"name": "self"},{"file": 54,"line": 1053,"col": 36,"name": "len"},{"file": 54,"line": 1071,"col": 18,"name": "self"},{"file": 54,"line": 1005,"col": 12,"name": "block_size"},{"file": 54,"line": 1005,"col": 29,"name": "file"},{"file": 54,"line": 1005,"col": 41,"name": "blocks"},{"file": 54,"line": 1016,"col": 12,"name": "self"},{"file": 54,"line": 1016,"col": 30,"name": "buffer"},{"file": 54,"line": 1059,"col": 15,"name": "self"},{"file": 54,"line": 1063,"col": 18,"name": "self"},{"file": 55,"line": 311,"col": 27,"name": "cmd_line"},{"file": 55,"line": 327,"col": 16,"name": "self"},{"file": 55,"line": 327,"col": 43,"name": "allocator"},{"file": 55,"line": 341,"col": 16,"name": "self"},{"file": 55,"line": 318,"col": 23,"name": "self"},{"file": 55,"line": 381,"col": 20,"name": "self"},{"file": 55,"line": 381,"col": 47,"name": "allocator"},{"file": 55,"line": 425,"col": 39,"name": "allocator"},{"file": 55,"line": 425,"col": 61,"name": "buf"},{"file": 55,"line": 435,"col": 23,"name": "self"},{"file": 55,"line": 435,"col": 50,"name": "buf"},{"file": 55,"line": 435,"col": 76,"name": "emit_count"},{"file": 61,"line": 193,"col": 16,"name": "waiters"},{"file": 61,"line": 193,"col": 31,"name": "wake_count"},{"file": 22,"line": 488,"col": 31,"name": "self"},{"file": 22,"line": 488,"col": 44,"name": "ver"},{"file": 22,"line": 496,"col": 25,"name": "self"},{"file": 22,"line": 496,"col": 38,"name": "ver"},{"file": 13,"line": 143,"col": 39,"name": "self"},{"file": 13,"line": 143,"col": 52,"name": "ver"},{"file": 13,"line": 149,"col": 33,"name": "self"},{"file": 13,"line": 149,"col": 46,"name": "ver"},{"file": 27,"line": 853,"col": 16,"name": "self"},{"file": 27,"line": 868,"col": 15,"name": "self"},{"file": 40,"line": 720,"col": 23,"name": "self"},{"file": 27,"line": 905,"col": 22,"name": "self"},{"file": 27,"line": 905,"col": 38,"name": "entry"},{"file": 27,"line": 910,"col": 26,"name": "self"},{"file": 27,"line": 910,"col": 42,"name": "now"},{"file": 27,"line": 921,"col": 26,"name": "self"},{"file": 27,"line": 926,"col": 33,"name": "self"}],"files": ["/data/data/com.termux/files/home/projects/yazap/src/lib.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/std.zig","/data/data/com.termux/files/home/projects/yazap/zig-cache/o/853a9fe161e671f8bc6749ba1548c9aa/builtin.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/special/test_runner.zig","/data/data/com.termux/files/home/projects/yazap/src/Arg.zig","/data/data/com.termux/files/home/projects/yazap/src/Command.zig","/data/data/com.termux/files/home/projects/yazap/src/flag.zig","/data/data/com.termux/files/home/projects/yazap/src/parser/ArgsContext.zig","/data/data/com.termux/files/home/projects/yazap/src/Yazap.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/mem/Allocator.zig","/data/data/com.termux/files/home/projects/yazap/src/Help.zig","/data/data/com.termux/files/home/projects/yazap/src/parser/Parser.zig","/data/data/com.termux/files/home/projects/yazap/src/parser/ErrorBuilder.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/target.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/io/writer.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/fs/file.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/hash_map.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/array_list.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/target/arm.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/io/fixed_buffer_stream.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/io/reader.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/io/seekable_stream.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/builtin.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/linked_list.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/atomic/queue.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/Thread/Mutex.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/atomic/Atomic.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/event/loop.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/atomic/stack.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/heap/general_purpose_allocator.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/os/linux/arm-eabi.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/heap.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/log.zig","/data/data/com.termux/files/home/projects/yazap/src/settings.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/enums.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/bit_set.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/mem.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/io/buffered_writer.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/fifo.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/Progress.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/Thread.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/atomic.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/coff.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/debug.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/dwarf.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/elf.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/event.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/fmt.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/fs.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/hash.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/io.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/math.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/meta.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/os.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/pdb.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/process.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/sort.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/testing.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/time.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/unicode.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/start.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/Thread/StaticResetEvent.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/heap/arena_allocator.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/hash/wyhash.zig","/data/data/com.termux/files/home/projects/yazap/src/parser/tokenizer.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/meta/trait.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/os/linux.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/os/windows.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/Thread/AutoResetEvent.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/Thread/ResetEvent.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/dwarf/TAG.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/dwarf/AT.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/leb128.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/fs/path.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/dynamic_library.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/os/linux/tls.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/os/linux/io_uring.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/os/linux/vdso.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/math/log2.zig","/data/data/com.termux/files/usr/bin/zig/lib/std/os/linux/errno/generic.zig"]};